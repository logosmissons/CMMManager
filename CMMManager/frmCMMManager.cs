using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Text;
using System.Windows.Forms;
using System.Linq;
using Microsoft.Win32;
using OfficeOpenXml;
using OfficeOpenXml.Style;

//using Windows.Devices.Enumeration;
//using Windows.Devices.Scanners;


namespace CMMManager
{
    public enum SqlConnectionOpen { RNConn, RNConn2, RNConn3 };

    public enum IllnessOption { Select, Close, Cancel };
    public enum IncidentOption { Select, Close, Cancel };
    public enum CaseStatus { OnGoing, Processing, Closed };
    public enum SettlementType { SelfPayDiscount = 1, ThirdPartyDiscount, MemberPayment, CMMProviderPayment, CMMDiscount, MemberReimbursement, Ineligible, MedicalProviderRefund, PRReimbursement, MemberDiscount };

    public enum PaymentMethodExport { Check = 1, CreditCard, ACH_Banking };
    public enum ProgramNameExport { GoldPlus = 0, Gold, Silver, Bronze, GoldMedi_I, GoldMedi_II };
    public enum IncidentProgramName { GoldPlus = 0, Gold, Silver, Bronze, GoldMedi_I, GoldMedi_II };
    public enum PaymentTypeExport { MemberReimbursement, PR_Reimbursement, ProviderPayment };


    //public enum SettlementType { NULL = 0, SelfPayDiscount, ThirdPartyDiscount, MemberPayment, CMMProviderPayment, CMMDiscount, MemberReimbursement, Ineligible, MedicalProviderRefund };

    public partial class frmCMMManager : Form
    {

        public int nLoggedUserId;
        public String LoggedInUserName;
        public UserRole LoggedInUserRole;
        public Department LoggedInUserDepartment;

        private SqlConnectionOpen RN_ConnectionOpen;

        private SqlConnection connRN;
        private SqlConnection connRN2;
        private SqlConnection connRN3;
        private SqlConnection connRN4;
        private SqlConnection connRN5;
        private SqlConnection connRNLimitedSharing;

        private String rn_cnn_str;
        private String rn_cnn_str2;
        private String rn_cnn_str3;
        private String rn_cnn_str4;
        private String rn_cnn_str5;
        private String rn_cnn_strLimitedSharing;

        private SqlCommand rn_cmd;

        //private SqlDependencyEx dependency;

        //String strSalesforceConnString;
        //SqlConnection connSalesforce;
        //SqlCommand cmdSalesforce;

        private SqlConnection connSalesforce;
        private SqlConnection connSalesforce2;
        private SqlConnection connSalesforce3;
        private SqlConnection connSalesforce4;
        private String connStringSalesforce;
        private String connStringSalesforce2;
        private String connStringSalesforce3;
        private String connStringSalesforce4;

        private SqlCommand cmd_Salesforce;

        private Boolean bIsModified = false;

        public IndividualInfo IndividualSearched;
        public IndividualInfo IndividualForMedBill;

        public BankInfo IndividualBankInfo;

        // Delegates for Cross thread method call
        delegate void SetTabPages(int nIndex);

        private delegate void RemoveRowInIllnessList(int nRow);
        private delegate void RemoveAllRowsInIllnessList();
        private delegate void AddRowToIllnessList(DataGridViewRow row);

        private delegate void RemoveRowInIncidentList(int nRow);
        private delegate void RemoveAllRowsInIncidentList();
        private delegate void AddRowToIncidentList(DataGridViewRow row);

        private delegate void RemoveRowInGVSettlement(int nRow);
        private delegate void RemoveAllRowsInSettlement();
        private delegate void AddRowToGVSettlement(DataGridViewRow row);

        private delegate void RemoveMedBillInCase(int nRow);
        private delegate void RemoveAllMedBillInCase();
        private delegate void AddRowToMedBillInCase(DataGridViewRow row);

        private delegate void RemoveMedBillInList(int nRow);
        private delegate void RemoveAllMedBillInList();
        private delegate void AddRowToMedBillInList(DataGridViewRow row);

        private delegate void RemoveCaseInProcess(int nRow);
        private delegate void RemoveAllCaseInProcess();
        private delegate void AddRowToCaseInProcess(DataGridViewRow row);

        private delegate void RemoveCaseInCaseView(int nRow);
        private delegate void RemoveAllCaseInCaseView();
        private delegate void AddRowToCaseInCaseView(DataGridViewRow row);

        private delegate void RemoveAllMedBillsInCaseEdit();
        private delegate void AddRowToMedBillsInCaseEdit(DataGridViewRow row);

        private delegate void RemoveTaskInMedBill(int nRow);
        private delegate void RemoveAllTaskInMedBill();
        private delegate void AddRowToTaskInMedBill(DataGridViewRow row);

        private delegate void RemoveActiveTaskRNManager(int nRow);
        private delegate void RemoveAllActiveTaskRNManager();
        private delegate void AddRowToActiveTaskRNManager(DataGridViewRow row);

        private delegate void RemoveCompleteTaskRNManager(int nRow);
        private delegate void RemoveAllCompleteTaskRNManager();
        private delegate void AddRowToCompleteTaskRNManager(DataGridViewRow row);

        private delegate void RemoveActiveTaskRNStaff(int nRow);
        private delegate void RemoveAllActiveTaskRNStaff();
        private delegate void AddRowToActiveTaskRNStaff(DataGridViewRow row);

        private delegate void RemoveCompleteTaskRNStaff(int nRow);
        private delegate void RemoveAllCompleteTaskRNStaff();
        private delegate void AddRowToCompleteTaskRNStaff(DataGridViewRow row);

        private delegate void RemoveActiveTaskNPManager(int nRow);
        private delegate void RemoveAllActiveTaskNPManager();
        private delegate void AddRowToActiveTaskNPManager(DataGridViewRow row);

        private delegate void RemoveCreditCardPayment(int nRow);
        private delegate void RemoveAllCreditCardPayment();
        private delegate void AddRowToCreditCardPayment(DataGridViewRow row);

        private delegate void RemoveCheckPayment(int nRow);
        private delegate void RemoveAllCheckPayment();
        private delegate void AddRowToCheckPayment(DataGridViewRow row);

        private delegate void RemoveACHPayment(int nRow);
        private delegate void RemoveAllACHPayment();
        private delegate void AddRowToACHPayment(DataGridViewRow row);

        private delegate void RemoveInactivePayment(int nRow);
        private delegate void RemoveAllInactivePayment();
        private delegate void AddRowToInactivePayment(DataGridViewRow row);

        private delegate void SetBalaceMedBill(Decimal Balance);
        private delegate void SetTotalSharedAmount(Decimal TotalSharedAmount);

        private enum TabPage { None, DashBoard, Individual, CaseView, Case, MedBill };
        private enum MedBillStatus { Pending, CMMPendingPayment, Shared, Ineligible, PartiallyIneligible };

        private TabPage BeforePrevTabPage = TabPage.None;
        private TabPage PrevTabPage = TabPage.None;
        private TabPage CurrentTabPage = TabPage.None;

        private TabPage MedBillStart = TabPage.None;

        // Enumerations
        private enum CaseMode { AddNew, Edit };
        private enum MedBillMode { AddNew, Edit };

        private CaseMode caseMode = CaseMode.AddNew;
        private MedBillMode medbillMode = MedBillMode.AddNew;

        private enum MedBillType { MedicalBill = 1, Prescription, PhysicalTherapy };
        //private enum MedBillStatus { PendingStatus, JobAssigned, InProgress, EligibilityReview, UnderBillProcessing, CompletedAndClose };
        private enum PatientType { OutPatient, InPatient };
        private enum Program { GoldPlus, Gold, Silver, Bronze, GoldMedi_I, GoldMedi_2 };
        //private enum SettlementType { SelfPayDiscount = 1, ThirdPartyDiscount, MemberPayment, CMMProviderPayment, CMMDiscount, MemberReimbursement, Ineligible, MedicalProviderRefund, PersonalResponsibility };
        private enum PaymentMethodType { None, Check, CreditCard, ACH_Bankng };

        private enum SettlementMode { AddNew, Edit };

        private SettlementMode settlementMode = SettlementMode.Edit;

        //public SettlementType settlementType;

        private List<ICD10CodeInfo> lstICD10CodeInfo;

        //private String strConnStringForIllness;
        //private SqlConnection connIllness;


        //private String strNewMedBillNo;
        private String MedBillNoForTask = String.Empty;    // user for tasks datagridview
        private String MedicalBillNo = String.Empty;
        private String strIndividualId = String.Empty;
        private String IndividualIdIndividualPage = String.Empty;
        //private String strSqlCreateCase = String.Empty;
        public String strCaseId = String.Empty;
        //public String CaseIdSelected = String.Empty;
        public String strCaseNameSelected = String.Empty;

        // Individual Id and Case ID for Med Bills in Case for editing
        String IndividualIdSelected = String.Empty;
        String CaseIdSelected = String.Empty;
        String CaseNameSelected = String.Empty;
        String CaseIdForCasePageMedBill = String.Empty;


        public String strCaseIdSelected = String.Empty;
        public String strContactIdSelected = String.Empty;

        public String strCaseIdForIllness = String.Empty;
        //public String strIndividualID = String.Empty;

        public Decimal PersonalResponsibilityAmountInMedBill;

        public int LimitedSharingYear;
        public Dictionary<int, Decimal> dicLimitedSharing1;
        public Dictionary<int, Decimal> dicLimitedSharing2;

        public Dictionary<int, String> dicMedBillTypes;
        public Dictionary<int, String> dicMedBillStatus;
        public Dictionary<int, String> dicPendingReason;
        public Dictionary<int, String> dicIneligibleReason;

        public List<int> lstLimitedSharingId;
        public List<CaseInfo> lstCaseInfo;
        public List<StaffInfo> lstCreateStaff;
        public List<StaffInfo> lstModifiStaff;

        public List<PaymentMethod> lstPaymentMethod;
        public List<CreditCardInfo> lstCreditCardInfo;
        public List<MedicalProviderInfo> lstMedicalProvider;
        public List<ChurchInfo> lstChurchInfo;
        public List<MedBillStatusInfo> lstMedBillStatusInfo;
        public List<SettlementTypeInfo> lstSettlementType;
        public List<PersonalResponsiblityTypeInfo> lstPersonalResponsibilityType;
        public List<MedBillNoteTypeInfo> lstMedBillNoteTypeInfo;
        public List<IncidentProgramInfo> lstIncidentProgramInfo;
        public SelectedIllness Illness;
        public SelectedIncident Incident;


        private String strNPFFormFileName = String.Empty;
        private String strIBFileName = String.Empty;
        private String strPoPFileName = String.Empty;
        private String strMedicalRecordFileName = String.Empty;
        private String strUnknownDocFileName = String.Empty;

        private String strNPFormFilePathSource = String.Empty;
        private String strNPFormFilePathDestination = String.Empty;

        private String strIBFilePathSource = String.Empty;
        private String strIBFilePathDestination = String.Empty;

        private String strPoPFilePathSource = String.Empty;
        private String strPopFilePathDestination = String.Empty;

        private String strMedRecordFilePathSource = String.Empty;
        private String strMedRecordFilePathDestination = String.Empty;

        private String strUnknownDocFilePathSource = String.Empty;
        private String strUnknownDocFilePathDestination = String.Empty;

        private String strDestinationPath = @"\\cmm-2014u\Sharefolder\";

        // Temporary storage for Medical Bill Information
        // Prescription fields
        private String tmpPrescriptionName = String.Empty;
        private String tmpPrescriptionDescription = String.Empty;
        private String tmpPrescriptionNote = String.Empty;
        private String tmpNumberOfMedication = String.Empty;

        // Physical Therapy fields
        private String tmpNumPhysicalTherapy = String.Empty;
        private String tmpPhysicalTherapyRxNote = String.Empty;

        // Medical Bill fields
        private Boolean tmpInPatient = false;
        private Boolean tmpOutPatient = false;
        private String tmpMedBillNote = String.Empty;
        private int tmpPendingReason;
        private int tmpIneligibleReason;

        public frmCMMManager()
        {
            InitializeComponent();

            //Control.CheckForIllegalCrossThreadCalls = false;
            Control.CheckForIllegalCrossThreadCalls = true;

            IndividualSearched = new IndividualInfo();
            IndividualForMedBill = new IndividualInfo();

            lstICD10CodeInfo = new List<ICD10CodeInfo>();

            //rn_cnn_str = @"Data Source=CMM-2014U\CMM; Initial Catalog=RN_DB;Integrated Security=True";
            rn_cnn_str = @"Data Source=CMM-2014U\CMM; Initial Catalog=RN_DB;Integrated Security=True;";
            rn_cnn_str2 = @"Data Source=CMM-2014U\CMM; Initial Catalog=RN_DB;Integrated Security=True;";
            rn_cnn_str3 = @"Data Source=CMM-2014U\CMM; Initial Catalog=RN_DB;Integrated Security=True;";
            rn_cnn_str4 = @"Data Source=CMM-2014U\CMM; Initial Catalog=RN_DB;Integrated Security=True;";
            rn_cnn_str5 = @"Data Source=CMM-2014U\CMM; Initial Catalog=RN_DB;Integrated Security=True;";
            rn_cnn_strLimitedSharing = @"Data Source=CMM-2014U\CMM; Initial Catalog=RN_DB;Integrated Security=True;";


            connRN = new SqlConnection(rn_cnn_str);
            connRN2 = new SqlConnection(rn_cnn_str2);
            connRN3 = new SqlConnection(rn_cnn_str3);
            connRN4 = new SqlConnection(rn_cnn_str4);
            connRN5 = new SqlConnection(rn_cnn_str5);
            connRNLimitedSharing = new SqlConnection(rn_cnn_strLimitedSharing);


            connStringSalesforce = @"Data Source=CMM-2014U\CMM; Initial Catalog=SalesForce; Integrated Security=True";
            connStringSalesforce2 = @"Data Source=CMM-2014U\CMM; Initial Catalog=SalesForce; Integrated Security=True";
            connStringSalesforce3 = @"Data Source=CMM-2014U\CMM; Initial Catalog=SalesForce; Integrated Security=True";
            connStringSalesforce4 = @"Data Source=CMM-2014U\CMM; Initial Catalog=SalesForce; Integrated Security=True";


            connSalesforce = new SqlConnection(connStringSalesforce);
            connSalesforce2 = new SqlConnection(connStringSalesforce2);
            connSalesforce3 = new SqlConnection(connStringSalesforce3);
            connSalesforce4 = new SqlConnection(connStringSalesforce4);

            SqlDependency.Start(rn_cnn_str);
            SqlDependency.Start(rn_cnn_str2);
            SqlDependency.Start(rn_cnn_str3);
            SqlDependency.Start(rn_cnn_str4);
            SqlDependency.Start(rn_cnn_str5);

            IndividualBankInfo = new BankInfo();

            dicMedBillTypes = new Dictionary<int, String>();
            dicMedBillStatus = new Dictionary<int, String>();
            dicPendingReason = new Dictionary<int, String>();
            dicIneligibleReason = new Dictionary<int, String>();

            lstLimitedSharingId = new List<int>();
            lstCreateStaff = new List<StaffInfo>();
            lstModifiStaff = new List<StaffInfo>();
            lstCaseInfo = new List<CaseInfo>();
            lstPaymentMethod = new List<PaymentMethod>();
            lstCreditCardInfo = new List<CreditCardInfo>();
            lstMedBillStatusInfo = new List<MedBillStatusInfo>();
            lstSettlementType = new List<SettlementTypeInfo>();
            lstPersonalResponsibilityType = new List<PersonalResponsiblityTypeInfo>();
            lstMedBillNoteTypeInfo = new List<MedBillNoteTypeInfo>();

            Illness = new SelectedIllness();
            Incident = new SelectedIncident();
            // Medical Provider list
            lstMedicalProvider = new List<MedicalProviderInfo>();
            lstChurchInfo = new List<ChurchInfo>();
            lstIncidentProgramInfo = new List<IncidentProgramInfo>();

            //strDestinationPath = @"\\cmm-2014u\Sharefolder\" + DateTime.Today.ToString();

            String strSqlQueryForChurchInfo = "select [dbo].[Church].[ID], [dbo].[Church].[Name] from [dbo].[Church]";

            SqlCommand cmdQueryForChurchInfo = new SqlCommand(strSqlQueryForChurchInfo, connSalesforce);

            if (connSalesforce.State != ConnectionState.Closed)
            {
                connSalesforce.Close();
                connSalesforce.Open();
            }
            else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

            SqlDataReader rdrChurchInfo = cmdQueryForChurchInfo.ExecuteReader();
            if (rdrChurchInfo.HasRows)
            {
                while (rdrChurchInfo.Read())
                {
                    if (!rdrChurchInfo.IsDBNull(0))
                    {
                        lstChurchInfo.Add(new ChurchInfo { ID = rdrChurchInfo.GetString(0), Name = rdrChurchInfo.GetString(1) });
                    }
                }
            }
            rdrChurchInfo.Close();
            if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///

            String strSqlQueryForMedBillTypes = "select [dbo].[tbl_medbill_type].[MedBillTypeId], [dbo].[tbl_medbill_type].[MedBillTypeName] from [dbo].[tbl_medbill_type]";

            SqlCommand cmdQueryForMedBillTypes = new SqlCommand(strSqlQueryForMedBillTypes, connRN);
            cmdQueryForMedBillTypes.CommandType = CommandType.Text;

            //if (connRN.State == ConnectionState.Closed) connRN.Open();
            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();

            SqlDataReader rdrMedBillTypes = cmdQueryForMedBillTypes.ExecuteReader();
            dicMedBillTypes.Clear();

            if (rdrMedBillTypes.HasRows)
            {
                while (rdrMedBillTypes.Read())
                {
                    if (!rdrMedBillTypes.IsDBNull(0) && !rdrMedBillTypes.IsDBNull(1))
                    {
                        dicMedBillTypes.Add(rdrMedBillTypes.GetInt16(0), rdrMedBillTypes.GetString(1));
                    }
                }
            }
            rdrMedBillTypes.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //String strSqlQueryForMedicalProvider = "select dbo.tbl_MedicalProvider.ID, dbo.tbl_MedicalProvider.Name, dbo.tbl_MedicalProvider.Type from dbo.tbl_MedicalProvider";
            String strSqlQueryForMedicalProvider = "select [dbo].[account].[Id], [dbo].[account].[Name], [dbo].[account].[Type] from [dbo].[account] " +
                                                   "where [dbo].[account].[RecordTypeId] = '01237000000EVmlAAG'";

            SqlCommand cmdQueryForMedicalProvider = new SqlCommand(strSqlQueryForMedicalProvider, connSalesforce);
            cmdQueryForMedicalProvider.CommandType = CommandType.Text;

            //if (connRN.State == ConnectionState.Closed) connRN.Open();
            if (connSalesforce.State != ConnectionState.Closed)
            {
                connSalesforce.Close();
                connSalesforce.Open();
            }
            else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

            SqlDataReader rdrMedicalProvider = cmdQueryForMedicalProvider.ExecuteReader();

            lstMedicalProvider.Clear();
            if (rdrMedicalProvider.HasRows)
            {
                while (rdrMedicalProvider.Read())
                {
                    MedicalProviderInfo info = new MedicalProviderInfo();

                    if (!rdrMedicalProvider.IsDBNull(0)) info.ID = rdrMedicalProvider.GetString(0);
                    if (!rdrMedicalProvider.IsDBNull(1)) info.Name = rdrMedicalProvider.GetString(1);
                    if (!rdrMedicalProvider.IsDBNull(2)) info.Type = rdrMedicalProvider.GetString(2);

                    lstMedicalProvider.Add(info);
                }
            }
            rdrMedicalProvider.Close();
            if (connSalesforce.State != ConnectionState.Closed) connSalesforce.Close();



            ////////////////////////////////////////////////////////////////////////////////////////////////////////////
            dicMedBillStatus.Clear();

            String strSqlQueryForMedBillStatus = "select [dbo].[tbl_medbill_status_code].[BillStatusCode], [dbo].[tbl_medbill_status_code].[BillStatusValue] " +
                                                 "from [dbo].[tbl_medbill_status_code]";

            SqlCommand cmdQueryForMedBillStatus = new SqlCommand(strSqlQueryForMedBillStatus, connRN);
            cmdQueryForMedBillStatus.CommandType = CommandType.Text;

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();

            SqlDataReader rdrMedBillStatus = cmdQueryForMedBillStatus.ExecuteReader();
            if (rdrMedBillStatus.HasRows)
            {
                while (rdrMedBillStatus.Read())
                {
                    dicMedBillStatus.Add(rdrMedBillStatus.GetInt16(0), rdrMedBillStatus.GetString(1));
                }
            }
            rdrMedBillStatus.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// Populate Pending Reason
            /// 
            String strSqlQueryForPendingReason = "select [dbo].[tbl_pending_reason].[id], [dbo].[tbl_pending_reason].[name] from [dbo].[tbl_pending_reason] " +
                                                 "order by [dbo].[tbl_pending_reason].[id]";

            SqlCommand cmdQueryForPendingReason = new SqlCommand(strSqlQueryForPendingReason, connRN);
            cmdQueryForPendingReason.CommandType = CommandType.Text;

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();

            SqlDataReader rdrPendingReason = cmdQueryForPendingReason.ExecuteReader();
            dicPendingReason.Clear();
            if (rdrPendingReason.HasRows)
            {
                while (rdrPendingReason.Read())
                {
                    if (!rdrPendingReason.IsDBNull(1)) dicPendingReason.Add(rdrPendingReason.GetInt32(0), rdrPendingReason.GetString(1));
                    else dicPendingReason.Add(rdrPendingReason.GetInt32(0), String.Empty);
                }
            }
            rdrPendingReason.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// Populate Ineligible Reason
            /// 
            String strSqlQueryForIneligibleReason = "select [dbo].[tbl_ineligible_reason].[id], [dbo].[tbl_ineligible_reason].[name] from [dbo].[tbl_ineligible_reason] " +
                                                    "order by [dbo].[tbl_ineligible_reason].[id]";

            SqlCommand cmdQueryForIneligibleReason = new SqlCommand(strSqlQueryForIneligibleReason, connRN);
            cmdQueryForIneligibleReason.CommandType = CommandType.Text;

            //if (connRN.State == ConnectionState.Closed) connRN.Open();
            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();

            SqlDataReader rdrIneligibleReason = cmdQueryForIneligibleReason.ExecuteReader();
            dicIneligibleReason.Clear();
            if (rdrIneligibleReason.HasRows)
            {
                while (rdrIneligibleReason.Read())
                {
                    if (!rdrIneligibleReason.IsDBNull(1)) dicIneligibleReason.Add(rdrIneligibleReason.GetInt32(0), rdrIneligibleReason.GetString(1));
                    else dicIneligibleReason.Add(rdrIneligibleReason.GetInt32(0), String.Empty);
                }
            }
            rdrIneligibleReason.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();


            PersonalResponsibilityAmountInMedBill = 0;

            // Retrieve payment method
            lstPaymentMethod.Clear();
            String strSqlQueryForPaymentMethod = "select [dbo].[tbl_payment_method].[PaymentMethod_Id], [dbo].[tbl_payment_method].[PaymentMethod_Value] from [dbo].[tbl_payment_method] " +
                                                 "order by [dbo].[tbl_payment_method].[PaymentMethod_Value]";

            SqlCommand cmdQueryForPaymentMethod = new SqlCommand(strSqlQueryForPaymentMethod, connRN);
            cmdQueryForPaymentMethod.CommandType = CommandType.Text;

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();

            SqlDataReader rdrPaymentMethod = cmdQueryForPaymentMethod.ExecuteReader();
            if (rdrPaymentMethod.HasRows)
            {
                while (rdrPaymentMethod.Read())
                {
                    if (!rdrPaymentMethod.IsDBNull(1)) lstPaymentMethod.Add(new PaymentMethod { PaymentMethodId = rdrPaymentMethod.GetInt16(0), PaymentMethodValue = rdrPaymentMethod.GetString(1) });
                    else lstPaymentMethod.Add(new PaymentMethod { PaymentMethodId = rdrPaymentMethod.GetInt16(0), PaymentMethodValue = String.Empty });
                }
            }

            rdrPaymentMethod.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();

            // Retrieve credit card info
            lstCreditCardInfo.Clear();
            String strSqlQueryForCreditCardInfo = "select [dbo].[tbl_Credit_Card__c].[CreditCard_Id], [dbo].[tbl_Credit_Card__c].[Name] from [dbo].[tbl_Credit_Card__c]";

            SqlCommand cmdQueryForCreditCardInfo = new SqlCommand(strSqlQueryForCreditCardInfo, connRN);
            cmdQueryForCreditCardInfo.CommandType = CommandType.Text;

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();

            SqlDataReader rdrCreditCardInfo = cmdQueryForCreditCardInfo.ExecuteReader();
            if (rdrCreditCardInfo.HasRows)
            {
                while (rdrCreditCardInfo.Read())
                {
                    if (!rdrCreditCardInfo.IsDBNull(1)) lstCreditCardInfo.Add(new CreditCardInfo { CreditCardId = rdrCreditCardInfo.GetInt16(0), CreditCardNo = rdrCreditCardInfo.GetString(1) });
                    else lstCreditCardInfo.Add(new CreditCardInfo { CreditCardId = rdrCreditCardInfo.GetInt16(0), CreditCardNo = null });
                }
            }
            rdrCreditCardInfo.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();


            // retrieve settlement types from data base
            String strSqlQuerySettlementTypes = "select [dbo].[tbl_settlement_type_code].[SettlementTypeCode], [dbo].[tbl_settlement_type_code].[SettlementTypeValue] from [dbo].[tbl_settlement_type_code]";

            SqlCommand cmdQueryForSettlementType = new SqlCommand(strSqlQuerySettlementTypes, connRN);
            cmdQueryForSettlementType.CommandType = CommandType.Text;

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrSettlementType = cmdQueryForSettlementType.ExecuteReader();
            lstSettlementType.Clear();
            if (rdrSettlementType.HasRows)
            {
                while (rdrSettlementType.Read())
                {
                    if (!rdrSettlementType.IsDBNull(0) &&
                        !rdrSettlementType.IsDBNull(1))
                        lstSettlementType.Add(new SettlementTypeInfo { SettlementTypeCode = rdrSettlementType.GetInt16(0), SettlementTypeValue = rdrSettlementType.GetString(1) });
                }
            }
            rdrSettlementType.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();

            // retrieve personal responsibility types
            // lstPersonalResponsibilityType
            String strSqlQueryForPersonalResponsibilityTypes = "select [dbo].[tbl_personal_responsibility_code].[PersonalResponsibilityTypeCode], " +
                                                               "[dbo].[tbl_personal_responsibility_code].[PersonalResponsibilityTypeValue] " +
                                                               "from [dbo].[tbl_personal_responsibility_code]";

            SqlCommand cmdQueryForPersonalResponsibilityTypes = new SqlCommand(strSqlQueryForPersonalResponsibilityTypes, connRN);
            cmdQueryForPersonalResponsibilityTypes.CommandType = CommandType.Text;

            //if (connRN.State == ConnectionState.Closed) connRN.Open();
            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrPersonalResponsibilityTypes = cmdQueryForPersonalResponsibilityTypes.ExecuteReader();
            lstPersonalResponsibilityType.Clear();
            if (rdrPersonalResponsibilityTypes.HasRows)
            {
                while (rdrPersonalResponsibilityTypes.Read())
                {
                    if (!rdrPersonalResponsibilityTypes.IsDBNull(0) &&
                        !rdrPersonalResponsibilityTypes.IsDBNull(1))
                        lstPersonalResponsibilityType.Add(new PersonalResponsiblityTypeInfo
                        {
                            PersonalResponsibilityTypeCode = rdrPersonalResponsibilityTypes.GetInt16(0),
                            PersonalResponsibilityTypeValue = rdrPersonalResponsibilityTypes.GetString(1)
                        });
                }
            }
            rdrPersonalResponsibilityTypes.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();

            dicLimitedSharing1 = new Dictionary<int, decimal>();
            dicLimitedSharing2 = new Dictionary<int, decimal>();

            String strSqlQueryForLimitedSharing1 = "select [dbo].[tbl_limited_sharing_1].[YearNo], [dbo].[tbl_limited_sharing_1].[YearlyLimit] from [dbo].[tbl_limited_sharing_1]";

            SqlCommand cmdQueryForLimitedSharing1 = new SqlCommand(strSqlQueryForLimitedSharing1, connRNLimitedSharing);
            cmdQueryForLimitedSharing1.CommandType = CommandType.Text;

            if (connRNLimitedSharing.State == ConnectionState.Open)
            {
                connRNLimitedSharing.Close();
                connRNLimitedSharing.Open();
            }
            else if (connRNLimitedSharing.State == ConnectionState.Closed) connRNLimitedSharing.Open();
            SqlDataReader rdrLimitedSharing1 = cmdQueryForLimitedSharing1.ExecuteReader();

            if (rdrLimitedSharing1.HasRows)
            {
                while (rdrLimitedSharing1.Read())
                {
                    dicLimitedSharing1.Add(rdrLimitedSharing1.GetInt16(0), rdrLimitedSharing1.GetDecimal(1));
                }
            }
            rdrLimitedSharing1.Close();
            if (connRNLimitedSharing.State == ConnectionState.Open) connRNLimitedSharing.Close();

            String strSqlQueryForLimitedSharing2 = "select [dbo].[tbl_limited_sharing_2].[YearNo], [dbo].[tbl_limited_sharing_2].[YearlyLimit] from [dbo].[tbl_limited_sharing_2]";

            SqlCommand cmdQueryForLimitedSharing2 = new SqlCommand(strSqlQueryForLimitedSharing2, connRNLimitedSharing);
            cmdQueryForLimitedSharing2.CommandType = CommandType.Text;

            if (connRNLimitedSharing.State == ConnectionState.Open)
            {
                connRNLimitedSharing.Close();
                connRNLimitedSharing.Open();
            }
            else if (connRNLimitedSharing.State == ConnectionState.Closed) connRNLimitedSharing.Open();
            SqlDataReader rdrLimitedSharing2 = cmdQueryForLimitedSharing2.ExecuteReader();

            if (rdrLimitedSharing2.HasRows)
            {
                while (rdrLimitedSharing2.Read())
                {
                    dicLimitedSharing2.Add(rdrLimitedSharing2.GetInt16(0), rdrLimitedSharing2.GetDecimal(1));
                }
            }
            rdrLimitedSharing2.Close();
            if (connRNLimitedSharing.State != ConnectionState.Closed) connRNLimitedSharing.Close();

        }

        ~frmCMMManager()
        {
            SqlDependency.Stop(rn_cnn_str);
            SqlDependency.Stop(rn_cnn_str2);
            SqlDependency.Stop(rn_cnn_str3);
            SqlDependency.Stop(rn_cnn_str4);
            SqlDependency.Stop(rn_cnn_str5);
            //dependency.Stop();

        }

        private void InitializedIndividualBankInfo()
        {
            IndividualBankInfo.BankName = String.Empty;
            IndividualBankInfo.BankRoutingNumber = String.Empty;
            IndividualBankInfo.AccountNumber = String.Empty;
            IndividualBankInfo.AccountHolder = String.Empty;
        }

        private void InitializeIndividualInfo()
        {
            txtAccountNo.Text = String.Empty;
            txtAccountHolder.Text = String.Empty;
            txtBankRoutingNo.Text = String.Empty;
            txtBankName.Text = String.Empty;
            txtTotalMedBillAmount.Text = String.Empty;
            rbEnglish.Checked = false;
            rbKorean.Checked = false;
            txtRelationship.Text = String.Empty;
            chkCommunicationEtc.Checked = false;
            chkCommunicationReq.Checked = false;
            chkCommunicationFax.Checked = false;
            chkCommunicationLetter.Checked = false;
            chkCommunicationEmail.Checked = false;
            chkCommunicationCall.Checked = false;
            chkCommunicationAll.Checked = false;
            gvRecentCommunication.Rows.Clear();
            gvFamilyInformation.Rows.Clear();
            gvProcessingCaseNo.Rows.Clear();
            txtWellBeingAmt.Text = String.Empty;
            txtProgramChangeReqDate.Text = String.Empty;
            txtOver10KAmount.Text = String.Empty;
            txtMembershipStartDate.Text = String.Empty;
            txtTotalSharedAmount.Text = String.Empty;
            txtIndMemberShipStatus.Text = String.Empty;
            txtDeceasedDate.Text = String.Empty;
            txtMembershipCancelledDate.Text = String.Empty;
            txtCancelationRequestDate.Text = String.Empty;
            txtProgramHistory.Text = String.Empty;
            txtProgram.Text = String.Empty;
            txtPowerOfAttorney.Text = String.Empty;
            cbGender.SelectedIndex = -1;
            cbReimbursementMethod.SelectedIndex = -1;
            txtIndChurchName.Text = String.Empty;
            txtBusinessPhone.Text = String.Empty;
            cbPreferredCommunication.SelectedIndex = -1;
            txtCellPhone1.Text = String.Empty;
            txtEmail.Text = String.Empty;
            txtState1.Text = String.Empty;
            txtState2.Text = String.Empty;
            txtCity1.Text = String.Empty;
            txtCity2.Text = String.Empty;
            txtZip1.Text = String.Empty;
            txtZip2.Text = String.Empty;
            txtStreetAddress1.Text = String.Empty;
            txtStreetAddress2.Text = String.Empty;
            txtIndividualSSN.Text = String.Empty;
            txtLastName.Text = String.Empty;
            txtMiddleName.Text = String.Empty;
            txtFirstName.Text = String.Empty;
            txtCRM_ID.Text = String.Empty;
            txtIndividualID.Text = String.Empty;
            txtMembershipID.Text = String.Empty;
        }

        private void InitializeCaseForm()
        {
            cbCaseStatus.Items.Clear();
            txtNoteOnCase.Text = String.Empty;
            txtCaseName.Text = String.Empty;
            //txtPoPUploadDate.Text = String.Empty;
            //txtMRUploadDate.Text = String.Empty;
            //txtOtherDocUploadDate.Text = String.Empty;
            //txtIBUploadDate.Text = String.Empty;
            //txtNPFUploadDate.Text = String.Empty;

            gvCasePageMedBills.Rows.Clear();
            gvNewSupportLog.Rows.Clear();
            gvNewTaskRNtoNP.Rows.Clear();
            gvNewTaskNPtoRNFD.Rows.Clear();

            txtOtherDocumentFilePath.Text = String.Empty;
            txtMedicalRecordFilePath.Text = String.Empty;
            txtPopFilePath.Text = String.Empty;
            txtIBFilePath.Text = String.Empty;
            txtNPFFormFilePath.Text = String.Empty;

            chkOtherDocCaseCreationPage.Checked = false;
            chkMedicalRecordCaseCreationPage.Checked = false;
            chkPoP_CaseCreationPage.Checked = false;
            chkIB_CaseCreationPage.Checked = false;
            chkNPF_CaseCreationPage.Checked = false;

            txtCreateCaseIndividualName.Text = String.Empty;
            txtCaseIndividualID.Text = String.Empty;

        }

        private void InitializeMedBillForm()
        {
            txtTotalSharedAmtMedBill.Text = String.Empty;
            txtPersonalResponsibility.Text = String.Empty;

            //dtpMedicalRecordDate.Format = DateTimePickerFormat.Custom;
            //dtpMedicalRecordDate.CustomFormat = " ";

            //dtpHippaSentDate.Format = DateTimePickerFormat.Custom;
            //dtpHippaSentDate.CustomFormat = " ";

            //dtpProposalLetterSentDate.Format = DateTimePickerFormat.Custom;
            //dtpProposalLetterSentDate.CustomFormat = " ";

            txtProviderContactPerson.Text = String.Empty;
            txtMedProviderPhoneNo.Text = String.Empty;
            txtMedBillAccountNoAtProvider.Text = String.Empty;

            gvSettlementsInMedBill.Rows.Clear();

            txtIncdProgram.Text = String.Empty;

            txtMedBill_Incident.Text = String.Empty;
            txtMedBill_Illness.Text = String.Empty;
            txtMedBill_CaseNo.Text = String.Empty;

            rbModified.Checked = false;
            rbDeclined.Checked = false;
            rbAccepted.Checked = false;

            gvUserModifiedDateHistory.Rows.Clear();

            gvMostRecentTasks.Rows.Clear();

            // grpMedicalBillInformation
            //cbMedBillClosed.Items.Clear();
            comboIneligibleReason.Items.Clear();
            comboPendingReason.Items.Clear();
            comboMedBillStatus.Items.Clear();

            txtNumPhysicalTherapy.Text = String.Empty;
            txtNumberOfMedication.Text = String.Empty;
            txtPrescriptionName.Text = String.Empty;
            txtPrescriptionDescription.Text = String.Empty;

            comboMedBillType.Items.Clear();
            txtBalance.Text = String.Empty;
            //dtpDueDate.Format = DateTimePickerFormat.Custom;
            //dtpDueDate.CustomFormat = " ";
            //dtpBillDate.Format = DateTimePickerFormat.Custom;
            //dtpBillDate.CustomFormat = " ";
            txtMedBillAmount.Text = String.Empty;
            txtMedBillNo.Text = String.Empty;
            rbInpatient.Checked = false;
            rbOutpatient.Checked = false;
            txtMedicalProvider.Text = String.Empty;
            txtPhysicalTherapyRxNote.Text = String.Empty;
            txtPrescriptionNote.Text = String.Empty;
            txtMedBillNote.Text = String.Empty;

            chkOtherDocReceived.Checked = false;
            chkMedRecordReceived.Checked = false;
            chkMedBillPOPReceived.Checked = false;
            chkMedBill_IBReceived.Checked = false;
            chkMedBillNPFReceived.Checked = false;
            //dtpMedBillOtherDoc.Format = DateTimePickerFormat.Custom;
            //dtpMedBillOtherDoc.CustomFormat = " ";
            //dtpMedBillMedRecord.Format = DateTimePickerFormat.Custom;
            //dtpMedBillMedRecord.CustomFormat = " ";
            //dtpMedBillPOP.Format = DateTimePickerFormat.Custom;
            //dtpMedBillPOP.CustomFormat = " ";
            //dtpMedBill_IB.Format = DateTimePickerFormat.Custom;
            //dtpMedBill_IB.CustomFormat = " ";
            //dtpMedBillNPF.Format = DateTimePickerFormat.Custom;
            //dtpMedBillNPF.CustomFormat = " ";

            txtMedBillDiseaseName.Text = String.Empty;
            txtMedBill_ICD10Code.Text = String.Empty;

            // grpPatientInfo
            txtMemberProgram.Text = String.Empty;
            txtMedBillGuarantor.Text = String.Empty;
            txtMedBillAddress.Text = String.Empty;
            txtMedBillSSN.Text = String.Empty;
            txtMedBillDOB.Text = String.Empty;
            txtPatientNameMedBill.Text = String.Empty;
            txtIndividualIDMedBill.Text = String.Empty;

        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            DialogResult dlgClosing = MessageBox.Show("Do you want to exit?", "Comfirmation", MessageBoxButtons.YesNo);

            if (dlgClosing == DialogResult.Yes)
            {
                Close();
            }
            else if (dlgClosing == DialogResult.No)
            {
                return;
            }
        }



        private void AddRowToMedBillInListSafely(DataGridViewRow row)
        {
            gvMedBillList.BeginInvoke(new AddRowToMedBillInList(AddRowMedBillInList), row);
        }

        private void RemoveRowMedBillInListSafely(int nRow)
        {
            gvMedBillList.BeginInvoke(new RemoveMedBillInList(RemoveRowMedBillInList), nRow);
        }

        private void RemoveAllRowMedBillInListSafely()
        {
            gvMedBillList.BeginInvoke(new RemoveAllMedBillInList(RemoveAllRowMedBillInList));
        }

        private void AddRowMedBillInList(DataGridViewRow row)
        {
            gvMedBillList.Rows.Add(row);
        }

        private void RemoveRowMedBillInList(int i)
        {
            gvMedBillList.Rows.RemoveAt(i);
        }

        private void RemoveAllRowMedBillInList()
        {
            gvMedBillList.Rows.Clear();
        }

        private void OnMedicalBillListChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnMedicalBillListChange;

                UpdateGridViewMedicalBillList();
            }
        }

        private void UpdateGridViewMedicalBillList()
        {
            String IndividualId = IndividualSearched.strIndividualID;

            List<MedicalBillInfoForList> lstMedicalBillInfoForList = new List<MedicalBillInfoForList>();

            String strSqlQueryForMedBillsForIndividual = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], " +
                                                         "[dbo].[tbl_medbill_status_code].[BillStatusValue], [dbo].[tbl_medbill].[BillClosed], " +
                                                         "[dbo].[tbl_medbill].[CreatedDate], [dbo].[tbl_CreateStaff].[Staff_Name], " +
                                                         "[dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                         "[dbo].[tbl_medbill].[Case_Id], [dbo].[tbl_illness].[IllnessNo], [dbo].[tbl_illness].[ICD_10_Id], [dbo].[tbl_incident].[IncidentNo], " +
                                                         "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[Balance], " +
                                                         "[dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], " +
                                                         "[dbo].[tbl_medbill].[BillDate], [dbo].[tbl_medbill].[DueDate], " +
                                                         "[dbo].[tbl_medbill].[Guarantor], [dbo].[tbl_medbill].[MedicalProvider_Id], " +
                                                         "[dbo].[tbl_patient_type].[PatientTypeName], [dbo].[tbl_pending_reason].[name], [dbo].[tbl_ineligible_reason].[name], " +
                                                         "[dbo].[tbl_medbill].[PrescriptionDrugName], [dbo].[tbl_medbill].[PrescriptionNo], [dbo].[tbl_medbill].[PrescriptionDescription], " +
                                                         "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy], [dbo].[tbl_medbill].[Note], " +
                                                         "[dbo].[tbl_medbill].[PersonalResponsibilityCredit], " +
                                                         "[dbo].[tbl_medbill].[WellBeingCare], [dbo].[tbl_medbill].[WellBeingCareTotal], " +
                                                         "[dbo].[tbl_medbill].[ProviderPhoneNumber], [dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_medbill].[ProviderContactPerson], " +
                                                         "[dbo].[tbl_medbill].[ProposalLetterSentDate], [dbo].[tbl_medbill].[HIPPASentDate], [dbo].[tbl_medbill].[MedicalRecordDate] " +
                                                         "from [dbo].[tbl_medbill] " +
                                                         "inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId] " +
                                                         "inner join [dbo].[tbl_medbill_status_code] on [dbo].[tbl_medbill].[BillStatus] = [dbo].[tbl_medbill_status_code].[BillStatusCode] " +
                                                         "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                                         "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                                         "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                         "inner join [dbo].[tbl_incident] on [dbo].[tbl_medbill].[Incident_Id] = [dbo].[tbl_incident].[Incident_id] " +
                                                         "inner join [dbo].[tbl_patient_type] on [dbo].[tbl_medbill].[PatientTypeId] = [dbo].[tbl_patient_type].[PatientTypeNo] " +
                                                         "inner join [dbo].[tbl_pending_reason] on [dbo].[tbl_medbill].[PendingReason] = [dbo].[tbl_pending_reason].[ID] " +
                                                         "inner join [dbo].[tbl_ineligible_reason] on [dbo].[tbl_medbill].[IneligibleReason] = [dbo].[tbl_ineligible_reason].[id] " +
                                                         "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                         "[dbo].[tbl_medbill].[IsDeleted] = 0";

            SqlCommand cmdQueryForMedBillsForIndividual = new SqlCommand(strSqlQueryForMedBillsForIndividual, connRN);
            cmdQueryForMedBillsForIndividual.CommandType = CommandType.Text;

            cmdQueryForMedBillsForIndividual.Parameters.AddWithValue("@IndividualId", IndividualId);

            SqlDependency dependencyMedicalBill = new SqlDependency(cmdQueryForMedBillsForIndividual);
            dependencyMedicalBill.OnChange += new OnChangeEventHandler(OnMedicalBillListChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();

            SqlDataReader rdrMedBillsForIndividual = cmdQueryForMedBillsForIndividual.ExecuteReader();
            if (rdrMedBillsForIndividual.HasRows)
            {
                while (rdrMedBillsForIndividual.Read())
                {
                    MedicalBillInfoForList medbill_info = new MedicalBillInfoForList();

                    if (!rdrMedBillsForIndividual.IsDBNull(0)) medbill_info.MedBillNo = rdrMedBillsForIndividual.GetString(0);
                    if (!rdrMedBillsForIndividual.IsDBNull(1)) medbill_info.MedBillTypeName = rdrMedBillsForIndividual.GetString(1);
                    if (!rdrMedBillsForIndividual.IsDBNull(2)) medbill_info.MedBillStatus = rdrMedBillsForIndividual.GetString(2);
                    if (!rdrMedBillsForIndividual.IsDBNull(3)) medbill_info.bBillClosed = rdrMedBillsForIndividual.GetBoolean(3);
                    if (!rdrMedBillsForIndividual.IsDBNull(4)) medbill_info.CreateDate = rdrMedBillsForIndividual.GetDateTime(4);
                    if (!rdrMedBillsForIndividual.IsDBNull(5)) medbill_info.CreateStaffName = rdrMedBillsForIndividual.GetString(5);
                    if (!rdrMedBillsForIndividual.IsDBNull(6)) medbill_info.LastModifiDate = rdrMedBillsForIndividual.GetDateTime(6);
                    if (!rdrMedBillsForIndividual.IsDBNull(7)) medbill_info.ModifiStaffName = rdrMedBillsForIndividual.GetString(7);
                    if (!rdrMedBillsForIndividual.IsDBNull(8)) medbill_info.CaseId = rdrMedBillsForIndividual.GetString(8);
                    if (!rdrMedBillsForIndividual.IsDBNull(9)) medbill_info.IllnessNo = rdrMedBillsForIndividual.GetString(9);
                    if (!rdrMedBillsForIndividual.IsDBNull(10)) medbill_info.ICD_10_Id = rdrMedBillsForIndividual.GetString(10);
                    if (!rdrMedBillsForIndividual.IsDBNull(11)) medbill_info.IncidentNo = rdrMedBillsForIndividual.GetString(11);
                    if (!rdrMedBillsForIndividual.IsDBNull(12)) medbill_info.BillAmount = rdrMedBillsForIndividual.GetDecimal(12);
                    if (!rdrMedBillsForIndividual.IsDBNull(13)) medbill_info.Balance = rdrMedBillsForIndividual.GetDecimal(13);
                    if (!rdrMedBillsForIndividual.IsDBNull(14)) medbill_info.SettlementTotal = rdrMedBillsForIndividual.GetDecimal(14);
                    if (!rdrMedBillsForIndividual.IsDBNull(15)) medbill_info.TotalSharedAmount = rdrMedBillsForIndividual.GetDecimal(15);
                    if (!rdrMedBillsForIndividual.IsDBNull(16)) medbill_info.BillDate = rdrMedBillsForIndividual.GetDateTime(16);
                    if (!rdrMedBillsForIndividual.IsDBNull(17)) medbill_info.ReceivedDate = rdrMedBillsForIndividual.GetDateTime(17);
                    if (!rdrMedBillsForIndividual.IsDBNull(18)) medbill_info.Guarantor = rdrMedBillsForIndividual.GetString(18);
                    if (!rdrMedBillsForIndividual.IsDBNull(19)) medbill_info.MedicalProviderId = rdrMedBillsForIndividual.GetString(19);
                    if (!rdrMedBillsForIndividual.IsDBNull(20)) medbill_info.PatientTypeName = rdrMedBillsForIndividual.GetString(20);
                    if (!rdrMedBillsForIndividual.IsDBNull(21)) medbill_info.PendingReason = rdrMedBillsForIndividual.GetString(21);
                    if (!rdrMedBillsForIndividual.IsDBNull(22)) medbill_info.IneligibleReason = rdrMedBillsForIndividual.GetString(22);
                    if (!rdrMedBillsForIndividual.IsDBNull(23)) medbill_info.PrescriptionDrugName = rdrMedBillsForIndividual.GetString(23);
                    if (!rdrMedBillsForIndividual.IsDBNull(24)) medbill_info.PrescriptionNo = rdrMedBillsForIndividual.GetString(24);
                    if (!rdrMedBillsForIndividual.IsDBNull(25)) medbill_info.PrescriptionDescription = rdrMedBillsForIndividual.GetString(25);
                    if (!rdrMedBillsForIndividual.IsDBNull(26)) medbill_info.TotalNumberOfPhysicalTherapy = rdrMedBillsForIndividual.GetInt16(26);
                    if (!rdrMedBillsForIndividual.IsDBNull(27)) medbill_info.Note = rdrMedBillsForIndividual.GetString(27);
                    if (!rdrMedBillsForIndividual.IsDBNull(28)) medbill_info.PersonalResponsibilityCredit = rdrMedBillsForIndividual.GetDecimal(28);
                    if (!rdrMedBillsForIndividual.IsDBNull(29)) medbill_info.WellBeingCare = rdrMedBillsForIndividual.GetBoolean(29);
                    if (!rdrMedBillsForIndividual.IsDBNull(30)) medbill_info.WellBeingCareTotal = rdrMedBillsForIndividual.GetDecimal(30);
                    if (!rdrMedBillsForIndividual.IsDBNull(31)) medbill_info.ProviderPhoneNumber = rdrMedBillsForIndividual.GetString(31);
                    if (!rdrMedBillsForIndividual.IsDBNull(32)) medbill_info.AccountNoAtProvider = rdrMedBillsForIndividual.GetString(32);
                    if (!rdrMedBillsForIndividual.IsDBNull(33)) medbill_info.ProviderContactPerson = rdrMedBillsForIndividual.GetString(33);
                    if (!rdrMedBillsForIndividual.IsDBNull(34)) medbill_info.ProposalLetterSentDate = rdrMedBillsForIndividual.GetDateTime(34);
                    if (!rdrMedBillsForIndividual.IsDBNull(35)) medbill_info.HIPPASentDate = rdrMedBillsForIndividual.GetDateTime(35);
                    if (!rdrMedBillsForIndividual.IsDBNull(36)) medbill_info.MedicalRecordDate = rdrMedBillsForIndividual.GetDateTime(36);

                    lstMedicalBillInfoForList.Add(medbill_info);
                }
            }

            rdrMedBillsForIndividual.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();

            foreach (MedicalBillInfoForList MedBillInfo in lstMedicalBillInfoForList)
            {
                String strSqlQueryForMedicalProviderName = "select [dbo].[account].[Name] from [dbo].[account] where [dbo].[account].[Id] = @MedicalProviderId";

                SqlCommand cmdQueryForMedicalProviderName = new SqlCommand(strSqlQueryForMedicalProviderName, connSalesforce3);
                cmdQueryForMedicalProviderName.CommandType = CommandType.Text;

                cmdQueryForMedicalProviderName.Parameters.AddWithValue("@MedicalProviderId", MedBillInfo.MedicalProviderId);

                if (connSalesforce3.State != ConnectionState.Closed)
                {
                    connSalesforce3.Close();
                    connSalesforce3.Open();
                }
                else if (connSalesforce3.State == ConnectionState.Closed) connSalesforce3.Open();
                Object objMedicalProviderName = cmdQueryForMedicalProviderName.ExecuteScalar();
                if (connSalesforce3.State != ConnectionState.Closed) connSalesforce3.Close();

                if (objMedicalProviderName != null) MedBillInfo.MedicalProviderName = objMedicalProviderName.ToString();
            }

            if (IsHandleCreated) RemoveAllRowMedBillInListSafely();
            else gvMedBillList.Rows.Clear();

            foreach (MedicalBillInfoForList medbill_info in lstMedicalBillInfoForList)
            {
                DataGridViewRow row = new DataGridViewRow();
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.MedBillNo });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.MedBillTypeName });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.MedBillStatus });
                row.Cells.Add(new DataGridViewCheckBoxCell { Value = medbill_info.bBillClosed });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.CreateDate.Value.ToString("MM/dd/yyyy") });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.CreateStaffName });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.LastModifiDate.Value.ToString("MM/dd/yyyy") });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.ModifiStaffName });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.CaseId });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.IllnessNo });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.ICD_10_Id });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.IncidentNo });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.BillAmount.ToString("C") });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.Balance.ToString("C") });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.SettlementTotal.ToString("C") });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.TotalSharedAmount.ToString("C") });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.BillDate.Value.ToString("MM/dd/yyyy") });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.ReceivedDate.Value.ToString("MM/dd/yyyy") });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.Guarantor });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.MedicalProviderName });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.PatientTypeName });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.PendingReason });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.IneligibleReason });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.PrescriptionDrugName });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.PrescriptionNo });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.PrescriptionDescription });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.TotalNumberOfPhysicalTherapy });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.Note });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.PersonalResponsibilityCredit.ToString("C") });
                row.Cells.Add(new DataGridViewCheckBoxCell { Value = medbill_info.WellBeingCare });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.WellBeingCareTotal.ToString("C") });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.ProviderPhoneNumber });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.AccountNoAtProvider });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.ProviderContactPerson });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.ProposalLetterSentDate.Value.ToString("MM/dd/yyyy") });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.HIPPASentDate.Value.ToString("MM/dd/yyyy") });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.MedicalRecordDate.Value.ToString("MM/dd/yyyy") });

                if (IsHandleCreated) AddRowToMedBillInListSafely(row);
                else gvMedBillList.Rows.Add(row);

            }

        }


        private void AddRowToCheckPaymentSafely(DataGridViewRow row)
        {
            gvPaymentCheck.BeginInvoke(new AddRowToCheckPayment(AddRowPaymentCheck), row);
        }

        private void RemoveRowCheckPaymentSafely(int nRow)
        {
            gvPaymentCheck.BeginInvoke(new RemoveACHPayment(RemoveRowPaymentCheck), nRow);
        }

        private void RemoveAllRowCheckPaymentSafely()
        {
            gvPaymentCheck.BeginInvoke(new RemoveAllCheckPayment(RemoveAllRowPaymentCheck));
        }

        private void AddRowPaymentCheck(DataGridViewRow row)
        {
            gvPaymentCheck.Rows.Add(row);
        }

        private void RemoveRowPaymentCheck(int i)
        {
            gvPaymentCheck.Rows.RemoveAt(i);
        }

        private void RemoveAllRowPaymentCheck()
        {
            gvPaymentCheck.Rows.Clear();
        }

        private void OnCheckPaymentChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnCheckPaymentChange;

                UpdateGridViewCheckPayment();
            }
        }

        private void UpdateGridViewCheckPayment()
        {

            String strSqlQueryForCheckPayment = "select [dbo].[tbl_settlement].[IsPaid], [dbo].[tbl_medbill].[Individual_Id], [dbo].[tbl_incident].[IncidentNo], " +
                                                "[dbo].[tbl_program].[ProgramName], [dbo].[tbl_medbill].[BillDate], " +
                                                "[dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement].[Amount], [dbo].[tbl_medbill].[MedicalProvider_Id], " +
                                                "[dbo].[tbl_settlement_type_code].[SettlementTypeValue], " +
                                                "[dbo].[tbl_CreateStaff].[Staff_Name], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                "[dbo].[tbl_medbill].[Account_At_Provider] " +
                                                "from [dbo].[tbl_settlement] " +
                                                "inner join [dbo].[tbl_medbill] on [dbo].[tbl_settlement].[MedicalBillID] = [dbo].[tbl_medbill].[BillNo] " +
                                                "inner join [dbo].[tbl_incident] on [dbo].[tbl_medbill].[Incident_Id] = [dbo].[tbl_incident].[Incident_id] " +
                                                "inner join [dbo].[tbl_program] on [dbo].[tbl_incident].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                                                "inner join [dbo].[tbl_settlement_type_code] on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_settlement].[CreateByID] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                                "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_settlement].[LastModifiedByID] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                                "where ([dbo].[tbl_settlement].[IsPaid] = 0 or [RN_DB].[dbo].[tbl_settlement].[IsPaid] IS NULL) and " +
                                                "[dbo].[tbl_settlement].[PaidByID] IS NULL and " +
                                                "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                "([dbo].[tbl_settlement].[SettlementType] = 4 or " +
                                                "[dbo].[tbl_settlement].[SettlementType] = 6 or " +
                                                "[dbo].[tbl_settlement].[SettlementType] = 9) and " +
                                                "[dbo].[tbl_settlement].[CMMPaymentMethod] = 1 and " +
                                                "[dbo].[tbl_settlement].[Approved] = 1 and " +
                                                "[dbo].[tbl_settlement].[ApprovedDate] IS NOT NULL and " +
                                                "[dbo].[tbl_settlement].[CheckNo] IS NULL and " +
                                                "[dbo].[tbl_settlement].[CheckDate] IS NULL and " +
                                                "[dbo].[tbl_settlement].[CheckReconciled] = 0 " +
                                                "order by [dbo].[tbl_medbill].[Individual_Id]";

            SqlCommand cmdQeuryForPaymentCheck = new SqlCommand(strSqlQueryForCheckPayment, connRN);
            cmdQeuryForPaymentCheck.CommandType = CommandType.Text;

            SqlDependency dependencyCheckPayment = new SqlDependency(cmdQeuryForPaymentCheck);
            dependencyCheckPayment.OnChange += new OnChangeEventHandler(OnCheckPaymentChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            List<CheckPaymentInfo> lstCheckPaymentInfo = new List<CheckPaymentInfo>();
            SqlDataReader rdrCheckPayment = cmdQeuryForPaymentCheck.ExecuteReader();
            if (rdrCheckPayment.HasRows)
            {
                while (rdrCheckPayment.Read())
                {
                    CheckPaymentInfo infoCheckPayment = new CheckPaymentInfo();
                    if (!rdrCheckPayment.IsDBNull(0)) infoCheckPayment.bIsPaid = rdrCheckPayment.GetBoolean(0);
                    if (!rdrCheckPayment.IsDBNull(1)) infoCheckPayment.IndividualId = rdrCheckPayment.GetString(1);
                    if (!rdrCheckPayment.IsDBNull(2)) infoCheckPayment.IncidentNo = rdrCheckPayment.GetString(2);
                    if (!rdrCheckPayment.IsDBNull(3)) infoCheckPayment.IncidentProgram = rdrCheckPayment.GetString(3);
                    if (!rdrCheckPayment.IsDBNull(4)) infoCheckPayment.ServiceDate = rdrCheckPayment.GetDateTime(4);
                    if (!rdrCheckPayment.IsDBNull(5)) infoCheckPayment.SettlementNo = rdrCheckPayment.GetString(5);
                    if (!rdrCheckPayment.IsDBNull(6)) infoCheckPayment.SettlementAmount = rdrCheckPayment.GetDecimal(6);
                    if (!rdrCheckPayment.IsDBNull(7)) infoCheckPayment.MedicalProviderId = rdrCheckPayment.GetString(7);
                    if (!rdrCheckPayment.IsDBNull(8)) infoCheckPayment.SettlementType = rdrCheckPayment.GetString(8);
                    if (!rdrCheckPayment.IsDBNull(9)) infoCheckPayment.CreatedBy = rdrCheckPayment.GetString(9);
                    if (!rdrCheckPayment.IsDBNull(10)) infoCheckPayment.LastModifiedBy = rdrCheckPayment.GetString(10);
                    if (!rdrCheckPayment.IsDBNull(11)) infoCheckPayment.AccountNoAtMedProvider = rdrCheckPayment.GetString(11);

                    lstCheckPaymentInfo.Add(infoCheckPayment);
                }
            }
            rdrCheckPayment.Close();
            if (connRN.State == ConnectionState.Open) connRN.Close();

            foreach (CheckPaymentInfo info in lstCheckPaymentInfo)
            {
                String strSqlQueryForMedicalProviderName = "select [dbo].[account].[Name] from [dbo].[account] where [dbo].[account].[Id] = @MedicalProviderId";

                SqlCommand cmdQueryForMedicalProviderName = new SqlCommand(strSqlQueryForMedicalProviderName, connSalesforce);
                cmdQueryForMedicalProviderName.CommandType = CommandType.Text;

                cmdQueryForMedicalProviderName.Parameters.AddWithValue("@MedicalProviderId", info.MedicalProviderId);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                Object objMedicalProviderName = cmdQueryForMedicalProviderName.ExecuteScalar();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                String MedicalProviderName = String.Empty;
                if (objMedicalProviderName != null) MedicalProviderName = objMedicalProviderName.ToString();

                info.MedicalProviderName = MedicalProviderName;
            }

            foreach (CheckPaymentInfo info in lstCheckPaymentInfo)
            {
                String strSqlQueryForIndividualInfoForCheckPayment = "select [dbo].[contact].[Name], [dbo].[contact].[Household_Role__c], " +
                                                                     "[dbo].[contact].[Primary_Name__c], " +
                                                                     "[dbo].[account].[SHIPPINGSTREET], [dbo].[account].[SHIPPINGCITY], " +
                                                                     "[dbo].[account].[SHIPPINGSTATE], [dbo].[account].[SHIPPINGPOSTALCODE], " +
                                                                     "[dbo].[contact].[c4g_Membership_Status__c], [dbo].[contact].[Membership_Number__c] " +
                                                                     "from [dbo].[contact] " +
                                                                     "inner join [dbo].[program] on [dbo].[contact].[c4g_Plan__c] = [dbo].[program].[ID] " +
                                                                     "inner join [dbo].[account] on [dbo].[contact].[AccountId] = [dbo].[account].[ID] " +
                                                                     "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                SqlCommand cmdQueryForIndividualInfoForCheckPayment = new SqlCommand(strSqlQueryForIndividualInfoForCheckPayment, connSalesforce);
                cmdQueryForIndividualInfoForCheckPayment.CommandType = CommandType.Text;

                cmdQueryForIndividualInfoForCheckPayment.Parameters.AddWithValue("@IndividualId", info.IndividualId);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                SqlDataReader rdrIndividualInfoForCheckPayment = cmdQueryForIndividualInfoForCheckPayment.ExecuteReader();
                if (rdrIndividualInfoForCheckPayment.HasRows)
                {
                    rdrIndividualInfoForCheckPayment.Read();

                    if (!rdrIndividualInfoForCheckPayment.IsDBNull(0)) info.IndividualName = rdrIndividualInfoForCheckPayment.GetString(0);
                    if (!rdrIndividualInfoForCheckPayment.IsDBNull(1)) info.HouseholdRole = rdrIndividualInfoForCheckPayment.GetString(1);
                    if (!rdrIndividualInfoForCheckPayment.IsDBNull(2)) info.PrimaryName = rdrIndividualInfoForCheckPayment.GetString(2);
                    if (!rdrIndividualInfoForCheckPayment.IsDBNull(3)) info.ShippingStreet = rdrIndividualInfoForCheckPayment.GetString(3);
                    if (!rdrIndividualInfoForCheckPayment.IsDBNull(4)) info.ShippingCity = rdrIndividualInfoForCheckPayment.GetString(4);
                    if (!rdrIndividualInfoForCheckPayment.IsDBNull(5)) info.ShippingState = rdrIndividualInfoForCheckPayment.GetString(5);
                    if (!rdrIndividualInfoForCheckPayment.IsDBNull(6)) info.ShippingZip = rdrIndividualInfoForCheckPayment.GetString(6);
                    if (!rdrIndividualInfoForCheckPayment.IsDBNull(7)) info.MembershipStatus = rdrIndividualInfoForCheckPayment.GetString(7);
                    if (!rdrIndividualInfoForCheckPayment.IsDBNull(8)) info.MemebershipNo = rdrIndividualInfoForCheckPayment.GetString(8);

                }
                rdrIndividualInfoForCheckPayment.Close();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
            }

            if (IsHandleCreated) RemoveAllRowCheckPaymentSafely();
            else gvPaymentCheck.Rows.Clear();

            foreach (CheckPaymentInfo info in lstCheckPaymentInfo)
            {
                DataGridViewRow row = new DataGridViewRow();
                row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IndividualName });
                row.Cells[1].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IndividualId });
                row.Cells[2].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.HouseholdRole });
                row.Cells[3].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.PrimaryName });
                row.Cells[4].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IncidentNo });
                row.Cells[5].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IncidentProgram });
                row.Cells[6].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.SettlementNo });
                row.Cells[7].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.SettlementAmount.ToString("C") });
                row.Cells[8].ReadOnly = true;
                row.Cells[8].Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.ServiceDate.Value.ToString("MM/dd/yyyy") });
                row.Cells[9].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.MedicalProviderName });
                row.Cells[10].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.AccountNoAtMedProvider });
                row.Cells[11].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.ShippingStreet });
                row.Cells[12].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.ShippingCity });
                row.Cells[13].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.ShippingState });
                row.Cells[14].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.ShippingZip });
                row.Cells[15].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.SettlementType });
                row.Cells[16].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.CreatedBy });
                row.Cells[17].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.LastModifiedBy });
                row.Cells[18].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.MembershipStatus });
                row.Cells[19].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.MemebershipNo });
                row.Cells[20].ReadOnly = true;

                if (IsHandleCreated) AddRowToCheckPaymentSafely(row);
                else gvPaymentCheck.Rows.Add(row);
            }
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }

        private void AddRowToCreditCardPaymentSafely(DataGridViewRow row)
        {
            gvPaymentCreditCard.BeginInvoke(new AddRowToCreditCardPayment(AddRowPaymentCreditCard), row);
        }

        private void RemoveRowCreditCardPaymentSafely(int nRow)
        {
            gvPaymentCreditCard.BeginInvoke(new RemoveCreditCardPayment(RemoveRowPaymentCreditCard), nRow);
        }

        private void RemoveAllRowCreditCardPaymentSafely()
        {
            gvPaymentCreditCard.BeginInvoke(new RemoveAllCreditCardPayment(RemoveAllPaymentCreditCard));
        }

        private void AddRowPaymentCreditCard(DataGridViewRow row)
        {
            gvPaymentCreditCard.Rows.Add(row);
        }

        private void RemoveRowPaymentCreditCard(int i)
        {
            gvPaymentCreditCard.Rows.RemoveAt(i);
        }

        private void RemoveAllPaymentCreditCard()
        {
            gvPaymentCreditCard.Rows.Clear();
        }

        private void OnCreditCardPaymentChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnCreditCardPaymentChange;

                UpdateGridViewCreditCardPayment();
            }
        }

        private void UpdateGridViewCreditCardPayment()
        {
            String strSqlQueryForCreditCardPayment = "select [dbo].[tbl_settlement].[IsPaid], " +
                                         "[dbo].[tbl_medbill].[MedicalProvider_Id], " +
                                         "[dbo].[tbl_medbill].[Account_At_Provider], " +
                                         "[dbo].[tbl_medbill].[BillDate], " +
                                         "[dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill].[BillAmount], " +
                                         "[dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement].[Amount], " +
                                         "[dbo].[tbl_settlement].[Notes], " +
                                         "[dbo].[tbl_CreateStaff].[Staff_Name], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                         "[dbo].[tbl_medbill].[Individual_Id] " +
                                         "from [dbo].[tbl_settlement] " +
                                         "inner join [dbo].[tbl_medbill] on [dbo].[tbl_settlement].[MedicalBillID] = [dbo].[tbl_medbill].[BillNo] " +
                                         "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                         "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                         "where ([dbo].[tbl_settlement].[IsPaid] = 0 or [RN_DB].[dbo].[tbl_settlement].[IsPaid] IS NULL) and " +
                                         "[dbo].[tbl_settlement].[PaidByID] IS NULL and " +
                                         "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                         "[dbo].[tbl_settlement].[SettlementType] = 4 and " +
                                         "[dbo].[tbl_settlement].[CMMPaymentMethod] = 2 and " +
                                         "[dbo].[tbl_settlement].[Approved] = 1 and " +
                                         "[dbo].[tbl_settlement].[ApprovedDate] IS NOT NULL and " +
                                         "([dbo].[tbl_settlement].[CMMCreditCard] = 0 or [dbo].[tbl_settlement].[CMMCreditCard] IS NULL) and " +
                                         "[dbo].[tbl_settlement].[CMMCreditCardPaidDate] IS NULL " +
                                         "order by [dbo].[tbl_medbill].[Individual_Id]";

            SqlCommand cmdQueryForCreditCardPayment = new SqlCommand(strSqlQueryForCreditCardPayment, connRN);
            cmdQueryForCreditCardPayment.CommandType = CommandType.Text;

            SqlDependency dependencyCreditCardPayment = new SqlDependency(cmdQueryForCreditCardPayment);
            dependencyCreditCardPayment.OnChange += new OnChangeEventHandler(OnCreditCardPaymentChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            List<CreditCardPaymentInfo> lstCreditCardPaymentInfo = new List<CreditCardPaymentInfo>();
            SqlDataReader rdrCreditCardPayment = cmdQueryForCreditCardPayment.ExecuteReader();
            if (rdrCreditCardPayment.HasRows)
            {
                while (rdrCreditCardPayment.Read())
                {
                    CreditCardPaymentInfo ccPaymentInfo = new CreditCardPaymentInfo();

                    if (!rdrCreditCardPayment.IsDBNull(0)) ccPaymentInfo.bIsPaid = rdrCreditCardPayment.GetBoolean(0);
                    else ccPaymentInfo.bIsPaid = false;
                    if (!rdrCreditCardPayment.IsDBNull(1)) ccPaymentInfo.MedicalProviderId = rdrCreditCardPayment.GetString(1);
                    else ccPaymentInfo.MedicalProviderId = String.Empty;
                    if (!rdrCreditCardPayment.IsDBNull(2)) ccPaymentInfo.AccountNoAtProvider = rdrCreditCardPayment.GetString(2);
                    else ccPaymentInfo.AccountNoAtProvider = String.Empty;
                    if (!rdrCreditCardPayment.IsDBNull(3)) ccPaymentInfo.ServiceDate = rdrCreditCardPayment.GetDateTime(3);
                    else ccPaymentInfo.ServiceDate = null;
                    if (!rdrCreditCardPayment.IsDBNull(4)) ccPaymentInfo.MedicalBillNo = rdrCreditCardPayment.GetString(4);
                    else ccPaymentInfo.MedicalBillNo = String.Empty;
                    if (!rdrCreditCardPayment.IsDBNull(5)) ccPaymentInfo.MedBillAmount = rdrCreditCardPayment.GetDecimal(5);
                    else ccPaymentInfo.MedBillAmount = 0;
                    if (!rdrCreditCardPayment.IsDBNull(6)) ccPaymentInfo.SettlementName = rdrCreditCardPayment.GetString(6);
                    else ccPaymentInfo.SettlementName = String.Empty;
                    if (!rdrCreditCardPayment.IsDBNull(7)) ccPaymentInfo.SettlementAmount = rdrCreditCardPayment.GetDecimal(7);
                    else ccPaymentInfo.SettlementAmount = 0;
                    if (!rdrCreditCardPayment.IsDBNull(8)) ccPaymentInfo.SettlementNote = rdrCreditCardPayment.GetString(8);
                    else ccPaymentInfo.SettlementNote = String.Empty;
                    if (!rdrCreditCardPayment.IsDBNull(9)) ccPaymentInfo.CreateStaffName = rdrCreditCardPayment.GetString(9);
                    else ccPaymentInfo.CreateStaffName = String.Empty;
                    if (!rdrCreditCardPayment.IsDBNull(10)) ccPaymentInfo.ModifyStaffName = rdrCreditCardPayment.GetString(10);
                    else ccPaymentInfo.ModifyStaffName = String.Empty;
                    if (!rdrCreditCardPayment.IsDBNull(11)) ccPaymentInfo.IndividualID = rdrCreditCardPayment.GetString(11);
                    else ccPaymentInfo.IndividualID = String.Empty;

                    lstCreditCardPaymentInfo.Add(ccPaymentInfo);
                }
            }
            rdrCreditCardPayment.Close();
            if (connRN.State != ConnectionState.Open) connRN.Close();

            foreach (CreditCardPaymentInfo info in lstCreditCardPaymentInfo)
            {
                String strSqlQueryForMedicalProviderInfo = "select [dbo].[account].[Name], [dbo].[account].[Phone] from [dbo].[account] where [dbo].[account].[Id] = @MedicalProviderId";

                SqlCommand cmdQueryForMedicalProviderInfo = new SqlCommand(strSqlQueryForMedicalProviderInfo, connSalesforce);
                cmdQueryForMedicalProviderInfo.CommandType = CommandType.Text;

                cmdQueryForMedicalProviderInfo.Parameters.AddWithValue("@MedicalProviderId", info.MedicalProviderId);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                SqlDataReader rdrMedicalProviderInfo = cmdQueryForMedicalProviderInfo.ExecuteReader();
                if (rdrMedicalProviderInfo.HasRows)
                {
                    rdrMedicalProviderInfo.Read();
                    if (!rdrMedicalProviderInfo.IsDBNull(0)) info.MedicalProviderName = rdrMedicalProviderInfo.GetString(0);
                    else info.MedicalProviderName = String.Empty;
                    if (!rdrMedicalProviderInfo.IsDBNull(1)) info.MedicalProviderPhone = rdrMedicalProviderInfo.GetString(1);
                    else info.MedicalProviderPhone = String.Empty;
                }

                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
            }

            foreach (CreditCardPaymentInfo info in lstCreditCardPaymentInfo)
            {

                String strSqlQueryForIndividualInfo = "select [dbo].[contact].[Name], [dbo].[contact].[Birthdate], [dbo].[contact].[Social_Security_Number__c], " +
                                                      "[dbo].[contact].[CMM_Gender__c], [dbo].[contact].[Primary_Name__c], " +
                                                      "[dbo].[account].[ShippingStreet], [dbo].[account].[ShippingCity], " +
                                                      "[dbo].[account].[ShippingState], [dbo].[account].[ShippingPostalCode], " +
                                                      "[dbo].[contact].[c4g_Membership_Status__c], [dbo].[contact].[Membership_Number__c] " +
                                                      "from [dbo].[contact] " +
                                                      "inner join [dbo].[account] on [dbo].[contact].[AccountId] = [dbo].[account].[Id] " +
                                                      "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                SqlCommand cmdQueryForIndividualInfo = new SqlCommand(strSqlQueryForIndividualInfo, connSalesforce);
                cmdQueryForIndividualInfo.CommandType = CommandType.Text;

                cmdQueryForIndividualInfo.Parameters.AddWithValue("@IndividualId", info.IndividualID);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                SqlDataReader rdrIndividualInfo = cmdQueryForIndividualInfo.ExecuteReader();
                if (rdrIndividualInfo.HasRows)
                {
                    rdrIndividualInfo.Read();
                    if (!rdrIndividualInfo.IsDBNull(0)) info.IndividualName = rdrIndividualInfo.GetString(0);
                    else info.IndividualName = String.Empty;
                    if (!rdrIndividualInfo.IsDBNull(1)) info.IndividualBirthDate = rdrIndividualInfo.GetDateTime(1);
                    else info.IndividualBirthDate = null;
                    if (!rdrIndividualInfo.IsDBNull(2)) info.SocialSecurityNumber = rdrIndividualInfo.GetString(2);
                    else info.SocialSecurityNumber = String.Empty;
                    if (!rdrIndividualInfo.IsDBNull(3)) info.Sex = rdrIndividualInfo.GetString(3);
                    else info.Sex = "Unknown";
                    if (!rdrIndividualInfo.IsDBNull(4)) info.PrimaryName = rdrIndividualInfo.GetString(4);
                    else info.PrimaryName = String.Empty;
                    if (!rdrIndividualInfo.IsDBNull(5)) info.MailingStreet = rdrIndividualInfo.GetString(5);
                    else info.MailingStreet = String.Empty;
                    if (!rdrIndividualInfo.IsDBNull(6)) info.MailingCity = rdrIndividualInfo.GetString(6);
                    else info.MailingCity = String.Empty;
                    if (!rdrIndividualInfo.IsDBNull(7)) info.MailingState = rdrIndividualInfo.GetString(7);
                    else info.MailingState = String.Empty;
                    if (!rdrIndividualInfo.IsDBNull(8)) info.MailingZip = rdrIndividualInfo.GetString(8);
                    else info.MailingZip = String.Empty;
                    if (!rdrIndividualInfo.IsDBNull(9)) info.MembershipStatus = rdrIndividualInfo.GetString(9);
                    else info.MembershipStatus = String.Empty;
                    if (!rdrIndividualInfo.IsDBNull(10)) info.MembershipNumber = rdrIndividualInfo.GetString(10);
                }
                rdrIndividualInfo.Close();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
            }

            if (IsHandleCreated) RemoveAllRowCreditCardPaymentSafely();
            else gvPaymentCreditCard.Rows.Clear();

            foreach (CreditCardPaymentInfo ccPaymentInfo in lstCreditCardPaymentInfo)
            {
                DataGridViewRow row = new DataGridViewRow();
                row.Cells.Add(new DataGridViewButtonCell { Value = "Confirm Payment" });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.IndividualName });
                row.Cells[1].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MedicalProviderName });
                row.Cells[2].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MedicalProviderPhone });
                row.Cells[3].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.AccountNoAtProvider });
                row.Cells[4].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.IndividualBirthDate.Value.ToString("MM/dd/yyyy") });
                row.Cells[5].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.SocialSecurityNumber });
                row.Cells[6].ReadOnly = true;
                DataGridViewTextBoxCell sexCell = new DataGridViewTextBoxCell();
                if (ccPaymentInfo.Sex == "Male") sexCell.Value = "M";
                else if (ccPaymentInfo.Sex == "Female") sexCell.Value = "F";
                else if (ccPaymentInfo.Sex == "0") sexCell.Value = "Unknown";
                row.Cells.Add(sexCell);
                row.Cells[7].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.PrimaryName });
                row.Cells[8].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MailingStreet });
                row.Cells[9].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MailingCity });
                row.Cells[10].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MailingState });
                row.Cells[11].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MailingZip });
                row.Cells[12].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.ServiceDate });
                row.Cells[13].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MedicalBillNo });
                row.Cells[14].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MedBillAmount.ToString("C") });
                row.Cells[15].Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                row.Cells[15].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.SettlementName });
                row.Cells[16].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.SettlementAmount.ToString("C") });
                row.Cells[17].Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                DataGridViewComboBoxCell comboCreditCardCell = new DataGridViewComboBoxCell();
                for (int i = 0; i < lstCreditCardInfo.Count; i++)
                {
                    comboCreditCardCell.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                }
                row.Cells.Add(comboCreditCardCell);
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MembershipStatus });
                row.Cells[19].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.SettlementNote });
                row.Cells[20].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.CreateStaffName });
                row.Cells[21].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.ModifyStaffName });
                row.Cells[22].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.IndividualID });
                row.Cells[23].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MembershipNumber });
                row.Cells[24].ReadOnly = true;

                if (IsHandleCreated) AddRowToCreditCardPaymentSafely(row);
                else gvPaymentCreditCard.Rows.Add(row);
            }
            rdrCreditCardPayment.Close();
            if (connRN.State == ConnectionState.Open) connRN.Close();

        }


        private void AddRowToACHPaymentSafely(DataGridViewRow row)
        {
            gvPaymentACH.BeginInvoke(new AddRowToACHPayment(AddRowPaymentACH), row);
        }

        private void RemoveRowACHPaymentSafely(int nRow)
        {
            gvPaymentACH.BeginInvoke(new RemoveACHPayment(RemoveRowPaymentACH), nRow);
        }

        private void RemoveAllRowACHPaymentSafely()
        {
            gvPaymentACH.BeginInvoke(new RemoveAllACHPayment(RemoveAllPaymentACH));
        }

        private void AddRowPaymentACH(DataGridViewRow row)
        {
            gvPaymentACH.Rows.Add(row);
        }

        private void RemoveRowPaymentACH(int i)
        {
            gvPaymentACH.Rows.RemoveAt(i);
        }

        private void RemoveAllPaymentACH()
        {
            gvPaymentACH.Rows.Clear();
        }

        private void OnACHPaymentChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnACHPaymentChange;

                UpdateGridViewACHPayment();
            }
        }

        private void UpdateGridViewACHPayment()
        {

            String strSqlQueryForACHPayment = "select [dbo].[tbl_settlement].[IsPaid], [dbo].[tbl_medbill].[Individual_Id], " +
                                  "[dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement].[Amount], " +
                                  "[dbo].[tbl_CreateStaff].[Staff_Name], [dbo].[tbl_ModifiStaff].[Staff_Name]," +
                                  "[dbo].[tbl_settlement].[IsACHExported], [dbo].[tbl_settlement].[ACHExportedByID] " +
                                  "from [dbo].[tbl_settlement] " +
                                  "inner join [dbo].[tbl_medbill] on [dbo].[tbl_settlement].[MedicalBillID] = [dbo].[tbl_medbill].[BillNo] " +
                                  "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                  "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                  "where ([dbo].[tbl_settlement].[IsPaid] = 0 or [RN_DB].[dbo].[tbl_settlement].[IsPaid] IS NULL) and " +
                                  "[dbo].[tbl_settlement].[PaidByID] IS NULL and " +
                                  "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                  "([dbo].[tbl_settlement].[SettlementType] = 4 or " +
                                  "[dbo].[tbl_settlement].[SettlementType] = 6 or " +
                                  "[dbo].[tbl_settlement].[SettlementType] = 9) and " +
                                  "[dbo].[tbl_settlement].[CMMPaymentMethod] = 3 and " +
                                  "[dbo].[tbl_settlement].[Approved] = 1 and " +
                                  "[dbo].[tbl_settlement].[ApprovedDate] IS NOT NULL and " +
                                  "[dbo].[tbl_settlement].[ACH_Number] IS NULL and " +
                                  "[dbo].[tbl_settlement].[ACH_Date] IS NULL " +
                                  "order by [dbo].[tbl_medbill].[Individual_Id]";


            SqlCommand cmdPaymentACH = new SqlCommand(strSqlQueryForACHPayment, connRN);
            cmdPaymentACH.CommandType = CommandType.Text;

            SqlDependency dependencyPaymentACH = new SqlDependency(cmdPaymentACH);
            dependencyPaymentACH.OnChange += new OnChangeEventHandler(OnACHPaymentChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrPaymentACH = cmdPaymentACH.ExecuteReader();
            List<ACHPaymentInfo> lstACHPaymentInfo = new List<ACHPaymentInfo>();
            if (rdrPaymentACH.HasRows)
            {
                while (rdrPaymentACH.Read())
                {
                    ACHPaymentInfo achInfo = new ACHPaymentInfo();

                    if (!rdrPaymentACH.IsDBNull(0)) achInfo.bIsPaid = rdrPaymentACH.GetBoolean(0);
                    if (!rdrPaymentACH.IsDBNull(1)) achInfo.IndividualId = rdrPaymentACH.GetString(1);
                    if (!rdrPaymentACH.IsDBNull(2)) achInfo.SettlementNo = rdrPaymentACH.GetString(2);
                    if (!rdrPaymentACH.IsDBNull(3)) achInfo.SettlementAmount = rdrPaymentACH.GetDecimal(3);
                    if (!rdrPaymentACH.IsDBNull(4)) achInfo.CreateStaffName = rdrPaymentACH.GetString(4);
                    if (!rdrPaymentACH.IsDBNull(5)) achInfo.ModifiStaffName = rdrPaymentACH.GetString(5);
                    if (!rdrPaymentACH.IsDBNull(6)) achInfo.bIsExported = rdrPaymentACH.GetBoolean(6);
                    if (!rdrPaymentACH.IsDBNull(7)) achInfo.nExportedBy = rdrPaymentACH.GetInt16(7);

                    lstACHPaymentInfo.Add(achInfo);
                }
            }
            if (connRN.State == ConnectionState.Closed) connRN.Open();

            foreach (ACHPaymentInfo info in lstACHPaymentInfo)
            {
                String strSqlQueryForIndividualInfo = "select [dbo].[contact].[Name], " +
                                                      "[dbo].[contact].[BankName__c], [dbo].[contact].[RoutingNumber__c], " +
                                                      "[dbo].[contact].[AccountNumber__c], [dbo].[contact].[AccountHolder__c], " +
                                                      "[dbo].[membership].[Pay_BankName__c], [dbo].[membership].[Pay_RoutingNumber__c], " +
                                                      "[dbo].[membership].[Pay_AccountNumber__c], [dbo].[membership].[Pay_AccountHolder__c], " +
                                                      "[dbo].[contact].[c4g_Membership_Status__c] " +
                                                      "from [dbo].[contact] " +
                                                      "inner join [dbo].[membership] on [dbo].[contact].[c4g_Membership__c] = [dbo].[membership].[Id] " +
                                                      "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                SqlCommand cmdQueryForIndividualInfo = new SqlCommand(strSqlQueryForIndividualInfo, connSalesforce);
                cmdQueryForIndividualInfo.CommandType = CommandType.Text;

                cmdQueryForIndividualInfo.Parameters.AddWithValue("@IndividualId", info.IndividualId);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                SqlDataReader rdrACHPaymentIndividualInfo = cmdQueryForIndividualInfo.ExecuteReader();
                if (rdrACHPaymentIndividualInfo.HasRows)
                {
                    rdrACHPaymentIndividualInfo.Read();
                    if (!rdrACHPaymentIndividualInfo.IsDBNull(0)) info.IndividualName = rdrACHPaymentIndividualInfo.GetString(0);
                    if (!rdrACHPaymentIndividualInfo.IsDBNull(1)) info.BankName = rdrACHPaymentIndividualInfo.GetString(1);
                    else if (!rdrACHPaymentIndividualInfo.IsDBNull(5)) info.BankName = rdrACHPaymentIndividualInfo.GetString(5);
                    if (!rdrACHPaymentIndividualInfo.IsDBNull(2)) info.RoutingNumber = rdrACHPaymentIndividualInfo.GetString(2);
                    else if (!rdrACHPaymentIndividualInfo.IsDBNull(6)) info.RoutingNumber = rdrACHPaymentIndividualInfo.GetString(6);
                    if (!rdrACHPaymentIndividualInfo.IsDBNull(3)) info.AccountNumber = rdrACHPaymentIndividualInfo.GetString(3);
                    else if (!rdrACHPaymentIndividualInfo.IsDBNull(7)) info.AccountNumber = rdrACHPaymentIndividualInfo.GetString(7);
                    if (!rdrACHPaymentIndividualInfo.IsDBNull(4)) info.AccountHolder = rdrACHPaymentIndividualInfo.GetString(4);
                    else if (!rdrACHPaymentIndividualInfo.IsDBNull(8)) info.AccountHolder = rdrACHPaymentIndividualInfo.GetString(8);
                    if (!rdrACHPaymentIndividualInfo.IsDBNull(5)) info.MembershipStatus = rdrACHPaymentIndividualInfo.GetString(9);
                }
                rdrACHPaymentIndividualInfo.Close();
            }
            if (IsHandleCreated) RemoveAllRowACHPaymentSafely();
            else gvPaymentACH.Rows.Clear();

            foreach (ACHPaymentInfo info in lstACHPaymentInfo)
            {
                DataGridViewRow row = new DataGridViewRow();
                row.Cells.Add(new DataGridViewCheckBoxCell { Value = info.bIsExported });
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IndividualName });
                row.Cells[1].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IndividualId });
                row.Cells[2].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.SettlementNo });
                row.Cells[3].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.SettlementAmount.ToString("C") });
                row.Cells[4].Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                row.Cells[4].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.BankName });
                row.Cells[5].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.RoutingNumber });
                row.Cells[6].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.AccountNumber });
                row.Cells[7].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.AccountHolder });
                row.Cells[8].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.CreateStaffName });
                row.Cells[9].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.ModifiStaffName });
                row.Cells[10].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.MembershipStatus });
                row.Cells[11].ReadOnly = true;
                row.Cells.Add(new DataGridViewCheckBoxCell { Value = info.bIsExported });
                if (IsHandleCreated) AddRowToACHPaymentSafely(row);
                else gvPaymentACH.Rows.Add(row);
            }
        }



        private void AddRowToPaymentInactiveSafely(DataGridViewRow row)
        {
            gvPaymentInactive.BeginInvoke(new AddRowToInactivePayment(AddRowPaymentInactive), row);
        }

        private void RemoveRowPaymentInactiveSafely(int i)
        {
            gvPaymentInactive.BeginInvoke(new RemoveInactivePayment(RemoveRowPaymentInactive), i);
        }

        private void RemoveAllRowPaymentInactiveSafely()
        {
            gvPaymentInactive.BeginInvoke(new RemoveAllInactivePayment(RemoveAllRowPaymentInactive));
        }

        private void AddRowPaymentInactive(DataGridViewRow row)
        {
            gvPaymentInactive.Rows.Add(row);
        }

        private void RemoveRowPaymentInactive(int i)
        {
            gvPaymentInactive.Rows.RemoveAt(i);
        }

        private void RemoveAllRowPaymentInactive()
        {
            gvPaymentInactive.Rows.Clear();
        }

        private void OnPaymentInactiveChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnPaymentInactiveChange;

                UpdateGridViewInactivePayment();
            }
        }

        private void UpdateGridViewInactivePayment()
        {
            List<String> lstIndividualIDs = new List<String>();
            String strSqlQueryForPaymentInactive = "select distinct([dbo].[tbl_medbill].[Individual_Id]) " +
                                                    "from [dbo].[tbl_medbill] " +
                                                    "inner join [dbo].[tbl_settlement] on [dbo].[tbl_medbill].[BillNo] = [dbo].[tbl_settlement].[MedicalBillID] " +
                                                    "where ([dbo].[tbl_settlement].[IsPaid] = 0 or [RN_DB].[dbo].[tbl_settlement].[IsPaid] IS NULL) and " +
                                                    "[dbo].[tbl_settlement].[PaidByID] IS NULL and " +
                                                    "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                    "([dbo].[tbl_settlement].[SettlementType] = 4 or " +
                                                    "[dbo].[tbl_settlement].[SettlementType] = 6 or " +
                                                    "[dbo].[tbl_settlement].[SettlementType] = 9) and " +
                                                    "[dbo].[tbl_settlement].[Approved] = 1 and " +
                                                    "[dbo].[tbl_settlement].[ApprovedDate] IS NOT NULL " +
                                                    "order by [dbo].[tbl_medbill].[Individual_Id]";

            SqlCommand cmdQueryForPaymentInactive = new SqlCommand(strSqlQueryForPaymentInactive, connRN);
            cmdQueryForPaymentInactive.CommandType = CommandType.Text;

            SqlDependency dependencyPaymentInactive = new SqlDependency(cmdQueryForPaymentInactive);
            dependencyPaymentInactive.OnChange += new OnChangeEventHandler(OnPaymentInactiveChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrPaymentInactive = cmdQueryForPaymentInactive.ExecuteReader();
            gvPaymentInactive.Rows.Clear();
            if (rdrPaymentInactive.HasRows)
            {
                while (rdrPaymentInactive.Read())
                {
                    String IndividualID = String.Empty;
                    if (!rdrPaymentInactive.IsDBNull(0)) IndividualID = rdrPaymentInactive.GetString(0);
                    lstIndividualIDs.Add(IndividualID);
                }
            }
            rdrPaymentInactive.Close();
            if (connRN.State == ConnectionState.Open) connRN.Close();

            List<InactivePaymentInfo> lstInactivePaymentInfo = new List<InactivePaymentInfo>();
            foreach (String IndividualId in lstIndividualIDs)
            {
                String strSqlQueryForIndividualInfo = "select [dbo].[contact].[Name], [dbo].[contact].[Membership_Number__c], [dbo].[contact].[c4g_Membership_Status__c], " +
                                                       "[dbo].[account].[ShippingState], " +
                                                       "[dbo].[contact].[Email], [dbo].[account].[cmm_Email__c], " +
                                                       "[dbo].[contact].[Phone], [dbo].[account].[Phone] " +
                                                       "from [dbo].[contact] " +
                                                       "inner join [dbo].[account] on [dbo].[contact].[AccountId] = [dbo].[account].[Id] " +
                                                       "where ([dbo].[contact].[c4g_Membership_Status__c] like '%Cancelled%' or " +
                                                       "cast([dbo].[contact].[c4g_Membership_Status__c] as nvarchar(max)) = 'Past Due' or " +
                                                       "cast([dbo].[contact].[c4g_Membership_Status__c] as nvarchar(max)) = 'Hold' or " +
                                                       "cast([dbo].[contact].[c4g_Membership_Status__c] as nvarchar(max)) IS NULL) and " +
                                                       "[dbo].[contact].[Individual_ID__c] = @IndividualId";

                SqlCommand cmdQueryForIndividualInfo = new SqlCommand(strSqlQueryForIndividualInfo, connSalesforce);
                cmdQueryForIndividualInfo.CommandType = CommandType.Text;

                cmdQueryForIndividualInfo.Parameters.AddWithValue("@IndividualId", IndividualId);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                SqlDataReader rdrPaymentInactiveIndividual = cmdQueryForIndividualInfo.ExecuteReader();
                if (rdrPaymentInactiveIndividual.HasRows)
                {
                    rdrPaymentInactiveIndividual.Read();
                    InactivePaymentInfo info = new InactivePaymentInfo();
                    if (!rdrPaymentInactiveIndividual.IsDBNull(0)) info.IndividualName = rdrPaymentInactiveIndividual.GetString(0);
                    if (!rdrPaymentInactiveIndividual.IsDBNull(1)) info.MembershipNo = rdrPaymentInactiveIndividual.GetString(1);
                    if (!rdrPaymentInactiveIndividual.IsDBNull(2)) info.MembershipStatus = rdrPaymentInactiveIndividual.GetString(2);
                    if (!rdrPaymentInactiveIndividual.IsDBNull(3)) info.State = rdrPaymentInactiveIndividual.GetString(3);
                    if (!rdrPaymentInactiveIndividual.IsDBNull(4)) info.Email = rdrPaymentInactiveIndividual.GetString(4);
                    else if (!rdrPaymentInactiveIndividual.IsDBNull(5)) info.Email = rdrPaymentInactiveIndividual.GetString(5);
                    if (!rdrPaymentInactiveIndividual.IsDBNull(6)) info.Phone = rdrPaymentInactiveIndividual.GetString(6);
                    else if (!rdrPaymentInactiveIndividual.IsDBNull(7)) info.Phone = rdrPaymentInactiveIndividual.GetString(7);
                    lstInactivePaymentInfo.Add(info);
                }
                rdrPaymentInactiveIndividual.Close();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
            }

            if (IsHandleCreated) RemoveAllRowPaymentInactiveSafely();
            else gvPaymentInactive.Rows.Clear();

            foreach (InactivePaymentInfo info in lstInactivePaymentInfo)
            {
                DataGridViewRow row = new DataGridViewRow();
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IndividualId });
                row.Cells[0].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IndividualName });
                row.Cells[1].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.MembershipNo });
                row.Cells[2].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.MembershipStatus });
                row.Cells[3].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.State });
                row.Cells[4].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.Email });
                row.Cells[5].ReadOnly = true;
                row.Cells.Add(new DataGridViewTextBoxCell { Value = info.Phone });
                row.Cells[6].ReadOnly = true;
                //gvPaymentInactive.Rows.Add(row);
                if (IsHandleCreated) AddRowToPaymentInactiveSafely(row);
                else gvPaymentInactive.Rows.Add(row);
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="row"></param>
        private void AddRowToActiveTaskNPManagerSafely(DataGridViewRow row)
        {
            gvNPManagerActiveTask.BeginInvoke(new AddRowToActiveTaskNPManager(AddRowActiveTaskNPManager), row);
        }

        private void RemoveRowActiveTaskNPManagerSafely(int nRow)
        {
            gvNPManagerActiveTask.BeginInvoke(new RemoveActiveTaskNPManager(RemoveRowActiveTaskNPManager), nRow);
        }

        private void ClearAllRowActiveTaskNPManager()
        {
            gvNPManagerActiveTask.BeginInvoke(new RemoveAllActiveTaskNPManager(RemoveAllRowActiveTaskNPManager));
        }

        private void AddRowActiveTaskNPManager(DataGridViewRow row)
        {
            gvNPManagerActiveTask.Rows.Add(row);
        }

        private void RemoveRowActiveTaskNPManager(int nRow)
        {
            gvNPManagerActiveTask.Rows.RemoveAt(nRow);
        }

        private void RemoveAllRowActiveTaskNPManager()
        {
            gvNPManagerActiveTask.Rows.Clear();
        }

        private void OnActiveTaskNPManagerChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnActiveTaskNPManagerChange;

                UpdateGridViewActiveTaskNPManager();
            }
        }

        private void UpdateGridViewActiveTaskNPManager()
        {
            String strSqlQueryForActiveTasks = "select [dbo].[tbl_task].[whoid], [dbo].[tbl_task].[IndividualName], " +
               "[dbo].[tbl_task_assigned_to].[User_Name], [dbo].[tbl_task_created_by].[User_Name], " +
               "[dbo].[tbl_task].[whatid], " +
               "[dbo].[tbl_task].[Subject], [dbo].[tbl_task].[DueDate], [dbo].[tbl_task].[CreateDate], " +
               "[dbo].[tbl_task].[ActivityDate], [dbo].[tbl_task].[Comment], [dbo].[tbl_task].[Solution], " +
               "[dbo].[tbl_task_status_code].[TaskStatusValue], [dbo].[tbl_task_priority_code].[TaskPriorityValue] " +
               "from [dbo].[tbl_task] " +
               "inner join [dbo].[tbl_task_assigned_to] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_task_assigned_to].[User_Id] " +
               "inner join [dbo].[tbl_task_created_by] on [dbo].[tbl_task].[CreatedById] = [dbo].[tbl_task_created_by].[User_Id] " +
               "inner join [dbo].[tbl_task_status_code] on [dbo].[tbl_task].[Status] = [dbo].[tbl_task_status_code].[TaskStatusCode] " +
               "inner join [dbo].[tbl_task_priority_code] on [dbo].[tbl_task].[Priority] = [dbo].[tbl_task_priority_code].[TaskPriorityCode] " +
               "inner join [dbo].[tbl_assigned_to_role] on [dbo].[tbl_task_assigned_to].[User_Role_Id] = [dbo].[tbl_assigned_to_role].[User_Role_Id] " +
               "inner join [dbo].[tbl_created_by_role] on [dbo].[tbl_task_created_by].[User_Role_Id] = [dbo].[tbl_created_by_role].[User_Role_Id]" +
               "where ([dbo].[tbl_task].[AssignedTo] = @AssignedToId or " +
               "[dbo].[tbl_task].[CreatedById] = @CreatedById) and " +
               "([dbo].[tbl_assigned_to_role].[User_Role_Id] = 6 or " +
               "[dbo].[tbl_created_by_role].[User_Role_Id] = 6 or " +
               "[dbo].[tbl_assigned_to_role].[User_Role_Id] = 3 or" +
               "[dbo].[tbl_created_by_role].[User_Role_Id] = 3) and " +
               "[dbo].[tbl_task].[Status] <> 2 and [dbo].[tbl_task].[Status] <> 5";

            SqlCommand cmdQueryForActiveTask = new SqlCommand(strSqlQueryForActiveTasks, connRN);
            cmdQueryForActiveTask.CommandType = CommandType.Text;

            cmdQueryForActiveTask.Parameters.AddWithValue("@AssignedToId", nLoggedUserId);
            cmdQueryForActiveTask.Parameters.AddWithValue("@CreatedById", nLoggedUserId);

            SqlDependency dependency = new SqlDependency(cmdQueryForActiveTask);
            dependency.OnChange += new OnChangeEventHandler(OnActiveTaskNPManagerChange);


            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            if (IsHandleCreated) ClearAllRowActiveTaskNPManager();
            else gvNPManagerActiveTask.Rows.Clear();
            SqlDataReader rdrActiveTask = cmdQueryForActiveTask.ExecuteReader();
            if (rdrActiveTask.HasRows)
            {
                while (rdrActiveTask.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();
                    if (!rdrActiveTask.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(0) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTask.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(1) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTask.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(2) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTask.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(3) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTask.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(4) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTask.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(5) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTask.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = rdrActiveTask.GetDateTime(6).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrActiveTask.IsDBNull(7)) row.Cells.Add(new CalendarCell { Value = rdrActiveTask.GetDateTime(7).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrActiveTask.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = rdrActiveTask.GetDateTime(8).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrActiveTask.IsDBNull(9)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(9) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTask.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(10) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTask.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(11) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTask.IsDBNull(12)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(12) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (IsHandleCreated) AddRowToActiveTaskNPManagerSafely(row);
                    else gvNPManagerActiveTask.Rows.Add(row);

                }
            }
            rdrActiveTask.Close();
            if (connRN.State == ConnectionState.Open) connRN.Close();
        }

        private void AddRowToActiveTaskRNManagerSafely(DataGridViewRow row)
        {
            gvRNManagerActiveTask.BeginInvoke(new AddRowToActiveTaskRNManager(AddRowActiveTaskRNManager), row);
        }

        private void RemoveRowActiveTaskRNManagerSafely(int nRow)
        {
            gvRNManagerActiveTask.BeginInvoke(new RemoveActiveTaskRNManager(RemoveRowActiveTaskRNManager), nRow);
        }

        private void RemoveAllActiveTaskRNManagerSafely()
        {
            gvRNManagerActiveTask.BeginInvoke(new RemoveAllActiveTaskRNManager(RemoveAllRowActiveTaskRNManager));
        }

        private void AddRowActiveTaskRNManager(DataGridViewRow row)
        {
            gvRNManagerActiveTask.Rows.Add(row);
        }

        private void RemoveRowActiveTaskRNManager(int i)
        {
            gvRNManagerActiveTask.Rows.RemoveAt(i);
        }

        private void RemoveAllRowActiveTaskRNManager()
        {
            gvRNManagerActiveTask.Rows.Clear();
        }

        private void AddRowToActiveTaskRNStaffSafely(DataGridViewRow row)
        {
            gvRNStaffActiveTask.BeginInvoke(new AddRowToActiveTaskRNStaff(AddRowActiveTaskRNStaff), row);
        }

        private void RemoveRowActiveTaskRNStaffSafely(int nRow)
        {
            gvRNStaffActiveTask.BeginInvoke(new RemoveActiveTaskRNStaff(RemoveRowActiveTaskRNStaff), nRow);
        }

        private void RemoveAllRowActiveTaskRNStaffSafely()
        {
            gvRNStaffActiveTask.BeginInvoke(new RemoveAllActiveTaskRNStaff(RemoveAllRowActiveTaskRNStaff));
        }

        private void AddRowActiveTaskRNStaff(DataGridViewRow row)
        {
            gvRNStaffActiveTask.Rows.Add(row);
        }

        private void RemoveRowActiveTaskRNStaff(int i)
        {
            gvRNStaffActiveTask.Rows.RemoveAt(i);
        }

        private void RemoveAllRowActiveTaskRNStaff()
        {
            gvRNStaffActiveTask.Rows.Clear();
        }

        private void OnActiveTaskRNManagerChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnActiveTaskRNManagerChange;

                UpdateGridViewActiveTaskRNManager();
            }
        }

        private void UpdateGridViewActiveTaskRNManager()
        {

            String strSqlQueryForActiveTasks = "select [dbo].[tbl_task].[whoid], [dbo].[tbl_task].[IndividualName], " +
                                               "[dbo].[tbl_task_assigned_to].[User_Name], [dbo].[tbl_task_created_by].[User_Name], " +
                                               "[dbo].[tbl_task].[whatid], " +
                                               "[dbo].[tbl_task].[Subject], [dbo].[tbl_task].[DueDate], [dbo].[tbl_task].[CreateDate], " +
                                               "[dbo].[tbl_task].[ActivityDate], [dbo].[tbl_task].[Comment], [dbo].[tbl_task].[Solution], " +
                                               "[dbo].[tbl_task_status_code].[TaskStatusValue], [dbo].[tbl_task_priority_code].[TaskPriorityValue] " +
                                               "from [dbo].[tbl_task] " +
                                               "inner join [dbo].[tbl_task_assigned_to] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_task_assigned_to].[User_Id] " +
                                               "inner join [dbo].[tbl_task_created_by] on [dbo].[tbl_task].[CreatedById] = [dbo].[tbl_task_created_by].[User_Id] " +
                                               "inner join [dbo].[tbl_task_status_code] on [dbo].[tbl_task].[Status] = [dbo].[tbl_task_status_code].[TaskStatusCode] " +
                                               "inner join [dbo].[tbl_task_priority_code] on [dbo].[tbl_task].[Priority] = [dbo].[tbl_task_priority_code].[TaskPriorityCode] " +
                                               "inner join [dbo].[tbl_assigned_to_role] on [dbo].[tbl_task_assigned_to].[User_Role_Id] = [dbo].[tbl_assigned_to_role].[User_Role_Id] " +
                                               "inner join [dbo].[tbl_created_by_role] on [dbo].[tbl_task_created_by].[User_Role_Id] = [dbo].[tbl_created_by_role].[User_Role_Id]" +
                                               "where ([dbo].[tbl_task].[AssignedTo] = @AssignedToId or " +
                                               "[dbo].[tbl_task].[CreatedById] = @CreatedById) and " +
                                               "([dbo].[tbl_assigned_to_role].[User_Role_Id] = 5 or " +
                                               "[dbo].[tbl_created_by_role].[User_Role_Id] = 5 or" +
                                               "[dbo].[tbl_assigned_to_role].[User_Role_Id] = 2 or" +
                                               "[dbo].[tbl_created_by_role].[User_Role_Id] = 2) and " +
                                               "[dbo].[tbl_task].[Status] <> 2 and [dbo].[tbl_task].[Status] <> 5";

            SqlCommand cmdQueryForActiveTasks = new SqlCommand(strSqlQueryForActiveTasks, connRN);
            cmdQueryForActiveTasks.CommandType = CommandType.Text;

            cmdQueryForActiveTasks.Parameters.AddWithValue("@AssignedToId", nLoggedUserId);
            cmdQueryForActiveTasks.Parameters.AddWithValue("@CreatedById", nLoggedUserId);

            SqlDependency dependency = new SqlDependency(cmdQueryForActiveTasks);
            dependency.OnChange += new OnChangeEventHandler(OnActiveTaskRNManagerChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();

            if (IsHandleCreated) RemoveAllActiveTaskRNManagerSafely();
            else gvRNManagerActiveTask.Rows.Clear();

            SqlDataReader rdrActiveTasks = cmdQueryForActiveTasks.ExecuteReader();
            if (rdrActiveTasks.HasRows)
            {
                while (rdrActiveTasks.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();
                    if (!rdrActiveTasks.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(0) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(1) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(2) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(3) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(4) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(5) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = rdrActiveTasks.GetDateTime(6).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(7)) row.Cells.Add(new CalendarCell { Value = rdrActiveTasks.GetDateTime(7).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = rdrActiveTasks.GetDateTime(8).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(9)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(9) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(10) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(11) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(12)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(12) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (IsHandleCreated) AddRowToActiveTaskRNManagerSafely(row);
                    else gvRNManagerActiveTask.Rows.Add(row);
                }
            }
            rdrActiveTasks.Close();
            if (connRN.State == ConnectionState.Open) connRN.Close();
        }

        private void AddRowToCompleteTaskRNManagerSafely(DataGridViewRow row)
        {
            gvRNManagerCompleteTask.BeginInvoke(new AddRowToCompleteTaskRNManager(AddRowCompleteTaskRNManager), row);
        }

        private void RemoveRowCompleteTaskRNManagerSafely(int nRow)
        {
            gvRNManagerCompleteTask.BeginInvoke(new RemoveCompleteTaskRNManager(RemoveRowCompleteTaskRNManager), nRow);
        }

        private void ClearCompleteTaskRNManagerSafely()
        {
            gvRNManagerCompleteTask.BeginInvoke(new RemoveAllCompleteTaskRNManager(RemoveAllRowCompleteTaskRNManager));
        }

        private void AddRowCompleteTaskRNManager(DataGridViewRow row)
        {
            gvRNManagerCompleteTask.Rows.Add(row);
        }

        private void RemoveRowCompleteTaskRNManager(int nRow)
        {
            gvRNManagerCompleteTask.Rows.RemoveAt(nRow);
        }

        private void RemoveAllRowCompleteTaskRNManager()
        {
            gvRNManagerCompleteTask.Rows.Clear();
        }




        private void OnCompleteTaskRNManagerChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnCompleteTaskRNManagerChange;

                UpdateGridViewCompleteTaskRNManager();
            }
        }

        private void UpdateGridViewCompleteTaskRNManager()
        {
            String strSqlQueryForCompleteTask = "select [dbo].[tbl_task].[whoid], [dbo].[tbl_task].[IndividualName], [dbo].[tbl_task].[Subject], " +
                                                "[dbo].[tbl_task].[CreateDate], [dbo].[tbl_task].[ActivityDate], [dbo].[tbl_task].[Comment], [dbo].[tbl_task].[Solution] " +
                                                "from [dbo].[tbl_task] " +
                                                "inner join [dbo].[tbl_task_assigned_to] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_task_assigned_to].[User_Id] " +
                                                "inner join [dbo].[tbl_task_created_by] on [dbo].[tbl_task].[CreatedById] = [dbo].[tbl_task_created_by].[User_Id] " +
                                                "inner join [dbo].[tbl_assigned_to_role] on [dbo].[tbl_task_assigned_to].[User_Role_Id] = [dbo].[tbl_assigned_to_role].[User_Role_Id] " +
                                                "inner join [dbo].[tbl_created_by_role] on [dbo].[tbl_task_created_by].[User_Role_Id] = [dbo].[tbl_created_by_role].[User_Role_Id]" +
                                                "where ([dbo].[tbl_task].[AssignedTo] = @AssignedToId or " +
                                                "[dbo].[tbl_task].[CreatedById] = @CreatedById) and " +
                                                "([dbo].[tbl_assigned_to_role].[User_Role_Id] = 5 or " +
                                                "[dbo].[tbl_created_by_role].[User_Role_Id] = 5 or" +
                                                "[dbo].[tbl_assigned_to_role].[User_Role_Id] = 2 or " +
                                                "[dbo].[tbl_created_by_role].[User_Role_Id] = 2) and " +
                                                "([dbo].[tbl_task].[Status] = 2 or [dbo].[tbl_task].[Status] = 5)";

            SqlCommand cmdQueryForCompleteTask = new SqlCommand(strSqlQueryForCompleteTask, connRN);
            cmdQueryForCompleteTask.CommandType = CommandType.Text;

            cmdQueryForCompleteTask.Parameters.AddWithValue("@AssignedToId", nLoggedUserId);
            cmdQueryForCompleteTask.Parameters.AddWithValue("@CreatedById", nLoggedUserId);

            SqlDependency dependencyComplete = new SqlDependency(cmdQueryForCompleteTask);
            dependencyComplete.OnChange += new OnChangeEventHandler(OnCompleteTaskRNManagerChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();

            SqlDataReader rdrCompleteTask = cmdQueryForCompleteTask.ExecuteReader();

            if (IsHandleCreated) ClearCompleteTaskRNManagerSafely();
            else gvRNManagerCompleteTask.Rows.Clear();
            if (rdrCompleteTask.HasRows)
            {
                while (rdrCompleteTask.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();
                    if (!rdrCompleteTask.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTask.GetString(0) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrCompleteTask.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTask.GetString(1) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrCompleteTask.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTask.GetString(2) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrCompleteTask.IsDBNull(3)) row.Cells.Add(new CalendarCell { Value = rdrCompleteTask.GetDateTime(3).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrCompleteTask.IsDBNull(4)) row.Cells.Add(new CalendarCell { Value = rdrCompleteTask.GetDateTime(4).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrCompleteTask.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTask.GetString(5) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrCompleteTask.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTask.GetString(6) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (IsHandleCreated) AddRowToCompleteTaskRNManagerSafely(row);
                    else gvRNManagerCompleteTask.Rows.Add(row);
                }
            }
            rdrCompleteTask.Close();
            if (connRN.State == ConnectionState.Open) connRN.Close();
        }

        private void AddRowToCompleteTaskRNStaffSafely(DataGridViewRow row)
        {
            gvRNStaffCompleteTask.BeginInvoke(new AddRowToCompleteTaskRNStaff(AddRowCompleteTaskRNStaff), row);
        }

        private void RemoveRowCompleteTaskRNStaffSafely(int nRow)
        {
            gvRNStaffCompleteTask.BeginInvoke(new RemoveCompleteTaskRNStaff(RemoveRowCompleteTaskRNStaff), nRow);
        }

        private void ClearCompleteTaskRNStaffSafely()
        {
            gvRNStaffCompleteTask.BeginInvoke(new RemoveAllCompleteTaskRNStaff(RemoveAllRowCompleteTaskRNStaff));
        }

        private void AddRowCompleteTaskRNStaff(DataGridViewRow row)
        {
            gvRNStaffCompleteTask.Rows.Add(row);
        }

        private void RemoveRowCompleteTaskRNStaff(int nRow)
        {
            gvRNStaffCompleteTask.Rows.RemoveAt(nRow);
        }

        private void RemoveAllRowCompleteTaskRNStaff()
        {
            gvRNStaffCompleteTask.Rows.Clear();
        }

        private void OnCompleteTaskRNStaffChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnCompleteTaskRNStaffChange;

                UpdateGridViewCompleteTaskRNStaff();
            }
        }

        private void UpdateGridViewCompleteTaskRNStaff()
        {
            String strSqlQueryForCompleteTask = "select [dbo].[tbl_task].[whoid], [dbo].[tbl_task].[IndividualName], [dbo].[tbl_task].[Subject], " +
                            "[dbo].[tbl_task].[CreateDate], [dbo].[tbl_task].[ActivityDate], [dbo].[tbl_task].[Comment], [dbo].[tbl_task].[Solution] " +
                            "from [dbo].[tbl_task] " +
                            "inner join [dbo].[tbl_task_assigned_to] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_task_assigned_to].[User_Id] " +
                            "inner join [dbo].[tbl_task_created_by] on [dbo].[tbl_task].[CreatedById] = [dbo].[tbl_task_created_by].[User_Id] " +
                            "inner join [dbo].[tbl_assigned_to_role] on [dbo].[tbl_task_assigned_to].[User_Role_Id] = [dbo].[tbl_assigned_to_role].[User_Role_Id] " +
                            "inner join [dbo].[tbl_created_by_role] on [dbo].[tbl_task_created_by].[User_Role_Id] = [dbo].[tbl_created_by_role].[User_Role_Id]" +
                            "where ([dbo].[tbl_task].[AssignedTo] = @AssignedToId or " +
                            "[dbo].[tbl_task].[CreatedById] = @CreatedById) and " +
                            "([dbo].[tbl_task].[Status] = 2 or [dbo].[tbl_task].[Status] = 5)";

            SqlCommand cmdQueryForCompleteTask = new SqlCommand(strSqlQueryForCompleteTask, connRN);
            cmdQueryForCompleteTask.CommandType = CommandType.Text;

            cmdQueryForCompleteTask.Parameters.AddWithValue("@AssignedToId", nLoggedUserId);
            cmdQueryForCompleteTask.Parameters.AddWithValue("@CreatedById", nLoggedUserId);

            SqlDependency dependencyCompleteTasks = new SqlDependency(cmdQueryForCompleteTask);
            dependencyCompleteTasks.OnChange += new OnChangeEventHandler(OnCompleteTaskRNStaffChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            if (IsHandleCreated) ClearCompleteTaskRNStaffSafely();
            else gvRNStaffCompleteTask.Rows.Clear();
            SqlDataReader rdrCompleteTasks = cmdQueryForCompleteTask.ExecuteReader();
            if (rdrCompleteTasks.HasRows)
            {
                while (rdrCompleteTasks.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();
                    if (!rdrCompleteTasks.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTasks.GetString(0) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrCompleteTasks.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTasks.GetString(1) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrCompleteTasks.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTasks.GetString(2) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrCompleteTasks.IsDBNull(3)) row.Cells.Add(new CalendarCell { Value = rdrCompleteTasks.GetDateTime(3).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrCompleteTasks.IsDBNull(4)) row.Cells.Add(new CalendarCell { Value = rdrCompleteTasks.GetDateTime(4).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrCompleteTasks.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTasks.GetString(5) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrCompleteTasks.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTasks.GetString(6) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (IsHandleCreated) AddRowToCompleteTaskRNStaffSafely(row);
                    else gvRNStaffCompleteTask.Rows.Add(row);
                }
            }
            rdrCompleteTasks.Close();
            if (connRN.State == ConnectionState.Open) connRN.Close();
        }

        private void OnActiveTaskRNStaffChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnActiveTaskRNStaffChange;

                UpdateGridViewActiveTaskRNStaff();
            }
        }

        private void UpdateGridViewActiveTaskRNStaff()
        {
            String strSqlQueryForActiveTasks = "select [dbo].[tbl_task].[whoid], [dbo].[tbl_task].[IndividualName], " +
                                   "[dbo].[tbl_task_assigned_to].[User_Name], [dbo].[tbl_task_created_by].[User_Name], " +
                                   "[dbo].[tbl_task].[whatid], " +
                                   "[dbo].[tbl_task].[Subject], [dbo].[tbl_task].[DueDate], [dbo].[tbl_task].[CreateDate], " +
                                   "[dbo].[tbl_task].[ActivityDate], [dbo].[tbl_task].[Comment], [dbo].[tbl_task].[Solution], " +
                                   "[dbo].[tbl_task_status_code].[TaskStatusValue], [dbo].[tbl_task_priority_code].[TaskPriorityValue] " +
                                   "from [dbo].[tbl_task] " +
                                   "inner join [dbo].[tbl_task_created_by] on [dbo].[tbl_task].[CreatedById] = [dbo].[tbl_task_created_by].[User_Id] " +
                                   "inner join [dbo].[tbl_task_assigned_to] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_task_assigned_to].[User_Id] " +
                                   "inner join [dbo].[tbl_task_status_code] on [dbo].[tbl_task].[Status] = [dbo].[tbl_task_status_code].[TaskStatusCode] " +
                                   "inner join [dbo].[tbl_task_priority_code] on [dbo].[tbl_task].[Priority] = [dbo].[tbl_task_priority_code].[TaskPriorityCode] " +
                                   "where ([dbo].[tbl_task].[AssignedTo] = @AssignedToId or [dbo].[tbl_task].[CreatedById] = @CreatedById) and " +
                                   "[dbo].[tbl_task].[Status] <> 2 and [dbo].[tbl_task].[Status] <> 5";

            SqlCommand cmdQueryForActiveTasks = new SqlCommand(strSqlQueryForActiveTasks, connRN);
            cmdQueryForActiveTasks.CommandType = CommandType.Text;

            cmdQueryForActiveTasks.Parameters.AddWithValue("@AssignedToId", nLoggedUserId);
            cmdQueryForActiveTasks.Parameters.AddWithValue("@CreatedById", nLoggedUserId);

            SqlDependency dependency = new SqlDependency(cmdQueryForActiveTasks);
            dependency.OnChange += new OnChangeEventHandler(OnActiveTaskRNStaffChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();

            if (IsHandleCreated) RemoveAllRowActiveTaskRNStaffSafely();
            else gvRNStaffActiveTask.Rows.Clear();

            SqlDataReader rdrActiveTasks = cmdQueryForActiveTasks.ExecuteReader();
            if (rdrActiveTasks.HasRows)
            {
                while (rdrActiveTasks.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();
                    if (!rdrActiveTasks.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(0) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(1) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(2) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(3) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(4) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(5) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = rdrActiveTasks.GetDateTime(6).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(7)) row.Cells.Add(new CalendarCell { Value = rdrActiveTasks.GetDateTime(7).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = rdrActiveTasks.GetDateTime(8).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(9)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(9) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(10) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(11) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrActiveTasks.IsDBNull(12)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(12) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (IsHandleCreated) AddRowToActiveTaskRNStaffSafely(row);
                    else gvRNStaffActiveTask.Rows.Add(row);
                }
            }
            rdrActiveTasks.Close();
            if (connRN.State == ConnectionState.Open) connRN.Close();
        }

        private void frmCMMManager_Load(object sender, EventArgs e)
        {
            //tbCMMManager.TabPages.Remove(tbpgDashboardFDManager);
            //tbCMMManager.TabPages.Remove(tbpgDashboardFDStaff);
            //tbCMMManager.TabPages.Remove(tbpgDashboardNPManager);
            //tbCMMManager.TabPages.Remove(tbpgDashboardNPStaff);
            //tbCMMManager.TabPages.Remove(tbpgDashboardRNManager);
            //tbCMMManager.TabPages.Remove(tbpgIndividual);
            //tbCMMManager.TabPages.Remove(tbpgCaseView);
            //tbCMMManager.TabPages.Remove(tbpgCreateCase);
            //tbCMMManager.TabPages.Remove(tbpgMedicalBill);
            //tbCMMManager.TabPages.Remove(tbpgIllnessView);

            frmLogin frmLogin = new frmLogin();
            frmLogin.StartPosition = FormStartPosition.CenterParent;

            Boolean bLoginSuccess = false;

            for (int i = 0; i < 3; i++)
            {
                DialogResult loginResult = frmLogin.ShowDialog();

                if (loginResult == DialogResult.OK)
                {
                    bLoginSuccess = true;
                    nLoggedUserId = frmLogin.nLoggedUserId;
                    LoggedInUserName = frmLogin.LoggedInUserName;
                    LoggedInUserRole = frmLogin.nLoggedUserRole;
                    LoggedInUserDepartment = frmLogin.nLoggedInUserDepartmentId;

                    break;
                }
                else if (loginResult == DialogResult.Cancel)
                {
                    MessageBox.Show("Login Canceled", "Alert");
                    break;
                }
                else if (loginResult == DialogResult.Retry)
                {
                    continue;
                }
            }

            if (bLoginSuccess == false) Close();

            // Browse buttons for Case Creation tab
            if (bLoginSuccess == true)
            {
                //tbCMMManager.TabPages.Remove(tbpgDashboardFDManager);
                //tbCMMManager.TabPages.Remove(tbpgDashboardFDStaff);
                //tbCMMManager.TabPages.Remove(tbpgDashboardNPManager);
                //tbCMMManager.TabPages.Remove(tbpgDashboardNPStaff);
                //tbCMMManager.TabPages.Remove(tbpgDashboardRNManager);
                //tbCMMManager.TabPages.Remove(tbpgIndividual);
                //tbCMMManager.TabPages.Remove(tbpgCaseView);
                //tbCMMManager.TabPages.Remove(tbpgCreateCase);
                //tbCMMManager.TabPages.Remove(tbpgMedicalBill);

                DisableIndividualView();
                DisableCaseView();
                DisableIllnessView();
                DisableIncidentView();
                DisableMedBillView();
                DisableCaseForm();
                DisableMedicalBillForm();

                btnIndViewUpdateUpperRight.Enabled = false;
                //btnIndViewUpdateLowerRight.Enabled = false;
                btnCaseCreationSaveUpper.Enabled = false;
                //btnCaseCreationLowerSave.Enabled = false;
                btnMedBillCreatePgUpperSave.Enabled = false;
                //btnMedBillCreationPgLowerSave.Enabled = false;

                lblPrescriptionName.Visible = false;
                lblPrescriptionDescription.Visible = false;
                lblPrescriptionNote.Visible = false;
                lblNumberOfMedication.Visible = false;

                txtPrescriptionName.Visible = false;
                txtPrescriptionDescription.Visible = false;
                txtPrescriptionNote.Visible = false;
                txtNumberOfMedication.Visible = false;

                lblNumberOfPhysicalTheraph.Visible = false;
                txtNumPhysicalTherapy.Visible = false;
                lblPhysicalTherapyRxNote.Visible = false;
                txtPhysicalTherapyRxNote.Visible = false;

                rbInpatient.Visible = true;
                rbOutpatient.Visible = true;

                lblMedBillNote.Visible = true;
                txtMedBillNote.Visible = true;

                lblPendingReason.Visible = true;
                comboPendingReason.Visible = true;

                lblIneligibleReason.Visible = true;
                comboIneligibleReason.Visible = true;

                if (LoggedInUserRole == UserRole.SuperAdmin)
                {
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNStaff);
                }

                if (LoggedInUserRole == UserRole.NPManager)
                {
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPStaff);

                    String strSqlQueryForActiveTasks = "select [dbo].[tbl_task].[whoid], [dbo].[tbl_task].[IndividualName], " +
                                   "[dbo].[tbl_task_assigned_to].[User_Name], [dbo].[tbl_task_created_by].[User_Name], " +
                                   "[dbo].[tbl_task].[whatid], " +
                                   "[dbo].[tbl_task].[Subject], [dbo].[tbl_task].[DueDate], [dbo].[tbl_task].[CreateDate], " +
                                   "[dbo].[tbl_task].[ActivityDate], [dbo].[tbl_task].[Comment], [dbo].[tbl_task].[Solution], " +
                                   "[dbo].[tbl_task_status_code].[TaskStatusValue], [dbo].[tbl_task_priority_code].[TaskPriorityValue] " +
                                   "from [dbo].[tbl_task] " +
                                   "inner join [dbo].[tbl_task_assigned_to] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_task_assigned_to].[User_Id] " +
                                   "inner join [dbo].[tbl_task_created_by] on [dbo].[tbl_task].[CreatedById] = [dbo].[tbl_task_created_by].[User_Id] " +
                                   "inner join [dbo].[tbl_task_status_code] on [dbo].[tbl_task].[Status] = [dbo].[tbl_task_status_code].[TaskStatusCode] " +
                                   "inner join [dbo].[tbl_task_priority_code] on [dbo].[tbl_task].[Priority] = [dbo].[tbl_task_priority_code].[TaskPriorityCode] " +
                                   "inner join [dbo].[tbl_assigned_to_role] on [dbo].[tbl_task_assigned_to].[User_Role_Id] = [dbo].[tbl_assigned_to_role].[User_Role_Id] " +
                                   "inner join [dbo].[tbl_created_by_role] on [dbo].[tbl_task_created_by].[User_Role_Id] = [dbo].[tbl_created_by_role].[User_Role_Id]" +
                                   "where ([dbo].[tbl_task].[AssignedTo] = @AssignedToId or " +
                                   "[dbo].[tbl_task].[CreatedById] = @CreatedById) and " +
                                   "([dbo].[tbl_assigned_to_role].[User_Role_Id] = 6 or " +
                                   "[dbo].[tbl_created_by_role].[User_Role_Id] = 6 or " +
                                   "[dbo].[tbl_assigned_to_role].[User_Role_Id] = 3 or" +
                                   "[dbo].[tbl_created_by_role].[User_Role_Id] = 3) and " +
                                   "[dbo].[tbl_task].[Status] <> 2 and [dbo].[tbl_task].[Status] <> 5";

                    SqlCommand cmdQueryForActiveTask = new SqlCommand(strSqlQueryForActiveTasks, connRN);
                    cmdQueryForActiveTask.CommandType = CommandType.Text;

                    cmdQueryForActiveTask.Parameters.AddWithValue("@AssignedToId", nLoggedUserId);
                    cmdQueryForActiveTask.Parameters.AddWithValue("@CreatedById", nLoggedUserId);

                    SqlDependency dependency = new SqlDependency(cmdQueryForActiveTask);
                    dependency.OnChange += new OnChangeEventHandler(OnActiveTaskNPManagerChange);

                    if (connRN.State != ConnectionState.Closed)
                    {
                        connRN.Close();
                        connRN.Open();
                    }
                    else if (connRN.State == ConnectionState.Closed) connRN.Open();
                    gvNPManagerActiveTask.Rows.Clear();
                    SqlDataReader rdrActiveTask = cmdQueryForActiveTask.ExecuteReader();
                    if (rdrActiveTask.HasRows)
                    {
                        while (rdrActiveTask.Read())
                        {
                            DataGridViewRow row = new DataGridViewRow();
                            if (!rdrActiveTask.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(0) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTask.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(1) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTask.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(2) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTask.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(3) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTask.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(4) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTask.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(5) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTask.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = rdrActiveTask.GetDateTime(6).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrActiveTask.IsDBNull(7)) row.Cells.Add(new CalendarCell { Value = rdrActiveTask.GetDateTime(7).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrActiveTask.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = rdrActiveTask.GetDateTime(8).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrActiveTask.IsDBNull(9)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(9) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTask.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(10) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTask.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(11) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTask.IsDBNull(12)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTask.GetString(12) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                            gvNPManagerActiveTask.Rows.Add(row);

                        }
                    }
                    rdrActiveTask.Close();
                    if (connRN.State == ConnectionState.Open) connRN.Close();

                }

                if (LoggedInUserRole == UserRole.RNManager)
                {
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNStaff);

                    String strSqlQueryForIncompleteCases = "select [dbo].[tbl_case].[Case_Name], [dbo].[tbl_case].[Contact_ID], " +
                                                           "[dbo].[tbl_CreateStaff].[Staff_Name], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                           "[dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[POP_Form], " +
                                                           "[dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[AddBill_Form] " +
                                                           "from [dbo].[tbl_case] " +
                                                           "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_case].[CreateStaff] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                                           "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_case].[ModifiStaff] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                                           "where ([dbo].[tbl_case].[NPF_Form] = 0 or " +
                                                           "[dbo].[tbl_case].[IB_Form] = 0 or " +
                                                           "[dbo].[tbl_case].[POP_Form] = 0) and " +
                                                           "[dbo].[tbl_case].[IsDeleted] = 0";

                    SqlCommand cmdQueryForIncompleteCase = new SqlCommand(strSqlQueryForIncompleteCases, connRN);
                    cmdQueryForIncompleteCase.CommandType = CommandType.Text;

                    if (connRN.State != ConnectionState.Closed)
                    {
                        connRN.Close();
                        connRN.Open();
                    }
                    else if (connRN.State == ConnectionState.Closed) connRN.Open();
                    SqlDataReader rdrImcompleteCases = cmdQueryForIncompleteCase.ExecuteReader();
                    gvRNManagerIncompleteCase.Rows.Clear();
                    if (rdrImcompleteCases.HasRows)
                    {
                        while (rdrImcompleteCases.Read())
                        {
                            DataGridViewRow row = new DataGridViewRow();
                            if (!rdrImcompleteCases.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrImcompleteCases.GetString(0) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrImcompleteCases.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrImcompleteCases.GetString(1) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrImcompleteCases.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrImcompleteCases.GetString(2) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrImcompleteCases.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrImcompleteCases.GetString(3) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrImcompleteCases.IsDBNull(4))
                            {
                                Boolean bNPF_Form = rdrImcompleteCases.GetBoolean(4);
                                if (bNPF_Form)
                                {
                                    DataGridViewCheckBoxCell chkNPFCell = new DataGridViewCheckBoxCell();
                                    chkNPFCell.Value = bNPF_Form;
                                    row.Cells.Add(chkNPFCell);
                                }
                                else
                                {
                                    DataGridViewCheckBoxCell chkNPFCell = new DataGridViewCheckBoxCell();
                                    chkNPFCell.Value = bNPF_Form;
                                    chkNPFCell.Style.BackColor = Color.Pink;
                                    row.Cells.Add(chkNPFCell);
                                }
                            }
                            else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                            if (!rdrImcompleteCases.IsDBNull(5))
                            {
                                Boolean bIB_Form = rdrImcompleteCases.GetBoolean(5);
                                if (bIB_Form)
                                {
                                    DataGridViewCheckBoxCell chkIBCell = new DataGridViewCheckBoxCell();
                                    chkIBCell.Value = bIB_Form;
                                    row.Cells.Add(chkIBCell);
                                }
                                else
                                {
                                    DataGridViewCheckBoxCell chkIBCell = new DataGridViewCheckBoxCell();
                                    chkIBCell.Style.BackColor = Color.Pink;
                                    chkIBCell.Value = bIB_Form;
                                    row.Cells.Add(chkIBCell);
                                }
                            }
                            else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                            if (!rdrImcompleteCases.IsDBNull(6))
                            {
                                Boolean bPOP_Form = rdrImcompleteCases.GetBoolean(6);
                                if (bPOP_Form)
                                {
                                    DataGridViewCheckBoxCell chkPOPCell = new DataGridViewCheckBoxCell();
                                    chkPOPCell.Value = bPOP_Form;
                                    row.Cells.Add(chkPOPCell);
                                }
                                else
                                {
                                    DataGridViewCheckBoxCell chkPOPCell = new DataGridViewCheckBoxCell();
                                    chkPOPCell.Style.BackColor = Color.Pink;
                                    chkPOPCell.Value = bPOP_Form;
                                    row.Cells.Add(chkPOPCell);
                                }
                            }
                            else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                            if (!rdrImcompleteCases.IsDBNull(7))
                            {
                                Boolean bMedRec_Form = rdrImcompleteCases.GetBoolean(7);
                                if (bMedRec_Form)
                                {
                                    DataGridViewCheckBoxCell chkMedRecCell = new DataGridViewCheckBoxCell();
                                    chkMedRecCell.Value = bMedRec_Form;
                                    row.Cells.Add(chkMedRecCell);
                                }
                                else
                                {
                                    DataGridViewCheckBoxCell chkMedRecCell = new DataGridViewCheckBoxCell();
                                    chkMedRecCell.Style.BackColor = Color.Pink;
                                    chkMedRecCell.Value = bMedRec_Form;
                                    row.Cells.Add(chkMedRecCell);
                                }
                            }
                            else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                            if (!rdrImcompleteCases.IsDBNull(8))
                            {
                                Boolean bUnknown = rdrImcompleteCases.GetBoolean(8);
                                if (bUnknown)
                                {
                                    DataGridViewCheckBoxCell chkUnknownCell = new DataGridViewCheckBoxCell();
                                    chkUnknownCell.Value = bUnknown;
                                    row.Cells.Add(chkUnknownCell);
                                }
                                else
                                {
                                    DataGridViewCheckBoxCell chkUnknownCell = new DataGridViewCheckBoxCell();
                                    chkUnknownCell.Style.BackColor = Color.Pink;
                                    chkUnknownCell.Value = bUnknown;
                                    row.Cells.Add(chkUnknownCell);
                                }
                            }
                            else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                            if (!rdrImcompleteCases.IsDBNull(9))
                            {
                                Boolean bAddBill_Form = rdrImcompleteCases.GetBoolean(9);
                                if (bAddBill_Form)
                                {
                                    DataGridViewCheckBoxCell chkAddBillCell = new DataGridViewCheckBoxCell();
                                    chkAddBillCell.Value = bAddBill_Form;
                                    row.Cells.Add(chkAddBillCell);
                                }
                                else
                                {
                                    DataGridViewCheckBoxCell chkAddBillCell = new DataGridViewCheckBoxCell();
                                    chkAddBillCell.Style.BackColor = Color.Pink;
                                    chkAddBillCell.Value = bAddBill_Form;
                                    row.Cells.Add(chkAddBillCell);
                                }
                            }
                            else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                            gvRNManagerIncompleteCase.Rows.Add(row);
                        }
                    }
                    rdrImcompleteCases.Close();
                    if (connRN.State == ConnectionState.Open) connRN.Close();

                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    ///
                    //String strSqlQueryForMedBillPending = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill].[Individual_Id], " +
                    //                                      "[dbo].[tbl_CreateStaff].[Staff_Name], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                    //                                      "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_MedicalProvider].[NAME], [dbo].[tbl_pending_reason].[name] " +
                    //                                      "from [dbo].[tbl_medbill] " +
                    //                                      "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                    //                                      "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                    //                                      "inner join [dbo].[tbl_MedicalProvider] on [dbo].[tbl_medbill].[MedicalProvider_Id] = [dbo].[tbl_MedicalProvider].[ID] " +
                    //                                      "inner join [dbo].[tbl_pending_reason] on [dbo].[tbl_medbill].[PendingReason] = [dbo].[tbl_pending_reason].[ID] " +
                    //                                      "where [dbo].[tbl_medbill].[BillStatus] = 0";

                    //SqlCommand cmdQueryForMedBillPending = new SqlCommand(strSqlQueryForMedBillPending, connRN);
                    //cmdQueryForMedBillPending.CommandType = CommandType.Text;

                    //if (connRN.State != ConnectionState.Closed)
                    //{
                    //    connRN.Close();
                    //    connRN.Open();
                    //}
                    //else if (connRN.State == ConnectionState.Closed) connRN.Open();
                    //gvRNManagerMedBillPending.Rows.Clear();
                    //SqlDataReader rdrMedBillsPending = cmdQueryForMedBillPending.ExecuteReader();
                    //if (rdrMedBillsPending.HasRows)
                    //{
                    //    while (rdrMedBillsPending.Read())
                    //    {
                    //        DataGridViewRow row = new DataGridViewRow();
                    //        if (!rdrMedBillsPending.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsPending.GetString(0) });
                    //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    //        if (!rdrMedBillsPending.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsPending.GetString(1) });
                    //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    //        if (!rdrMedBillsPending.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsPending.GetString(2) });
                    //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    //        if (!rdrMedBillsPending.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsPending.GetString(3) });
                    //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    //        if (!rdrMedBillsPending.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsPending.GetDecimal(4).ToString("C") });
                    //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    //        if (!rdrMedBillsPending.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsPending.GetString(5) });
                    //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    //        if (!rdrMedBillsPending.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsPending.GetString(6) });
                    //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    //        gvRNManagerMedBillPending.Rows.Add(row);
                    //    }
                    //}
                    //rdrMedBillsPending.Close();
                    //if (connRN.State == ConnectionState.Open) connRN.Close();



                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    String strSqlQueryForActiveTasks = "select [dbo].[tbl_task].[whoid], [dbo].[tbl_task].[IndividualName], " +
                                                       "[dbo].[tbl_task_assigned_to].[User_Name], [dbo].[tbl_task_created_by].[User_Name], " +
                                                       "[dbo].[tbl_task].[whatid], " +
                                                       "[dbo].[tbl_task].[Subject], [dbo].[tbl_task].[DueDate], [dbo].[tbl_task].[CreateDate], " +
                                                       "[dbo].[tbl_task].[ActivityDate], [dbo].[tbl_task].[Comment], [dbo].[tbl_task].[Solution], " +
                                                       "[dbo].[tbl_task_status_code].[TaskStatusValue], [dbo].[tbl_task_priority_code].[TaskPriorityValue] " +
                                                       "from [dbo].[tbl_task] " +
                                                       "inner join [dbo].[tbl_task_assigned_to] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_task_assigned_to].[User_Id] " +
                                                       "inner join [dbo].[tbl_task_created_by] on [dbo].[tbl_task].[CreatedById] = [dbo].[tbl_task_created_by].[User_Id] " +
                                                       "inner join [dbo].[tbl_task_status_code] on [dbo].[tbl_task].[Status] = [dbo].[tbl_task_status_code].[TaskStatusCode] " +
                                                       "inner join [dbo].[tbl_task_priority_code] on [dbo].[tbl_task].[Priority] = [dbo].[tbl_task_priority_code].[TaskPriorityCode] " +
                                                       "inner join [dbo].[tbl_assigned_to_role] on [dbo].[tbl_task_assigned_to].[User_Role_Id] = [dbo].[tbl_assigned_to_role].[User_Role_Id] " +
                                                       "inner join [dbo].[tbl_created_by_role] on [dbo].[tbl_task_created_by].[User_Role_Id] = [dbo].[tbl_created_by_role].[User_Role_Id]" +
                                                       "where ([dbo].[tbl_task].[AssignedTo] = @AssignedToId or " +
                                                       "[dbo].[tbl_task].[CreatedById] = @CreatedById) and " +
                                                       "([dbo].[tbl_assigned_to_role].[User_Role_Id] = 5 or " +
                                                       "[dbo].[tbl_created_by_role].[User_Role_Id] = 5 or" +
                                                       "[dbo].[tbl_assigned_to_role].[User_Role_Id] = 2 or" +
                                                       "[dbo].[tbl_created_by_role].[User_Role_Id] = 2) and " +
                                                       "[dbo].[tbl_task].[Status] <> 2 and [dbo].[tbl_task].[Status] <> 5";

                    SqlCommand cmdQueryForActiveTasks = new SqlCommand(strSqlQueryForActiveTasks, connRN);
                    cmdQueryForActiveTasks.CommandType = CommandType.Text;

                    cmdQueryForActiveTasks.Parameters.AddWithValue("@AssignedToId", nLoggedUserId);
                    cmdQueryForActiveTasks.Parameters.AddWithValue("@CreatedById", nLoggedUserId);

                    SqlDependency dependency = new SqlDependency(cmdQueryForActiveTasks);
                    dependency.OnChange += new OnChangeEventHandler(OnActiveTaskRNManagerChange);

                    if (connRN.State != ConnectionState.Closed)
                    {
                        connRN.Close();
                        connRN.Open();
                    }
                    else if (connRN.State == ConnectionState.Closed) connRN.Open();
                    gvRNManagerActiveTask.Rows.Clear();
                    SqlDataReader rdrActiveTasks = cmdQueryForActiveTasks.ExecuteReader();
                    if (rdrActiveTasks.HasRows)
                    {
                        while (rdrActiveTasks.Read())
                        {
                            DataGridViewRow row = new DataGridViewRow();
                            if (!rdrActiveTasks.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(0) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(1) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(2) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(3) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(4) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(5) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = rdrActiveTasks.GetDateTime(6).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(7)) row.Cells.Add(new CalendarCell { Value = rdrActiveTasks.GetDateTime(7).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = rdrActiveTasks.GetDateTime(8).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(9)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(9) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(10) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(11) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(12)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(12) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                            gvRNManagerActiveTask.Rows.Add(row);
                        }
                    }
                    rdrActiveTasks.Close();
                    if (connRN.State == ConnectionState.Open) connRN.Close();

                    String strSqlQueryForCompleteTask = "select [dbo].[tbl_task].[whoid], [dbo].[tbl_task].[IndividualName], [dbo].[tbl_task].[Subject], " +
                                                        "[dbo].[tbl_task].[CreateDate], [dbo].[tbl_task].[ActivityDate], [dbo].[tbl_task].[Comment], [dbo].[tbl_task].[Solution] " +
                                                        "from [dbo].[tbl_task] " +
                                                        "inner join [dbo].[tbl_task_assigned_to] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_task_assigned_to].[User_Id] " +
                                                        "inner join [dbo].[tbl_task_created_by] on [dbo].[tbl_task].[CreatedById] = [dbo].[tbl_task_created_by].[User_Id] " +
                                                        "inner join [dbo].[tbl_assigned_to_role] on [dbo].[tbl_task_assigned_to].[User_Role_Id] = [dbo].[tbl_assigned_to_role].[User_Role_Id] " +
                                                        "inner join [dbo].[tbl_created_by_role] on [dbo].[tbl_task_created_by].[User_Role_Id] = [dbo].[tbl_created_by_role].[User_Role_Id]" +
                                                        "where ([dbo].[tbl_task].[AssignedTo] = @AssignedToId or " +
                                                        "[dbo].[tbl_task].[CreatedById] = @CreatedById) and " +
                                                        "([dbo].[tbl_assigned_to_role].[User_Role_Id] = 5 or " +
                                                        "[dbo].[tbl_created_by_role].[User_Role_Id] = 5 or" +
                                                        "[dbo].[tbl_assigned_to_role].[User_Role_Id] = 2 or" +
                                                        "[dbo].[tbl_created_by_role].[User_Role_Id] = 2) and " +
                                                        "([dbo].[tbl_task].[Status] = 2 or [dbo].[tbl_task].[Status] = 5)";

                    SqlCommand cmdQueryForCompleteTask = new SqlCommand(strSqlQueryForCompleteTask, connRN);
                    cmdQueryForCompleteTask.CommandType = CommandType.Text;

                    cmdQueryForCompleteTask.Parameters.AddWithValue("@AssignedToId", nLoggedUserId);
                    cmdQueryForCompleteTask.Parameters.AddWithValue("@CreatedById", nLoggedUserId);

                    SqlDependency dependencyComplete = new SqlDependency(cmdQueryForCompleteTask);
                    dependencyComplete.OnChange += new OnChangeEventHandler(OnCompleteTaskRNManagerChange);

                    if (connRN.State != ConnectionState.Closed)
                    {
                        connRN.Close();
                        connRN.Open();
                    }
                    else if (connRN.State == ConnectionState.Closed) connRN.Open();

                    SqlDataReader rdrCompleteTask = cmdQueryForCompleteTask.ExecuteReader();
                    gvRNManagerCompleteTask.Rows.Clear();
                    if (rdrCompleteTask.HasRows)
                    {
                        while (rdrCompleteTask.Read())
                        {
                            DataGridViewRow row = new DataGridViewRow();
                            if (!rdrCompleteTask.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTask.GetString(0) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrCompleteTask.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTask.GetString(1) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrCompleteTask.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTask.GetString(2) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrCompleteTask.IsDBNull(3)) row.Cells.Add(new CalendarCell { Value = rdrCompleteTask.GetDateTime(3).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrCompleteTask.IsDBNull(4)) row.Cells.Add(new CalendarCell { Value = rdrCompleteTask.GetDateTime(4).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrCompleteTask.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTask.GetString(5) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrCompleteTask.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTask.GetString(6) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            gvRNManagerCompleteTask.Rows.Add(row);
                        }
                    }
                    rdrCompleteTask.Close();
                    if (connRN.State == ConnectionState.Open) connRN.Close();
                }

                if (LoggedInUserRole == UserRole.RNStaff)
                {
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNManager);

                    String strSqlQueryForActiveTasks = "select [dbo].[tbl_task].[whoid], [dbo].[tbl_task].[IndividualName], " +
                                                       "[dbo].[tbl_task_assigned_to].[User_Name], [dbo].[tbl_task_created_by].[User_Name], " +
                                                       "[dbo].[tbl_task].[whatid], " +
                                                       "[dbo].[tbl_task].[Subject], [dbo].[tbl_task].[DueDate], [dbo].[tbl_task].[CreateDate], " +
                                                       "[dbo].[tbl_task].[ActivityDate], [dbo].[tbl_task].[Comment], [dbo].[tbl_task].[Solution], " +
                                                       "[dbo].[tbl_task_status_code].[TaskStatusValue], [dbo].[tbl_task_priority_code].[TaskPriorityValue] " +
                                                       "from [dbo].[tbl_task] " +
                                                       "inner join [dbo].[tbl_task_created_by] on [dbo].[tbl_task].[CreatedById] = [dbo].[tbl_task_created_by].[User_Id] " +
                                                       "inner join [dbo].[tbl_task_assigned_to] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_task_assigned_to].[User_Id] " +
                                                       "inner join [dbo].[tbl_task_status_code] on [dbo].[tbl_task].[Status] = [dbo].[tbl_task_status_code].[TaskStatusCode] " +
                                                       "inner join [dbo].[tbl_task_priority_code] on [dbo].[tbl_task].[Priority] = [dbo].[tbl_task_priority_code].[TaskPriorityCode] " +
                                                       "where ([dbo].[tbl_task].[AssignedTo] = @AssignedToId or [dbo].[tbl_task].[CreatedById] = @CreatedById) and " +
                                                       "[dbo].[tbl_task].[Status] <> 2 and [dbo].[tbl_task].[Status] <> 5";

                    SqlCommand cmdQueryForActiveTasks = new SqlCommand(strSqlQueryForActiveTasks, connRN);
                    cmdQueryForActiveTasks.CommandType = CommandType.Text;

                    cmdQueryForActiveTasks.Parameters.AddWithValue("@AssignedToId", nLoggedUserId);
                    cmdQueryForActiveTasks.Parameters.AddWithValue("@CreatedById", nLoggedUserId);

                    SqlDependency dependency = new SqlDependency(cmdQueryForActiveTasks);
                    dependency.OnChange += new OnChangeEventHandler(OnActiveTaskRNStaffChange);

                    if (connRN.State != ConnectionState.Closed)
                    {
                        connRN.Close();
                        connRN.Open();
                    }
                    else if (connRN.State == ConnectionState.Closed) connRN.Open();
                    gvRNStaffActiveTask.Rows.Clear();
                    SqlDataReader rdrActiveTasks = cmdQueryForActiveTasks.ExecuteReader();
                    if (rdrActiveTasks.HasRows)
                    {
                        while (rdrActiveTasks.Read())
                        {
                            DataGridViewRow row = new DataGridViewRow();
                            if (!rdrActiveTasks.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(0) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(1) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(2) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(3) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(4) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(5) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = rdrActiveTasks.GetDateTime(6).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(7)) row.Cells.Add(new CalendarCell { Value = rdrActiveTasks.GetDateTime(7).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = rdrActiveTasks.GetDateTime(8).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(9)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(9) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(10) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(11) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrActiveTasks.IsDBNull(12)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrActiveTasks.GetString(12) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                            gvRNStaffActiveTask.Rows.Add(row);
                        }
                    }
                    rdrActiveTasks.Close();
                    if (connRN.State == ConnectionState.Open) connRN.Close();

                    String strSqlQueryForCompleteTask = "select [dbo].[tbl_task].[whoid], [dbo].[tbl_task].[IndividualName], [dbo].[tbl_task].[Subject], " +
                                    "[dbo].[tbl_task].[CreateDate], [dbo].[tbl_task].[ActivityDate], [dbo].[tbl_task].[Comment], [dbo].[tbl_task].[Solution] " +
                                    "from [dbo].[tbl_task] " +
                                    "inner join [dbo].[tbl_task_assigned_to] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_task_assigned_to].[User_Id] " +
                                    "inner join [dbo].[tbl_task_created_by] on [dbo].[tbl_task].[CreatedById] = [dbo].[tbl_task_created_by].[User_Id] " +
                                    "inner join [dbo].[tbl_assigned_to_role] on [dbo].[tbl_task_assigned_to].[User_Role_Id] = [dbo].[tbl_assigned_to_role].[User_Role_Id] " +
                                    "inner join [dbo].[tbl_created_by_role] on [dbo].[tbl_task_created_by].[User_Role_Id] = [dbo].[tbl_created_by_role].[User_Role_Id]" +
                                    "where ([dbo].[tbl_task].[AssignedTo] = @AssignedToId or " +
                                    "[dbo].[tbl_task].[CreatedById] = @CreatedById) and " +
                                    "([dbo].[tbl_task].[Status] = 2 or [dbo].[tbl_task].[Status] = 5)";

                    SqlCommand cmdQueryForCompleteTask = new SqlCommand(strSqlQueryForCompleteTask, connRN);
                    cmdQueryForCompleteTask.CommandType = CommandType.Text;

                    cmdQueryForCompleteTask.Parameters.AddWithValue("@AssignedToId", nLoggedUserId);
                    cmdQueryForCompleteTask.Parameters.AddWithValue("@CreatedById", nLoggedUserId);

                    SqlDependency dependencyCompleteTasks = new SqlDependency(cmdQueryForCompleteTask);
                    dependencyCompleteTasks.OnChange += new OnChangeEventHandler(OnCompleteTaskRNStaffChange);

                    if (connRN.State != ConnectionState.Closed)
                    {
                        connRN.Close();
                        connRN.Open();
                    }
                    else if (connRN.State == ConnectionState.Closed) connRN.Open();
                    gvRNStaffCompleteTask.Rows.Clear();
                    SqlDataReader rdrCompleteTasks = cmdQueryForCompleteTask.ExecuteReader();
                    if (rdrCompleteTasks.HasRows)
                    {
                        while (rdrCompleteTasks.Read())
                        {
                            DataGridViewRow row = new DataGridViewRow();
                            if (!rdrCompleteTasks.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTasks.GetString(0) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrCompleteTasks.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTasks.GetString(1) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrCompleteTasks.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTasks.GetString(2) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrCompleteTasks.IsDBNull(3)) row.Cells.Add(new CalendarCell { Value = rdrCompleteTasks.GetDateTime(3).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrCompleteTasks.IsDBNull(4)) row.Cells.Add(new CalendarCell { Value = rdrCompleteTasks.GetDateTime(4).ToString("MM/dd/yyyy") });
                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                            if (!rdrCompleteTasks.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTasks.GetString(5) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                            if (!rdrCompleteTasks.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCompleteTasks.GetString(6) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                            gvRNStaffCompleteTask.Rows.Add(row);
                        }
                    }
                    rdrCompleteTasks.Close();
                    if (connRN.State == ConnectionState.Open) connRN.Close();
                }

                if (LoggedInUserRole == UserRole.FDManager)
                {
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNStaff);
                }

                if (LoggedInUserRole == UserRole.FDStaff)
                {
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNStaff);
                }

                if (LoggedInUserRole == UserRole.NPManager)
                {
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNStaff);
                }

                if (LoggedInUserRole == UserRole.NPStaff)
                {
                    tbCMMManager.TabPages.Remove(tbpgDashboardNPManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardFDStaff);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNManager);
                    tbCMMManager.TabPages.Remove(tbpgDashboardRNStaff);
                }

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // Payment tab

                //String strSqlQueryForCreditCardPayment = "select [RN_DB].[dbo].[tbl_settlement].[IsPaid], [SalesForce].[dbo].[contact].[Name], " +
                //                                         "[RN_DB].[dbo].[tbl_MedicalProvider].[Name], [RN_DB].[dbo].[tbl_MedicalProvider].[PHONE], " +
                //                                         "[RN_DB].[dbo].[tbl_medbill].[Account_At_Provider], " +
                //                                         "[SalesForce].[dbo].[contact].[Birthdate], " +
                //                                         "[SalesForce].[dbo].[contact].[Social_Security_Number__c], [SalesForce].[dbo].[contact].[CMM_Gender__c], " +
                //                                         "[SalesForce].[dbo].[contact].[Primary_Name__c], " +
                //                                         "[SalesForce].[dbo].[contact].[MailingStreet], [SalesForce].[dbo].[contact].[MailingCity], " +
                //                                         "[SalesForce].[dbo].[contact].[MailingState], [SalesForce].[dbo].[contact].[MailingPostalCode], " +
                //                                         "[RN_DB].[dbo].[tbl_medbill].[BillDate], " +
                //                                         "[RN_DB].[dbo].[tbl_medbill].[BillNo], [RN_DB].[dbo].[tbl_medbill].[BillAmount], " +
                //                                         "[RN_DB].[dbo].[tbl_settlement].[Name], [RN_DB].[dbo].[tbl_settlement].[Amount], " +
                //                                         "[SalesForce].[dbo].[contact].[c4g_Membership_Status__c], " +
                //                                         "[RN_DB].[dbo].[tbl_settlement].[Notes], " +
                //                                         "[RN_DB].[dbo].[tbl_CreateStaff].[Staff_Name], [RN_DB].[dbo].[tbl_ModifiStaff].[Staff_Name], " +
                //                                         "[SalesForce].[dbo].[contact].[Individual_ID__c], [SalesForce].[dbo].[contact].[Membership_Number__c] " +
                //                                         "from [RN_DB].[dbo].[tbl_settlement] " +
                //                                         "inner join [RN_DB].[dbo].[tbl_settlement_type_code] on [RN_DB].[dbo].[tbl_settlement].[SettlementType] = [RN_DB].[dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                //                                         "inner join [RN_DB].[dbo].[tbl_medbill] on [RN_DB].[dbo].[tbl_settlement].[MedicalBillID] = [RN_DB].[dbo].[tbl_medbill].[BillNo] " +
                //                                         "inner join [RN_DB].[dbo].[tbl_case] on [RN_DB].[dbo].[tbl_medbill].[Case_Id] = [RN_DB].[dbo].[tbl_case].[Case_Name] " +
                //                                         "inner join [RN_DB].[dbo].[tbl_incident] on [RN_DB].[dbo].[tbl_medbill].[Incident_Id] = [RN_DB].[dbo].[tbl_incident].[Incident_id] " +
                //                                         "inner join [RN_DB].[dbo].[tbl_MedicalProvider] on [RN_DB].[dbo].[tbl_medbill].[MedicalProvider_Id] = [RN_DB].[dbo].[tbl_MedicalProvider].[ID] " +
                //                                         "inner join [RN_DB].[dbo].[tbl_program] on [RN_DB].[dbo].[tbl_incident].[Program_id] = [RN_DB].[dbo].[tbl_program].[Program_Id] " +
                //                                         "inner join [RN_DB].[dbo].[tbl_CreateStaff] on [RN_DB].[dbo].[tbl_medbill].[CreatedById] = [RN_DB].[dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                //                                         "inner join [RN_DB].[dbo].[tbl_ModifiStaff] on [RN_DB].[dbo].[tbl_medbill].[LastModifiedById] = [RN_DB].[dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                //                                         "inner join [SalesForce].[dbo].[contact] on [RN_DB].[dbo].[tbl_medbill].[Individual_Id] = [SalesForce].[dbo].[contact].[Individual_ID__c] " +
                //                                         "inner join [SalesForce].[dbo].[program] on [SalesForce].[dbo].[contact].[c4g_Plan__c] = [SalesForce].[dbo].[program].[ID] " +
                //                                         "inner join [SalesForce].[dbo].[account] on [SalesForce].[dbo].[contact].[AccountId] = [SalesForce].[dbo].[account].[ID] " +
                //                                         "where ([RN_DB].[dbo].[tbl_settlement].[IsPaid] = 0 or [RN_DB].[dbo].[tbl_settlement].[IsPaid] IS NULL) and " +
                //                                         "[RN_DB].[dbo].[tbl_settlement].[PaidByID] IS NULL and " +
                //                                         "[RN_DB].[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                //                                         "[RN_DB].[dbo].[tbl_settlement].[SettlementType] = 4 and " +
                //                                         "[RN_DB].[dbo].[tbl_settlement].[CMMPaymentMethod] = 2 and " +
                //                                         "[RN_DB].[dbo].[tbl_settlement].[Approved] = 1 and " +
                //                                         "[RN_DB].[dbo].[tbl_settlement].[ApprovedDate] IS NOT NULL and " +
                //                                         "[RN_DB].[dbo].[tbl_settlement].[CMMCreditCard] = 0 and " +
                //                                         "[RN_DB].[dbo].[tbl_settlement].[CMMCreditCardPaidDate] IS NULL";

                String strSqlQueryForCreditCardPayment = "select [dbo].[tbl_settlement].[IsPaid], " +
                                                         "[dbo].[tbl_medbill].[MedicalProvider_Id], " +
                                                         "[dbo].[tbl_medbill].[Account_At_Provider], " +
                                                         "[dbo].[tbl_medbill].[BillDate], " +
                                                         "[dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill].[BillAmount], " +
                                                         "[dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement].[Amount], " +
                                                         "[dbo].[tbl_settlement].[Notes], " +
                                                         "[dbo].[tbl_CreateStaff].[Staff_Name], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                         "[dbo].[tbl_medbill].[Individual_Id] " +
                                                         "from [dbo].[tbl_settlement] " +
                                                         "inner join [dbo].[tbl_medbill] on [dbo].[tbl_settlement].[MedicalBillID] = [dbo].[tbl_medbill].[BillNo] " +
                                                         "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                                         "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                                         "where ([dbo].[tbl_settlement].[IsPaid] = 0 or [RN_DB].[dbo].[tbl_settlement].[IsPaid] IS NULL) and " +
                                                         "[dbo].[tbl_settlement].[PaidByID] IS NULL and " +
                                                         "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                         "[dbo].[tbl_settlement].[SettlementType] = 4 and " +
                                                         "[dbo].[tbl_settlement].[CMMPaymentMethod] = 2 and " +
                                                         "[dbo].[tbl_settlement].[Approved] = 1 and " +
                                                         "[dbo].[tbl_settlement].[ApprovedDate] IS NOT NULL and " +
                                                         "([dbo].[tbl_settlement].[CMMCreditCard] = 0 or [dbo].[tbl_settlement].[CMMCreditCard] IS NULL) and " +
                                                         "[dbo].[tbl_settlement].[CMMCreditCardPaidDate] IS NULL " +
                                                         "order by [dbo].[tbl_medbill].[Individual_Id]";

                SqlCommand cmdQueryForCreditCardPayment = new SqlCommand(strSqlQueryForCreditCardPayment, connRN);
                cmdQueryForCreditCardPayment.CommandType = CommandType.Text;

                SqlDependency dependencyCreditCardPayment = new SqlDependency(cmdQueryForCreditCardPayment);
                dependencyCreditCardPayment.OnChange += new OnChangeEventHandler(OnCreditCardPaymentChange);

                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                List<CreditCardPaymentInfo> lstCreditCardPaymentInfo = new List<CreditCardPaymentInfo>();
                SqlDataReader rdrCreditCardPayment = cmdQueryForCreditCardPayment.ExecuteReader();
                if (rdrCreditCardPayment.HasRows)
                {
                    while (rdrCreditCardPayment.Read())
                    {
                        CreditCardPaymentInfo ccPaymentInfo = new CreditCardPaymentInfo();

                        if (!rdrCreditCardPayment.IsDBNull(0)) ccPaymentInfo.bIsPaid = rdrCreditCardPayment.GetBoolean(0);
                        else ccPaymentInfo.bIsPaid = false;
                        if (!rdrCreditCardPayment.IsDBNull(1)) ccPaymentInfo.MedicalProviderId = rdrCreditCardPayment.GetString(1);
                        else ccPaymentInfo.MedicalProviderId = String.Empty;
                        if (!rdrCreditCardPayment.IsDBNull(2)) ccPaymentInfo.AccountNoAtProvider = rdrCreditCardPayment.GetString(2);
                        else ccPaymentInfo.AccountNoAtProvider = String.Empty;
                        if (!rdrCreditCardPayment.IsDBNull(3)) ccPaymentInfo.ServiceDate = rdrCreditCardPayment.GetDateTime(3);
                        else ccPaymentInfo.ServiceDate = null;
                        if (!rdrCreditCardPayment.IsDBNull(4)) ccPaymentInfo.MedicalBillNo = rdrCreditCardPayment.GetString(4);
                        else ccPaymentInfo.MedicalBillNo = String.Empty;
                        if (!rdrCreditCardPayment.IsDBNull(5)) ccPaymentInfo.MedBillAmount = rdrCreditCardPayment.GetDecimal(5);
                        else ccPaymentInfo.MedBillAmount = 0;
                        if (!rdrCreditCardPayment.IsDBNull(6)) ccPaymentInfo.SettlementName = rdrCreditCardPayment.GetString(6);
                        else ccPaymentInfo.SettlementName = String.Empty;
                        if (!rdrCreditCardPayment.IsDBNull(7)) ccPaymentInfo.SettlementAmount = rdrCreditCardPayment.GetDecimal(7);
                        else ccPaymentInfo.SettlementAmount = 0;
                        if (!rdrCreditCardPayment.IsDBNull(8)) ccPaymentInfo.SettlementNote = rdrCreditCardPayment.GetString(8);
                        else ccPaymentInfo.SettlementNote = String.Empty;
                        if (!rdrCreditCardPayment.IsDBNull(9)) ccPaymentInfo.CreateStaffName = rdrCreditCardPayment.GetString(9);
                        else ccPaymentInfo.CreateStaffName = String.Empty;
                        if (!rdrCreditCardPayment.IsDBNull(10)) ccPaymentInfo.ModifyStaffName = rdrCreditCardPayment.GetString(10);
                        else ccPaymentInfo.ModifyStaffName = String.Empty;
                        if (!rdrCreditCardPayment.IsDBNull(11)) ccPaymentInfo.IndividualID = rdrCreditCardPayment.GetString(11);
                        else ccPaymentInfo.IndividualID = String.Empty;

                        lstCreditCardPaymentInfo.Add(ccPaymentInfo);
                    }
                }
                rdrCreditCardPayment.Close();
                if (connRN.State != ConnectionState.Open) connRN.Close();

                foreach (CreditCardPaymentInfo info in lstCreditCardPaymentInfo)
                {
                    String strSqlQueryForMedicalProviderInfo = "select [dbo].[account].[Name], [dbo].[account].[Phone] from [dbo].[account] where [dbo].[account].[Id] = @MedicalProviderId";

                    SqlCommand cmdQueryForMedicalProviderInfo = new SqlCommand(strSqlQueryForMedicalProviderInfo, connSalesforce);
                    cmdQueryForMedicalProviderInfo.CommandType = CommandType.Text;

                    cmdQueryForMedicalProviderInfo.Parameters.AddWithValue("@MedicalProviderId", info.MedicalProviderId);

                    if (connSalesforce.State != ConnectionState.Closed)
                    {
                        connSalesforce.Close();
                        connSalesforce.Open();
                    }
                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                    SqlDataReader rdrMedicalProviderInfo = cmdQueryForMedicalProviderInfo.ExecuteReader();
                    if (rdrMedicalProviderInfo.HasRows)
                    {
                        rdrMedicalProviderInfo.Read();
                        if (!rdrMedicalProviderInfo.IsDBNull(0)) info.MedicalProviderName = rdrMedicalProviderInfo.GetString(0);
                        else info.MedicalProviderName = String.Empty;
                        if (!rdrMedicalProviderInfo.IsDBNull(1)) info.MedicalProviderPhone = rdrMedicalProviderInfo.GetString(1);
                        else info.MedicalProviderPhone = String.Empty;
                    }

                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
                }

                foreach (CreditCardPaymentInfo info in lstCreditCardPaymentInfo)
                {

                    String strSqlQueryForIndividualInfo = "select [dbo].[contact].[Name], [dbo].[contact].[Birthdate], [dbo].[contact].[Social_Security_Number__c], " +
                                                          "[dbo].[contact].[CMM_Gender__c], [dbo].[contact].[Primary_Name__c], " +
                                                          "[dbo].[account].[ShippingStreet], [dbo].[account].[ShippingCity], " +
                                                          "[dbo].[account].[ShippingState], [dbo].[account].[ShippingPostalCode], " +
                                                          "[dbo].[contact].[c4g_Membership_Status__c], [dbo].[contact].[Membership_Number__c] " +
                                                          "from [dbo].[contact] " +
                                                          "inner join [dbo].[account] on [dbo].[contact].[AccountId] = [dbo].[account].[Id] " +
                                                          "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                    SqlCommand cmdQueryForIndividualInfo = new SqlCommand(strSqlQueryForIndividualInfo, connSalesforce);
                    cmdQueryForIndividualInfo.CommandType = CommandType.Text;

                    cmdQueryForIndividualInfo.Parameters.AddWithValue("@IndividualId", info.IndividualID);

                    if (connSalesforce.State != ConnectionState.Closed)
                    {
                        connSalesforce.Close();
                        connSalesforce.Open();
                    }
                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                    SqlDataReader rdrIndividualInfo = cmdQueryForIndividualInfo.ExecuteReader();
                    if (rdrIndividualInfo.HasRows)
                    {
                        rdrIndividualInfo.Read();
                        if (!rdrIndividualInfo.IsDBNull(0)) info.IndividualName = rdrIndividualInfo.GetString(0);
                        else info.IndividualName = String.Empty;
                        if (!rdrIndividualInfo.IsDBNull(1)) info.IndividualBirthDate = rdrIndividualInfo.GetDateTime(1);
                        else info.IndividualBirthDate = null;
                        if (!rdrIndividualInfo.IsDBNull(2)) info.SocialSecurityNumber = rdrIndividualInfo.GetString(2);
                        else info.SocialSecurityNumber = String.Empty;
                        if (!rdrIndividualInfo.IsDBNull(3)) info.Sex = rdrIndividualInfo.GetString(3);
                        else info.Sex = "Unknown";
                        if (!rdrIndividualInfo.IsDBNull(4)) info.PrimaryName = rdrIndividualInfo.GetString(4);
                        else info.PrimaryName = String.Empty;
                        if (!rdrIndividualInfo.IsDBNull(5)) info.MailingStreet = rdrIndividualInfo.GetString(5);
                        else info.MailingStreet = String.Empty;
                        if (!rdrIndividualInfo.IsDBNull(6)) info.MailingCity = rdrIndividualInfo.GetString(6);
                        else info.MailingCity = String.Empty;
                        if (!rdrIndividualInfo.IsDBNull(7)) info.MailingState = rdrIndividualInfo.GetString(7);
                        else info.MailingState = String.Empty;
                        if (!rdrIndividualInfo.IsDBNull(8)) info.MailingZip = rdrIndividualInfo.GetString(8);
                        else info.MailingZip = String.Empty;
                        if (!rdrIndividualInfo.IsDBNull(9)) info.MembershipStatus = rdrIndividualInfo.GetString(9);
                        else info.MembershipStatus = String.Empty;
                        if (!rdrIndividualInfo.IsDBNull(10)) info.MembershipNumber = rdrIndividualInfo.GetString(10);
                    }
                    rdrIndividualInfo.Close();
                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
                }

                gvPaymentCreditCard.Rows.Clear();
                foreach (CreditCardPaymentInfo ccPaymentInfo in lstCreditCardPaymentInfo)
                {
                    DataGridViewRow row = new DataGridViewRow();
                    row.Cells.Add(new DataGridViewButtonCell { Value = "Confirm Payment" });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.IndividualName });
                    row.Cells[1].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MedicalProviderName });
                    row.Cells[2].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MedicalProviderPhone });
                    row.Cells[3].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.AccountNoAtProvider });
                    row.Cells[4].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.IndividualBirthDate.Value.ToString("MM/dd/yyyy") });
                    row.Cells[5].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.SocialSecurityNumber });
                    row.Cells[6].ReadOnly = true;
                    DataGridViewTextBoxCell sexCell = new DataGridViewTextBoxCell();
                    if (ccPaymentInfo.Sex == "Male") sexCell.Value = "M";
                    else if (ccPaymentInfo.Sex == "Female") sexCell.Value = "F";
                    else if (ccPaymentInfo.Sex == "0") sexCell.Value = "Unknown";
                    row.Cells.Add(sexCell);
                    row.Cells[7].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.PrimaryName });
                    row.Cells[8].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MailingStreet });
                    row.Cells[9].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MailingCity });
                    row.Cells[10].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MailingState });
                    row.Cells[11].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MailingZip });
                    row.Cells[12].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.ServiceDate });
                    row.Cells[13].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MedicalBillNo });
                    row.Cells[14].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MedBillAmount.ToString("C") });
                    row.Cells[15].Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                    row.Cells[15].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.SettlementName });
                    row.Cells[16].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.SettlementAmount.ToString("C") });
                    row.Cells[17].Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                    DataGridViewComboBoxCell comboCreditCardCell = new DataGridViewComboBoxCell();
                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    {
                        comboCreditCardCell.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    }
                    row.Cells.Add(comboCreditCardCell);
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MembershipStatus });
                    row.Cells[19].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.SettlementNote });
                    row.Cells[20].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.CreateStaffName });
                    row.Cells[21].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.ModifyStaffName });
                    row.Cells[22].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.IndividualID });
                    row.Cells[23].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = ccPaymentInfo.MembershipNumber });
                    row.Cells[24].ReadOnly = true;

                    gvPaymentCreditCard.Rows.Add(row);
                }
                rdrCreditCardPayment.Close();
                if (connRN.State == ConnectionState.Open) connRN.Close();

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                //String strSqlQueryForCheckPayment = "select [SalesForce].[dbo].[contact].[Name], [SalesForce].[dbo].[contact].[Household_Role__c], " +
                //                         "[SalesForce].[dbo].[contact].[Individual_ID__c], [SalesForce].[dbo].[contact].[Primary_Name__c], " +
                //                         "[RN_DB].[dbo].[tbl_incident].[IncidentNo], [RN_DB].[dbo].[tbl_medbill].[BillNo], [RN_DB].[dbo].[tbl_settlement].[Name], " +
                //                         "[RN_DB].[dbo].[tbl_settlement].[Amount], [SalesForce].[dbo].[program].[Name], [RN_DB].[dbo].[tbl_program].[ProgramName], " +
                //                         "[SalesForce].[dbo].[contact].[Membership_IND_Start_date__c], [SalesForce].[dbo].[contact].[Membership_Number__c], " +
                //                         "[RN_DB].[dbo].[tbl_case].[IB_Receiv_Date], [RN_DB].[dbo].[tbl_medbill].[BillDate], [RN_DB].[dbo].[tbl_MedicalProvider].[Name], " +
                //                         "[SalesForce].[dbo].[contact].[MailingStreet], [SalesForce].[dbo].[contact].[MailingCity], " +
                //                         "[SalesForce].[dbo].[contact].[MailingState], [SalesForce].[dbo].[contact].[MailingPostalCode], " +
                //                         "[RN_DB].[dbo].[tbl_settlement_type_code].[SettlementTypeValue], [RN_DB].[dbo].[tbl_medbill].[WellBeingCareTotal], " +
                //                         "[SalesForce].[dbo].[account].[Name], [RN_DB].[dbo].[tbl_CreateStaff].[Staff_Name], [RN_DB].[dbo].[tbl_ModifiStaff].[Staff_Name], " +
                //                         "[SalesForce].[dbo].[contact].[c4g_Membership_Status__c], " +
                //                         "[RN_DB].[dbo].[tbl_settlement].[Approved], [RN_DB].[dbo].[tbl_settlement].[ApprovedDate] " +
                //                         "from [RN_DB].[dbo].[tbl_settlement] " +
                //                         "inner join [RN_DB].[dbo].[tbl_settlement_type_code] on [RN_DB].[dbo].[tbl_settlement].[SettlementType] = [RN_DB].[dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                //                         "inner join [RN_DB].[dbo].[tbl_medbill] on [RN_DB].[dbo].[tbl_settlement].[MedicalBillID] = [RN_DB].[dbo].[tbl_medbill].[BillNo] " +
                //                         "inner join [RN_DB].[dbo].[tbl_case] on [RN_DB].[dbo].[tbl_medbill].[Case_Id] = [RN_DB].[dbo].[tbl_case].[Case_Name] " +
                //                         "inner join [RN_DB].[dbo].[tbl_incident] on [RN_DB].[dbo].[tbl_medbill].[Incident_Id] = [RN_DB].[dbo].[tbl_incident].[Incident_id] " +
                //                         "inner join [RN_DB].[dbo].[tbl_MedicalProvider] on [RN_DB].[dbo].[tbl_medbill].[MedicalProvider_Id] = [RN_DB].[dbo].[tbl_MedicalProvider].[ID] " +
                //                         "inner join [RN_DB].[dbo].[tbl_program] on [RN_DB].[dbo].[tbl_incident].[Program_id] = [RN_DB].[dbo].[tbl_program].[Program_Id] " +
                //                         "inner join [RN_DB].[dbo].[tbl_CreateStaff] on [RN_DB].[dbo].[tbl_medbill].[CreatedById] = [RN_DB].[dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                //                         "inner join [RN_DB].[dbo].[tbl_ModifiStaff] on [RN_DB].[dbo].[tbl_medbill].[LastModifiedById] = [RN_DB].[dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                //                         "inner join [SalesForce].[dbo].[contact] on [RN_DB].[dbo].[tbl_medbill].[Individual_Id] = [SalesForce].[dbo].[contact].[Individual_ID__c] " +
                //                         "inner join [SalesForce].[dbo].[program] on [SalesForce].[dbo].[contact].[c4g_Plan__c] = [SalesForce].[dbo].[program].[ID] " +
                //                         "inner join [SalesForce].[dbo].[account] on [SalesForce].[dbo].[contact].[AccountId] = [SalesForce].[dbo].[account].[ID] " +
                //                         "where [RN_DB].[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                //                         "[RN_DB].[dbo].[tbl_settlement].[CMMPaymentMethod] = 1 and " +
                //                         "[RN_DB].[dbo].[tbl_settlement].[Approved] = 1 and " +
                //                         "[RN_DB].[dbo].[tbl_settlement].[ApprovedDate] IS NOT NULL and " +
                //                         "[RN_DB].[dbo].[tbl_settlement].[CheckNo] IS NULL and " +
                //                         "[RN_DB].[dbo].[tbl_settlement].[CheckDate] IS NULL";

                String strSqlQueryForCheckPayment = "select [dbo].[tbl_settlement].[IsPaid], [dbo].[tbl_medbill].[Individual_Id], [dbo].[tbl_incident].[IncidentNo], " +
                                                    "[dbo].[tbl_program].[ProgramName], [dbo].[tbl_medbill].[BillDate], " +
                                                    "[dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement].[Amount], [dbo].[tbl_medbill].[MedicalProvider_Id], " +
                                                    "[dbo].[tbl_settlement_type_code].[SettlementTypeValue], " +
                                                    "[dbo].[tbl_CreateStaff].[Staff_Name], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                    "[dbo].[tbl_medbill].[Account_At_Provider] " +
                                                    "from [dbo].[tbl_settlement] " +
                                                    "inner join [dbo].[tbl_medbill] on [dbo].[tbl_settlement].[MedicalBillID] = [dbo].[tbl_medbill].[BillNo] " +
                                                    "inner join [dbo].[tbl_incident] on [dbo].[tbl_medbill].[Incident_Id] = [dbo].[tbl_incident].[Incident_id] " +
                                                    "inner join [dbo].[tbl_program] on [dbo].[tbl_incident].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                                                    "inner join [dbo].[tbl_settlement_type_code] on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                    "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_settlement].[CreateByID] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                                    "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_settlement].[LastModifiedByID] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                                    "where ([dbo].[tbl_settlement].[IsPaid] = 0 or [RN_DB].[dbo].[tbl_settlement].[IsPaid] IS NULL) and " +
                                                    "[dbo].[tbl_settlement].[PaidByID] IS NULL and " +
                                                    "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                    "([dbo].[tbl_settlement].[SettlementType] = 4 or " +
                                                    "[dbo].[tbl_settlement].[SettlementType] = 6 or " +
                                                    "[dbo].[tbl_settlement].[SettlementType] = 9) and " +
                                                    "[dbo].[tbl_settlement].[CMMPaymentMethod] = 1 and " +
                                                    "[dbo].[tbl_settlement].[Approved] = 1 and " +
                                                    "[dbo].[tbl_settlement].[ApprovedDate] IS NOT NULL and " +
                                                    "[dbo].[tbl_settlement].[CheckNo] IS NULL and " +
                                                    "[dbo].[tbl_settlement].[CheckDate] IS NULL and " +
                                                    "[dbo].[tbl_settlement].[CheckReconciled] = 0 " +
                                                    "order by [dbo].[tbl_medbill].[Individual_Id]";

                SqlCommand cmdQeuryForPaymentCheck = new SqlCommand(strSqlQueryForCheckPayment, connRN);
                cmdQeuryForPaymentCheck.CommandType = CommandType.Text;

                SqlDependency dependencyCheckPayment = new SqlDependency(cmdQeuryForPaymentCheck);
                dependencyCheckPayment.OnChange += new OnChangeEventHandler(OnCheckPaymentChange);

                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                gvPaymentCheck.Rows.Clear();
                List<CheckPaymentInfo> lstCheckPaymentInfo = new List<CheckPaymentInfo>();
                SqlDataReader rdrCheckPayment = cmdQeuryForPaymentCheck.ExecuteReader();
                if (rdrCheckPayment.HasRows)
                {
                    while (rdrCheckPayment.Read())
                    {
                        CheckPaymentInfo infoCheckPayment = new CheckPaymentInfo();
                        if (!rdrCheckPayment.IsDBNull(0)) infoCheckPayment.bIsPaid = rdrCheckPayment.GetBoolean(0);
                        if (!rdrCheckPayment.IsDBNull(1)) infoCheckPayment.IndividualId = rdrCheckPayment.GetString(1);
                        if (!rdrCheckPayment.IsDBNull(2)) infoCheckPayment.IncidentNo = rdrCheckPayment.GetString(2);
                        if (!rdrCheckPayment.IsDBNull(3)) infoCheckPayment.IncidentProgram = rdrCheckPayment.GetString(3);
                        if (!rdrCheckPayment.IsDBNull(4)) infoCheckPayment.ServiceDate = rdrCheckPayment.GetDateTime(4);
                        if (!rdrCheckPayment.IsDBNull(5)) infoCheckPayment.SettlementNo = rdrCheckPayment.GetString(5);
                        if (!rdrCheckPayment.IsDBNull(6)) infoCheckPayment.SettlementAmount = rdrCheckPayment.GetDecimal(6);
                        if (!rdrCheckPayment.IsDBNull(7)) infoCheckPayment.MedicalProviderId = rdrCheckPayment.GetString(7);
                        if (!rdrCheckPayment.IsDBNull(8)) infoCheckPayment.SettlementType = rdrCheckPayment.GetString(8);
                        if (!rdrCheckPayment.IsDBNull(9)) infoCheckPayment.CreatedBy = rdrCheckPayment.GetString(9);
                        if (!rdrCheckPayment.IsDBNull(10)) infoCheckPayment.LastModifiedBy = rdrCheckPayment.GetString(10);
                        if (!rdrCheckPayment.IsDBNull(11)) infoCheckPayment.AccountNoAtMedProvider = rdrCheckPayment.GetString(11);

                        lstCheckPaymentInfo.Add(infoCheckPayment);
                    }
                }
                rdrCheckPayment.Close();
                if (connRN.State == ConnectionState.Open) connRN.Close();

                foreach (CheckPaymentInfo info in lstCheckPaymentInfo)
                {
                    String strSqlQueryForMedicalProviderName = "select [dbo].[account].[Name] from [dbo].[account] where [dbo].[account].[Id] = @MedicalProviderId";

                    SqlCommand cmdQueryForMedicalProviderName = new SqlCommand(strSqlQueryForMedicalProviderName, connSalesforce);
                    cmdQueryForMedicalProviderName.CommandType = CommandType.Text;

                    cmdQueryForMedicalProviderName.Parameters.AddWithValue("@MedicalProviderId", info.MedicalProviderId);

                    if (connSalesforce.State != ConnectionState.Closed)
                    {
                        connSalesforce.Close();
                        connSalesforce.Open();
                    }
                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                    Object objMedicalProviderName = cmdQueryForMedicalProviderName.ExecuteScalar();
                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                    String MedicalProviderName = String.Empty;
                    if (objMedicalProviderName != null) MedicalProviderName = objMedicalProviderName.ToString();

                    info.MedicalProviderName = MedicalProviderName;
                }

                foreach (CheckPaymentInfo info in lstCheckPaymentInfo)
                {
                    String strSqlQueryForIndividualInfoForCheckPayment = "select [dbo].[contact].[Name], [dbo].[contact].[Household_Role__c], " +
                                                                         "[dbo].[contact].[Primary_Name__c], " +
                                                                         "[dbo].[account].[SHIPPINGSTREET], [dbo].[account].[SHIPPINGCITY], " +
                                                                         "[dbo].[account].[SHIPPINGSTATE], [dbo].[account].[SHIPPINGPOSTALCODE], " +
                                                                         "[dbo].[contact].[c4g_Membership_Status__c], [dbo].[contact].[Membership_Number__c] " +
                                                                         "from [dbo].[contact] " +
                                                                         "inner join [dbo].[program] on [dbo].[contact].[c4g_Plan__c] = [dbo].[program].[ID] " +
                                                                         "inner join [dbo].[account] on [dbo].[contact].[AccountId] = [dbo].[account].[ID] " +
                                                                         "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                    SqlCommand cmdQueryForIndividualInfoForCheckPayment = new SqlCommand(strSqlQueryForIndividualInfoForCheckPayment, connSalesforce);
                    cmdQueryForIndividualInfoForCheckPayment.CommandType = CommandType.Text;

                    cmdQueryForIndividualInfoForCheckPayment.Parameters.AddWithValue("@IndividualId", info.IndividualId);

                    if (connSalesforce.State != ConnectionState.Closed)
                    {
                        connSalesforce.Close();
                        connSalesforce.Open();
                    }
                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                    SqlDataReader rdrIndividualInfoForCheckPayment = cmdQueryForIndividualInfoForCheckPayment.ExecuteReader();
                    if (rdrIndividualInfoForCheckPayment.HasRows)
                    {
                        rdrIndividualInfoForCheckPayment.Read();

                        if (!rdrIndividualInfoForCheckPayment.IsDBNull(0)) info.IndividualName = rdrIndividualInfoForCheckPayment.GetString(0);
                        if (!rdrIndividualInfoForCheckPayment.IsDBNull(1)) info.HouseholdRole = rdrIndividualInfoForCheckPayment.GetString(1);
                        if (!rdrIndividualInfoForCheckPayment.IsDBNull(2)) info.PrimaryName = rdrIndividualInfoForCheckPayment.GetString(2);
                        if (!rdrIndividualInfoForCheckPayment.IsDBNull(3)) info.ShippingStreet = rdrIndividualInfoForCheckPayment.GetString(3);
                        if (!rdrIndividualInfoForCheckPayment.IsDBNull(4)) info.ShippingCity = rdrIndividualInfoForCheckPayment.GetString(4);
                        if (!rdrIndividualInfoForCheckPayment.IsDBNull(5)) info.ShippingState = rdrIndividualInfoForCheckPayment.GetString(5);
                        if (!rdrIndividualInfoForCheckPayment.IsDBNull(6)) info.ShippingZip = rdrIndividualInfoForCheckPayment.GetString(6);
                        if (!rdrIndividualInfoForCheckPayment.IsDBNull(7)) info.MembershipStatus = rdrIndividualInfoForCheckPayment.GetString(7);
                        if (!rdrIndividualInfoForCheckPayment.IsDBNull(8)) info.MemebershipNo = rdrIndividualInfoForCheckPayment.GetString(8);

                    }
                    rdrIndividualInfoForCheckPayment.Close();
                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
                }

                gvPaymentCheck.Rows.Clear();
                foreach (CheckPaymentInfo info in lstCheckPaymentInfo)
                {
                    DataGridViewRow row = new DataGridViewRow();
                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IndividualName });
                    row.Cells[1].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IndividualId });
                    row.Cells[2].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.HouseholdRole });
                    row.Cells[3].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.PrimaryName });
                    row.Cells[4].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IncidentNo });
                    row.Cells[5].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IncidentProgram });
                    row.Cells[6].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.SettlementNo });
                    row.Cells[7].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.SettlementAmount.ToString("C") });
                    row.Cells[8].ReadOnly = true;
                    row.Cells[8].Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.ServiceDate.Value.ToString("MM/dd/yyyy") });
                    row.Cells[9].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.MedicalProviderName });
                    row.Cells[10].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.AccountNoAtMedProvider });
                    row.Cells[11].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.ShippingStreet });
                    row.Cells[12].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.ShippingCity });
                    row.Cells[13].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.ShippingState });
                    row.Cells[14].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.ShippingZip });
                    row.Cells[15].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.SettlementType });
                    row.Cells[16].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.CreatedBy });
                    row.Cells[17].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.LastModifiedBy });
                    row.Cells[18].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.MembershipStatus });
                    row.Cells[19].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.MemebershipNo });
                    row.Cells[20].ReadOnly = true;

                    gvPaymentCheck.Rows.Add(row);
                }

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                ///
                String strSqlQueryForACHPayment = "select [dbo].[tbl_settlement].[IsPaid], [dbo].[tbl_medbill].[Individual_Id], " +
                                                  "[dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement].[Amount], " +
                                                  "[dbo].[tbl_CreateStaff].[Staff_Name], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                  "[dbo].[tbl_settlement].[IsACHExported], [dbo].[tbl_settlement].[ACHExportedByID] " +
                                                  "from [dbo].[tbl_settlement] " +
                                                  "inner join [dbo].[tbl_medbill] on [dbo].[tbl_settlement].[MedicalBillID] = [dbo].[tbl_medbill].[BillNo] " +
                                                  "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                                  "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                                  "where ([dbo].[tbl_settlement].[IsPaid] = 0 or [RN_DB].[dbo].[tbl_settlement].[IsPaid] IS NULL) and " +
                                                  "[dbo].[tbl_settlement].[PaidByID] IS NULL and " +
                                                  "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                  "([dbo].[tbl_settlement].[SettlementType] = 4 or " +
                                                  "[dbo].[tbl_settlement].[SettlementType] = 6 or " +
                                                  "[dbo].[tbl_settlement].[SettlementType] = 9) and " +
                                                  "[dbo].[tbl_settlement].[CMMPaymentMethod] = 3 and " +
                                                  "[dbo].[tbl_settlement].[Approved] = 1 and " +
                                                  "[dbo].[tbl_settlement].[ApprovedDate] IS NOT NULL and " +
                                                  "[dbo].[tbl_settlement].[ACH_Number] IS NULL and " +
                                                  "[dbo].[tbl_settlement].[ACH_Date] IS NULL " +
                                                  "order by [dbo].[tbl_medbill].[Individual_Id]";


                SqlCommand cmdPaymentACH = new SqlCommand(strSqlQueryForACHPayment, connRN);
                cmdPaymentACH.CommandType = CommandType.Text;

                SqlDependency dependencyPaymentACH = new SqlDependency(cmdPaymentACH);
                dependencyPaymentACH.OnChange += new OnChangeEventHandler(OnACHPaymentChange);

                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                SqlDataReader rdrPaymentACH = cmdPaymentACH.ExecuteReader();
                List<ACHPaymentInfo> lstACHPaymentInfo = new List<ACHPaymentInfo>();
                if (rdrPaymentACH.HasRows)
                {
                    while (rdrPaymentACH.Read())
                    {
                        ACHPaymentInfo achInfo = new ACHPaymentInfo();

                        if (!rdrPaymentACH.IsDBNull(0)) achInfo.bIsPaid = rdrPaymentACH.GetBoolean(0);
                        if (!rdrPaymentACH.IsDBNull(1)) achInfo.IndividualId = rdrPaymentACH.GetString(1);
                        if (!rdrPaymentACH.IsDBNull(2)) achInfo.SettlementNo = rdrPaymentACH.GetString(2);
                        if (!rdrPaymentACH.IsDBNull(3)) achInfo.SettlementAmount = rdrPaymentACH.GetDecimal(3);
                        if (!rdrPaymentACH.IsDBNull(4)) achInfo.CreateStaffName = rdrPaymentACH.GetString(4);
                        if (!rdrPaymentACH.IsDBNull(5)) achInfo.ModifiStaffName = rdrPaymentACH.GetString(5);
                        if (!rdrPaymentACH.IsDBNull(6)) achInfo.bIsExported = rdrPaymentACH.GetBoolean(6);
                        if (!rdrPaymentACH.IsDBNull(7)) achInfo.nExportedBy = rdrPaymentACH.GetInt16(7);
                        lstACHPaymentInfo.Add(achInfo);
                    }
                }
                if (connRN.State == ConnectionState.Closed) connRN.Open();

                foreach (ACHPaymentInfo info in lstACHPaymentInfo)
                {
                    String strSqlQueryForIndividualInfo = "select [dbo].[contact].[Name], " +
                                                          "[dbo].[contact].[BankName__c], [dbo].[contact].[RoutingNumber__c], " +
                                                          "[dbo].[contact].[AccountNumber__c], [dbo].[contact].[AccountHolder__c], " +
                                                          "[dbo].[membership].[Pay_BankName__c], [dbo].[membership].[Pay_RoutingNumber__c], " +
                                                          "[dbo].[membership].[Pay_AccountNumber__c], [dbo].[membership].[Pay_AccountHolder__c], " +
                                                          "[dbo].[contact].[c4g_Membership_Status__c] " +
                                                          "from [dbo].[contact] " +
                                                          "inner join [dbo].[membership] on [dbo].[contact].[c4g_Membership__c] = [dbo].[membership].[Id] " +
                                                          "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                    SqlCommand cmdQueryForIndividualInfo = new SqlCommand(strSqlQueryForIndividualInfo, connSalesforce);
                    cmdQueryForIndividualInfo.CommandType = CommandType.Text;

                    cmdQueryForIndividualInfo.Parameters.AddWithValue("@IndividualId", info.IndividualId);

                    if (connSalesforce.State != ConnectionState.Closed)
                    {
                        connSalesforce.Close();
                        connSalesforce.Open();
                    }
                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                    SqlDataReader rdrACHPaymentIndividualInfo = cmdQueryForIndividualInfo.ExecuteReader();
                    if (rdrACHPaymentIndividualInfo.HasRows)
                    {
                        rdrACHPaymentIndividualInfo.Read();
                        if (!rdrACHPaymentIndividualInfo.IsDBNull(0)) info.IndividualName = rdrACHPaymentIndividualInfo.GetString(0);
                        if (!rdrACHPaymentIndividualInfo.IsDBNull(1)) info.BankName = rdrACHPaymentIndividualInfo.GetString(1);
                        else if (!rdrACHPaymentIndividualInfo.IsDBNull(5)) info.BankName = rdrACHPaymentIndividualInfo.GetString(5);
                        if (!rdrACHPaymentIndividualInfo.IsDBNull(2)) info.RoutingNumber = rdrACHPaymentIndividualInfo.GetString(2);
                        else if (!rdrACHPaymentIndividualInfo.IsDBNull(6)) info.RoutingNumber = rdrACHPaymentIndividualInfo.GetString(6);
                        if (!rdrACHPaymentIndividualInfo.IsDBNull(3)) info.AccountNumber = rdrACHPaymentIndividualInfo.GetString(3);
                        else if (!rdrACHPaymentIndividualInfo.IsDBNull(7)) info.AccountNumber = rdrACHPaymentIndividualInfo.GetString(7);
                        if (!rdrACHPaymentIndividualInfo.IsDBNull(4)) info.AccountHolder = rdrACHPaymentIndividualInfo.GetString(4);
                        else if (!rdrACHPaymentIndividualInfo.IsDBNull(8)) info.AccountHolder = rdrACHPaymentIndividualInfo.GetString(8);
                        if (!rdrACHPaymentIndividualInfo.IsDBNull(5)) info.MembershipStatus = rdrACHPaymentIndividualInfo.GetString(9);
                    }
                    rdrACHPaymentIndividualInfo.Close();
                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
                }

                gvPaymentACH.Rows.Clear();
                foreach (ACHPaymentInfo info in lstACHPaymentInfo)
                {
                    DataGridViewRow row = new DataGridViewRow();
                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = info.bIsExported });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IndividualName });
                    row.Cells[1].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IndividualId });
                    row.Cells[2].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.SettlementNo });
                    row.Cells[3].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.SettlementAmount.ToString("C") });
                    row.Cells[4].Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                    row.Cells[4].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.BankName });
                    row.Cells[5].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.RoutingNumber });
                    row.Cells[6].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.AccountNumber });
                    row.Cells[7].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.AccountHolder });
                    row.Cells[8].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.CreateStaffName });
                    row.Cells[9].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.ModifiStaffName });
                    row.Cells[10].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.MembershipStatus });
                    row.Cells[11].ReadOnly = true;
                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = info.bIsExported });
                    row.Cells[12].ReadOnly = true;
                    gvPaymentACH.Rows.Add(row);
                }

                List<String> lstIndividualIDs = new List<String>();
                String strSqlQueryForPaymentInactive = "select distinct([dbo].[tbl_medbill].[Individual_Id]) " +
                                                        "from [dbo].[tbl_medbill] " +
                                                        "inner join [dbo].[tbl_settlement] on [dbo].[tbl_medbill].[BillNo] = [dbo].[tbl_settlement].[MedicalBillID] " +
                                                        "where ([dbo].[tbl_settlement].[IsPaid] = 0 or [RN_DB].[dbo].[tbl_settlement].[IsPaid] IS NULL) and " +
                                                        "[dbo].[tbl_settlement].[PaidByID] IS NULL and " +
                                                        "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                        "([dbo].[tbl_settlement].[SettlementType] = 4 or " +
                                                        "[dbo].[tbl_settlement].[SettlementType] = 6 or " +
                                                        "[dbo].[tbl_settlement].[SettlementType] = 9) and " +
                                                        "[dbo].[tbl_settlement].[Approved] = 1 and " +
                                                        "[dbo].[tbl_settlement].[ApprovedDate] IS NOT NULL " +
                                                        "order by [dbo].[tbl_medbill].[Individual_Id]";

                SqlCommand cmdQueryForPaymentInactive = new SqlCommand(strSqlQueryForPaymentInactive, connRN);
                cmdQueryForPaymentInactive.CommandType = CommandType.Text;

                SqlDependency dependencyPaymentInactive = new SqlDependency(cmdQueryForPaymentInactive);
                dependencyPaymentInactive.OnChange += new OnChangeEventHandler(OnPaymentInactiveChange);

                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                SqlDataReader rdrPaymentInactive = cmdQueryForPaymentInactive.ExecuteReader();
                gvPaymentInactive.Rows.Clear();
                if (rdrPaymentInactive.HasRows)
                {
                    while (rdrPaymentInactive.Read())
                    {
                        String IndividualID = String.Empty;
                        if (!rdrPaymentInactive.IsDBNull(0)) IndividualID = rdrPaymentInactive.GetString(0);
                        lstIndividualIDs.Add(IndividualID);
                    }
                }
                rdrPaymentInactive.Close();
                if (connRN.State == ConnectionState.Open) connRN.Close();

                List<InactivePaymentInfo> lstInactivePaymentInfo = new List<InactivePaymentInfo>();
                foreach (String IndividualId in lstIndividualIDs)
                {
                    String strSqlQueryForIndividualInfo = "select [dbo].[contact].[Name], [dbo].[contact].[Membership_Number__c], [dbo].[contact].[c4g_Membership_Status__c], " +
                                                           "[dbo].[account].[ShippingState], " +
                                                           "[dbo].[contact].[Email], [dbo].[account].[cmm_Email__c], " +
                                                           "[dbo].[contact].[Phone], [dbo].[account].[Phone] " +
                                                           "from [dbo].[contact] " +
                                                           "inner join [dbo].[account] on [dbo].[contact].[AccountId] = [dbo].[account].[Id] " +
                                                           "where ([dbo].[contact].[c4g_Membership_Status__c] like '%Cancelled%' or " +
                                                           "cast([dbo].[contact].[c4g_Membership_Status__c] as nvarchar(max)) = 'Past Due' or " +
                                                           "cast([dbo].[contact].[c4g_Membership_Status__c] as nvarchar(max)) = 'Hold' or " +
                                                           "cast([dbo].[contact].[c4g_Membership_Status__c] as nvarchar(max)) IS NULL) and " +
                                                           "[dbo].[contact].[Individual_ID__c] = @IndividualId";

                    SqlCommand cmdQueryForIndividualInfo = new SqlCommand(strSqlQueryForIndividualInfo, connSalesforce);
                    cmdQueryForIndividualInfo.CommandType = CommandType.Text;

                    cmdQueryForIndividualInfo.Parameters.AddWithValue("@IndividualId", IndividualId);

                    if (connSalesforce.State != ConnectionState.Closed)
                    {
                        connSalesforce.Close();
                        connSalesforce.Open();
                    }
                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                    SqlDataReader rdrPaymentInactiveIndividual = cmdQueryForIndividualInfo.ExecuteReader();
                    if (rdrPaymentInactiveIndividual.HasRows)
                    {
                        rdrPaymentInactiveIndividual.Read();
                        InactivePaymentInfo info = new InactivePaymentInfo();
                        info.IndividualId = IndividualId;
                        if (!rdrPaymentInactiveIndividual.IsDBNull(0)) info.IndividualName = rdrPaymentInactiveIndividual.GetString(0);
                        if (!rdrPaymentInactiveIndividual.IsDBNull(1)) info.MembershipNo = rdrPaymentInactiveIndividual.GetString(1);
                        if (!rdrPaymentInactiveIndividual.IsDBNull(2)) info.MembershipStatus = rdrPaymentInactiveIndividual.GetString(2);
                        if (!rdrPaymentInactiveIndividual.IsDBNull(3)) info.State = rdrPaymentInactiveIndividual.GetString(3);
                        if (!rdrPaymentInactiveIndividual.IsDBNull(4)) info.Email = rdrPaymentInactiveIndividual.GetString(4);
                        else if (!rdrPaymentInactiveIndividual.IsDBNull(5)) info.Email = rdrPaymentInactiveIndividual.GetString(5);
                        if (!rdrPaymentInactiveIndividual.IsDBNull(6)) info.Phone = rdrPaymentInactiveIndividual.GetString(6);
                        else if (!rdrPaymentInactiveIndividual.IsDBNull(7)) info.Phone = rdrPaymentInactiveIndividual.GetString(7);
                        lstInactivePaymentInfo.Add(info);
                    }
                    rdrPaymentInactiveIndividual.Close();
                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
                }
                gvPaymentInactive.Rows.Clear();
                foreach (InactivePaymentInfo info in lstInactivePaymentInfo)
                {
                    DataGridViewRow row = new DataGridViewRow();
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IndividualId });
                    row.Cells[0].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.IndividualName });
                    row.Cells[1].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.MembershipNo });
                    row.Cells[2].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.MembershipStatus });
                    row.Cells[3].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.State });
                    row.Cells[4].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.Email });
                    row.Cells[5].ReadOnly = true;
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = info.Phone });
                    row.Cells[6].ReadOnly = true;
                    gvPaymentInactive.Rows.Add(row);
                }

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                ToolTip tipBrowseForNPF = new ToolTip();
                tipBrowseForNPF.SetToolTip(btnBrowseNPF, "Browse for Needs Processing Form");

                ToolTip tipBrowseForIB = new ToolTip();
                tipBrowseForIB.SetToolTip(btnBrowseIB, "Browse for Itemized Bill");

                ToolTip tipBrowseForPoP = new ToolTip();
                tipBrowseForPoP.SetToolTip(btnBrowsePoP, "Browse for Proof of Payment");

                ToolTip tipBrowseForMedRcord = new ToolTip();
                tipBrowseForMedRcord.SetToolTip(btnBrowseMR, "Browse for Medical Record");

                ToolTip tipBrowseForUnknownDoc = new ToolTip();
                tipBrowseForUnknownDoc.SetToolTip(btnBrowseUnknownDoc, "Browse for Unknown Document");

                // Upload buttons for Case Creation tab
                ToolTip tipUploadNPF = new ToolTip();
                tipUploadNPF.SetToolTip(btnNPFFormUpload, "Upload the Needs Processing Form to the server");

                ToolTip tipUploadIB = new ToolTip();
                tipUploadIB.SetToolTip(btnIBUpload, "Upload the Itemized Bill to the server");

                ToolTip tipUploadPoP = new ToolTip();
                tipUploadPoP.SetToolTip(btnPoPUpload, "Upload the Proof of Payment to the server");

                ToolTip tipUploadMedRec = new ToolTip();
                tipUploadMedRec.SetToolTip(btnMedicalRecordUpload, "Upload the Medical Record to the server");

                ToolTip tipUploadUnknownDoc = new ToolTip();
                tipUploadUnknownDoc.SetToolTip(btnUnknownDocUpload, "Upload the Unknown Document to the server");

                // View buttons for Case Creation tab
                ToolTip tipViewNPFCreateCase = new ToolTip();
                tipViewNPFCreateCase.SetToolTip(btnNPFFormView, "View the NPF Form on the server");

                ToolTip tipViewIBCreateCase = new ToolTip();
                tipViewIBCreateCase.SetToolTip(btnIBView, "View the Itemized Bill on the server");

                ToolTip tipViewPoPCreateCase = new ToolTip();
                tipViewPoPCreateCase.SetToolTip(btnPoPView, "View the Proof of Payment on the server");

                ToolTip tipViewMedRecCreateCase = new ToolTip();
                tipViewMedRecCreateCase.SetToolTip(btnMedicalRecordView, "View the Medical Record Document on the server");

                ToolTip tipViewUnknownDocCreateCase = new ToolTip();
                tipViewUnknownDocCreateCase.SetToolTip(btnOtherDocView, "View the Unknown Document on the server");


                // Delete buttons for Case Creation tab
                ToolTip tipDeleteNPF = new ToolTip();
                tipDeleteNPF.SetToolTip(btnNPFFormDelete, "Delete the uploaded Needs Processing Form on the server");

                ToolTip tipDeleteIB = new ToolTip();
                tipDeleteIB.SetToolTip(btnDeleteIB, "Delete the uploaded Itemized Bill on the server");

                ToolTip tipDeletePoP = new ToolTip();
                tipDeletePoP.SetToolTip(btnDeletePoP, "Delete the uploaded Proof of Payment on the server");

                ToolTip tipDeleteMedRec = new ToolTip();
                tipDeleteMedRec.SetToolTip(btnDeleteMedicalRecord, "Delete the uploaded Medical Record on the server");

                ToolTip tipDeleteUnknownDoc = new ToolTip();
                tipDeleteUnknownDoc.SetToolTip(btnDeleteUnknownDoc, "Delete the uploaded Unknown Document on the server");

                // Tooltips for Medical Bill tab

                // View buttons for Medical Bill tab
                ToolTip tipViewNPF = new ToolTip();
                tipViewNPF.SetToolTip(btnViewNPF, "View the Needs Processing Form on the server");

                ToolTip tipViewIB = new ToolTip();
                tipViewIB.SetToolTip(btnViewIB, "View the Itemized Bill on the server");

                ToolTip tipViewPoP = new ToolTip();
                tipViewPoP.SetToolTip(btnViewPoP, "View the Proof of Payment on the server");

                ToolTip tipViewMedRec = new ToolTip();
                tipViewMedRec.SetToolTip(btnViewMedRecord, "View the Medical Record on the server");

                ToolTip tipViewUnknownDoc = new ToolTip();
                tipViewUnknownDoc.SetToolTip(btnViewOtherDoc, "View the Unknown Documents on the server");

                // ToolTips for Illness button and Incident button
                ToolTip tipIllness = new ToolTip();
                tipIllness.SetToolTip(btnMedBill_lllness, "Create illness or choose illness");

                ToolTip tipIncident = new ToolTip();
                tipIncident.SetToolTip(btnMedBill_Incident, "Create incident or choose incident");

                // Tooltips on Settlement
                ToolTip tipAddNewSettlement = new ToolTip();
                tipAddNewSettlement.SetToolTip(btnAddNewSettlement, "Add New Settlement");

                //ToolTip tipEditSettlement = new ToolTip();
                //tipEditSettlement.SetToolTip(btnEditSettlement, "Edit the Seleted Settlement");

                ToolTip tipDeleteSettlement = new ToolTip();
                tipDeleteSettlement.SetToolTip(btnDeleteSettlement, "Delete the Selected Settlement");



                tbCMMManager.SelectedIndex = 1;

                PrevTabPage = TabPage.None;
                CurrentTabPage = TabPage.DashBoard;
            }

            //if (bLoginSuccess == true)
            //{

            //frmSearchResult searchResult = new frmSearchResult();

            // 09/28/18 begin here


            //    if (searchResult.ShowDialog() == DialogResult.OK)
            //    {
            //txtMembershipID.Text = searchResult.IndividualSelected.strMembershipID;
            //txtIndividualID.Text = searchResult.IndividualSelected.strIndividualID;

            //txtFirstName.Text = searchResult.IndividualSelected.strFirstName;
            //txtMiddleName.Text = searchResult.IndividualSelected.strMiddleName;
            //txtLastName.Text = searchResult.IndividualSelected.strLastName;
            //txtDateOfBirth.Text = searchResult.IndividualSelected.dtBirthDate.Value.ToString("MM/dd/yyyy");
            //cbGender.Items.Add("Male");
            //cbGender.Items.Add("Female");
            //if (searchResult.IndividualSelected.IndividualGender == Gender.Male) cbGender.SelectedIndex = 0;
            //else if (searchResult.IndividualSelected.IndividualGender == Gender.Female) cbGender.SelectedIndex = 1;
            //txtIndividualSSN.Text = searchResult.IndividualSelected.strSSN;

            //txtStreetAddress1.Text = searchResult.IndividualSelected.strShippingStreetAddress;
            //txtZip1.Text = searchResult.IndividualSelected.strShippingZip;
            //txtCity1.Text = searchResult.IndividualSelected.strShippingCity;
            //txtState1.Text = searchResult.IndividualSelected.strShippingState;

            //txtStreetAddress2.Text = searchResult.IndividualSelected.strBillingStreetAddress;
            //txtZip2.Text = searchResult.IndividualSelected.strBillingZip;
            //txtCity2.Text = searchResult.IndividualSelected.strBillingCity;
            //txtState2.Text = searchResult.IndividualSelected.strBillingState;
            //txtEmail.Text = searchResult.IndividualSelected.strEmail;

            //txtProgram.Text = searchResult.IndividualSelected.IndividualPlan.ToString();

            //switch (searchResult.IndividualSelected.IndividualPlan)
            //{
            //    case Plan.GoldPlus:
            //        txtMemberProgram.Text = "Gold Plus";
            //        break;
            //    case Plan.Gold:
            //        txtMemberProgram.Text = "Gold";
            //        break;
            //    case Plan.Silver:
            //        txtMemberProgram.Text = "Silver";
            //        break;
            //    case Plan.Bronze:
            //        txtMemberProgram.Text = "Bronze";
            //        break;
            //    case Plan.GoldMedi_I:
            //        txtMemberProgram.Text = "Gold Medi-I";
            //        break;
            //    case Plan.GoldMedi_II:
            //        txtMemberProgram.Text = "Gold Medi-II";
            //        break;
            //}

            //txtIndChurchName.Text = searchResult.IndividualSelected.strChurch;

            //txtMembershipStartDate.Text = searchResult.IndividualSelected.dtMembershipIndStartDate.Value.ToString("MM/dd/yyyy");
            //if (searchResult.IndividualSelected.dtMembershipCancelledDate != null)
            //{
            //    txtMembershipCancelledDate.Text = searchResult.IndividualSelected.dtMembershipCancelledDate.Value.ToString("MM/dd/yyyy");
            //}
            //else txtMembershipCancelledDate.Text = String.Empty;
            //txtIndMemberShipStatus.Text = searchResult.IndividualSelected.membershipStatus.ToString();

            //IndividualIdIndividualPage = txtIndividualID.Text.Trim();

            //String strSqlQueryForCaseInfo = "select distinct([dbo].[tbl_medbill].[Case_Id]), [dbo].[tbl_medbill].[Contact_Id], [dbo].[tbl_medbill].[BillStatus] " +
            //                                "from [dbo].[tbl_medbill] " +
            //                                "where [dbo].[tbl_medbill].[Contact_Id] = @IndividualId and " +
            //                                "([dbo].[tbl_medbill].[BillStatus] = @BillStatusCode0 or " +
            //                                "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode1 or " +
            //                                "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode2 or " +
            //                                "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode3 or " +
            //                                "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode4)";

            //SqlCommand cmdQueryForCaseInfo = new SqlCommand(strSqlQueryForCaseInfo, connRN);
            //cmdQueryForCaseInfo.CommandType = CommandType.Text;

            //cmdQueryForCaseInfo.Parameters.AddWithValue("@IndividualId", IndividualIdIndividualPage);
            //cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode0", 0);     // Pending
            //cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode1", 1);     // Job Assigned to  
            //cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode2", 2);     // In Progress
            //cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode3", 3);     // Eligibility
            //cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode4", 4);     // Under bill processing
            //                                                                        //cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode5", 5);    

            //connRN.Open();
            //SqlDataReader rdrCaseInfo = cmdQueryForCaseInfo.ExecuteReader();

            //lstCaseInfo.Clear();
            //if (rdrCaseInfo.HasRows)
            //{
            //    while (rdrCaseInfo.Read())
            //    {
            //        lstCaseInfo.Add(new CaseInfo { CaseName = rdrCaseInfo.GetString(0), IndividualId = rdrCaseInfo.GetString(1) });
            //    }
            //}
            //connRN.Close();

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //if (lstCaseInfo.Count > 0)
            //{

            //    String strSqlQueryForCasesForIndividualID = "select [dbo].[tbl_case].[Case_Name], [dbo].[tbl_case].[CreateDate], [dbo].[tbl_case].[CreateStaff], " +
            //                                                "[dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Receiv_Date], [dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Receiv_Date], " +
            //                                                "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Receiv_Date], [dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
            //                                                "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Receiv_Date] " +
            //                                                "from [dbo].[tbl_case] where [dbo].[tbl_case].[Contact_ID] = @IndividualID";


            //    SqlCommand cmdQueryForCasesIndividualPage = new SqlCommand(strSqlQueryForCasesForIndividualID, connRN);
            //    cmdQueryForCasesIndividualPage.CommandType = CommandType.Text;
            //    cmdQueryForCasesIndividualPage.Parameters.AddWithValue("@IndividualID", lstCaseInfo[0].IndividualId);

            //    cmdQueryForCasesIndividualPage.Notification = null;

            //    SqlDependency dependencyCaseForIndividual = new SqlDependency(cmdQueryForCasesIndividualPage);
            //    dependencyCaseForIndividual.OnChange += new OnChangeEventHandler(OnCaseForIndividualChange);

            //    connRN.Open();
            //    SqlDataReader rdrCasesForIndividual = cmdQueryForCasesIndividualPage.ExecuteReader();

            //    if (rdrCasesForIndividual.HasRows)
            //    {
            //        gvProcessingCaseNo.Rows.Clear();
            //        while (rdrCasesForIndividual.Read())
            //        {
            //            for (int i = 0; i < lstCaseInfo.Count; i++)
            //            {
            //                if ((!rdrCasesForIndividual.IsDBNull(0)) &&
            //                    (rdrCasesForIndividual.GetString(0) == lstCaseInfo[i].CaseName))
            //                {

            //                    DataGridViewRow row = new DataGridViewRow();

            //                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });

            //                    if (!rdrCasesForIndividual.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetString(0) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

            //                    if (!rdrCasesForIndividual.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(1) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

            //                    if (!rdrCasesForIndividual.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetInt16(2) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

            //                    if (!rdrCasesForIndividual.IsDBNull(3)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(3) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = false });

            //                    if (!rdrCasesForIndividual.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(4) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

            //                    if (!rdrCasesForIndividual.IsDBNull(5)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(5) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = false });

            //                    if (!rdrCasesForIndividual.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(6) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

            //                    if (!rdrCasesForIndividual.IsDBNull(7)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(7) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = false });

            //                    if (!rdrCasesForIndividual.IsDBNull(8)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(8) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

            //                    if (!rdrCasesForIndividual.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(9) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

            //                    if (!rdrCasesForIndividual.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(10) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

            //                    if (!rdrCasesForIndividual.IsDBNull(11)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(11) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

            //                    if (!rdrCasesForIndividual.IsDBNull(12)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(12) });
            //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

            //                    gvProcessingCaseNo.Rows.Add(row);
            //                }
            //            }
            //        }
            //    }
            //    connRN.Close();
            //}

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //// Case History Page

            //strIndividualId = searchResult.IndividualSelected.strIndividualID.Trim();

            //txtCaseHistoryIndividualID.Text = strIndividualId;

            //txtCaseHistoryIndividualName.Text = txtLastName.Text + ", " + txtFirstName.Text + " " + txtMiddleName.Text;

            //String strSqlQueryForCreateStaff = "select dbo.tbl_CreateStaff.CreateStaff_Id, dbo.tbl_CreateStaff.Staff_Name from dbo.tbl_CreateStaff";

            //SqlCommand cmdQueryForCreateStaff = new SqlCommand(strSqlQueryForCreateStaff, connRN);
            //cmdQueryForCreateStaff.CommandType = CommandType.Text;

            //connRN.Open();
            //SqlDataReader rdrCreateStaff = cmdQueryForCreateStaff.ExecuteReader();

            //lstCreateStaff.Clear();
            //if (rdrCreateStaff.HasRows)
            //{
            //    while (rdrCreateStaff.Read())
            //    {
            //        lstCreateStaff.Add(new StaffInfo { StaffId = rdrCreateStaff.GetInt16(0), StaffName = rdrCreateStaff.GetString(1) });
            //    }
            //}
            //connRN.Close();

            //String strSqlQueryForModifiStaff = "select dbo.tbl_ModifiStaff.ModifiStaff_Id, dbo.tbl_ModifiStaff.Staff_Name from dbo.tbl_ModifiStaff";

            //SqlCommand cmdQueryForModifiStaff = new SqlCommand(strSqlQueryForModifiStaff, connRN);
            //cmdQueryForModifiStaff.CommandType = CommandType.Text;

            //connRN.Open();
            //SqlDataReader rdrModifiStaff = cmdQueryForModifiStaff.ExecuteReader();

            //lstModifiStaff.Clear();
            //if (rdrModifiStaff.HasRows)
            //{
            //    while (rdrModifiStaff.Read())
            //    {
            //        lstModifiStaff.Add(new StaffInfo { StaffId = rdrModifiStaff.GetInt16(0), StaffName = rdrModifiStaff.GetString(1) });
            //    }
            //}
            //connRN.Close();

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //String strSqlQueryForCases = "select dbo.tbl_case.Case_Name, dbo.tbl_case.CreateDate, dbo.tbl_case.CreateStaff, " +
            //                                "dbo.tbl_case.ModifiDate, dbo.tbl_case.ModifiStaff " +
            //                                "from dbo.tbl_case where individual_id = @IndividualId";


            //SqlCommand cmdQueryForCases = new SqlCommand(strSqlQueryForCases, connRN);
            //cmdQueryForCases.CommandType = CommandType.Text;

            //cmdQueryForCases.Parameters.AddWithValue("@IndividualId", strIndividualId);

            //SqlDependency dependencyCase = new SqlDependency(cmdQueryForCases);
            //dependencyCase.OnChange += new OnChangeEventHandler(OnCaseChange);


            //connRN.Open();
            //SqlDataReader reader = cmdQueryForCases.ExecuteReader();

            //if (reader.HasRows)
            //{
            //    gvCaseViewCaseHistory.Rows.Clear();
            //    while (reader.Read())
            //    {
            //        DataGridViewRow row = new DataGridViewRow();

            //        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
            //        row.Cells.Add(new DataGridViewTextBoxCell { Value = reader.GetString(0) });     // Case ID

            //        // Create Date
            //        if (!reader.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = reader.GetDateTime(1).ToString("MM/dd/yyyy") });

            //        // Create Staff
            //        if (!reader.IsDBNull(2))
            //        {
            //            for (int i = 0; i < lstCreateStaff.Count; i++)
            //            {
            //                if (reader.GetInt16(2) == lstCreateStaff[i].StaffId)
            //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = lstCreateStaff[i].StaffName });
            //            }
            //        }

            //        // Modifi Date
            //        if (!reader.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = reader.GetDateTime(3).ToString("MM/dd/yyyy") });

            //        // Modifi Staff
            //        if (!reader.IsDBNull(4))
            //        {
            //            for (int i = 0; i < lstModifiStaff.Count; i++)
            //            {
            //                if (reader.GetInt16(4) == lstModifiStaff[i].StaffId)
            //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = lstModifiStaff[i].StaffName });
            //            }
            //        }
            //        gvCaseViewCaseHistory.Rows.Add(row);
            //    }
            //}
            //connRN.Close();

            //        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //        // Settlement DataGridView
            //        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //        ///
            //        /// Tooltips
            //        /// 

            //        //// Browse buttons for Case Creation tab
            //        //ToolTip tipBrowseForNPF = new ToolTip();
            //        //tipBrowseForNPF.SetToolTip(btnBrowseNPF, "Browse for Needs Processing Form");

            //        //ToolTip tipBrowseForIB = new ToolTip();
            //        //tipBrowseForIB.SetToolTip(btnBrowseIB, "Browse for Itemized Bill");

            //        //ToolTip tipBrowseForPoP = new ToolTip();
            //        //tipBrowseForPoP.SetToolTip(btnBrowsePoP, "Browse for Proof of Payment");

            //        //ToolTip tipBrowseForMedRcord = new ToolTip();
            //        //tipBrowseForMedRcord.SetToolTip(btnBrowseMR, "Browse for Medical Record");

            //        //ToolTip tipBrowseForUnknownDoc = new ToolTip();
            //        //tipBrowseForUnknownDoc.SetToolTip(btnBrowseUnknownDoc, "Browse for Unknown Document");

            //        //// Upload buttons for Case Creation tab
            //        //ToolTip tipUploadNPF = new ToolTip();
            //        //tipUploadNPF.SetToolTip(btnNPFFormUpload, "Upload the Needs Processing Form to the server");

            //        //ToolTip tipUploadIB = new ToolTip();
            //        //tipUploadIB.SetToolTip(btnIBUpload, "Upload the Itemized Bill to the server");

            //        //ToolTip tipUploadPoP = new ToolTip();
            //        //tipUploadPoP.SetToolTip(btnPoPUpload, "Upload the Proof of Payment to the server");

            //        //ToolTip tipUploadMedRec = new ToolTip();
            //        //tipUploadMedRec.SetToolTip(btnMedicalRecordUpload, "Upload the Medical Record to the server");

            //        //ToolTip tipUploadUnknownDoc = new ToolTip();
            //        //tipUploadUnknownDoc.SetToolTip(btnUnknownDocUpload, "Upload the Unknown Document to the server");

            //        //// View buttons for Case Creation tab
            //        //ToolTip tipViewNPFCreateCase = new ToolTip();
            //        //tipViewNPFCreateCase.SetToolTip(btnNPFFormView, "View the NPF Form on the server");

            //        //ToolTip tipViewIBCreateCase = new ToolTip();
            //        //tipViewIBCreateCase.SetToolTip(btnIBView, "View the Itemized Bill on the server");

            //        //ToolTip tipViewPoPCreateCase = new ToolTip();
            //        //tipViewPoPCreateCase.SetToolTip(btnPoPView, "View the Proof of Payment on the server");

            //        //ToolTip tipViewMedRecCreateCase = new ToolTip();
            //        //tipViewMedRecCreateCase.SetToolTip(btnMedicalRecordView, "View the Medical Record Document on the server");

            //        //ToolTip tipViewUnknownDocCreateCase = new ToolTip();
            //        //tipViewUnknownDocCreateCase.SetToolTip(btnOtherDocView, "View the Unknown Document on the server");


            //        //// Delete buttons for Case Creation tab
            //        //ToolTip tipDeleteNPF = new ToolTip();
            //        //tipDeleteNPF.SetToolTip(btnNPFFormDelete, "Delete the uploaded Needs Processing Form on the server");

            //        //ToolTip tipDeleteIB = new ToolTip();
            //        //tipDeleteIB.SetToolTip(btnDeleteIB, "Delete the uploaded Itemized Bill on the server");

            //        //ToolTip tipDeletePoP = new ToolTip();
            //        //tipDeletePoP.SetToolTip(btnDeletePoP, "Delete the uploaded Proof of Payment on the server");

            //        //ToolTip tipDeleteMedRec = new ToolTip();
            //        //tipDeleteMedRec.SetToolTip(btnDeleteMedicalRecord, "Delete the uploaded Medical Record on the server");

            //        //ToolTip tipDeleteUnknownDoc = new ToolTip();
            //        //tipDeleteUnknownDoc.SetToolTip(btnDeleteUnknownDoc, "Delete the uploaded Unknown Document on the server");

            //        //// Tooltips for Medical Bill tab

            //        //// View buttons for Medical Bill tab
            //        //ToolTip tipViewNPF = new ToolTip();
            //        //tipViewNPF.SetToolTip(btnViewNPF, "View the Needs Processing Form on the server");

            //        //ToolTip tipViewIB = new ToolTip();
            //        //tipViewIB.SetToolTip(btnViewIB, "View the Itemized Bill on the server");

            //        //ToolTip tipViewPoP = new ToolTip();
            //        //tipViewPoP.SetToolTip(btnViewPoP, "View the Proof of Payment on the server");

            //        //ToolTip tipViewMedRec = new ToolTip();
            //        //tipViewMedRec.SetToolTip(btnViewMedRecord, "View the Medical Record on the server");

            //        //ToolTip tipViewUnknownDoc = new ToolTip();
            //        //tipViewUnknownDoc.SetToolTip(btnViewOtherDoc, "View the Unknown Documents on the server");

            //        //// ToolTips for Illness button and Incident button
            //        //ToolTip tipIllness = new ToolTip();
            //        //tipIllness.SetToolTip(btnMedBill_lllness, "Create illness or choose illness");

            //        //ToolTip tipIncident = new ToolTip();
            //        //tipIncident.SetToolTip(btnMedBill_Incident, "Create incident or choose incident");

            //        //// Tooltips on Settlement
            //        //ToolTip tipAddNewSettlement = new ToolTip();
            //        //tipAddNewSettlement.SetToolTip(btnAddNewSettlement, "Add New Settlement");

            //        //ToolTip tipEditSettlement = new ToolTip();
            //        //tipEditSettlement.SetToolTip(btnEditSettlement, "Edit the Seleted Settlement");

            //        //ToolTip tipDeleteSettlement = new ToolTip();
            //        //tipDeleteSettlement.SetToolTip(btnDeleteSettlement, "Delete the Selected Settlement");


            //        tbCMMManager.SelectedIndex = 0;

            //        PrevTabPage = TabPage.None;
            //        CurrentTabPage = TabPage.DashBoard;
            //        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //    }
            //}
        }

        private void EnableIndividualView()
        {
            txtAnivDate.Enabled = true;
            txtAccountNo.Enabled = true;
            txtAccountHolder.Enabled = true;
            txtBankRoutingNo.Enabled = true;
            txtBankName.Enabled = true;
            txtTotalMedBillAmount.Enabled = true;
            rbEnglish.Enabled = true;
            rbKorean.Enabled = true;
            txtRelationship.Enabled = true;
            dtpBirthDate.Enabled = true;
            btnEditCaseUnderProcess.Enabled = true;
            btnIndViewCancelUpperRight.Enabled = true;
            btnIndViewCancelUpperRight.Enabled = true;
            btnAddHealthHistoryAfterReg.Enabled = true;
            btnAddHealthHistoryBeforeReg.Enabled = true;
            btnIndViewCancelLowerRight.Enabled = true;
            //btnIndViewUpdateLowerRight.Enabled = true;
            gvRecentCommunication.Enabled = true;
            chkCommunicationEtc.Enabled = true;
            chkCommunicationReq.Enabled = true;
            chkCommunicationFax.Enabled = true;
            chkCommunicationLetter.Enabled = true;
            chkCommunicationEmail.Enabled = true;
            chkCommunicationCall.Enabled = true;
            chkCommunicationAll.Enabled = true;
            gvFamilyInformation.Enabled = true;
            gvProcessingCaseNo.Enabled = true;
            txtWellBeingAmt.Enabled = true;
            txtProgramChangeReqDate.Enabled = true;
            txtOver10KAmount.Enabled = true;
            txtMembershipStartDate.Enabled = true;
            txtTotalSharedAmount.Enabled = true;
            txtIndMemberShipStatus.Enabled = true;
            txtDeceasedDate.Enabled = true;
            txtMembershipCancelledDate.Enabled = true;
            txtCancelationRequestDate.Enabled = true;
            txtProgramHistory.Enabled = true;
            txtProgram.Enabled = true;
            txtPowerOfAttorney.Enabled = true;
            cbGender.Enabled = true;
            cbReimbursementMethod.Enabled = true;
            txtIndChurchName.Enabled = true;
            txtBusinessPhone.Enabled = true;
            cbPreferredCommunication.Enabled = true;
            txtCellPhone1.Enabled = true;
            txtEmail.Enabled = true;
            txtState1.Enabled = true;
            txtState2.Enabled = true;
            txtCity1.Enabled = true;
            txtCity2.Enabled = true;
            txtZip1.Enabled = true;
            txtZip2.Enabled = true;
            txtStreetAddress1.Enabled = true;
            txtStreetAddress2.Enabled = true;
            txtIndividualSSN.Enabled = true;
            txtLastName.Enabled = true;
            txtFirstName.Enabled = true;
            txtMiddleName.Enabled = true;
            txtLastName.Enabled = true;
            txtCRM_ID.Enabled = true;
            txtIndividualID.Enabled = true;
            txtMembershipID.Enabled = true;
        }

        private void DisableIndividualView()
        {
            txtAnivDate.Enabled = false;
            txtAccountNo.Enabled = false;
            txtAccountHolder.Enabled = false;
            txtBankRoutingNo.Enabled = false;
            txtBankName.Enabled = false;
            txtTotalMedBillAmount.Enabled = false;
            rbEnglish.Enabled = false;
            rbKorean.Enabled = false;
            txtRelationship.Enabled = false;
            dtpBirthDate.Enabled = false;
            btnEditCaseUnderProcess.Enabled = false;
            btnIndViewCancelUpperRight.Enabled = false;
            btnIndViewCancelUpperRight.Enabled = false;
            btnAddHealthHistoryAfterReg.Enabled = false;
            btnAddHealthHistoryBeforeReg.Enabled = false;
            btnIndViewCancelLowerRight.Enabled = false;
            //btnIndViewUpdateLowerRight.Enabled = false;
            gvRecentCommunication.Enabled = false;
            chkCommunicationEtc.Enabled = false;
            chkCommunicationReq.Enabled = false;
            chkCommunicationFax.Enabled = false;
            chkCommunicationLetter.Enabled = false;
            chkCommunicationEmail.Enabled = false;
            chkCommunicationCall.Enabled = false;
            chkCommunicationAll.Enabled = false;
            gvFamilyInformation.Enabled = false;
            gvProcessingCaseNo.Enabled = false;
            txtWellBeingAmt.Enabled = false;
            txtProgramChangeReqDate.Enabled = false;
            txtOver10KAmount.Enabled = false;
            txtMembershipStartDate.Enabled = false;
            txtTotalSharedAmount.Enabled = false;
            txtIndMemberShipStatus.Enabled = false;
            txtDeceasedDate.Enabled = false;
            txtMembershipCancelledDate.Enabled = false;
            txtCancelationRequestDate.Enabled = false;
            txtProgramHistory.Enabled = false;
            txtProgram.Enabled = false;
            txtPowerOfAttorney.Enabled = false;
            cbGender.Enabled = false;
            cbReimbursementMethod.Enabled = false;
            txtIndChurchName.Enabled = false;
            txtBusinessPhone.Enabled = false;
            cbPreferredCommunication.Enabled = false;
            txtCellPhone1.Enabled = false;
            txtEmail.Enabled = false;
            txtState1.Enabled = false;
            txtState2.Enabled = false;
            txtCity1.Enabled = false;
            txtCity2.Enabled = false;
            txtZip1.Enabled = false;
            txtZip2.Enabled = false;
            txtStreetAddress1.Enabled = false;
            txtStreetAddress2.Enabled = false;
            txtIndividualSSN.Enabled = false;
            txtLastName.Enabled = false;
            txtFirstName.Enabled = false;
            txtMiddleName.Enabled = false;
            txtLastName.Enabled = false;
            txtCRM_ID.Enabled = false;
            txtIndividualID.Enabled = false;
            txtMembershipID.Enabled = false;
        }

        private void EnableCaseView()
        {
            btnCloseCaseView.Enabled = true;
            txtCaseHistoryIndividualID.Enabled = true;
            txtCaseHistoryIndividualName.Enabled = true;
            btnDeleteCase.Enabled = true;
            btnEditCase.Enabled = true;
            btnCreateNewCase.Enabled = true;
            gvCaseViewCaseHistory.Enabled = true;
        }

        private void DisableCaseView()
        {
            btnCloseCaseView.Enabled = false;
            txtCaseHistoryIndividualID.Enabled = false;
            txtCaseHistoryIndividualName.Enabled = false;
            btnDeleteCase.Enabled = false;
            btnEditCase.Enabled = false;
            btnCreateNewCase.Enabled = false;
            gvCaseViewCaseHistory.Enabled = false;
        }

        private void EnableIllnessView()
        {
            txtIllnessViewIndId.Enabled = true;
            txtIllnessViewMEMB.Enabled = true;
            gvIllnessList.Enabled = true;
        }

        private void DisableIllnessView()
        {
            txtIllnessViewIndId.Enabled = false;
            txtIllnessViewMEMB.Enabled = false;
            gvIllnessList.Enabled = false;
        }

        private void EnableIncidentView()
        {
            txtIncidentViewMEMB.Enabled = true;
            txtIncidentViewIndId.Enabled = true;
            gvIncidentList.Enabled = true;
        }

        private void DisableIncidentView()
        {
            txtIncidentViewMEMB.Enabled = false;
            txtIncidentViewIndId.Enabled = false;
            gvIncidentList.Enabled = false;
        }

        private void EnableMedBillView()
        {
            txtMedBillViewIndId.Enabled = true;
            txtMedBillViewMEMB.Enabled = true;
            gvMedBillList.Enabled = true;
        }

        private void DisableMedBillView()
        {
            txtMedBillViewIndId.Enabled = false;
            txtMedBillViewMEMB.Enabled = false;
            gvMedBillList.Enabled = false;
        }

        private void EnableCaseForm()
        {
            cbCaseStatus.Enabled = true;
            //btnDeleteMedBill.Enabled = true;
            //btnEditMedBill.Enabled = true;
            //btnNewMedBill_Case.Enabled = true;
            txtNoteOnCase.Enabled = true;
            btnBrowseNPF.Enabled = true;
            txtCaseName.Enabled = true;
            //btnCaseCreationLowerSave.Enabled = true;
            //btnCaseCreationLowerCancel.Enabled = true;
            btnCaseCreationSaveUpper.Enabled = true;
            //btnCaseCreationCancelUpper.Enabled = true;
            //txtPoPUploadDate.Enabled = true;
            //txtMRUploadDate.Enabled = true;
            //txtOtherDocUploadDate.Enabled = true;
            //txtIBUploadDate.Enabled = true;
            //txtNPFUploadDate.Enabled = true;
            dtpNPFReceivedDate.Enabled = true;
            dtpIBReceivedDate.Enabled = true;
            dtpPoPReceivedDate.Enabled = true;
            dtpMRReceivedDate.Enabled = true;
            dtpOtherDocReceivedDate.Enabled = true;
            btnBrowseUnknownDoc.Enabled = true;
            btnBrowseMR.Enabled = true;
            btnBrowsePoP.Enabled = true;
            btnBrowseIB.Enabled = true;
            btnBrowseNPF.Enabled = true;
            gvCasePageMedBills.Enabled = true;
            gvNewSupportLog.Enabled = true;
            btnCaseCreationNewSupportLog.Enabled = true;
            gvNewTaskRNtoNP.Enabled = true;
            gvNewTaskNPtoRNFD.Enabled = true;
            btnNewTaskRNtoNPnFD.Enabled = true;
            btnNewTaskNPtoRN.Enabled = true;
            btnIncomplete.Enabled = true;
            btnApprovedSendToRN.Enabled = true;
            btnOtherDocView.Enabled = true;
            btnDeleteUnknownDoc.Enabled = true;
            btnUnknownDocUpload.Enabled = true;
            btnMedicalRecordView.Enabled = true;
            btnDeleteMedicalRecord.Enabled = true;
            btnMedicalRecordUpload.Enabled = true;
            btnPoPView.Enabled = true;
            btnDeletePoP.Enabled = true;
            btnPoPUpload.Enabled = true;
            btnIBView.Enabled = true;
            btnDeleteIB.Enabled = true;
            btnNPFFormView.Enabled = true;
            btnNPFFormDelete.Enabled = true;
            btnNPFFormUpload.Enabled = true;
            btnIBUpload.Enabled = true;
            txtOtherDocumentFilePath.Enabled = true;
            txtMedicalRecordFilePath.Enabled = true;
            txtPopFilePath.Enabled = true;
            txtIBFilePath.Enabled = true;
            txtNPFFormFilePath.Enabled = true;
            chkOtherDocCaseCreationPage.Enabled = true;
            chkMedicalRecordCaseCreationPage.Enabled = true;
            chkPoP_CaseCreationPage.Enabled = true;
            chkIB_CaseCreationPage.Enabled = true;
            chkNPF_CaseCreationPage.Enabled = true;
            txtCreateCaseIndividualName.Enabled = true;
            txtCaseIndividualID.Enabled = true;
        }

        private void DisableCaseForm()
        {
            cbCaseStatus.Enabled = false;
            btnDeleteMedBill.Enabled = false;
            btnEditMedBill.Enabled = false;
            btnNewMedBill_Case.Enabled = false;
            txtNoteOnCase.Enabled = false;
            btnBrowseNPF.Enabled = false;
            txtCaseName.Enabled = false;
            //btnCaseCreationLowerSave.Enabled = false;
            //btnCaseCreationLowerCancel.Enabled = false;
            btnCaseCreationSaveUpper.Enabled = false;
            //btnCaseCreationCancelUpper.Enabled = false;
            //txtPoPUploadDate.Enabled = false;
            //txtMRUploadDate.Enabled = false;
            //txtOtherDocUploadDate.Enabled = false;
            //txtIBUploadDate.Enabled = false;
            //txtNPFUploadDate.Enabled = false;
            dtpNPFReceivedDate.Enabled = false;
            dtpIBReceivedDate.Enabled = false;
            dtpPoPReceivedDate.Enabled = false;
            dtpMRReceivedDate.Enabled = false;
            dtpOtherDocReceivedDate.Enabled = false;
            btnBrowseUnknownDoc.Enabled = false;
            btnBrowseMR.Enabled = false;
            btnBrowsePoP.Enabled = false;
            btnBrowseIB.Enabled = false;
            btnBrowseNPF.Enabled = false;
            gvCasePageMedBills.Enabled = false;
            gvNewSupportLog.Enabled = false;
            btnCaseCreationNewSupportLog.Enabled = false;
            gvNewTaskRNtoNP.Enabled = false;
            gvNewTaskNPtoRNFD.Enabled = false;
            btnNewTaskRNtoNPnFD.Enabled = false;
            btnNewTaskNPtoRN.Enabled = false;
            btnIncomplete.Enabled = false;
            btnApprovedSendToRN.Enabled = false;
            btnOtherDocView.Enabled = false;
            btnDeleteUnknownDoc.Enabled = false;
            btnUnknownDocUpload.Enabled = false;
            btnMedicalRecordView.Enabled = false;
            btnDeleteMedicalRecord.Enabled = false;
            btnMedicalRecordUpload.Enabled = false;
            btnPoPView.Enabled = false;
            btnDeletePoP.Enabled = false;
            btnPoPUpload.Enabled = false;
            btnIBView.Enabled = false;
            btnDeleteIB.Enabled = false;
            btnNPFFormView.Enabled = false;
            btnNPFFormDelete.Enabled = false;
            btnNPFFormUpload.Enabled = false;
            txtOtherDocumentFilePath.Enabled = false;
            txtMedicalRecordFilePath.Enabled = false;
            txtPopFilePath.Enabled = false;
            txtIBFilePath.Enabled = false;
            txtNPFFormFilePath.Enabled = false;
            chkOtherDocCaseCreationPage.Enabled = false;
            chkMedicalRecordCaseCreationPage.Enabled = false;
            chkPoP_CaseCreationPage.Enabled = false;
            chkIB_CaseCreationPage.Enabled = false;
            chkNPF_CaseCreationPage.Enabled = false;
            txtCreateCaseIndividualName.Enabled = false;
            txtCaseIndividualID.Enabled = false;
            //btnCaseCreationLowerSave.Enabled = false;

        }

        private void EnableMedicalBillForm()
        {
            txtTotalSharedAmtMedBill.Enabled = true;
            txtPersonalResponsibility.Enabled = true;
            grpEtc.Enabled = true;
            gvSettlementsInMedBill.Enabled = true;
            grpMedBillInfo.Enabled = true;
            grpMedicalProviderResponse.Enabled = true;
            //btnMedBillCreationPgLowerCancel.Enabled = true;
            //btnMedBillCreationPgLowerSave.Enabled = true;
            gvUserModifiedDateHistory.Enabled = true;
            btnDeleteSettlement.Enabled = true;
            btnAddNewSettlement.Enabled = true;
            //btnMedBillCreationPgUpperCancel.Enabled = true;
            btnMedBillCreatePgUpperSave.Enabled = true;
            grpTasks.Enabled = true;
            grpMedicalBillInformation.Enabled = true;
            grpDocumentProcessing.Enabled = true;
            chkMedBillNPFReceived.Enabled = false;
            chkMedBillPOPReceived.Enabled = false;
            chkMedBill_IBReceived.Enabled = false;
            chkOtherDocReceived.Enabled = false;
            chkMedRecordReceived.Enabled = false;
            dtpMedBillNPF.Enabled = false;
            dtpMedBill_IB.Enabled = false;
            dtpMedBillPOP.Enabled = false;
            dtpMedBillOtherDoc.Enabled = false;
            dtpMedBillMedRecord.Enabled = false;
            btnViewNPF.Enabled = true;
            btnViewIB.Enabled = true;
            btnViewPoP.Enabled = true;
            btnViewOtherDoc.Enabled = true;
            btnViewMedRecord.Enabled = true;
            grpICD10Code.Enabled = true;
            grpPatientInfo.Enabled = true;
            //btnMedBillCreatePgUpperSave.Enabled = true;
        }

        private void DisableMedicalBillForm()
        {
            txtTotalSharedAmtMedBill.Enabled = false;
            txtPersonalResponsibility.Enabled = false;
            grpEtc.Enabled = false;
            gvSettlementsInMedBill.Enabled = false;
            grpMedBillInfo.Enabled = false;
            grpMedicalProviderResponse.Enabled = false;
            //btnMedBillCreationPgLowerCancel.Enabled = false;
            //btnMedBillCreationPgLowerSave.Enabled = false;
            gvUserModifiedDateHistory.Enabled = false;
            btnDeleteSettlement.Enabled = false;
            btnAddNewSettlement.Enabled = false;
            //btnMedBillCreationPgUpperCancel.Enabled = false;
            btnMedBillCreatePgUpperSave.Enabled = false;
            grpTasks.Enabled = false;
            grpMedicalBillInformation.Enabled = false;
            grpDocumentProcessing.Enabled = false;
            grpICD10Code.Enabled = false;
            grpPatientInfo.Enabled = false;

        }

        private void UpdateGridViewMedBillOnCase(String IndividualId)
        {

            String strSqlQueryForCaseInfo = "select distinct([dbo].[tbl_medbill].[Case_Id]), [dbo].[tbl_medbill].[Contact_Id], [dbo].[tbl_medbill].[BillStatus] " +
                                "from [dbo].[tbl_medbill] " +
                                "where [dbo].[tbl_medbill].[BillStatus] = @BillStatusCode0 or " +
                                "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode1 or " +
                                "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode2 or " +
                                "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode3 or " +
                                "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode4";

            SqlCommand cmdQueryForCaseInfo = new SqlCommand(strSqlQueryForCaseInfo, connRN);
            cmdQueryForCaseInfo.CommandType = CommandType.Text;

            cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode0", MedBillStatus.Pending);     // Pending
            cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode1", MedBillStatus.CMMPendingPayment);     // Job Assigned to  
            cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode2", MedBillStatus.Shared);     // In Progress
            cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode3", MedBillStatus.Ineligible);     // Eligibility
            cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode4", MedBillStatus.PartiallyIneligible);     // Under bill processing

            SqlDependency dependency = new SqlDependency(cmdQueryForCaseInfo);
            dependency.OnChange += new OnChangeEventHandler(OnMedBillOnCaseChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrCaseInfo = cmdQueryForCaseInfo.ExecuteReader();
            lstCaseInfo.Clear();

            if (rdrCaseInfo.HasRows)
            {
                while (rdrCaseInfo.Read())
                {
                    lstCaseInfo.Add(new CaseInfo { CaseName = rdrCaseInfo.GetString(0), IndividualId = rdrCaseInfo.GetString(1) });
                }
            }
            rdrCaseInfo.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();


            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            String strSqlQueryForCasesForIndividualID = "select distinct([dbo].[tbl_case].[Case_Name]), [dbo].[tbl_case].[CreateDate], [dbo].[tbl_case].[CreateStaff], " +
                                                        "[dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Receiv_Date], [dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Receiv_Date], [dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Receiv_Date] " +
                                                        "from [dbo].[tbl_case] where [dbo].[tbl_case].[Contact_ID] = @IndividualID";

            SqlCommand cmdQueryForCasesIndividualPage = new SqlCommand(strSqlQueryForCasesForIndividualID, connRN);
            cmdQueryForCasesIndividualPage.CommandType = CommandType.Text;

            cmdQueryForCasesIndividualPage.Parameters.AddWithValue("@IndividualID", lstCaseInfo[0].IndividualId);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrCasesForIndividual = cmdQueryForCasesIndividualPage.ExecuteReader();
            gvProcessingCaseNo.Rows.Clear();

            if (rdrCasesForIndividual.HasRows)
            {
                while (rdrCasesForIndividual.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();

                    for (int i = 0; i < lstCaseInfo.Count; i++)
                    {
                        if ((!rdrCasesForIndividual.IsDBNull(0)) &&
                            (rdrCasesForIndividual.GetString(0) == lstCaseInfo[i].CaseName))
                        {

                            row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });

                            if (!rdrCasesForIndividual.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetString(0) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                            if (!rdrCasesForIndividual.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(1) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                            if (!rdrCasesForIndividual.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetInt16(2) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                            if (!rdrCasesForIndividual.IsDBNull(3)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(3) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = false });

                            if (!rdrCasesForIndividual.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(4) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                            if (!rdrCasesForIndividual.IsDBNull(5)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(5) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = false });

                            if (!rdrCasesForIndividual.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(6) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                            if (!rdrCasesForIndividual.IsDBNull(7)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(7) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = false });

                            if (!rdrCasesForIndividual.IsDBNull(8)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(8) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                            if (!rdrCasesForIndividual.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(9) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                            if (!rdrCasesForIndividual.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(10) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                            gvProcessingCaseNo.Rows.Add(row);


                        }
                    }
                }
            }
            rdrCasesForIndividual.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();

        }



        private void UpdateGridViewCaseHistory(String IndividualId)
        {

            String strSqlQueryForCases = "select [dbo].[tbl_case].[Case_Name], [dbo].[tbl_case].[CreateDate], [dbo].[tbl_case].[CreateStaff], " +
                                         "[dbo].[tbl_case].[ModifiDate], [dbo].[tbl_case].[ModifiStaff] from [dbo].[tbl_case] " +
                                         "where [dbo].[tbl_case].[individual_id] = @IndividualId and " +
                                         "[dbo].[tbl_case].[IsDeleted] = 0 " +
                                         "order by [dbo].[tbl_case].[ID]";


            SqlCommand cmdQueryForCases = new SqlCommand(strSqlQueryForCases, connRN);
            cmdQueryForCases.CommandType = CommandType.Text;

            cmdQueryForCases.Parameters.AddWithValue("@IndividualId", strIndividualId);

            SqlDependency dependencyCase = new SqlDependency(cmdQueryForCases);
            dependencyCase.OnChange += new OnChangeEventHandler(OnCaseChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();

            //if (IsHandleCreated) ClearCaseInProcessSafely();
            //else gvProcessingCaseNo.Rows.Clear();
            if (IsHandleCreated) ClearCaseInCaseViewSafely();
            else gvCaseViewCaseHistory.Rows.Clear();

            SqlDataReader reader = cmdQueryForCases.ExecuteReader();
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();

                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = reader.GetString(0) });     // Case ID

                    // Create Date
                    if (!reader.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = reader.GetDateTime(1).ToString("MM/dd/yyyy") });

                    // Create Staff
                    if (!reader.IsDBNull(2))
                    {
                        for (int i = 0; i < lstCreateStaff.Count; i++)
                        {
                            if (reader.GetInt16(2) == lstCreateStaff[i].StaffId)
                                row.Cells.Add(new DataGridViewTextBoxCell { Value = lstCreateStaff[i].StaffName });
                        }
                    }

                    // Modifi Date
                    if (!reader.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = reader.GetDateTime(3).ToString("MM/dd/yyyy") });

                    // Modifi Staff
                    if (!reader.IsDBNull(4))
                    {
                        for (int i = 0; i < lstModifiStaff.Count; i++)
                        {
                            if (reader.GetInt16(4) == lstModifiStaff[i].StaffId)
                                row.Cells.Add(new DataGridViewTextBoxCell { Value = lstModifiStaff[i].StaffName });
                        }
                    }

                    if (IsHandleCreated) AddRowToCaseInCaseViewSafely(row);
                    else gvCaseViewCaseHistory.Rows.Add(row);
                }
            }
            reader.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();
        }

        private void UpdateGridViewCaseForIndividual()
        {

            String strSqlQueryForCaseInfo = "select distinct([dbo].[tbl_medbill].[Case_Id]), [dbo].[tbl_medbill].[Contact_Id], [dbo].[tbl_medbill].[BillStatus] " +
                                            "from [dbo].[tbl_medbill] " +
                                            "where [dbo].[tbl_medbill].[IsDeleted] = 0 and " +
                                            "([dbo].[tbl_medbill].[BillStatus] = @BillStatusCode0 or " +
                                            "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode1 or " +
                                            "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode2 or " +
                                            "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode3 or " +
                                            "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode4)";

            SqlCommand cmdQueryForCaseInfo = new SqlCommand(strSqlQueryForCaseInfo, connRN);
            cmdQueryForCaseInfo.CommandType = CommandType.Text;

            cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode0", MedBillStatus.Pending);     // Pending
            cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode1", MedBillStatus.CMMPendingPayment);     // Job Assigned to  
            cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode2", MedBillStatus.Shared);     // In Progress
            cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode3", MedBillStatus.Ineligible);     // Eligibility
            cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode4", MedBillStatus.PartiallyIneligible);     // Under bill processing

            //if (connRN.State == ConnectionState.Closed) connRN.Open();
            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrCaseInfo = cmdQueryForCaseInfo.ExecuteReader();
            lstCaseInfo.Clear();
            if (rdrCaseInfo.HasRows)
            {
                while (rdrCaseInfo.Read())
                {
                    lstCaseInfo.Add(new CaseInfo { CaseName = rdrCaseInfo.GetString(0), IndividualId = rdrCaseInfo.GetString(1) });
                }
            }
            rdrCaseInfo.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();

            String strSqlQueryForCasesForIndividualID = "select [dbo].[tbl_case].[Case_Name], [dbo].[tbl_case_status_code].[CaseStatusValue], [dbo].[tbl_case].[CreateDate], " +
                                            "[dbo].[tbl_CreateStaff].[Staff_Name], " +
                                            "[dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Receiv_Date], [dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Receiv_Date], " +
                                            "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Receiv_Date], [dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
                                            "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Receiv_Date] " +
                                            "from [dbo].[tbl_case] " +
                                            "inner join [dbo].[tbl_case_status_code] on [dbo].[tbl_case].[Case_status] = [dbo].[tbl_case_status_code].[CaseStatusCode] " +
                                            "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_case].[CreateStaff] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                            "where [dbo].[tbl_case].[Contact_ID] = @IndividualID and " +
                                            "[dbo].[tbl_case].[IsDeleted] = 0 and " +
                                            "([dbo].[tbl_case].[Case_Status] = 0 or [dbo].[tbl_case].[Case_Status] = 1) " +
                                            "order by [dbo].[tbl_case].[ID]";


            SqlCommand cmdQueryForCasesIndividualPage = new SqlCommand(strSqlQueryForCasesForIndividualID, connRN);
            cmdQueryForCasesIndividualPage.CommandType = CommandType.Text;
            cmdQueryForCasesIndividualPage.Parameters.AddWithValue("@IndividualID", IndividualIdIndividualPage);

            cmdQueryForCasesIndividualPage.Notification = null;

            SqlDependency dependencyCaseForIndividual = new SqlDependency(cmdQueryForCasesIndividualPage);
            dependencyCaseForIndividual.OnChange += new OnChangeEventHandler(OnCaseForIndividualChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrCasesForIndividual = cmdQueryForCasesIndividualPage.ExecuteReader();

            if (IsHandleCreated) ClearCaseInProcessSafely();
            else gvProcessingCaseNo.Rows.Clear();

            if (rdrCasesForIndividual.HasRows)
            {
                while (rdrCasesForIndividual.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();

                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });

                    if (!rdrCasesForIndividual.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetString(0) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (!rdrCasesForIndividual.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetString(1) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (!rdrCasesForIndividual.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(2).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (!rdrCasesForIndividual.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetString(3) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (!rdrCasesForIndividual.IsDBNull(4)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(4) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = false });

                    if (!rdrCasesForIndividual.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(5).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (!rdrCasesForIndividual.IsDBNull(6)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(6) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = false });

                    if (!rdrCasesForIndividual.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(7).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (!rdrCasesForIndividual.IsDBNull(8)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(8) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = false });

                    if (!rdrCasesForIndividual.IsDBNull(9)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(9).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (!rdrCasesForIndividual.IsDBNull(10)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(10) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (!rdrCasesForIndividual.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(11).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (!rdrCasesForIndividual.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(12) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (!rdrCasesForIndividual.IsDBNull(13)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(13).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (IsHandleCreated) AddRowToCaseInProcessSafely(row);
                    else gvProcessingCaseNo.Rows.Add(row);
                }
            }
            rdrCasesForIndividual.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();
        }

        private void OnMedBillOnCaseChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnMedBillOnCaseChange;

                UpdateGridViewMedBillOnCase(strIndividualId);
            }
        }



        private void ClearCaseInProcessSafely()
        {
            //for (int i = 0; i < gvProcessingCaseNo.Rows.Count; i++)
            //{
            //    gvProcessingCaseNo.BeginInvoke(new RemoveCaseInProcess(RemoveRowCaseInProcess), 0);
            //}
            gvProcessingCaseNo.BeginInvoke(new RemoveAllCaseInProcess(RemoveAllCasesInProcess));
        }

        private void AddRowToCaseInProcessSafely(DataGridViewRow row)
        {
            gvProcessingCaseNo.BeginInvoke(new AddRowToCaseInProcess(AddRowCaseInProcess), row);
        }

        private void AddRowCaseInProcess(DataGridViewRow row)
        {
            gvProcessingCaseNo.Rows.Add(row);
        }

        private void RemoveAllCasesInProcess()
        {
            gvProcessingCaseNo.Rows.Clear();
        }

        private void RemoveRowCaseInProcess(int i)
        {
            gvProcessingCaseNo.Rows.RemoveAt(i);
        }

        private void OnCaseForIndividualChange(object sender, SqlNotificationEventArgs e)
        {

            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnCaseForIndividualChange;

                UpdateGridViewCaseForIndividual();
            }
        }

        private void ClearCaseInCaseViewSafely()
        {
            gvCaseViewCaseHistory.BeginInvoke(new RemoveAllCaseInCaseView(RemoveAllRowCaseInCaseView));
        }

        private void AddRowToCaseInCaseViewSafely(DataGridViewRow row)
        {
            gvCaseViewCaseHistory.BeginInvoke(new AddRowToCaseInCaseView(AddRowCaseInCaseView), row);
        }

        private void AddRowCaseInCaseView(DataGridViewRow row)
        {
            gvCaseViewCaseHistory.Rows.Add(row);
        }

        private void RemoveRowCaseInCaseView(int i)
        {
            gvCaseViewCaseHistory.Rows.RemoveAt(i);
        }

        private void RemoveAllRowCaseInCaseView()
        {
            gvCaseViewCaseHistory.Rows.Clear();
        }

        private void AddRowToTaskInMedBillSafely(DataGridViewRow row)
        {
            gvMostRecentTasks.BeginInvoke(new AddRowToTaskInMedBill(AddRowTaskInMedBill), row);
        }

        private void RemoveRowTaskInMedBillSafely(int i)
        {
            gvMostRecentTasks.BeginInvoke(new RemoveTaskInMedBill(RemoveRowTaskInMedBill), i);
        }

        private void ClearTaskInMedBillSafely()
        {
            gvMostRecentTasks.BeginInvoke(new RemoveAllTaskInMedBill(RemoveAllRowTaskInMedBill));
        }


        private void AddRowTaskInMedBill(DataGridViewRow row)
        {
            gvMostRecentTasks.Rows.Add(row);
        }

        private void RemoveRowTaskInMedBill(int i)
        {
            gvMostRecentTasks.Rows.RemoveAt(i);
        }

        private void RemoveAllRowTaskInMedBill()
        {
            gvMostRecentTasks.Rows.Clear();
        }

        private void OnCaseChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnCaseChange;

                UpdateGridViewCaseHistory(strIndividualId);
            }
        }

        private void OnIllnessChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnIllnessChange;

                UpdateGridViewIllnessList();
            }
        }

        private void OnIncidentChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnIncidentChange;

                UpdateGridViewIncidentList();
            }
        }

        private void AddRowToIllnessListSafely(DataGridViewRow row)
        {
            gvIllnessList.BeginInvoke(new AddRowToIllnessList(AddRowIllnessToList), row);
        }

        private void RemoveRowFromIllnessListSafely(int i)
        {
            gvIllnessList.BeginInvoke(new RemoveRowInIllnessList(RemoveRowIllnessList), i);
        }

        private void RemoveAllRowIllnessListSafely()
        {
            gvIllnessList.BeginInvoke(new RemoveAllRowsInIllnessList(RemoveAllIllnessInList));
        }

        private void AddRowIllnessToList(DataGridViewRow row)
        {
            gvIllnessList.Rows.Add(row);
        }

        private void RemoveAllIllnessInList()
        {
            gvIllnessList.Rows.Clear();
        }

        private void RemoveRowIllnessList(int nRow)
        {
            gvIllnessList.Rows.RemoveAt(nRow);
        }

        private void UpdateGridViewIllnessList()
        {
            String IndividualId = IndividualSearched.strIndividualID;

            //String strSqlQueryForIllnessForIndividualId = "select [dbo].[tbl_illness].[IllnessNo] as [Illness No], [dbo].[tbl_illness].[Case_Id] as [Case No], " +
            //                      "[dbo].[tbl_illness].[ICD_10_Id] as [ICD 10 Code], " +
            //                      "[dbo].[tbl_illness].[CreateDate] as [Create Date], [dbo].[tbl_CreateStaff].[Staff_Name] as [Created By]," +
            //                      "[dbo].[tbl_illness].[ModifiDate] as [Last Modification Date], [dbo].[tbl_ModifiStaff].[Staff_Name] as [Last Modified By], " +
            //                      "[dbo].[tbl_illness].[Date_of_Diagnosis] as [Diagnosis Date], " +
            //                      "[dbo].[tbl_illness].[TotalSharedAmount] as [Total Shared Amount], " +
            //                      "[dbo].[tbl_illness].[LimitedSharingId] as [Limited Sharing Amount], " +
            //                      "[dbo].[tbl_illness].[Introduction], [dbo].[tbl_illness].[Body], [dbo].[tbl_illness].[Conclusion] " +
            //                      "from [dbo].[tbl_illness] " +
            //                      "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_illness].[CreateStaff] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
            //                      "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_illness].[ModifiStaff] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
            //                      "where [dbo].[tbl_illness].[Individual_Id] = @IndividualId and [dbo].[tbl_illness].[IsDeleted] = 0 " +
            //                      "order by [dbo].[tbl_illness].[IllnessNo]";

            String strSqlQueryForIllnessForIndividualId = "select [dbo].[tbl_illness].[IllnessNo], [dbo].[tbl_illness].[Case_Id], " +
                      "[dbo].[tbl_illness].[ICD_10_Id], " +
                      "[dbo].[tbl_illness].[CreateDate], [dbo].[tbl_CreateStaff].[Staff_Name]," +
                      "[dbo].[tbl_illness].[ModifiDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                      "[dbo].[tbl_illness].[Date_of_Diagnosis], " +
                      "[dbo].[tbl_illness].[TotalSharedAmount], " +
                      "[dbo].[tbl_illness].[LimitedSharingId], " +
                      "[dbo].[tbl_illness].[Introduction], [dbo].[tbl_illness].[Body], [dbo].[tbl_illness].[Conclusion] " +
                      "from [dbo].[tbl_illness] " +
                      "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_illness].[CreateStaff] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                      "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_illness].[ModifiStaff] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                      "where [dbo].[tbl_illness].[Individual_Id] = @IndividualId and [dbo].[tbl_illness].[IsDeleted] = 0 " +
                      "order by [dbo].[tbl_illness].[IllnessNo]";

            SqlCommand cmdQueryForIllnesForIndividualId = new SqlCommand(strSqlQueryForIllnessForIndividualId, connRN);
            cmdQueryForIllnesForIndividualId.CommandType = CommandType.Text;

            cmdQueryForIllnesForIndividualId.Parameters.AddWithValue("@IndividualId", IndividualId);

            SqlDependency dependencyIllness = new SqlDependency(cmdQueryForIllnesForIndividualId);
            dependencyIllness.OnChange += new OnChangeEventHandler(OnIllnessChange);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrIllnessForIndividual = cmdQueryForIllnesForIndividualId.ExecuteReader();

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //gvIllnessList.Rows.Clear();
            if (IsHandleCreated) RemoveAllRowIllnessListSafely();
            else gvIllnessList.Rows.Clear();

            if (rdrIllnessForIndividual.HasRows)
            {
                while (rdrIllnessForIndividual.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();

                    if (!rdrIllnessForIndividual.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(0) });
                    if (!rdrIllnessForIndividual.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(1) });
                    if (!rdrIllnessForIndividual.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(2) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrIllnessForIndividual.IsDBNull(3)) row.Cells.Add(new CalendarCell { Value = rdrIllnessForIndividual.GetDateTime(3).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrIllnessForIndividual.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(4) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrIllnessForIndividual.IsDBNull(5)) row.Cells.Add(new CalendarCell { Value = rdrIllnessForIndividual.GetDateTime(5).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrIllnessForIndividual.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(6) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrIllnessForIndividual.IsDBNull(7)) row.Cells.Add(new CalendarCell { Value = rdrIllnessForIndividual.GetDateTime(7).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrIllnessForIndividual.IsDBNull(8))
                    {
                        DataGridViewTextBoxCell cellTotalSharedAmount = new DataGridViewTextBoxCell();
                        cellTotalSharedAmount.Value = rdrIllnessForIndividual.GetDecimal(8).ToString("C");
                        cellTotalSharedAmount.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                        row.Cells.Add(cellTotalSharedAmount);
                    }
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrIllnessForIndividual.IsDBNull(9))
                    {
                        switch (rdrIllnessForIndividual.GetInt16(9))
                        {
                            case 0:
                                DataGridViewTextBoxCell cellLimitedSharing = new DataGridViewTextBoxCell();
                                cellLimitedSharing.Value = "N/A";
                                cellLimitedSharing.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                                row.Cells.Add(cellLimitedSharing);
                                break;
                            case 1:
                                DataGridViewTextBoxCell cellLimitedSharing1 = new DataGridViewTextBoxCell();
                                cellLimitedSharing1.Value = dicLimitedSharing1[LimitedSharingYear].ToString("C");
                                cellLimitedSharing1.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                                row.Cells.Add(cellLimitedSharing1);
                                break;
                            case 2:
                                DataGridViewTextBoxCell cellLimitedSharing2 = new DataGridViewTextBoxCell();
                                cellLimitedSharing2.Value = dicLimitedSharing2[LimitedSharingYear].ToString("C");
                                cellLimitedSharing2.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                                row.Cells.Add(cellLimitedSharing2);
                                break;
                        }
                    }
                    if (!rdrIllnessForIndividual.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(10) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrIllnessForIndividual.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(11) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrIllnessForIndividual.IsDBNull(12)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(12) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    //gvIllnessList.Rows.Add(row);
                    if (IsHandleCreated) AddRowToIllnessListSafely(row);
                    else gvIllnessList.Rows.Add(row);

                }
            }
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            rdrIllnessForIndividual.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        }

        private void AddRowIncidentList(DataGridViewRow row)
        {
            gvIncidentList.Rows.Add(row);
        }

        private void RemoveRowIncidentList(int nRow)
        {
            gvIncidentList.Rows.RemoveAt(nRow);
        }

        private void RemoveAllIncidentList()
        {
            gvIncidentList.Rows.Clear();
        }

        private void AddRowToIncidentListSafely(DataGridViewRow row)
        {
            gvIncidentList.BeginInvoke(new AddRowToIncidentList(AddRowIncidentList), row);
        }

        private void RemoveRowFromIncidentListSafely(int nRow)
        {
            gvIncidentList.BeginInvoke(new RemoveRowInIncidentList(RemoveRowIncidentList), nRow);
        }

        private void RemoveAllRowIncidentListSafely()
        {
            gvIncidentList.BeginInvoke(new RemoveAllRowsInIncidentList(RemoveAllIncidentList));
        }


        private void UpdateGridViewIncidentList()
        {
            String IndividualId = IndividualSearched.strIndividualID;

            String strSqlQueryForIncidentForIndividual = "select [dbo].[tbl_incident].[IncidentNo], [dbo].[tbl_incident].[Case_id], [dbo].[tbl_illness].[IllnessNo], " +
                                             "[dbo].[tbl_incident].[CreateDate], [dbo].[tbl_CreateStaff].[Staff_Name], " +
                                             "[dbo].[tbl_incident].[ModifiDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                             "[dbo].[tbl_incident].[TotalSharedAmount], [dbo].[tbl_incident_status_code].[IncidentStatusValue], " +
                                             "[dbo].[tbl_incident].[Review_Request], [dbo].[tbl_program].[ProgramName], " +
                                             "[dbo].[tbl_incident].[IncidentNote], [dbo].[tbl_incident].[Eligibility] " +
                                             "from [dbo].[tbl_incident] " +
                                             "inner join [dbo].[tbl_illness] on [dbo].[tbl_incident].[Illness_id] = [dbo].[tbl_illness].[Illness_Id] " +
                                             "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_incident].[CreateStaff] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                             "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_incident].[ModifiStaff] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                             "inner join [dbo].[tbl_incident_status_code] on [dbo].[tbl_incident].[Incident_Status] = [dbo].[tbl_incident_status_code].[IncidentStatusCode] " +
                                             "inner join [dbo].[tbl_program] on [dbo].[tbl_incident].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                                             "where [dbo].[tbl_incident].[Individual_id] = @IndividualId and " +
                                             "[dbo].[tbl_incident].[IsDeleted] = 0 " +
                                             "order by [dbo].[tbl_incident].[IncidentNo]";

            SqlCommand cmdQueryForIncidentForIndividual = new SqlCommand(strSqlQueryForIncidentForIndividual, connRN);
            cmdQueryForIncidentForIndividual.CommandType = CommandType.Text;

            cmdQueryForIncidentForIndividual.Parameters.AddWithValue("@IndividualId", IndividualId);

            SqlDependency dependencyIncident = new SqlDependency(cmdQueryForIncidentForIndividual);
            dependencyIncident.OnChange += new OnChangeEventHandler(OnIncidentChange);

            if (IsHandleCreated)
            {
                if (gvIncidentList.Rows.Count > 0) RemoveAllRowIncidentListSafely();
            }
            else gvIncidentList.Rows.Clear();

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();

            SqlDataReader rdrIncidentForIndividual = cmdQueryForIncidentForIndividual.ExecuteReader();
            if (rdrIncidentForIndividual.HasRows)
            {
                while (rdrIncidentForIndividual.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();

                    if (!rdrIncidentForIndividual.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(0) });
                    if (!rdrIncidentForIndividual.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(1) });
                    if (!rdrIncidentForIndividual.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(2) });
                    if (!rdrIncidentForIndividual.IsDBNull(3)) row.Cells.Add(new CalendarCell { Value = rdrIncidentForIndividual.GetDateTime(3).ToString("MM/dd/yyyy") });
                    if (!rdrIncidentForIndividual.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(4) });
                    if (!rdrIncidentForIndividual.IsDBNull(5)) row.Cells.Add(new CalendarCell { Value = rdrIncidentForIndividual.GetDateTime(5).ToString("MM/dd/yyyy") });
                    if (!rdrIncidentForIndividual.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(6) });
                    if (!rdrIncidentForIndividual.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetDecimal(7).ToString("C") });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrIncidentForIndividual.IsDBNull(8)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(8) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrIncidentForIndividual.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrIncidentForIndividual.GetBoolean(9) });
                    if (!rdrIncidentForIndividual.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(10) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrIncidentForIndividual.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(11) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrIncidentForIndividual.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrIncidentForIndividual.GetBoolean(12) });

                    if (IsHandleCreated) AddRowToIncidentListSafely(row);
                    else gvIncidentList.Rows.Add(row);
                }
            }
            rdrIncidentForIndividual.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();
        }

        private void btnCreateNewCase_Click(object sender, EventArgs e)
        {

            caseMode = CaseMode.AddNew;

            String strSqlCaseCount = "select count(ID) from tbl_case";

            SqlCommand cmdCaseCount = connRN3.CreateCommand();
            cmdCaseCount.CommandType = CommandType.Text;
            cmdCaseCount.CommandText = strSqlCaseCount;

            if (connRN3.State != ConnectionState.Closed)
            {
                connRN3.Close();
                connRN3.Open();
            }
            else if (connRN3.State == ConnectionState.Closed) connRN3.Open();
            Object objCaseCount = cmdCaseCount.ExecuteScalar();
            if (connRN3.State != ConnectionState.Closed) connRN3.Close();

            String strNewCaseName = String.Empty;

            if ((Int32)objCaseCount == 0)
            {
                if (connRN3.State != ConnectionState.Closed)
                {
                    connRN3.Close();
                    connRN3.Open();
                }
                else if (connRN3.State == ConnectionState.Closed) connRN3.Open();

                strNewCaseName = "Case-1";
                SqlCommand cmdAddFirstCaseId = connRN3.CreateCommand();
                SqlTransaction tranNewCaseId = connRN3.BeginTransaction(IsolationLevel.Serializable);

                cmdAddFirstCaseId.Connection = connRN3;
                cmdAddFirstCaseId.Transaction = tranNewCaseId;

                try
                {
                    String strInsertFirstCaseId = "update [dbo].[tbl_LastID] set [dbo].[tbl_LastID].[CaseId] = @NewCaseId where [dbo].[tbl_LastID].[Id] = 1";

                    cmdAddFirstCaseId.CommandType = CommandType.Text;
                    cmdAddFirstCaseId.CommandText = strInsertFirstCaseId;

                    cmdAddFirstCaseId.Parameters.AddWithValue("@NewCaseId", strNewCaseName);
                    int nCaseIdUpdated = cmdAddFirstCaseId.ExecuteNonQuery();

                    tranNewCaseId.Commit();
                }
                catch (Exception ex)
                {
                    try
                    {
                        tranNewCaseId.Rollback();
                        MessageBox.Show(ex.Message, "Error");
                        return;
                    }
                    catch (SqlException se)
                    {
                        MessageBox.Show(se.Message, "Sql Error");
                        return;
                    }
                }

                if (connRN3.State != ConnectionState.Closed) connRN3.Close();

                String strCaseName = strNewCaseName;
                strCaseNameSelected = strNewCaseName;

                String strSqlQueryForCaseStatus = "select [dbo].[tbl_case_status_code].[CaseStatusValue] from [dbo].[tbl_case_status_code]";
                SqlCommand cmdQueryForCaseStatus = new SqlCommand(strSqlQueryForCaseStatus, connRN3);
                cmdQueryForCaseStatus.CommandType = CommandType.Text;

                if (connRN3.State != ConnectionState.Closed)
                {
                    connRN3.Close();
                    connRN3.Open();
                }
                else if (connRN3.State == ConnectionState.Closed) connRN3.Open();

                SqlDataReader rdrCaseStatus = cmdQueryForCaseStatus.ExecuteReader();
                cbCaseStatus.Items.Clear();
                if (rdrCaseStatus.HasRows)
                {
                    while (rdrCaseStatus.Read())
                    {
                        cbCaseStatus.Items.Add(rdrCaseStatus.GetString(0));
                    }
                }
                rdrCaseStatus.Close();
                if (connRN3.State != ConnectionState.Closed) connRN3.Close();

                cbCaseStatus.SelectedIndex = 0;
                cbCaseStatus.Enabled = true;

                String strIndividualID = txtCaseHistoryIndividualID.Text.Trim();

                String strSqlQueryForMedBillsInCase = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], [dbo].[tbl_medbill].[CreatedDate], " +
                                                        "[dbo].[tbl_CreateStaff].[Staff_Name], [dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                        "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], " +
                                                        "[dbo].[tbl_medbill].[Balance] " +
                                                        "from [dbo].[tbl_medbill] " +
                                                        "inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId] " +
                                                        "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                                        "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                                        "where [dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                                                        "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and " +
                                                        "[dbo].[tbl_medbill].[IsDeleted] = 0";

                SqlCommand cmdQueryForMedBillsInCase = new SqlCommand(strSqlQueryForMedBillsInCase, connRN3);
                cmdQueryForMedBillsInCase.CommandType = CommandType.Text;

                cmdQueryForMedBillsInCase.Parameters.AddWithValue("@CaseName", strCaseName);
                cmdQueryForMedBillsInCase.Parameters.AddWithValue("@IndividualId", strIndividualID);

                SqlDependency dependencyMedBillsInCase = new SqlDependency(cmdQueryForMedBillsInCase);
                dependencyMedBillsInCase.OnChange += new OnChangeEventHandler(OnMedBillsInCaseViewChange);

                if (connRN3.State != ConnectionState.Closed)
                {
                    connRN3.Close();
                    connRN3.Open();
                }
                else if (connRN3.State == ConnectionState.Closed) connRN3.Open();
                SqlDataReader rdrMedBillInCase = cmdQueryForMedBillsInCase.ExecuteReader();
                gvCasePageMedBills.Rows.Clear();
                if (rdrMedBillInCase.HasRows)
                {
                    while (rdrMedBillInCase.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();

                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(0) });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(1) });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(2).ToString("MM/dd/yyyy") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(3) });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(4).ToString("MM/dd/yyyy") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(5) });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(6).ToString("C") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(7).ToString("C") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(8).ToString("C") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(9).ToString("C") });

                        gvCasePageMedBills.Rows.Add(row);
                    }
                }
                rdrMedBillInCase.Close();
                if (connRN3.State != ConnectionState.Closed) connRN3.Close();
            }
            else
            {
                if (connRN3.State != ConnectionState.Closed)
                {
                    connRN3.Close();
                    connRN3.Open();
                }
                else if (connRN3.State == ConnectionState.Closed) connRN3.Open();

                SqlCommand cmdCaseId = connRN3.CreateCommand();
                SqlTransaction tranCaseId = connRN3.BeginTransaction(IsolationLevel.Serializable);
                cmdCaseId.Connection = connRN3;
                cmdCaseId.Transaction = tranCaseId;

                try
                {
                    String strSqlQueryForLastCaseId = "select [dbo].[tbl_LastID].[CaseId] from [dbo].[tbl_LastID] where [dbo].[tbl_LastID].[Id] = 1";

                    cmdCaseId.CommandText = strSqlQueryForLastCaseId;
                    cmdCaseId.CommandType = CommandType.Text;

                    Object objLastCaseId = cmdCaseId.ExecuteScalar();

                    String strMaxCaseName = String.Empty;
                    if (objLastCaseId != null) strMaxCaseName = objLastCaseId.ToString();

                    Int32 nNewCaseNo = Int32.Parse(strMaxCaseName.Substring(5));
                    nNewCaseNo++;
                    strNewCaseName = "Case-" + nNewCaseNo.ToString();

                    String strSqlUpdateLastCaseId = "update [dbo].[tbl_LastID] set [dbo].[tbl_LastID].[CaseId] = @NewCaseId where [dbo].[tbl_LastID].[Id] = 1";

                    cmdCaseId.CommandText = strSqlUpdateLastCaseId;
                    cmdCaseId.CommandType = CommandType.Text;

                    cmdCaseId.Parameters.AddWithValue("@NewCaseId", strNewCaseName);

                    int nCaseIdUpdated = cmdCaseId.ExecuteNonQuery();

                    tranCaseId.Commit();
                }
                catch (Exception ex)
                {
                    try
                    {
                        tranCaseId.Rollback();
                    }
                    catch(SqlException se)
                    {
                        MessageBox.Show(se.Message, "Error");
                    }
                    MessageBox.Show(ex.Message, "Error");
                }
                if (connRN3.State != ConnectionState.Closed) connRN3.Close();

                String strCaseName = strNewCaseName;
                strCaseNameSelected = strNewCaseName;

                String strSqlQueryForCaseStatus = "select [dbo].[tbl_case_status_code].[CaseStatusValue] from [dbo].[tbl_case_status_code]";
                SqlCommand cmdQueryForCaseStatus = new SqlCommand(strSqlQueryForCaseStatus, connRN3);
                cmdQueryForCaseStatus.CommandType = CommandType.Text;

                if (connRN3.State != ConnectionState.Closed)
                {
                    connRN3.Close();
                    connRN3.Open();
                }
                else if (connRN3.State == ConnectionState.Closed) connRN3.Open();

                SqlDataReader rdrCaseStatus = cmdQueryForCaseStatus.ExecuteReader();
                cbCaseStatus.Items.Clear();
                if (rdrCaseStatus.HasRows)
                {
                    while (rdrCaseStatus.Read())
                    {
                        cbCaseStatus.Items.Add(rdrCaseStatus.GetString(0));
                    }
                }
                rdrCaseStatus.Close();
                if (connRN3.State != ConnectionState.Closed) connRN3.Close();

                cbCaseStatus.SelectedIndex = 0;
                cbCaseStatus.Enabled = true;

                String strIndividualID = txtCaseHistoryIndividualID.Text.Trim();

                String strSqlQueryForMedBillsInCase = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], [dbo].[tbl_medbill].[CreatedDate], " +
                                                        "[dbo].[tbl_CreateStaff].[Staff_Name], [dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                        "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], " +
                                                        "[dbo].[tbl_medbill].[Balance] " +
                                                        "from ((([dbo].[tbl_medbill] inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId]) " +
                                                        "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id]) " +
                                                        "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id]) " +
                                                        "where [dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                                                        "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and " +
                                                        "[dbo].[tbl_medbill].[IsDeleted] = 0";

                SqlCommand cmdQueryForMedBillsInCase = new SqlCommand(strSqlQueryForMedBillsInCase, connRN3);
                cmdQueryForMedBillsInCase.CommandType = CommandType.Text;

                cmdQueryForMedBillsInCase.Parameters.AddWithValue("@CaseName", strCaseName);
                cmdQueryForMedBillsInCase.Parameters.AddWithValue("@IndividualId", strIndividualID);

                SqlDependency dependencyMedBillsInCase = new SqlDependency(cmdQueryForMedBillsInCase);
                dependencyMedBillsInCase.OnChange += new OnChangeEventHandler(OnMedBillsInCaseViewChange);

                if (connRN3.State != ConnectionState.Closed)
                {
                    connRN3.Close();
                    connRN3.Open();
                }
                else if (connRN3.State == ConnectionState.Closed) connRN3.Open();
                SqlDataReader rdrMedBillInCase = cmdQueryForMedBillsInCase.ExecuteReader();
                gvCasePageMedBills.Rows.Clear();
                if (rdrMedBillInCase.HasRows)
                {
                    while (rdrMedBillInCase.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();

                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(0) });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(1) });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(2).ToString("MM/dd/yyyy") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(3) });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(4).ToString("MM/dd/yyyy") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(5) });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(6).ToString("C") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(7).ToString("C") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(8).ToString("C") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(9).ToString("C") });

                        gvCasePageMedBills.Rows.Add(row);
                    }
                }
                rdrMedBillInCase.Close();
                if (connRN3.State != ConnectionState.Closed) connRN3.Close();

            }

            //connRN.Close();

            txtCaseName.Text = strNewCaseName;

            txtCaseIndividualID.Text = txtIndividualID.Text;

            if (txtMiddleName.Text == String.Empty) txtCreateCaseIndividualName.Text = txtLastName.Text + ", " + txtFirstName.Text;
            else txtCreateCaseIndividualName.Text = txtLastName.Text + ", " + txtFirstName.Text + " " + txtMiddleName.Text;

            chkNPF_CaseCreationPage.Checked = false;
            chkIB_CaseCreationPage.Checked = false;
            chkPoP_CaseCreationPage.Checked = false;
            chkMedicalRecordCaseCreationPage.Checked = false;
            chkOtherDocCaseCreationPage.Checked = false;

            txtNPFFormFilePath.Text = String.Empty;
            txtIBFilePath.Text = String.Empty;
            txtPopFilePath.Text = String.Empty;
            txtMedicalRecordFilePath.Text = String.Empty;
            txtOtherDocumentFilePath.Text = String.Empty;

            //txtNPFUploadDate.Text = String.Empty;
            //txtIBUploadDate.Text = String.Empty;
            //txtPoPUploadDate.Text = String.Empty;
            //txtMRUploadDate.Text = String.Empty;
            //txtOtherDocUploadDate.Text = String.Empty;

            tbCMMManager.SelectedTab = tbpgCreateCase;

            btnNewMedBill_Case.Enabled = false;
            btnEditMedBill.Enabled = false;
            btnDeleteMedBill.Enabled = false;

            EnableCaseForm();

            btnCaseCreationSaveUpper.Enabled = true;
            //btnCaseCreationLowerSave.Enabled = true;
            //}
            //else
            //{
            //    MessageBox.Show("Case Page is already open. Please close Case Page first.", "Alert");
            //    return;
            //}

        }

        private void btnCaseCreationSaveUpper_Click(object sender, EventArgs e)
        {
            Cursor.Current = Cursors.WaitCursor;

            String CaseName = txtCaseName.Text.Trim();
            String IndividualId = txtCaseIndividualID.Text.Trim();

            String strSqlQueryForCaseName = "select [dbo].[tbl_case].[Case_Name] from [dbo].[tbl_case] " +
                                            "where [dbo].[tbl_case].[Case_Name] = @CaseName and [dbo].[tbl_case].[Contact_ID] = @IndividualId";

            SqlCommand cmdQueryForCaseName = new SqlCommand(strSqlQueryForCaseName, connRN4);
            cmdQueryForCaseName.CommandText = strSqlQueryForCaseName;
            cmdQueryForCaseName.CommandType = CommandType.Text;

            cmdQueryForCaseName.Parameters.AddWithValue("@CaseName", CaseName);
            cmdQueryForCaseName.Parameters.AddWithValue("@IndividualId", IndividualId);

            if (connRN4.State != ConnectionState.Closed)
            {
                connRN4.Close();
                connRN4.Open();
            }
            else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
            Object objCaseName = cmdQueryForCaseName.ExecuteScalar();
            if (connRN4.State != ConnectionState.Closed) connRN4.Close();

            if (objCaseName == null)
            {
                frmSaveNewCase frmSaveNewCase = new frmSaveNewCase();
                frmSaveNewCase.StartPosition = FormStartPosition.CenterParent;

                DialogResult dlgResult = frmSaveNewCase.ShowDialog();

                if (dlgResult == DialogResult.Yes)
                {

                    String strCaseId = String.Empty;
                    String strIndividualID = String.Empty;
                    String strNPFormFilePath = String.Empty;
                    String strNPFUploadDate = String.Empty;
                    String strIBFilePath = String.Empty;
                    String strIBUploadDate = String.Empty;
                    String strPopFilePath = String.Empty;
                    String strPopUploadDate = String.Empty;
                    String strMedicalRecordFilePath = String.Empty;
                    String strMedicalRecordUploadDate = String.Empty;
                    String strUnknownDocumentFilePath = String.Empty;
                    String strUnknownDocUploadDate = String.Empty;
                    String strLogID = String.Empty;

                    CasedInfoDetailed caseDetail = new CasedInfoDetailed();

                    caseDetail.CaseId = String.Empty;
                    caseDetail.ContactId = String.Empty;
                    caseDetail.Individual_Id = String.Empty;
                    caseDetail.CreateDate = DateTime.Today;
                    caseDetail.ModificationDate = DateTime.Today;
                    caseDetail.CreateStaff = nLoggedUserId;
                    caseDetail.ModifyingStaff = nLoggedUserId;
                    switch (cbCaseStatus.SelectedIndex)
                    {
                        case (int)CaseStatus.OnGoing:
                            caseDetail.Status = CaseStatus.OnGoing;
                            break;
                        case (int)CaseStatus.Processing:
                            caseDetail.Status = CaseStatus.Processing;
                            break;
                        case (int)CaseStatus.Closed:
                            caseDetail.Status = CaseStatus.Closed;
                            break;
                    }
                    caseDetail.Individual_Id = String.Empty;
                    caseDetail.NPF_Form = 0;
                    caseDetail.NPF_Form_File_Name = String.Empty;
                    caseDetail.NPF_Form_Destination_File_Name = String.Empty;

                    caseDetail.IB_Form = 0;
                    caseDetail.IB_Form_File_Name = String.Empty;
                    caseDetail.IB_Form_Destination_File_Name = String.Empty;

                    caseDetail.POP_Form = 0;
                    caseDetail.POP_Form_File_Name = String.Empty;
                    caseDetail.POP_Form_Destionation_File_Name = String.Empty;

                    caseDetail.MedicalRecord_Form = 0;
                    caseDetail.MedRec_Form_File_Name = String.Empty;
                    caseDetail.MedRec_Form_Destination_File_Name = String.Empty;

                    caseDetail.Unknown_Form = 0;
                    caseDetail.Unknown_Form_File_Name = String.Empty;
                    caseDetail.Unknown_Form_Destination_File_Name = String.Empty;

                    caseDetail.Note = String.Empty;
                    caseDetail.Log_Id = String.Empty;
                    caseDetail.AddBill_Form = false;

                    caseDetail.Remove_Log = String.Empty;

                    if (txtCaseName.Text.Trim() != String.Empty) caseDetail.CaseId = txtCaseName.Text.Trim();
                    if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.ContactId = txtCaseIndividualID.Text.Trim();
                    if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.Individual_Id = txtCaseIndividualID.Text.Trim();
                    if (chkNPF_CaseCreationPage.Checked)
                    {
                        caseDetail.NPF_Form = 1;
                        if (txtNPFFormFilePath.Text.Trim() != String.Empty) caseDetail.NPF_Form_File_Name = txtNPFFormFilePath.Text.Trim();
                        //if (txtNPFUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtNPFUploadDate.Text.Trim(), out result)) caseDetail.NPF_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.NPF_ReceivedDate = dtpNPFReceivedDate.Value;
                        caseDetail.NPF_Form_Destination_File_Name = strNPFormFilePathDestination;
                    }
                    if (chkIB_CaseCreationPage.Checked)
                    {
                        caseDetail.IB_Form = 1;
                        if (txtIBFilePath.Text.Trim() != String.Empty) caseDetail.IB_Form_File_Name = txtIBFilePath.Text.Trim();
                        //if (txtIBUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtIBUploadDate.Text.Trim(), out result)) caseDetail.IB_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.IB_ReceivedDate = dtpIBReceivedDate.Value;
                        caseDetail.IB_Form_Destination_File_Name = strIBFilePathDestination;
                    }
                    if (chkPoP_CaseCreationPage.Checked)
                    {
                        caseDetail.POP_Form = 1;
                        if (txtPopFilePath.Text.Trim() != String.Empty) caseDetail.POP_Form_File_Name = txtPopFilePath.Text.Trim();
                        //if (txtPoPUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtPoPUploadDate.Text.Trim(), out result)) caseDetail.POP_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.POP_ReceivedDate = dtpPoPReceivedDate.Value;
                        caseDetail.POP_Form_Destionation_File_Name = strPopFilePathDestination;
                    }
                    if (chkMedicalRecordCaseCreationPage.Checked)
                    {
                        caseDetail.MedicalRecord_Form = 1;
                        if (txtMedicalRecordFilePath.Text.Trim() != String.Empty) caseDetail.MedRec_Form_File_Name = txtMedicalRecordFilePath.Text.Trim();
                        //if (txtMRUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtMRUploadDate.Text.Trim(), out result)) caseDetail.MedRec_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.MedRec_ReceivedDate = dtpMRReceivedDate.Value;
                        caseDetail.MedRec_Form_Destination_File_Name = strMedRecordFilePathDestination;
                    }
                    if (chkOtherDocCaseCreationPage.Checked)
                    {
                        caseDetail.Unknown_Form = 1;
                        if (txtOtherDocumentFilePath.Text.Trim() != String.Empty) caseDetail.Unknown_Form_File_Name = txtOtherDocumentFilePath.Text.Trim();
                        //if (txtOtherDocUploadDate.Text.Trim() != String.Empty)      //caseDetail.Unknown_ReceivedDate = DateTime.Parse(txtOtherDocUploadDate.Text.Trim());
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtOtherDocUploadDate.Text.Trim(), out result)) caseDetail.Unknown_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.Unknown_ReceivedDate = dtpOtherDocReceivedDate.Value;
                        caseDetail.Unknown_Form_Destination_File_Name = strUnknownDocFilePathDestination;
                    }

                    caseDetail.Log_Id = "Log: " + txtCaseName.Text;
                    caseDetail.AddBill_Form = false;
                    caseDetail.AddBill_Received_Date = null;
                    caseDetail.Remove_Log = String.Empty;

                    String strSqlCreateCase = "insert into tbl_case (IsDeleted, Case_Name, Contact_ID, CreateDate, ModifiDate, CreateStaff, ModifiStaff, Case_status, " +
                                               "NPF_Form, NPF_Form_File_Name, NPF_Form_Destination_File_Name, NPF_Receiv_Date, " +
                                               "IB_Form, IB_Form_File_Name, IB_Form_Destination_File_Name, IB_Receiv_Date, " +
                                               "POP_Form, POP_Form_File_Name, POP_Form_Destination_File_Name, POP_Receiv_Date, " +
                                               "MedRec_Form, MedRec_Form_File_Name, MedRec_Form_Destination_File_Name, MedRec_Receiv_Date, " +
                                               "Unknown_Form, Unknown_Form_File_Name, Unknown_Form_Destination_File_Name, Unknown_Receiv_Date, " +
                                               "Note, Log_ID, AddBill_Form, AddBill_receiv_Date, Remove_log, individual_id) " +
                                               "Values (@IsDeleted, @CaseId, @ContactId, @CreateDate, @ModifiDate, @CreateStaff, @ModifiStaff, @CaseStatus, " +
                                               "@NPF_Form, @NPF_Form_File_Name, @NPF_Form_Destination_File_Name, @NPF_Receive_Date, " +
                                               "@IB_Form, @IB_Form_File_Name, @IB_Form_Destination_File_Name, @IB_Receive_Date, " +
                                               "@POP_Form, @POP_Form_File_Name, @POP_Form_Destination_File_Name, @POP_Receive_Date, " +
                                               "@MedRecord_Form, @MedRecord_Form_File_Name, @MedRecord_Form_Destination_File_name, @MedRecord_Receive_Date, " +
                                               "@Unknown_Form, @Unknown_Form_File_Name, @Unknown_Form_Destination_File_Name, @Unknown_Receive_Date, " +
                                               "@Note, @Log_Id, @AddBill_Form, @AddBill_ReceiveDate, @Remove_Log, @Individual_Id)";

                    SqlCommand cmdInsertNewCase = new SqlCommand(strSqlCreateCase, connRN4);
                    cmdInsertNewCase.CommandType = CommandType.Text;

                    cmdInsertNewCase.Parameters.AddWithValue("@IsDeleted", 0);
                    cmdInsertNewCase.Parameters.AddWithValue("@CaseId", caseDetail.CaseId);
                    cmdInsertNewCase.Parameters.AddWithValue("@ContactId", caseDetail.ContactId);
                    cmdInsertNewCase.Parameters.AddWithValue("@CreateDate", caseDetail.CreateDate);
                    cmdInsertNewCase.Parameters.AddWithValue("@ModifiDate", caseDetail.ModificationDate);
                    cmdInsertNewCase.Parameters.AddWithValue("@CreateStaff", caseDetail.CreateStaff);
                    cmdInsertNewCase.Parameters.AddWithValue("@ModifiStaff", caseDetail.ModifyingStaff);
                    cmdInsertNewCase.Parameters.AddWithValue("@CaseStatus", caseDetail.Status);

                    cmdInsertNewCase.Parameters.AddWithValue("@NPF_Form", caseDetail.NPF_Form);
                    cmdInsertNewCase.Parameters.AddWithValue("@NPF_Form_File_Name", caseDetail.NPF_Form_File_Name);
                    cmdInsertNewCase.Parameters.AddWithValue("@NPF_Form_Destination_File_Name", caseDetail.NPF_Form_Destination_File_Name);
                    if (caseDetail.NPF_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@NPF_Receive_Date", caseDetail.NPF_ReceivedDate);
                    else cmdInsertNewCase.Parameters.AddWithValue("@NPF_Receive_Date", DBNull.Value);

                    cmdInsertNewCase.Parameters.AddWithValue("@IB_Form", caseDetail.IB_Form);
                    cmdInsertNewCase.Parameters.AddWithValue("@IB_Form_File_Name", caseDetail.IB_Form_File_Name);
                    cmdInsertNewCase.Parameters.AddWithValue("@IB_Form_Destination_File_Name", caseDetail.IB_Form_Destination_File_Name);
                    if (caseDetail.IB_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@IB_Receive_Date", caseDetail.IB_ReceivedDate);
                    else cmdInsertNewCase.Parameters.AddWithValue("@IB_Receive_Date", DBNull.Value);

                    cmdInsertNewCase.Parameters.AddWithValue("@POP_Form", caseDetail.POP_Form);
                    cmdInsertNewCase.Parameters.AddWithValue("@POP_Form_File_Name", caseDetail.POP_Form_File_Name);
                    cmdInsertNewCase.Parameters.AddWithValue("@POP_Form_Destination_File_Name", caseDetail.POP_Form_Destionation_File_Name);
                    if (caseDetail.POP_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@POP_Receive_Date", caseDetail.POP_ReceivedDate);
                    else cmdInsertNewCase.Parameters.AddWithValue("@POP_Receive_Date", DBNull.Value);

                    cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Form", caseDetail.MedicalRecord_Form);
                    cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Form_File_Name", caseDetail.MedRec_Form_File_Name);
                    cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Form_Destination_File_Name", caseDetail.MedRec_Form_Destination_File_Name);
                    if (caseDetail.MedRec_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Receive_Date", caseDetail.MedRec_ReceivedDate);
                    else cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Receive_Date", DBNull.Value);

                    cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Form", caseDetail.Unknown_Form);
                    cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Form_File_Name", caseDetail.Unknown_Form_File_Name);
                    cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Form_Destination_File_Name", caseDetail.Unknown_Form_Destination_File_Name);
                    if (caseDetail.Unknown_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Receive_Date", caseDetail.Unknown_ReceivedDate);
                    else cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Receive_Date", DBNull.Value);

                    cmdInsertNewCase.Parameters.AddWithValue("@Note", caseDetail.Note);
                    cmdInsertNewCase.Parameters.AddWithValue("@Log_Id", caseDetail.Log_Id);
                    cmdInsertNewCase.Parameters.AddWithValue("@AddBill_Form", caseDetail.AddBill_Form);
                    if (caseDetail.AddBill_Received_Date != null) cmdInsertNewCase.Parameters.AddWithValue("@AddBill_ReceiveDate", caseDetail.AddBill_Received_Date);
                    else cmdInsertNewCase.Parameters.AddWithValue("@AddBill_ReceiveDate", DBNull.Value);
                    if (caseDetail.Remove_Log == String.Empty) cmdInsertNewCase.Parameters.AddWithValue("@Remove_Log", DBNull.Value);
                    cmdInsertNewCase.Parameters.AddWithValue("@Individual_Id", caseDetail.Individual_Id);

                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    int nResult = cmdInsertNewCase.ExecuteNonQuery();

                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    if (nResult == 2)
                    {
                        MessageBox.Show("The case has been saved.", "Information");

                        caseDetail.CaseId = txtCaseName.Text.Trim();
                        strCaseIdSelected = caseDetail.CaseId;
                        strContactIdSelected = caseDetail.ContactId;

                        btnNewMedBill_Case.Enabled = true;
                        btnEditMedBill.Enabled = true;
                        btnDeleteMedBill.Enabled = true;
                    }

                    return;
                }
                else if (dlgResult == DialogResult.Cancel)
                {
                    return;
                }
            }
            else if (objCaseName != null)    // Edit and update case
            {
                frmSaveChangeOnCase frmDlgSaveChange = new frmSaveChangeOnCase();

                frmDlgSaveChange.StartPosition = FormStartPosition.CenterParent;
                DialogResult dlgResult = frmDlgSaveChange.ShowDialog();

                if (dlgResult == DialogResult.Yes)
                {
                    CasedInfoDetailed caseDetail = new CasedInfoDetailed();

                    caseDetail.CaseId = txtCaseName.Text.Trim();
                    caseDetail.ContactId = String.Empty;
                    caseDetail.Individual_Id = String.Empty;
                    caseDetail.CreateDate = DateTime.Today;
                    caseDetail.ModifyingStaff = nLoggedUserId;
                    switch (cbCaseStatus.SelectedIndex)
                    {
                        case (int)CaseStatus.OnGoing:
                            caseDetail.Status = CaseStatus.OnGoing;
                            break;
                        case (int)CaseStatus.Processing:
                            caseDetail.Status = CaseStatus.Processing;
                            break;
                        case (int)CaseStatus.Closed:
                            caseDetail.Status = CaseStatus.Closed;
                            break;
                    }
                    caseDetail.Individual_Id = String.Empty;
                    caseDetail.NPF_Form = 0;
                    caseDetail.NPF_Form_File_Name = String.Empty;
                    caseDetail.NPF_Form_Destination_File_Name = String.Empty;
                    caseDetail.IB_Form = 0;
                    caseDetail.IB_Form_File_Name = String.Empty;
                    caseDetail.IB_Form_Destination_File_Name = String.Empty;
                    caseDetail.POP_Form = 0;
                    caseDetail.POP_Form_File_Name = String.Empty;
                    caseDetail.POP_Form_Destionation_File_Name = String.Empty;
                    caseDetail.MedicalRecord_Form = 0;
                    caseDetail.MedRec_Form_File_Name = String.Empty;
                    caseDetail.MedRec_Form_Destination_File_Name = String.Empty;
                    caseDetail.Unknown_Form = 0;
                    caseDetail.Unknown_Form_File_Name = String.Empty;
                    caseDetail.Unknown_Form_Destination_File_Name = String.Empty;
                    caseDetail.Note = String.Empty;
                    caseDetail.Log_Id = String.Empty;
                    caseDetail.AddBill_Form = false;
                    caseDetail.Remove_Log = String.Empty;

                    if (txtCaseName.Text.Trim() != String.Empty) caseDetail.CaseId = txtCaseName.Text.Trim();
                    if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.ContactId = txtCaseIndividualID.Text.Trim();
                    if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.Individual_Id = txtCaseIndividualID.Text.Trim();

                    if (chkNPF_CaseCreationPage.Checked)
                    {
                        caseDetail.NPF_Form = 1;
                        if (txtNPFFormFilePath.Text.Trim() != String.Empty) caseDetail.NPF_Form_File_Name = txtNPFFormFilePath.Text.Trim();
                        //if (txtNPFUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtNPFUploadDate.Text.Trim(), out result)) caseDetail.NPF_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.NPF_ReceivedDate = dtpNPFReceivedDate.Value;
                        caseDetail.NPF_Form_Destination_File_Name = strNPFormFilePathDestination;
                    }
                    if (chkIB_CaseCreationPage.Checked)
                    {
                        caseDetail.IB_Form = 1;
                        if (txtIBFilePath.Text.Trim() != String.Empty) caseDetail.IB_Form_File_Name = txtIBFilePath.Text.Trim();
                        //if (txtIBUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtIBUploadDate.Text.Trim(), out result)) caseDetail.IB_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.IB_ReceivedDate = dtpIBReceivedDate.Value;
                        caseDetail.IB_Form_Destination_File_Name = strIBFilePathDestination;
                    }
                    if (chkPoP_CaseCreationPage.Checked)
                    {
                        caseDetail.POP_Form = 1;
                        if (txtPopFilePath.Text.Trim() != String.Empty) caseDetail.POP_Form_File_Name = txtPopFilePath.Text.Trim();
                        //if (txtPoPUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtPoPUploadDate.Text.Trim(), out result)) caseDetail.POP_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.POP_ReceivedDate = dtpPoPReceivedDate.Value;
                        caseDetail.POP_Form_Destionation_File_Name = strPopFilePathDestination;
                    }
                    if (chkMedicalRecordCaseCreationPage.Checked)
                    {
                        caseDetail.MedicalRecord_Form = 1;
                        if (txtMedicalRecordFilePath.Text.Trim() != String.Empty) caseDetail.MedRec_Form_File_Name = txtMedicalRecordFilePath.Text.Trim();
                        //if (txtMRUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtMRUploadDate.Text.Trim(), out result)) caseDetail.MedRec_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.MedRec_ReceivedDate = dtpMRReceivedDate.Value;
                        caseDetail.MedRec_Form_Destination_File_Name = strMedRecordFilePathDestination;
                    }
                    if (chkOtherDocCaseCreationPage.Checked)
                    {
                        caseDetail.Unknown_Form = 1;
                        if (txtOtherDocumentFilePath.Text.Trim() != String.Empty) caseDetail.Unknown_Form_File_Name = txtOtherDocumentFilePath.Text.Trim();
                        //if (txtOtherDocUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtOtherDocUploadDate.Text.Trim(), out result)) caseDetail.Unknown_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.Unknown_ReceivedDate = dtpOtherDocReceivedDate.Value;
                        caseDetail.Unknown_Form_Destination_File_Name = strUnknownDocFilePathDestination;
                    }

                    caseDetail.Note = txtNoteOnCase.Text.Trim();
                    caseDetail.Log_Id = "Log: " + txtCaseName.Text;
                    caseDetail.AddBill_Form = true;
                    caseDetail.AddBill_Received_Date = DateTime.Today;
                    caseDetail.Remove_Log = String.Empty;

                    String strSqlUpdateCase = "Update [dbo].[tbl_case] set [dbo].[tbl_case].[ModifiDate] = @ModifiDate, [dbo].[tbl_case].[ModifiStaff] = @ModifiStaff, " +
                                              "[dbo].[tbl_case].[NPF_Form] = @NPF_Form, [dbo].[tbl_case].[NPF_Form_File_Name] = @NPF_Form_File_Name, " +
                                              "[dbo].[tbl_case].[NPF_Form_Destination_File_Name] = @NPF_Form_Destination_File_Name, [dbo].[tbl_case].[NPF_Receiv_Date] = @NPF_Receiv_Date, " +
                                              "[dbo].[tbl_case].[IB_Form] = @IB_Form, [dbo].[tbl_case].[IB_Form_File_Name] = @IB_Form_File_Name, " +
                                              "[dbo].[tbl_case].[IB_Form_Destination_File_Name] = @IB_Form_Destination_File_Name, [dbo].[tbl_case].[IB_Receiv_Date] = @IB_Receiv_Date, " +
                                              "[dbo].[tbl_case].[POP_Form] = @POP_Form, [dbo].[tbl_case].[POP_Form_File_Name] = @POP_Form_File_Name, " +
                                              "[dbo].[tbl_case].[POP_Form_Destination_File_Name] = @POP_Form_Destination_File_Name, [dbo].[tbl_case].[POP_Receiv_Date] = @POP_Receiv_Date, " +
                                              "[dbo].[tbl_case].[MedRec_Form] = @MedRec_Form, [dbo].[tbl_case].[MedRec_Form_File_Name] = @MedRec_Form_File_Name, " +
                                              "[dbo].[tbl_case].[MedRec_Form_Destination_File_Name] = @MedRec_Form_Destination_File_Name, [dbo].[tbl_case].[MedRec_Receiv_Date] = @MedRec_Receiv_Date, " +
                                              "[dbo].[tbl_case].[Unknown_Form] = @Unknown_Form, [dbo].[tbl_case].[Unknown_Form_File_Name] = @Unknown_Form_File_Name, " +
                                              "[dbo].[tbl_case].[Unknown_Form_Destination_File_Name] = @Unknown_Form_Destination_File_Name, [dbo].[tbl_case].[Unknown_Receiv_Date] = @Unknown_Receiv_Date, " +
                                              "[dbo].[tbl_case].[Note] = @CaseNote, [dbo].[tbl_case].[Log_ID] = @Log_Id, [dbo].[tbl_case].[AddBill_Form] = @AddBill_Form, " +
                                              "[dbo].[tbl_case].[AddBill_Receiv_Date] = @AddBill_Receiv_Date, [dbo].[tbl_case].[Remove_Log] = @Remove_Log, " +
                                              "[dbo].[tbl_case].[Case_status] = @CaseStatus " +
                                              "where [dbo].[tbl_case].[Case_Name] = @Case_Id";

                    SqlCommand cmdUpdateCase = new SqlCommand(strSqlUpdateCase, connRN4);
                    cmdUpdateCase.CommandType = CommandType.Text;

                    cmdUpdateCase.Parameters.AddWithValue("@ModifiDate", caseDetail.ModificationDate);
                    cmdUpdateCase.Parameters.AddWithValue("@ModifiStaff", caseDetail.ModifyingStaff);
                    cmdUpdateCase.Parameters.AddWithValue("@NPF_Form", caseDetail.NPF_Form);
                    cmdUpdateCase.Parameters.AddWithValue("@NPF_Form_File_Name", caseDetail.NPF_Form_File_Name);
                    cmdUpdateCase.Parameters.AddWithValue("@NPF_Form_Destination_File_Name", caseDetail.NPF_Form_Destination_File_Name);
                    if (caseDetail.NPF_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@NPF_Receiv_Date", caseDetail.NPF_ReceivedDate);
                    else cmdUpdateCase.Parameters.AddWithValue("@NPF_Receiv_Date", DBNull.Value);

                    cmdUpdateCase.Parameters.AddWithValue("@IB_Form", caseDetail.IB_Form);
                    cmdUpdateCase.Parameters.AddWithValue("@IB_Form_File_Name", caseDetail.IB_Form_File_Name);
                    cmdUpdateCase.Parameters.AddWithValue("@IB_Form_Destination_File_Name", caseDetail.IB_Form_Destination_File_Name);
                    if (caseDetail.IB_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@IB_Receiv_Date", caseDetail.IB_ReceivedDate);
                    else cmdUpdateCase.Parameters.AddWithValue("@IB_Receiv_Date", DBNull.Value);

                    cmdUpdateCase.Parameters.AddWithValue("@POP_Form", caseDetail.POP_Form);
                    cmdUpdateCase.Parameters.AddWithValue("@POP_Form_File_Name", caseDetail.POP_Form_File_Name);
                    cmdUpdateCase.Parameters.AddWithValue("@POP_Form_Destination_File_Name", caseDetail.POP_Form_Destionation_File_Name);
                    if (caseDetail.POP_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@POP_Receiv_Date", caseDetail.POP_ReceivedDate);
                    else cmdUpdateCase.Parameters.AddWithValue("@POP_Receiv_Date", DBNull.Value);

                    cmdUpdateCase.Parameters.AddWithValue("@MedRec_Form", caseDetail.MedicalRecord_Form);
                    cmdUpdateCase.Parameters.AddWithValue("@MedRec_Form_File_Name", caseDetail.MedRec_Form_File_Name);
                    cmdUpdateCase.Parameters.AddWithValue("@MedRec_Form_Destination_File_Name", caseDetail.MedRec_Form_Destination_File_Name);
                    if (caseDetail.MedRec_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@MedRec_Receiv_Date", caseDetail.MedRec_ReceivedDate);
                    else cmdUpdateCase.Parameters.AddWithValue("@MedRec_Receiv_Date", DBNull.Value);

                    cmdUpdateCase.Parameters.AddWithValue("@Unknown_Form", caseDetail.Unknown_Form);
                    cmdUpdateCase.Parameters.AddWithValue("@Unknown_Form_File_Name", caseDetail.Unknown_Form_File_Name);
                    cmdUpdateCase.Parameters.AddWithValue("@Unknown_Form_Destination_File_Name", caseDetail.Unknown_Form_Destination_File_Name);
                    if (caseDetail.Unknown_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@Unknown_Receiv_Date", caseDetail.Unknown_ReceivedDate);
                    else cmdUpdateCase.Parameters.AddWithValue("@Unknown_Receiv_Date", DBNull.Value);

                    cmdUpdateCase.Parameters.AddWithValue("@CaseNote", caseDetail.Note);
                    cmdUpdateCase.Parameters.AddWithValue("@Log_Id", caseDetail.Log_Id);
                    cmdUpdateCase.Parameters.AddWithValue("@AddBill_Form", caseDetail.AddBill_Form);
                    if (caseDetail.AddBill_Received_Date != null) cmdUpdateCase.Parameters.AddWithValue("@AddBill_Receiv_Date", caseDetail.AddBill_Received_Date);
                    else cmdUpdateCase.Parameters.AddWithValue("@AddBill_Receiv_Date", DBNull.Value);

                    cmdUpdateCase.Parameters.AddWithValue("@Remove_Log", caseDetail.Remove_Log);
                    cmdUpdateCase.Parameters.AddWithValue("@CaseStatus", caseDetail.Status);

                    cmdUpdateCase.Parameters.AddWithValue("@Case_Id", caseDetail.CaseId);

                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    int nRowAffected = cmdUpdateCase.ExecuteNonQuery();
                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    if (nRowAffected == 3)
                    {
                        MessageBox.Show("The change has been saved.", "Information");

                        btnNewMedBill_Case.Enabled = true;
                        btnEditMedBill.Enabled = true;
                        btnDeleteMedBill.Enabled = true;

                        // delete case in use row inserted when the row was edited
                        String strSqlDeleteCaseInUse = "delete from [dbo].[tbl_CaseInUse] " +
                                                       "where [dbo].[tbl_CaseInUse].[Case_Name] = @CaseName and [dbo].[tbl_CaseInUse].[EditingStaff] = @ModifyingStaff";

                        SqlCommand cmdDeleteCaseInUse = new SqlCommand(strSqlDeleteCaseInUse, connRN4);
                        cmdDeleteCaseInUse.CommandType = CommandType.Text;

                        cmdDeleteCaseInUse.Parameters.AddWithValue("@CaseName", caseDetail.CaseId);
                        cmdDeleteCaseInUse.Parameters.AddWithValue("@ModifyingStaff", nLoggedUserId);

                        if (connRN4.State != ConnectionState.Closed)
                        {
                            connRN4.Close();
                            connRN4.Open();
                        }
                        else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                        int nCaseInUseDeleted = cmdDeleteCaseInUse.ExecuteNonQuery();
                        //if (nCaseInUseDeleted == 0)
                        //{
                        //    MessageBox.Show("Case in use: " + caseDetail.CaseId + " has not been deleted form tbl_CaseInUse table.", "Error");
                        //}

                        if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                    }
                    else if (nRowAffected == 0) MessageBox.Show("Update failed", "Error");
                }
                else
                {
                    return;
                }
            }

            Cursor.Current = Cursors.Default;
        }

        private void btnNPFFormUpload_Click(object sender, EventArgs e)
        {

            //File.Copy(strNPFormFilePathSource, strNPFormFilePathDestination);
            try
            {
                File.Copy(txtNPFFormFilePath.Text.Trim(), strNPFormFilePathDestination);
                //txtNPFUploadDate.Text = DateTime.Today.ToString("MM/dd/yyyy");
                chkNPF_CaseCreationPage.Checked = true;
            }
            catch (UnauthorizedAccessException ex)
            {
                MessageBox.Show(ex.Message, "Error");
                return;
            }
            catch (ArgumentNullException ex)
            {
                MessageBox.Show(ex.Message + "\n Please change the source file name.", "Error");
                return;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error");
                return;
            }

            btnNPFFormView.Enabled = true;
            btnNPFFormDelete.Enabled = true;
        }

        //private void btnBrowseNPTForm_Click(object sender, EventArgs e)
        //{
        //    OpenFileDialog OpenSourceFileDlg = new OpenFileDialog();

        //    OpenSourceFileDlg.Filter = "JPG Files | *.jpg; *.jpeg | PDF Files | *.pdf";
        //    OpenSourceFileDlg.DefaultExt = "jpg";
        //    OpenSourceFileDlg.RestoreDirectory = true;

        //    if (OpenSourceFileDlg.ShowDialog() == DialogResult.OK)
        //    {
        //        strNPFormFilePathSource = OpenSourceFileDlg.FileName;
        //        strNPFormFilePathDestination = strDestinationPath + OpenSourceFileDlg.SafeFileName;
        //        txtNPFFormFilePath.Text = strNPFormFilePathSource;
        //        return;
        //    }
        //    else return;
        //}

        private void btnNPFFormView_Click(object sender, EventArgs e)
        {
            if (strNPFormFilePathDestination != String.Empty)
            {
                try
                {
                    ProcessStartInfo processInfo = new ProcessStartInfo();
                    processInfo.FileName = strNPFormFilePathDestination;
                    Process.Start(processInfo);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error");
                    return;
                }
            }
            else
            {
                MessageBox.Show("No NPF is uploaded");
                return;
            }
        }

        private void btnNPFFormDelete_Click(object sender, EventArgs e)
        {
            DialogResult dlgResult = MessageBox.Show("Are you sure to delete the NPF form?", "Warning", MessageBoxButtons.YesNo);

            if (dlgResult == DialogResult.Yes)
            {
                try
                {
                    File.Delete(strNPFormFilePathDestination);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error");
                    return;
                }
                chkNPF_CaseCreationPage.Checked = false;
                txtNPFFormFilePath.Text = String.Empty;
                btnBrowseNPF.Enabled = false;
                btnNPFFormUpload.Enabled = false;
                //txtNPFUploadDate.Text = String.Empty;
                btnNPFFormView.Enabled = false;
                btnNPFFormDelete.Enabled = false;

                MessageBox.Show("The NPF form has been deleted.", "Information");
            }
        }

        private void btnBrowseIB_Click(object sender, EventArgs e)
        {
            OpenFileDialog OpenSourceFileDlg = new OpenFileDialog();

            OpenSourceFileDlg.Filter = "PDF Files | *.pdf; | JPG Files | *.jpg; *.jpeg";
            OpenSourceFileDlg.DefaultExt = "pdf";
            OpenSourceFileDlg.RestoreDirectory = true;

            if (OpenSourceFileDlg.ShowDialog() == DialogResult.OK)
            {
                strIBFilePathSource = OpenSourceFileDlg.FileName;
                strIBFilePathDestination = strDestinationPath + "_IB_" + DateTime.Now.ToString("MM-dd-yyyy-HH-mm-ss") + "_" + OpenSourceFileDlg.SafeFileName;
                txtIBFilePath.Text = strIBFilePathSource;
                btnIBUpload.Enabled = true;
                return;
            }
            else return;
        }

        private void btnIBDateUpload_Click(object sender, EventArgs e)
        {
            try
            {
                File.Copy(txtIBFilePath.Text.Trim(), strIBFilePathDestination);
                //txtIBUploadDate.Text = DateTime.Today.ToString("MM/dd/yyyy");
                chkIB_CaseCreationPage.Checked = true;
            }
            catch (UnauthorizedAccessException ex)
            {
                MessageBox.Show(ex.Message, "Error");
                return;
            }
            catch (ArgumentNullException ex)
            {
                MessageBox.Show(ex.Message + "\n Please change the source file name.", "Error");
                return;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Erro");
                return;
            }

            btnIBView.Enabled = true;
            btnDeleteIB.Enabled = true;
        }

        private void IBDateView_Click(object sender, EventArgs e)
        {
            if (strIBFilePathDestination != String.Empty)
            {
                try
                {
                    ProcessStartInfo processInfo = new ProcessStartInfo();
                    processInfo.FileName = strIBFilePathDestination;
                    Process.Start(processInfo);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error");
                    return;
                }
            }
            else
            {
                MessageBox.Show("No IB is uploaded");
                return;
            }
        }

        private void btnIBDateDelete_Click(object sender, EventArgs e)
        {
            DialogResult dlgResult = MessageBox.Show("Are you sure to delete the IB?", "Warning", MessageBoxButtons.YesNo);

            if (dlgResult == DialogResult.Yes)
            {
                try
                {
                    File.Delete(strIBFilePathDestination);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error");
                    return;
                }

                chkIB_CaseCreationPage.Checked = false;
                txtIBFilePath.Text = String.Empty;
                btnBrowseIB.Enabled = false;
                btnIBUpload.Enabled = false;
                //txtIBUploadDate.Text = String.Empty;
                btnIBView.Enabled = false;
                btnDeleteIB.Enabled = false;

                MessageBox.Show("The IB has been deleted.", "Information");
            }
        }

        private void btnBrowsePoP_Click(object sender, EventArgs e)
        {
            OpenFileDialog OpenSourceFileDlg = new OpenFileDialog();

            OpenSourceFileDlg.Filter = "PDF Files | *.pdf; | JPG Files | *.jpg; *.jpeg";
            OpenSourceFileDlg.DefaultExt = "pdf";
            OpenSourceFileDlg.RestoreDirectory = true;

            if (OpenSourceFileDlg.ShowDialog() == DialogResult.OK)
            {
                strPoPFilePathSource = OpenSourceFileDlg.FileName;
                strPopFilePathDestination = strDestinationPath + "_PoP_" + DateTime.Now.ToString("MM-dd-yyyy-HH-mm-ss") + "_" + OpenSourceFileDlg.SafeFileName;
                txtPopFilePath.Text = strPoPFilePathSource;
                btnPoPUpload.Enabled = true;
                return;
            }
            else return;
        }

        private void btnPoPDateUpload_Click(object sender, EventArgs e)
        {

            try
            {
                File.Copy(txtPopFilePath.Text.Trim(), strPopFilePathDestination);
                //txtPoPUploadDate.Text = DateTime.Today.ToString("MM/dd/yyyy");
                chkPoP_CaseCreationPage.Checked = true;
            }
            catch (UnauthorizedAccessException ex)
            {
                MessageBox.Show(ex.Message, "Error");
                return;
            }
            catch (ArgumentNullException ex)
            {
                MessageBox.Show(ex.Message + "\n Please change the source file name.", "Error");
                return;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error");
                return;
            }

            btnPoPView.Enabled = true;
            btnDeletePoP.Enabled = true;
        }

        private void btnPoPDateView_Click(object sender, EventArgs e)
        {
            if (strPopFilePathDestination != String.Empty)
            {
                try
                {
                    ProcessStartInfo processInfo = new ProcessStartInfo();
                    processInfo.FileName = strPopFilePathDestination;
                    Process.Start(processInfo);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error");
                    return;
                }
            }
            else
            {
                MessageBox.Show("No Pop is uploaded");
                return;
            }
        }

        private void btnPoPDateDelete_Click(object sender, EventArgs e)
        {

            DialogResult dlgResult = MessageBox.Show("Are you sure to delete the PoP?", "Warning", MessageBoxButtons.YesNo);

            if (dlgResult == DialogResult.Yes)
            {
                try
                {
                    File.Delete(strPopFilePathDestination);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error");
                    return;
                }

                chkPoP_CaseCreationPage.Checked = false;
                txtPopFilePath.Text = String.Empty;
                btnBrowsePoP.Enabled = false;
                btnPoPUpload.Enabled = false;
                //txtPoPUploadDate.Text = String.Empty;
                btnPoPView.Enabled = false;
                btnDeletePoP.Enabled = false;

                MessageBox.Show("The PoP form has been deleted.", "Information");
            }
        }

        private void btnBrowseMR_Click(object sender, EventArgs e)
        {
            OpenFileDialog OpenSourceFileDlg = new OpenFileDialog();

            OpenSourceFileDlg.Filter = "PDF Files | *.pdf; | JPG Files | *.jpg; *.jpeg";
            OpenSourceFileDlg.DefaultExt = "pdf";
            OpenSourceFileDlg.RestoreDirectory = true;

            if (OpenSourceFileDlg.ShowDialog() == DialogResult.OK)
            {
                strMedRecordFilePathSource = OpenSourceFileDlg.FileName;
                strMedRecordFilePathDestination = strDestinationPath + "_MR_" + DateTime.Now.ToString("MM-dd-yyyy-HH-mm-ss") + "_" + OpenSourceFileDlg.SafeFileName;
                txtMedicalRecordFilePath.Text = strMedRecordFilePathSource;
                btnMedicalRecordUpload.Enabled = true;
                return;
            }
            else return;
        }

        private void btnMedicalRecordUpload_Click(object sender, EventArgs e)
        {
            try
            {
                File.Copy(txtMedicalRecordFilePath.Text.Trim(), strMedRecordFilePathDestination);
                //txtMRUploadDate.Text = DateTime.Today.ToString("MM/dd/yyyy");
                chkMedicalRecordCaseCreationPage.Checked = true;
            }
            catch (UnauthorizedAccessException ex)
            {
                MessageBox.Show(ex.Message, "Error");
                return;
            }
            catch (ArgumentNullException ex)
            {
                MessageBox.Show(ex.Message + "\n Please change the source file name.", "Error");
                return;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error");
                return;
            }

            btnMedicalRecordView.Enabled = true;
            btnDeleteMedicalRecord.Enabled = true;

        }

        private void btnMedicalRecordView_Click(object sender, EventArgs e)
        {
            if (strMedRecordFilePathDestination != String.Empty)
            {
                try
                {
                    ProcessStartInfo processInfo = new ProcessStartInfo();
                    processInfo.FileName = strMedRecordFilePathDestination;
                    Process.Start(processInfo);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error");
                    return;
                }
            }
            else
            {
                MessageBox.Show("No Medical Record is uploaded");
                return;
            }
        }

        private void btnMedicalRecordDelete_Click(object sender, EventArgs e)
        {

            DialogResult dlgResult = MessageBox.Show("Are you sure to delete Medical Record form?", "Warning", MessageBoxButtons.YesNo);

            if (dlgResult == DialogResult.Yes)
            {
                try
                {
                    File.Delete(strMedRecordFilePathDestination);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error");
                    return;
                }

                chkMedicalRecordCaseCreationPage.Checked = false;
                txtMedicalRecordFilePath.Text = String.Empty;
                btnBrowseMR.Enabled = false;
                btnMedicalRecordUpload.Enabled = false;
                //txtMRUploadDate.Text = String.Empty;
                btnMedicalRecordView.Enabled = false;
                btnDeleteMedicalRecord.Enabled = false;

                MessageBox.Show("The Medical Record form has been deleted.", "Information");
            }
        }

        private void btnBrowseUnknownDoc_Click(object sender, EventArgs e)
        {
            OpenFileDialog OpenSourceFileDlg = new OpenFileDialog();

            OpenSourceFileDlg.Filter = "PDF Files | *.pdf; | JPG Files | *.jpg; *.jpeg";
            OpenSourceFileDlg.DefaultExt = "pdf";
            OpenSourceFileDlg.RestoreDirectory = true;

            if (OpenSourceFileDlg.ShowDialog() == DialogResult.OK)
            {
                strUnknownDocFilePathSource = OpenSourceFileDlg.FileName;
                strUnknownDocFilePathDestination = strDestinationPath + "_Unknown_" + DateTime.Now.ToString("MM-dd-yyyy-HH-mm-ss") + "_" + OpenSourceFileDlg.SafeFileName;
                txtOtherDocumentFilePath.Text = strUnknownDocFilePathSource;
                btnUnknownDocUpload.Enabled = true;
                return;
            }
            else return;
        }

        private void btnUnknownUpload_Click(object sender, EventArgs e)
        {
            try
            {
                File.Copy(txtOtherDocumentFilePath.Text.Trim(), strUnknownDocFilePathDestination);
                //txtOtherDocUploadDate.Text = DateTime.Today.ToString("MM/dd/yyyy");
                chkOtherDocCaseCreationPage.Checked = true;
            }
            catch (UnauthorizedAccessException ex)
            {
                MessageBox.Show(ex.Message, "Error");
                return;
            }
            catch (ArgumentNullException ex)
            {
                MessageBox.Show(ex.Message + "\n Please change the source file name.", "Error");
                return;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error");
                return;
            }

            btnOtherDocView.Enabled = true;
            btnDeleteUnknownDoc.Enabled = true;
        }

        private void btnUnknownView_Click(object sender, EventArgs e)
        {
            if (strUnknownDocFilePathDestination != String.Empty)
            {
                try
                {
                    ProcessStartInfo processInfo = new ProcessStartInfo();
                    processInfo.FileName = strUnknownDocFilePathDestination;
                    Process.Start(processInfo);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error");
                    return;
                }
            }
            else
            {
                MessageBox.Show("No Unknown doc is uploaded");
                return;
            }
        }

        private void btnUnknownDelete_Click(object sender, EventArgs e)
        {

            DialogResult dlgResult = MessageBox.Show("Are you sure to delete the Unknown form?", "Warning", MessageBoxButtons.YesNo);

            if (dlgResult == DialogResult.Yes)
            {
                try
                {
                    File.Delete(strUnknownDocFilePathDestination);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error");
                    return;
                }

                chkOtherDocCaseCreationPage.Checked = false;
                txtOtherDocumentFilePath.Text = String.Empty;
                btnBrowseUnknownDoc.Enabled = false;
                btnUnknownDocUpload.Enabled = false;
                //txtOtherDocUploadDate.Text = String.Empty;
                btnOtherDocView.Enabled = false;
                btnDeleteUnknownDoc.Enabled = false;

                MessageBox.Show("The Unknown form has been deleted.", "Information");
            }
        }

        private void btnAddNewMedBill_Click(object sender, EventArgs e)
        {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Medical Bill creation page
            //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            String strSqlQueryForIndivdiualInfo = "select individual_id__c, name, birthdate, SOCIAL_SECURITY_NUMBER__C, MAILINGSTREET, MAILINGCITY, MAILINGSTATE, MAILINGPOSTALCODE " +
                                                "from dbo.contact where INDIVIDUAL_ID__C = @IndividualId";

            SqlCommand cmdQueryForIndividualInfo = new SqlCommand(strSqlQueryForIndivdiualInfo, connSalesforce);
            cmdQueryForIndividualInfo.Parameters.AddWithValue("@IndividualId", strIndividualId);

            if (connSalesforce.State == ConnectionState.Open)
            {
                connSalesforce.Close();
                connSalesforce.Open();
            }
            else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

            SqlDataReader rdrIndividualInSalesforce = cmdQueryForIndividualInfo.ExecuteReader();
            if (rdrIndividualInSalesforce.HasRows)
            {
                rdrIndividualInSalesforce.Read();
                txtIndividualIDMedBill.Text = rdrIndividualInSalesforce.GetString(0);
                txtPatientNameMedBill.Text = rdrIndividualInSalesforce.GetString(1);
                txtMedBillDOB.Text = rdrIndividualInSalesforce.GetDateTime(2).ToString("MM/dd/yyyy");
                txtMedBillSSN.Text = rdrIndividualInSalesforce.GetString(3);
                txtMedBillAddress.Text = rdrIndividualInSalesforce.GetString(4) + ", " + rdrIndividualInSalesforce.GetString(5) + ", " + rdrIndividualInSalesforce.GetString(6) + " " +
                                                 rdrIndividualInSalesforce.GetDouble(7).ToString();
            }
            rdrIndividualInSalesforce.Close();
            if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

            String strSqlQueryForCaseId = "select distinct dbo.tbl_incident.Case_Id from dbo.tbl_incident where dbo.tbl_incident.Individual_id = @IndividualId";

            SqlCommand cmdQueryForCaseId = new SqlCommand(strSqlQueryForCaseId, connRN);
            cmdQueryForCaseId.Parameters.AddWithValue("@IndividualId", strIndividualId);

            cmdQueryForCaseId.CommandType = CommandType.Text;
            cmdQueryForCaseId.CommandText = strSqlQueryForCaseId;

            //if (connRN.State == ConnectionState.Closed) connRN.Open();
            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrIncidentForCaseId = cmdQueryForCaseId.ExecuteReader();

            if (rdrIncidentForCaseId.HasRows)
            {
                while (rdrIncidentForCaseId.Read())
                {
                    txtMedBill_CaseNo.Text = rdrIncidentForCaseId.GetString(0);
                }
            }
            rdrIncidentForCaseId.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();

            String strSqlQueryForDiseaseName = "select [dbo].[ICD10 Code].Name from [dbo].[ICD10 Code] where ICD10_CODE__C = @ICD10Code";

            SqlCommand cmdQueryForDiseaseName = new SqlCommand(strSqlQueryForDiseaseName, connSalesforce);
            cmdQueryForDiseaseName.Parameters.AddWithValue("@ICD10Code", txtMedBill_ICD10Code.Text.Trim());

            cmdQueryForDiseaseName.CommandType = CommandType.Text;
            cmdQueryForDiseaseName.CommandText = strSqlQueryForDiseaseName;

            if (connSalesforce.State == ConnectionState.Open)
            {
                connSalesforce.Close();
                connSalesforce.Open();
            }
            else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
            SqlDataReader rdrDiseaseName = cmdQueryForDiseaseName.ExecuteReader();
            if (rdrDiseaseName.HasRows)
            {
                rdrDiseaseName.Read();
                txtMedBillDiseaseName.Text = rdrDiseaseName.GetString(0);
            }
            rdrDiseaseName.Close();
            if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

            tbCMMManager.TabPages.Insert(4, tbpgMedicalBill);
            tbCMMManager.SelectedIndex = 4;

        }

        private void btnAddNewIllness_Click(object sender, EventArgs e)
        {
            frmIllnessCreationPage frmIllness = new frmIllnessCreationPage();

            frmIllness.txtIndividualNo.Text = txtIndividualID.Text;
            frmIllness.mode = IllnessMode.AddNew;

            frmIllness.ShowDialog(this);
        }

        private void gvCaseViewCaseHistory_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {

            if (e.RowIndex <= -1)
            {
                return;
            }

            DataGridView gvCaseHistory = (DataGridView)sender;

            int nRowSelected;

            strIndividualId = txtIndividualID.Text.Trim();

            //String strCaseNameSelected = String.Empty;
            String strPatientLastName = txtLastName.Text.Trim();
            String strPatientFirstName = txtFirstName.Text.Trim();
            String strPatientMiddleName = txtMiddleName.Text.Trim();
            String strDateOfBirth = dtpBirthDate.Value.ToString("MM/dd/yyyy");
            String strSSN = txtIndividualSSN.Text.Trim();
            String strStreetAddr = txtStreetAddress1.Text.Trim();
            String strCity = txtCity1.Text.Trim();
            String strState = txtState1.Text.Trim();
            String strZip = txtZip1.Text.Trim();

            String strSqlQueryForCaseStatus = "select [dbo].[tbl_case_status_code].[CaseStatusValue] from [dbo].[tbl_case_status_code]";
            SqlCommand cmdQueryForCaseStatus = new SqlCommand(strSqlQueryForCaseStatus, connRN3);
            cmdQueryForCaseStatus.CommandType = CommandType.Text;

            if (connRN3.State != ConnectionState.Closed)
            {
                connRN3.Close();
                connRN3.Open();
            }
            else if (connRN3.State == ConnectionState.Closed) connRN3.Open();

            SqlDataReader rdrCaseStatus = cmdQueryForCaseStatus.ExecuteReader();
            cbCaseStatus.Items.Clear();
            if (rdrCaseStatus.HasRows)
            {
                while (rdrCaseStatus.Read())
                {
                    cbCaseStatus.Items.Add(rdrCaseStatus.GetString(0));
                }
            }
            rdrCaseStatus.Close();
            if (connRN3.State != ConnectionState.Closed) connRN3.Close();

            if (gvCaseHistory.Rows.Count > 0)
            {
                nRowSelected = e.RowIndex;
                
                strCaseNameSelected = gvCaseHistory["CaseName", nRowSelected].Value.ToString();
                CaseIdForCasePageMedBill = strCaseNameSelected;

                String strSqlQueryForCaseInUse = "select [dbo].[tbl_CaseInUse].[Case_Name], [dbo].[tbl_CaseInUse].[EditingStaff] from [dbo].[tbl_CaseInUse] " +
                                 "where [dbo].[tbl_CaseInUse].[Case_Name] = @CaseInUse";

                SqlCommand cmdCaseInUse = new SqlCommand(strSqlQueryForCaseInUse, connRN2);
                cmdCaseInUse.CommandType = CommandType.Text;

                cmdCaseInUse.Parameters.AddWithValue("@CaseInUse", strCaseNameSelected);

                if (connRN2.State != ConnectionState.Closed)
                {
                    connRN2.Close();
                    connRN2.Open();
                }
                else if (connRN2.State == ConnectionState.Closed) connRN2.Open();
                SqlDataReader rdrCaseInUse = cmdCaseInUse.ExecuteReader();
                if (rdrCaseInUse.HasRows)
                {
                    rdrCaseInUse.Read();
                    if (strCaseNameSelected == rdrCaseInUse.GetString(0).Trim() &&
                        nLoggedUserId != rdrCaseInUse.GetInt16(1))
                    {
                        MessageBox.Show("The Case: " + strCaseNameSelected + " is in use.", "Error");
                        rdrCaseInUse.Close();
                        if (connRN2.State != ConnectionState.Closed) connRN2.Close();
                        return;
                    }
                }
                else
                {
                    rdrCaseInUse.Close();
                    if (connRN2.State != ConnectionState.Closed) connRN2.Close();

                    String strSqlInsertCaseInUse = "insert into [dbo].[tbl_CaseInUse] (Case_Name, EditingStaff) values (@CaseNO, @EditingStaff)";

                    SqlCommand cmdInsertCaseInUse = new SqlCommand(strSqlInsertCaseInUse, connRN2);
                    cmdInsertCaseInUse.CommandType = CommandType.Text;

                    cmdInsertCaseInUse.Parameters.AddWithValue("@CaseNo", strCaseNameSelected);
                    cmdInsertCaseInUse.Parameters.AddWithValue("@EditingStaff", nLoggedUserId);

                    if (connRN2.State != ConnectionState.Closed)
                    {
                        connRN2.Close();
                        connRN2.Open();
                    }
                    else if (connRN2.State == ConnectionState.Closed) connRN2.Open();
                    int nCaseInUserInserted = cmdInsertCaseInUse.ExecuteNonQuery();
                    if (nCaseInUserInserted != 1)
                    {
                        MessageBox.Show("Case in use: " + strCaseNameSelected + " has not been inserted.", "Error");
                        if (connRN2.State != ConnectionState.Closed) connRN2.Close();
                        return;
                    }
                    if (connRN2.State != ConnectionState.Closed) connRN2.Close();
                }

                String strSqlQueryForCase = "select [dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Form_File_Name], [dbo].[tbl_case].[NPF_Form_Destination_File_Name], [dbo].[tbl_case].[NPF_Receiv_Date], " +
                                            "[dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Form_File_Name], [dbo].[tbl_case].[IB_Form_Destination_File_Name], [dbo].[tbl_case].[IB_Receiv_Date], " +
                                            "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Form_File_Name], [dbo].[tbl_case].[POP_Form_Destination_File_Name], [dbo].[tbl_case].[POP_Receiv_Date], " +
                                            "[dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Form_File_Name], " +
                                            "[dbo].[tbl_case].[MedRec_Form_Destination_File_Name], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
                                            "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Form_File_Name], [dbo].[tbl_case].[Unknown_Form_Destination_File_Name], " +
                                            "[dbo].[tbl_case].[Unknown_Receiv_Date], [dbo].[tbl_case].[Case_status], [dbo].[tbl_case].[Note] " +
                                            "from [dbo].[tbl_case] " +
                                            "where [dbo].[tbl_case].[IsDeleted] = 0 and " +
                                            "[dbo].[tbl_case].[Case_Name] = @CaseName and " +
                                            "[dbo].[tbl_case].[Contact_ID] = @IndividualId";

                SqlCommand cmdQueryForCase = new SqlCommand(strSqlQueryForCase, connRN3);
                cmdQueryForCase.CommandType = CommandType.Text;

                cmdQueryForCase.Parameters.AddWithValue("@CaseName", strCaseNameSelected);
                cmdQueryForCase.Parameters.AddWithValue("@IndividualId", strIndividualId);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN3.State != ConnectionState.Closed)
                {
                    connRN3.Close();
                    connRN3.Open();
                }
                else if (connRN3.State == ConnectionState.Closed) connRN3.Open();
                SqlDataReader rdrCase = cmdQueryForCase.ExecuteReader();
                if (rdrCase.HasRows)
                {
                    txtCaseName.Text = strCaseNameSelected;
                    txtCaseIndividualID.Text = strIndividualId;
                    txtCreateCaseIndividualName.Text = strPatientLastName + ", " + strPatientFirstName + " " + strPatientMiddleName;

                    if (rdrCase.Read())
                    {
                        if (rdrCase.GetBoolean(0) == true) chkNPF_CaseCreationPage.Checked = true;
                        if (!rdrCase.IsDBNull(1)) txtNPFFormFilePath.Text = rdrCase.GetString(1);
                        if (!rdrCase.IsDBNull(2))
                        {
                            strNPFormFilePathDestination = rdrCase.GetString(2);
                            if (strNPFormFilePathDestination != String.Empty)
                            {
                                btnNPFFormView.Enabled = true;
                                btnNPFFormDelete.Enabled = true;
                            }
                        }
                        if (!rdrCase.IsDBNull(3))
                        {
                            dtpNPFReceivedDate.Checked = true;
                            dtpNPFReceivedDate.Value = rdrCase.GetDateTime(3);
                            dtpNPFReceivedDate.Text = rdrCase.GetDateTime(3).ToString("MM/dd/yyyy");
                        }
                            //txtNPFUploadDate.Text = rdrCase.GetDateTime(3).ToString("MM/dd/yyyy");
                        if (rdrCase.GetBoolean(4) == true) chkIB_CaseCreationPage.Checked = true;
                        if (!rdrCase.IsDBNull(5)) txtIBFilePath.Text = rdrCase.GetString(5);
                        if (!rdrCase.IsDBNull(6))
                        {
                            strIBFilePathDestination = rdrCase.GetString(6);
                            if (strIBFilePathDestination != String.Empty)
                            {
                                btnIBView.Enabled = true;
                                btnDeleteIB.Enabled = true;
                            }
                        }
                        if (!rdrCase.IsDBNull(7))
                        {
                            dtpIBReceivedDate.Checked = true;
                            dtpIBReceivedDate.Value = rdrCase.GetDateTime(7);
                            dtpIBReceivedDate.Text = rdrCase.GetDateTime(7).ToString("MM/dd/yyyy");
                        }
                            //txtIBUploadDate.Text = rdrCase.GetDateTime(7).ToString("MM/dd/yyyy");
                        if (rdrCase.GetBoolean(8) == true) chkPoP_CaseCreationPage.Checked = true;
                        if (!rdrCase.IsDBNull(9)) txtPopFilePath.Text = rdrCase.GetString(9);
                        if (!rdrCase.IsDBNull(10))
                        {
                            strPopFilePathDestination = rdrCase.GetString(10);
                            if (strPopFilePathDestination != String.Empty)
                            {
                                btnPoPView.Enabled = true;
                                btnDeletePoP.Enabled = true;
                            }
                        }
                        if (!rdrCase.IsDBNull(11))
                        {
                            dtpPoPReceivedDate.Checked = true;
                            dtpPoPReceivedDate.Value = rdrCase.GetDateTime(11);
                            dtpPoPReceivedDate.Text = rdrCase.GetDateTime(11).ToString("MM/dd/yyyy");
                        }
                            //txtPoPUploadDate.Text = rdrCase.GetDateTime(11).ToString("MM/dd/yyyy");
                        if (rdrCase.GetBoolean(12) == true) chkMedicalRecordCaseCreationPage.Checked = true;
                        if (!rdrCase.IsDBNull(13)) txtMedicalRecordFilePath.Text = rdrCase.GetString(13);
                        if (!rdrCase.IsDBNull(14))
                        {
                            strMedRecordFilePathDestination = rdrCase.GetString(14);
                            if (strMedicalRecordFileName != String.Empty)
                            {
                                btnMedicalRecordView.Enabled = true;
                                btnDeleteMedicalRecord.Enabled = true;
                            }
                        }
                        if (!rdrCase.IsDBNull(15))
                        {
                            dtpMRReceivedDate.Checked = true;
                            dtpMRReceivedDate.Value = rdrCase.GetDateTime(15);
                            dtpMRReceivedDate.Text = rdrCase.GetDateTime(15).ToString("MM/dd/yyyy");
                        }
                            //txtMRUploadDate.Text = rdrCase.GetDateTime(15).ToString("MM/dd/yyyy");
                        if (rdrCase.GetBoolean(16) == true) chkOtherDocCaseCreationPage.Checked = true;
                        if (!rdrCase.IsDBNull(17)) txtOtherDocumentFilePath.Text = rdrCase.GetString(17);
                        if (!rdrCase.IsDBNull(18))
                        {
                            strUnknownDocFilePathDestination = rdrCase.GetString(18);
                            if (strUnknownDocFilePathDestination != String.Empty)
                            {
                                btnOtherDocView.Enabled = true;
                                btnDeleteUnknownDoc.Enabled = true;
                            }
                        }
                        if (!rdrCase.IsDBNull(19))
                        {
                            dtpOtherDocReceivedDate.Checked = true;
                            dtpOtherDocReceivedDate.Value = rdrCase.GetDateTime(19);
                            dtpOtherDocReceivedDate.Text = rdrCase.GetDateTime(19).ToString("MM/dd/yyyy");
                        }
                            //txtOtherDocUploadDate.Text = rdrCase.GetDateTime(19).ToString("MM/dd/yyyy");
                        //if (rdrCase.GetBoolean(20) == true) txtCaseStatus.Text = "Complete and Ready";
                        //else txtCaseStatus.Text = "Pending - Additional Documents required";
                        if (!rdrCase.IsDBNull(20))
                        {
                            switch (rdrCase.GetInt16(20))
                            {
                                case (int)CaseStatus.OnGoing:
                                    cbCaseStatus.SelectedIndex = (int)CaseStatus.OnGoing;
                                    cbCaseStatus.Enabled = true;
                                    break;
                                case (int)CaseStatus.Processing:
                                    cbCaseStatus.SelectedIndex = (int)CaseStatus.Processing;
                                    cbCaseStatus.Enabled = true;
                                    break;
                                case (int)CaseStatus.Closed:
                                    cbCaseStatus.SelectedIndex = (int)CaseStatus.Closed;
                                    cbCaseStatus.Enabled = true;
                                    break;
                            }
                        }
                        if (!rdrCase.IsDBNull(21)) txtNoteOnCase.Text = rdrCase.GetString(21);
                    }

                }
                rdrCase.Close();
                if (connRN3.State != ConnectionState.Closed) connRN3.Close();

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // Med bills in Case Page

                String strSqlQueryForMedBillInCase = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], [dbo].[tbl_medbill].[CreatedDate], " +
                                                        "[dbo].[tbl_CreateStaff].[Staff_Name], " +
                                                        "[dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                        "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], " +
                                                        "[dbo].[tbl_medbill].[Balance] " +
                                                        "from ((([dbo].[tbl_medbill] inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId]) " +
                                                        "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id]) " +
                                                        "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id]) " +
                                                        "where [dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                                                        "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and " +
                                                        "[dbo].[tbl_medbill].[IsDeleted] = 0";

                SqlCommand cmdQueryForMedBillInCase = new SqlCommand(strSqlQueryForMedBillInCase, connRN3);
                cmdQueryForMedBillInCase.CommandType = CommandType.Text;

                cmdQueryForMedBillInCase.Parameters.AddWithValue("@CaseName", strCaseNameSelected);
                cmdQueryForMedBillInCase.Parameters.AddWithValue("@IndividualId", strIndividualId);

                SqlDependency dependencyMedBillsInCase = new SqlDependency(cmdQueryForMedBillInCase);
                dependencyMedBillsInCase.OnChange += new OnChangeEventHandler(OnMedBillsInCaseViewChange);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN3.State != ConnectionState.Closed)
                {
                    connRN3.Close();
                    connRN3.Open();
                }
                else if (connRN3.State == ConnectionState.Closed) connRN3.Open();
                SqlDataReader rdrMedBillInCase = cmdQueryForMedBillInCase.ExecuteReader();
                gvCasePageMedBills.Rows.Clear();

                if (rdrMedBillInCase.HasRows)
                {
                    while (rdrMedBillInCase.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();

                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(0) });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(1) });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(2).ToString("MM/dd/yyyy") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(3) });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(4).ToString("MM/dd/yyyy") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(5) });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(6).ToString("C") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(7).ToString("C") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(8).ToString("C") });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(9).ToString("C") });

                        gvCasePageMedBills.Rows.Add(row);
                        //AddNewRowToMedBillInCaseSafely(row);
                    }
                }
                rdrMedBillInCase.Close();
                if (connRN3.State != ConnectionState.Closed) connRN3.Close();

                EnableCaseForm();

                btnNewMedBill_Case.Enabled = true;
                btnEditMedBill.Enabled = true;
                btnDeleteMedBill.Enabled = true;

                //tbCMMManager.TabPages.Insert(4, tbpgCreateCase);
                //tbCMMManager.SelectedIndex = 4;

                btnCaseCreationSaveUpper.Enabled = true;
                //btnCaseCreationLowerSave.Enabled = true;

                tbCMMManager.SelectedTab = tbpgCreateCase;
            }
            //}
        }

        private void OnMedBillsInCaseViewChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnMedBillsInCaseViewChange;

                UpdateGridViewMedBillsInCaseView();
            }
        }

        private void UpdateGridViewMedBillsInCaseView()
        {
            String strSqlQueryForMedBillInCase = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], [dbo].[tbl_medbill].[CreatedDate], [dbo].[tbl_CreateStaff].[Staff_Name], " +
                                                 "[dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                 "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], [dbo].[tbl_medbill].[Balance] " +
                                                 "from ((([dbo].[tbl_medbill] inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId]) " +
                                                 "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id]) " +
                                                 "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id]) " +
                                                 "where [dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                                                 "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and" +
                                                 "[dbo].[tbl_medbill].[IsDeleted] = 0";

            //String strSqlQueryForMedBillInCase = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], [dbo].[tbl_medbill].[CreatedDate], " +
            //                         "[dbo].[tbl_CreateStaff].[Staff_Name], " +
            //                         "[dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
            //                         "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], " +
            //                         "[dbo].[tbl_medbill].[Balance] " +
            //                         "from ((([dbo].[tbl_medbill] inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId]) " +
            //                         "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id]) " +
            //                         "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id]) " +
            //                         "where [dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
            //                         "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and " +
            //                         "[dbo].[tbl_medbill].[IsDeleted] = 0";


            SqlCommand cmdQueryForMedBillInCase = new SqlCommand(strSqlQueryForMedBillInCase, connRN3);
            cmdQueryForMedBillInCase.CommandType = CommandType.Text;

            cmdQueryForMedBillInCase.Parameters.AddWithValue("@CaseName", strCaseNameSelected);
            cmdQueryForMedBillInCase.Parameters.AddWithValue("@IndividualId", strIndividualId);

            SqlDependency dependencyMedBillsInCase = new SqlDependency(cmdQueryForMedBillInCase);
            dependencyMedBillsInCase.OnChange += new OnChangeEventHandler(OnMedBillsInCaseViewChange);

            //if (connRN.State == ConnectionState.Closed) connRN.Open();
            //if (connRN.State != ConnectionState.Closed)
            if (connRN3.State != ConnectionState.Closed)
            {
                connRN3.Close();
                connRN3.Open();
            }
            else if (connRN3.State == ConnectionState.Closed) connRN3.Open();
            SqlDataReader rdrMedBillInCase = cmdQueryForMedBillInCase.ExecuteReader();

            if (IsHandleCreated) ClearMedBillInCaseSafely();
            else gvCasePageMedBills.Rows.Clear();

            if (rdrMedBillInCase.HasRows)
            {
                while (rdrMedBillInCase.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();

                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(0) });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(1) });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(2).ToString("MM/dd/yyyy") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(3) });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(4).ToString("MM/dd/yyyy") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(5) });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(6).ToString("C") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(7).ToString("C") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(8).ToString("C") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(9).ToString("C") });

                    //gvCasePageMedBills.Rows.Add(row);
                    if (IsHandleCreated) AddNewRowToMedBillInCaseSafely(row);
                    else gvCasePageMedBills.Rows.Add(row);
                }
            }
            rdrMedBillInCase.Close();
            if (connRN3.State != ConnectionState.Closed) connRN3.Close();
        }


        //private void UpdateGridViewMedBillsInCase()
        //{

        //}

        private void btnEditIllness_Click(object sender, EventArgs e)
        {
            //String strCaseName = cbCurrentCase.SelectedItem.ToString();

            //DataGridViewRow row = gvIllnessList.SelectedRows[0];

            //String strIndividualNo = row.Cells[0].Value.ToString();
            //String strICD10Code = row.Cells[1].Value.ToString();

            //String strConnStringIllnessEdit = @"Data Source=CMM-2014U\CMM; Initial Catalog=RN_DB;Integrated Security=True";

            //SqlConnection illnessEditConn = new SqlConnection(strConnStringIllnessEdit);
            //SqlCommand cmdIllnessEdit = illnessEditConn.CreateCommand();

            //String strQueryForIllness = "select Individual_Id, ICD_10_Id, Date_of_Diagnosis, CreateDate, Introduction, Body, Conclusion from tbl_illness " +
            //                            "where Individual_Id = '" + strIndividualNo + "' and Case_Id = '" + strCaseName + "' and ICD_10_Id = '" + strICD10Code + "'";

            //cmdIllnessEdit.CommandType = CommandType.Text;
            //cmdIllnessEdit.CommandText = strQueryForIllness;

            //illnessEditConn.Open();

            //SqlDataReader rdrIllness = cmdIllnessEdit.ExecuteReader();

            //if (rdrIllness.HasRows)
            //{
            //    frmIllnessCreationPage frm = new frmIllnessCreationPage();

            //    while(rdrIllness.Read())
            //    {
            //        frm.mode = IllnessMode.Edit;
            //        frm.strCaseId = cbCurrentCase.SelectedItem.ToString();
            //        frm.txtIndividualNo.Text = rdrIllness.GetString(0);
            //        frm.txtICD10Code.Text = rdrIllness.GetString(1);
            //        frm.dtpDateOfDiagnosis.Value = rdrIllness.GetDateTime(2);
            //        frm.dtpCreateDate.Value = rdrIllness.GetDateTime(3);
            //        frm.txtIntroduction.Text = rdrIllness.GetString(4);
            //        frm.txtIllnessNote.Text = rdrIllness.GetString(5);
            //        frm.txtConclusion.Text = rdrIllness.GetString(6);

            //        String strDiseaseNameConnString = @"Data Source=CMM-2014U\CMM; Initial Catalog=SalesForce;Integrated Security=True";

            //        SqlConnection connDiseaseName = new SqlConnection(strDiseaseNameConnString);
            //        SqlCommand cmdDiseaseName = connDiseaseName.CreateCommand();

            //        String strQueryForDiseaseName = "select Name from [ICD10 Code] where ICD10_CODE__C = '" + frm.txtICD10Code.Text.Trim() + "'";
            //        cmdDiseaseName.CommandType = CommandType.Text;
            //        cmdDiseaseName.CommandText = strQueryForDiseaseName;

            //        connDiseaseName.Open();
            //        frm.txtDiseaseName.Text = cmdDiseaseName.ExecuteScalar().ToString();
            //        connDiseaseName.Close();

            //    }

            //    frm.ShowDialog();
            //}


            //String strCreateDate = row.Cells[2].Value.ToString();
            //String strIllnessNote = row.Cells[3].Value.ToString();

            //frmIllnessCreationPage frmIllness = new frmIllnessCreationPage();

            //frmIllness.txtIndividualNo.Text = strIndividualNo;
            //frmIllness.txtICD10Code.Text = strICD10Code;
            //frmIllness.txtIllnessNote.Text = strIllnessNote;

            //frmIllness.ShowDialog();
        }

        private void btnDeleteIllness_Click(object sender, EventArgs e)
        {

            frmIllnessDeleteConfirm frm = new frmIllnessDeleteConfirm();

            //if (frm.ShowDialog() == DialogResult.Yes)
            //{
            //    String strCaseName = cbCurrentCase.SelectedItem.ToString();
            //    DataGridViewRow row = gvIllnessList.SelectedRows[0];
            //    String strIndividualNo = row.Cells[0].Value.ToString();

            //    String strSqlDeleteIllness = "delete from tbl_illness where Individual_Id = '" + strIndividualNo + "' and Case_Id = '" + strCaseName + "'";
            //    String strDeleteIllnessConnString = @"Data Source=CMM-2014U\CMM; Initial Catalog=RN_DB;Integrated Security=True";
            //    SqlConnection connDeleteIllness = new SqlConnection(strDeleteIllnessConnString);

            //    SqlCommand cmdDeleteIllness = connDeleteIllness.CreateCommand();
            //    cmdDeleteIllness.CommandType = CommandType.Text;
            //    cmdDeleteIllness.CommandText = strSqlDeleteIllness;

            //    connDeleteIllness.Open();
            //    if (cmdDeleteIllness.ExecuteNonQuery() == 1)
            //    {
            //        frmDeleteSuccess frmSuccess = new frmDeleteSuccess();
            //        frmSuccess.ShowDialog();
            //        return;
            //    }
            //    connDeleteIllness.Close();
            //}
            //else return;
        }

        private void frmCMMManager_FormClosing(object sender, FormClosingEventArgs e)
        {

            //SqlDependency.Stop(connRN_str);
            //SqlDependency.Stop(strConnStringForIllness);


        }


        //void txtMedBillGuarantor_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void txtMedBill_Illness_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void txtMedBill_Incident_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void txtMedBillAmount_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void txtBalance_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void txtPrescriptionName_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void txtPrescriptionNo_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void txtPrescriptionDescription_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void txtNumPhysicalTherapy_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void cbMedicalBillNote1_SelectedIndexChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void cbMedicalBillNote2_SelectedIndexChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void cbMedicalBillNote3_SelectedIndexChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void cbMedicalBillNote4_SelectedIndexChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void txtMedicalBillNote1_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void txtMedicalBillNote2_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void txtMedicalBillNote3_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void txtMedicalBillNote4_TextChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void dtpBillDate_ValueChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //void dtpDueDate_ValueChanged(object sender, EventArgs e)
        //{
        //    bIsModified = true;
        //}

        //private void OnCaseChanged(object sender, SqlDependencyEx.TableChangedEventArgs e)
        //{
        //    //Do stuff from e.Data
        //    MessageBox.Show("Case Table Changed!");
        //}

        private void btnAddNewIncident_Click(object sender, EventArgs e)
        {
            frmIncidentCreationPage frmIncident = new frmIncidentCreationPage();
            frmIncident.strIndividualId = txtIndividualID.Text.Trim();

            frmIncident.ShowDialog(this);
        }

        //private void cbBillCreationCaseNo_SelectedValueChanged(object sender, EventArgs e)
        //{
        //    ComboBox cbCaseNo = sender as ComboBox;

        //    String strCaseIdSelected = cbCaseNo.SelectedItem.ToString();

        //    String strSqlQueryForIncidentId = "select dbo.tbl_incident.incident_id from dbo.tbl_incident where dbo.tbl_incident.Case_id = @CaseId and dbo.tbl_incident.Individual_id = @IndividualId";

        //    SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN);
        //    cmdQueryForIncidentId.Parameters.AddWithValue("@CaseId", strCaseIdSelected);
        //    cmdQueryForIncidentId.Parameters.AddWithValue("@IndividualId", strIndividualId);

        //    cmdQueryForIncidentId.CommandType = CommandType.Text;
        //    cmdQueryForIncidentId.CommandText = strSqlQueryForIncidentId;

        //    if (connRN.State != ConnectionState.Closed) connRN.Close();

        //    connRN.Open();

        //    SqlDataReader rdrIncidentForIncidentId = cmdQueryForIncidentId.ExecuteReader();
        //    if (rdrIncidentForIncidentId.HasRows)
        //    {
        //        cbBillCreationIncidentNo.Items.Clear();
        //        while (rdrIncidentForIncidentId.Read())
        //        {
        //            cbBillCreationIncidentNo.Items.Add(rdrIncidentForIncidentId.GetInt32(0).ToString());
        //        }
        //        cbBillCreationIncidentNo.SelectedIndex = 0;
        //    }
        //    connRN.Close();


        //    String strQueryForDocReceivedDate = "select NPF_Receiv_Date, IB_Receiv_Date, POP_Receiv_Date from dbo.tbl_case where Case_Name = @CaseId";

        //    //String strCaseNo = cbBillCreationCaseNo.SelectedItem.ToString();
        //    String strCaseNo = txtMedBillCreationCaseNo.Text.Trim();

        //    SqlCommand cmdQueryForDocReceivDates = new SqlCommand(strQueryForDocReceivedDate, connRN);
        //    cmdQueryForDocReceivDates.CommandType = CommandType.Text;
        //    cmdQueryForDocReceivDates.CommandText = strQueryForDocReceivedDate;

        //    cmdQueryForDocReceivDates.Parameters.AddWithValue("@CaseId", strCaseNo);

        //    connRN.Open();
        //    SqlDataReader rdrDocReceivDate = cmdQueryForDocReceivDates.ExecuteReader();

        //    if (rdrDocReceivDate.HasRows)
        //    {
        //        rdrDocReceivDate.Read();
        //        txtNPFReceivedDate.Text = rdrDocReceivDate.GetDateTime(0).ToString("MM/dd/yyyy");
        //        txtIBReceivedDate.Text = rdrDocReceivDate.GetDateTime(1).ToString("MM/dd/yyyy");
        //        txtPOPReceivedDate.Text = rdrDocReceivDate.GetDateTime(2).ToString("MM/dd/yyyy");
        //    }

        //    connRN.Close();

        //}

        //private void cbBillCreationIncidentNo_SelectedValueChanged(object sender, EventArgs e)
        //{
        //    ComboBox cbIncidentNo = sender as ComboBox;

        //    String strIncidentNoSelected = cbIncidentNo.SelectedItem.ToString();

        //    String strSqlQueryForIllnessId = "select dbo.tbl_incident.illness_id from dbo.tbl_incident where dbo.tbl_incident.incident_id = @IncidentNo";

        //    SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN);
        //    cmdQueryForIllnessId.Parameters.AddWithValue("@IncidentNo", strIncidentNoSelected);

        //    cmdQueryForIllnessId.CommandType = CommandType.Text;
        //    cmdQueryForIllnessId.CommandText = strSqlQueryForIllnessId;

        //    if (connRN.State != ConnectionState.Closed) connRN.Close();

        //    //String strIllnessId = String.Empty;
        //    Int32 nIllnessId = 0;
        //    rn_cnn.Open();

        //    SqlDataReader rdrIllnessId = cmdQueryForIllnessId.ExecuteReader();
        //    if (rdrIllnessId.HasRows)
        //    {
        //        rdrIllnessId.Read();
        //        nIllnessId = rdrIllnessId.GetInt32(0);
        //    }
        //    rn_cnn.Close();

        //    String strSqlQueryForICD10Code = "select dbo.tbl_illness.ICD_10_Id from dbo.tbl_illness where dbo.tbl_illness.Illness_id = @IllnessId";

        //    SqlCommand cmdQueryForICD10Code = new SqlCommand(strSqlQueryForICD10Code, rn_cnn);
        //    cmdQueryForICD10Code.Parameters.AddWithValue("@IllnessId", nIllnessId);

        //    cmdQueryForICD10Code.CommandType = CommandType.Text;
        //    cmdQueryForICD10Code.CommandText = strSqlQueryForICD10Code;

        //    if (rn_cnn.State == ConnectionState.Open) rn_cnn.Close();

        //    String strICD10Code = String.Empty;
        //    rn_cnn.Open();

        //    SqlDataReader rdrICD10Code = cmdQueryForICD10Code.ExecuteReader();
        //    if (rdrICD10Code.HasRows)
        //    {
        //        rdrICD10Code.Read();
        //        strICD10Code = rdrICD10Code.GetString(0);
        //    }
        //    rn_cnn.Close();

        //    txtICD10Code.Text = strICD10Code.Trim();

        //    String strSqlQueryForDiseaseName = "select dbo.[ICD10 Code].Name from dbo.[ICD10 Code] where ICD10_CODE__C = @ICD10Code";

        //    SqlCommand cmdQueryForDiseaseName = new SqlCommand(strSqlQueryForDiseaseName, connSalesforce);
        //    cmdQueryForDiseaseName.Parameters.AddWithValue("@ICD10Code", txtICD10Code.Text.Trim());

        //    cmdQueryForDiseaseName.CommandType = CommandType.Text;
        //    cmdQueryForDiseaseName.CommandText = strSqlQueryForDiseaseName;

        //    connSalesforce.Open();

        //    SqlDataReader rdrDiseaseName = cmdQueryForDiseaseName.ExecuteReader();
        //    if (rdrDiseaseName.HasRows)
        //    {
        //        rdrDiseaseName.Read();
        //        txtDiseaseName.Text = rdrDiseaseName.GetString(0);
        //    }
        //    connSalesforce.Close();

        //}

        private void txtICD10Code_TextChanged(object sender, EventArgs e)
        {
            String strICD10Code = txtMedBill_ICD10Code.Text.Trim();

            for (int i = 0; i < lstICD10CodeInfo.Count; i++)
            {
                if (strICD10Code.ToUpper() == lstICD10CodeInfo[i].ICD10Code)
                    txtMedBillDiseaseName.Text = lstICD10CodeInfo[i].Name;
            }
        }

        private void btnNewIncident_Click(object sender, EventArgs e)
        {
            frmIncidentCreationPage frmIncident = new frmIncidentCreationPage();
            frmIncident.strIndividualId = txtIndividualID.Text.Trim();

            frmIncident.ShowDialog(this);
        }

        private void btnNewIllness_Click(object sender, EventArgs e)
        {
            frmIllnessCreationPage frmIllness = new frmIllnessCreationPage();

            frmIllness.txtIndividualNo.Text = txtIndividualID.Text;
            frmIllness.mode = IllnessMode.AddNew;

            frmIllness.ShowDialog(this);
        }

        private void btnCaseCreationCancelUpper_Click(object sender, EventArgs e)
        {
            //if (tbCMMManager.Contains(tbpgMedicalBill))
            //{
            //    MessageBox.Show("Medical Bill page is open. Close Medical Bill page first.", "Alert");
            //    return;
            //}

            DialogResult dlgClose = MessageBox.Show("Do you want to close Case page?", "Alert", MessageBoxButtons.YesNo);

            if (dlgClose == DialogResult.Yes)
            {
                DialogResult dlgResult = MessageBox.Show("Do you want save the change?", "Alert", MessageBoxButtons.YesNo);

                if (dlgResult == DialogResult.Yes)
                {
                    String CaseName = txtCaseName.Text.Trim();
                    String IndividualId = txtCaseIndividualID.Text.Trim();

                    String strSqlQueryForCaseName = "select [dbo].[tbl_case].[Case_Name] from [dbo].[tbl_case] " +
                                                    "where [dbo].[tbl_case].[Case_Name] = @CaseName and [dbo].[tbl_case].[Contact_ID] = @IndividualId";

                    SqlCommand cmdQueryForCaseName = new SqlCommand(strSqlQueryForCaseName, connRN4);
                    cmdQueryForCaseName.CommandText = strSqlQueryForCaseName;
                    cmdQueryForCaseName.CommandType = CommandType.Text;

                    cmdQueryForCaseName.Parameters.AddWithValue("@CaseName", CaseName);
                    cmdQueryForCaseName.Parameters.AddWithValue("@IndividualId", IndividualId);

                    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    Object objCaseName = cmdQueryForCaseName.ExecuteScalar();
                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    if (objCaseName == null)
                    {
                        //frmSaveNewCase frmSaveNewCase = new frmSaveNewCase();

                        //DialogResult dlgResult = frmSaveNewCase.ShowDialog();

                        //if (dlgResult == DialogResult.Yes)
                        //{

                        String strCaseId = String.Empty;
                        String strIndividualID = String.Empty;
                        String strNPFormFilePath = String.Empty;
                        String strNPFUploadDate = String.Empty;
                        String strIBFilePath = String.Empty;
                        String strIBUploadDate = String.Empty;
                        String strPopFilePath = String.Empty;
                        String strPopUploadDate = String.Empty;
                        String strMedicalRecordFilePath = String.Empty;
                        String strMedicalRecordUploadDate = String.Empty;
                        String strUnknownDocumentFilePath = String.Empty;
                        String strUnknownDocUploadDate = String.Empty;
                        String strLogID = String.Empty;

                        CasedInfoDetailed caseDetail = new CasedInfoDetailed();

                        caseDetail.CaseId = String.Empty;
                        caseDetail.ContactId = String.Empty;
                        caseDetail.Individual_Id = String.Empty;
                        caseDetail.CreateDate = DateTime.Today;
                        caseDetail.ModificationDate = DateTime.Today;
                        caseDetail.CreateStaff = nLoggedUserId;
                        caseDetail.ModifyingStaff = nLoggedUserId;

                        caseDetail.Individual_Id = String.Empty;
                        caseDetail.NPF_Form = 0;
                        caseDetail.NPF_Form_File_Name = String.Empty;
                        caseDetail.NPF_Form_Destination_File_Name = String.Empty;

                        caseDetail.IB_Form = 0;
                        caseDetail.IB_Form_File_Name = String.Empty;
                        caseDetail.IB_Form_Destination_File_Name = String.Empty;

                        caseDetail.POP_Form = 0;
                        caseDetail.POP_Form_File_Name = String.Empty;
                        caseDetail.POP_Form_Destionation_File_Name = String.Empty;

                        caseDetail.MedicalRecord_Form = 0;
                        caseDetail.MedRec_Form_File_Name = String.Empty;
                        caseDetail.MedRec_Form_Destination_File_Name = String.Empty;

                        caseDetail.Unknown_Form = 0;
                        caseDetail.Unknown_Form_File_Name = String.Empty;
                        caseDetail.Unknown_Form_Destination_File_Name = String.Empty;

                        caseDetail.Note = String.Empty;
                        caseDetail.Log_Id = String.Empty;
                        caseDetail.AddBill_Form = false;

                        caseDetail.Remove_Log = String.Empty;

                        switch (cbCaseStatus.SelectedIndex)
                        {
                            case (int)CaseStatus.OnGoing:
                                caseDetail.Status = CaseStatus.OnGoing;
                                break;
                            case (int)CaseStatus.Processing:
                                caseDetail.Status = CaseStatus.Processing;
                                break;
                            case (int)CaseStatus.Closed:
                                caseDetail.Status = CaseStatus.Closed;
                                break;
                        }

                        if (txtCaseName.Text.Trim() != String.Empty) caseDetail.CaseId = txtCaseName.Text.Trim();
                        if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.ContactId = txtCaseIndividualID.Text.Trim();
                        if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.Individual_Id = txtCaseIndividualID.Text.Trim();
                        if (chkNPF_CaseCreationPage.Checked)
                        {
                            caseDetail.NPF_Form = 1;
                            if (txtNPFFormFilePath.Text.Trim() != String.Empty) caseDetail.NPF_Form_File_Name = txtNPFFormFilePath.Text.Trim();
                            //if (txtNPFUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtNPFUploadDate.Text.Trim(), out result)) caseDetail.NPF_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.NPF_ReceivedDate = dtpNPFReceivedDate.Value;
                            caseDetail.NPF_Form_Destination_File_Name = strNPFormFilePathDestination;
                        }
                        if (chkIB_CaseCreationPage.Checked)
                        {
                            caseDetail.IB_Form = 1;
                            if (txtIBFilePath.Text.Trim() != String.Empty) caseDetail.IB_Form_File_Name = txtIBFilePath.Text.Trim();
                            //if (txtIBUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtIBUploadDate.Text.Trim(), out result)) caseDetail.IB_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.IB_ReceivedDate = dtpIBReceivedDate.Value;
                            caseDetail.IB_Form_Destination_File_Name = strIBFilePathDestination;
                        }
                        if (chkPoP_CaseCreationPage.Checked)
                        {
                            caseDetail.POP_Form = 1;
                            if (txtPopFilePath.Text.Trim() != String.Empty) caseDetail.POP_Form_File_Name = txtPopFilePath.Text.Trim();
                            //if (txtPoPUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtPoPUploadDate.Text.Trim(), out result)) caseDetail.POP_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.POP_ReceivedDate = dtpPoPReceivedDate.Value;
                            caseDetail.POP_Form_Destionation_File_Name = strPopFilePathDestination;
                        }
                        if (chkMedicalRecordCaseCreationPage.Checked)
                        {
                            caseDetail.MedicalRecord_Form = 1;
                            if (txtMedicalRecordFilePath.Text.Trim() != String.Empty) caseDetail.MedRec_Form_File_Name = txtMedicalRecordFilePath.Text.Trim();
                            //if (txtMRUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtMRUploadDate.Text.Trim(), out result)) caseDetail.MedRec_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.MedRec_ReceivedDate = dtpMRReceivedDate.Value;
                            caseDetail.MedRec_Form_Destination_File_Name = strMedRecordFilePathDestination;
                        }
                        if (chkOtherDocCaseCreationPage.Checked)
                        {
                            caseDetail.Unknown_Form = 1;
                            if (txtOtherDocumentFilePath.Text.Trim() != String.Empty) caseDetail.Unknown_Form_File_Name = txtOtherDocumentFilePath.Text.Trim();
                            //if (txtOtherDocUploadDate.Text.Trim() != String.Empty)      //caseDetail.Unknown_ReceivedDate = DateTime.Parse(txtOtherDocUploadDate.Text.Trim());
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtOtherDocUploadDate.Text.Trim(), out result)) caseDetail.Unknown_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.Unknown_ReceivedDate = dtpOtherDocReceivedDate.Value;
                            caseDetail.Unknown_Form_Destination_File_Name = strUnknownDocFilePathDestination;
                        }

                        caseDetail.Log_Id = "Log: " + txtCaseName.Text;
                        caseDetail.AddBill_Form = false;
                        caseDetail.AddBill_Received_Date = null;
                        caseDetail.Remove_Log = String.Empty;

                        String strSqlCreateCase = "insert into tbl_case (IsDeleted, Case_Name, Contact_ID, CreateDate, ModifiDate, CreateStaff, ModifiStaff, Case_status, " +
                                                    "NPF_Form, NPF_Form_File_Name, NPF_Form_Destination_File_Name, NPF_Receiv_Date, " +
                                                    "IB_Form, IB_Form_File_Name, IB_Form_Destination_File_Name, IB_Receiv_Date, " +
                                                    "POP_Form, POP_Form_File_Name, POP_Form_Destination_File_Name, POP_Receiv_Date, " +
                                                    "MedRec_Form, MedRec_Form_File_Name, MedRec_Form_Destination_File_Name, MedRec_Receiv_Date, " +
                                                    "Unknown_Form, Unknown_Form_File_Name, Unknown_Form_Destination_File_Name, Unknown_Receiv_Date, " +
                                                    "Note, Log_ID, AddBill_Form, AddBill_receiv_Date, Remove_log, individual_id) " +
                                                    "Values (@IsDeleted, @CaseId, @ContactId, @CreateDate, @ModifiDate, @CreateStaff, @ModifiStaff, @CaseStatus, " +
                                                    "@NPF_Form, @NPF_Form_File_Name, @NPF_Form_Destination_File_Name, @NPF_Receive_Date, " +
                                                    "@IB_Form, @IB_Form_File_Name, @IB_Form_Destination_File_Name, @IB_Receive_Date, " +
                                                    "@POP_Form, @POP_Form_File_Name, @POP_Form_Destination_File_Name, @POP_Receive_Date, " +
                                                    "@MedRecord_Form, @MedRecord_Form_File_Name, @MedRecord_Form_Destination_File_name, @MedRecord_Receive_Date, " +
                                                    "@Unknown_Form, @Unknown_Form_File_Name, @Unknown_Form_Destination_File_Name, @Unknown_Receive_Date, " +
                                                    "@Note, @Log_Id, @AddBill_Form, @AddBill_ReceiveDate, @Remove_Log, @Individual_Id)";

                        SqlCommand cmdInsertNewCase = new SqlCommand(strSqlCreateCase, connRN4);
                        cmdInsertNewCase.CommandType = CommandType.Text;

                        cmdInsertNewCase.Parameters.AddWithValue("@IsDeleted", 0);
                        cmdInsertNewCase.Parameters.AddWithValue("@CaseId", caseDetail.CaseId);
                        cmdInsertNewCase.Parameters.AddWithValue("@ContactId", caseDetail.ContactId);
                        cmdInsertNewCase.Parameters.AddWithValue("@CreateDate", caseDetail.CreateDate);
                        cmdInsertNewCase.Parameters.AddWithValue("@ModifiDate", caseDetail.ModificationDate);
                        cmdInsertNewCase.Parameters.AddWithValue("@CreateStaff", caseDetail.CreateStaff);
                        cmdInsertNewCase.Parameters.AddWithValue("@ModifiStaff", caseDetail.ModifyingStaff);
                        cmdInsertNewCase.Parameters.AddWithValue("@CaseStatus", caseDetail.Status);

                        cmdInsertNewCase.Parameters.AddWithValue("@NPF_Form", caseDetail.NPF_Form);
                        cmdInsertNewCase.Parameters.AddWithValue("@NPF_Form_File_Name", caseDetail.NPF_Form_File_Name);
                        cmdInsertNewCase.Parameters.AddWithValue("@NPF_Form_Destination_File_Name", caseDetail.NPF_Form_Destination_File_Name);
                        if (caseDetail.NPF_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@NPF_Receive_Date", caseDetail.NPF_ReceivedDate);
                        else cmdInsertNewCase.Parameters.AddWithValue("@NPF_Receive_Date", DBNull.Value);

                        cmdInsertNewCase.Parameters.AddWithValue("@IB_Form", caseDetail.IB_Form);
                        cmdInsertNewCase.Parameters.AddWithValue("@IB_Form_File_Name", caseDetail.IB_Form_File_Name);
                        cmdInsertNewCase.Parameters.AddWithValue("@IB_Form_Destination_File_Name", caseDetail.IB_Form_Destination_File_Name);
                        if (caseDetail.IB_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@IB_Receive_Date", caseDetail.IB_ReceivedDate);
                        else cmdInsertNewCase.Parameters.AddWithValue("@IB_Receive_Date", DBNull.Value);

                        cmdInsertNewCase.Parameters.AddWithValue("@POP_Form", caseDetail.POP_Form);
                        cmdInsertNewCase.Parameters.AddWithValue("@POP_Form_File_Name", caseDetail.POP_Form_File_Name);
                        cmdInsertNewCase.Parameters.AddWithValue("@POP_Form_Destination_File_Name", caseDetail.POP_Form_Destionation_File_Name);
                        if (caseDetail.POP_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@POP_Receive_Date", caseDetail.POP_ReceivedDate);
                        else cmdInsertNewCase.Parameters.AddWithValue("@POP_Receive_Date", DBNull.Value);

                        cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Form", caseDetail.MedicalRecord_Form);
                        cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Form_File_Name", caseDetail.MedRec_Form_File_Name);
                        cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Form_Destination_File_Name", caseDetail.MedRec_Form_Destination_File_Name);
                        if (caseDetail.MedRec_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Receive_Date", caseDetail.MedRec_ReceivedDate);
                        else cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Receive_Date", DBNull.Value);

                        cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Form", caseDetail.Unknown_Form);
                        cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Form_File_Name", caseDetail.Unknown_Form_File_Name);
                        cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Form_Destination_File_Name", caseDetail.Unknown_Form_Destination_File_Name);
                        if (caseDetail.Unknown_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Receive_Date", caseDetail.Unknown_ReceivedDate);
                        else cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Receive_Date", DBNull.Value);

                        cmdInsertNewCase.Parameters.AddWithValue("@Note", caseDetail.Note);
                        cmdInsertNewCase.Parameters.AddWithValue("@Log_Id", caseDetail.Log_Id);
                        cmdInsertNewCase.Parameters.AddWithValue("@AddBill_Form", caseDetail.AddBill_Form);
                        if (caseDetail.AddBill_Received_Date != null) cmdInsertNewCase.Parameters.AddWithValue("@AddBill_ReceiveDate", caseDetail.AddBill_Received_Date);
                        else cmdInsertNewCase.Parameters.AddWithValue("@AddBill_ReceiveDate", DBNull.Value);
                        if (caseDetail.Remove_Log == String.Empty) cmdInsertNewCase.Parameters.AddWithValue("@Remove_Log", DBNull.Value);
                        cmdInsertNewCase.Parameters.AddWithValue("@Individual_Id", caseDetail.Individual_Id);

                        //if (connRN.State == ConnectionState.Closed) connRN.Open();
                        if (connRN4.State != ConnectionState.Closed)
                        {
                            connRN4.Close();
                            connRN4.Open();
                        }
                        else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                        int nResult = cmdInsertNewCase.ExecuteNonQuery();
                        if (nResult == 1)
                        {
                            MessageBox.Show("The case has been saved.", "Information");

                            caseDetail.CaseId = txtCaseName.Text.Trim();
                            strCaseIdSelected = caseDetail.CaseId;
                            strContactIdSelected = caseDetail.ContactId;

                            btnNewMedBill_Case.Enabled = true;
                            btnEditMedBill.Enabled = true;
                            btnDeleteMedBill.Enabled = true;
                        }
                        if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                        //}
                        //else if (dlgResult == DialogResult.No)
                        //{
                        //    tbCMMManager.TabPages.Remove(tbpgCreateCase);
                        //    tbCMMManager.SelectedIndex = 2;

                        //    return;
                        //}
                        //else if (dlgResult == DialogResult.Cancel)
                        //{
                        //    return;
                        //}
                    }
                    else if (objCaseName != null)    // Edit and update case
                    {
                        //frmSaveChangeOnCase frmDlgSaveChange = new frmSaveChangeOnCase();

                        //DialogResult dlgResult = frmDlgSaveChange.ShowDialog();

                        ////if (frmDlgSaveChange.DialogResult == DialogResult.Yes)
                        //if (dlgResult == DialogResult.Yes)
                        //{
                        CasedInfoDetailed caseDetail = new CasedInfoDetailed();

                        caseDetail.CaseId = txtCaseName.Text.Trim();
                        caseDetail.ContactId = String.Empty;
                        caseDetail.Individual_Id = String.Empty;
                        caseDetail.CreateDate = DateTime.Today;
                        //caseDetail.ModificationDate = DateTime.Today;
                        //caseDetail.CreateStaff = 8;     // WonJik
                        //caseDetail.ModifyingStaff = 8;  // WonJik
                        //caseDetail.CreateStaff = nLoggedUserId;
                        caseDetail.ModifyingStaff = nLoggedUserId;
                        switch (cbCaseStatus.SelectedIndex)
                        {
                            case (int)CaseStatus.OnGoing:
                                caseDetail.Status = CaseStatus.OnGoing;
                                break;
                            case (int)CaseStatus.Processing:
                                caseDetail.Status = CaseStatus.Processing;
                                break;
                            case (int)CaseStatus.Closed:
                                caseDetail.Status = CaseStatus.Closed;
                                break;
                        }
                        caseDetail.Individual_Id = String.Empty;
                        caseDetail.NPF_Form = 0;
                        caseDetail.NPF_Form_File_Name = String.Empty;
                        caseDetail.NPF_Form_Destination_File_Name = String.Empty;
                        //caseDetail.NPF_ReceivedDate = DateTime.Today;
                        caseDetail.IB_Form = 0;
                        caseDetail.IB_Form_File_Name = String.Empty;
                        caseDetail.IB_Form_Destination_File_Name = String.Empty;
                        //caseDetail.IB_ReceivedDate = DateTime.Today;
                        caseDetail.POP_Form = 0;
                        caseDetail.POP_Form_File_Name = String.Empty;
                        caseDetail.POP_Form_Destionation_File_Name = String.Empty;
                        //caseDetail.POP_ReceivedDate = DateTime.Today;
                        caseDetail.MedicalRecord_Form = 0;
                        caseDetail.MedRec_Form_File_Name = String.Empty;
                        caseDetail.MedRec_Form_Destination_File_Name = String.Empty;
                        //caseDetail.MedRec_ReceivedDate = DateTime.Today;
                        caseDetail.Unknown_Form = 0;
                        caseDetail.Unknown_Form_File_Name = String.Empty;
                        caseDetail.Unknown_Form_Destination_File_Name = String.Empty;
                        //caseDetail.Unknown_ReceivedDate = DateTime.Today;
                        caseDetail.Note = String.Empty;
                        caseDetail.Log_Id = String.Empty;
                        caseDetail.AddBill_Form = false;
                        //caseDetail.AddBill_Received_Date = DateTime.Today;
                        caseDetail.Remove_Log = String.Empty;

                        if (txtCaseName.Text.Trim() != String.Empty) caseDetail.CaseId = txtCaseName.Text.Trim();
                        if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.ContactId = txtCaseIndividualID.Text.Trim();
                        if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.Individual_Id = txtCaseIndividualID.Text.Trim();

                        if (chkNPF_CaseCreationPage.Checked)
                        {
                            caseDetail.NPF_Form = 1;
                            if (txtNPFFormFilePath.Text.Trim() != String.Empty) caseDetail.NPF_Form_File_Name = txtNPFFormFilePath.Text.Trim();
                            //if (txtNPFUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtNPFUploadDate.Text.Trim(), out result)) caseDetail.NPF_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.NPF_ReceivedDate = dtpNPFReceivedDate.Value;
                            caseDetail.NPF_Form_Destination_File_Name = strNPFormFilePathDestination;
                        }
                        if (chkIB_CaseCreationPage.Checked)
                        {
                            caseDetail.IB_Form = 1;
                            if (txtIBFilePath.Text.Trim() != String.Empty) caseDetail.IB_Form_File_Name = txtIBFilePath.Text.Trim();
                            //if (txtIBUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtIBUploadDate.Text.Trim(), out result)) caseDetail.IB_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.IB_ReceivedDate = dtpIBReceivedDate.Value;
                            caseDetail.IB_Form_Destination_File_Name = strIBFilePathDestination;
                        }
                        if (chkPoP_CaseCreationPage.Checked)
                        {
                            caseDetail.POP_Form = 1;
                            if (txtPopFilePath.Text.Trim() != String.Empty) caseDetail.POP_Form_File_Name = txtPopFilePath.Text.Trim();
                            //if (txtPoPUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtPoPUploadDate.Text.Trim(), out result)) caseDetail.POP_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.POP_ReceivedDate = dtpPoPReceivedDate.Value;
                            caseDetail.POP_Form_Destionation_File_Name = strPopFilePathDestination;
                        }
                        if (chkMedicalRecordCaseCreationPage.Checked)
                        {
                            caseDetail.MedicalRecord_Form = 1;
                            if (txtMedicalRecordFilePath.Text.Trim() != String.Empty) caseDetail.MedRec_Form_File_Name = txtMedicalRecordFilePath.Text.Trim();
                            //if (txtMRUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtMRUploadDate.Text.Trim(), out result)) caseDetail.MedRec_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.MedRec_ReceivedDate = dtpMRReceivedDate.Value;
                            caseDetail.MedRec_Form_Destination_File_Name = strMedRecordFilePathDestination;
                        }
                        if (chkOtherDocCaseCreationPage.Checked)
                        {
                            caseDetail.Unknown_Form = 1;
                            if (txtOtherDocumentFilePath.Text.Trim() != String.Empty) caseDetail.Unknown_Form_File_Name = txtOtherDocumentFilePath.Text.Trim();
                            //if (txtOtherDocUploadDate.Text.Trim() != String.Empty)      //caseDetail.Unknown_ReceivedDate = DateTime.Parse(txtOtherDocUploadDate.Text.Trim());
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtOtherDocUploadDate.Text.Trim(), out result)) caseDetail.Unknown_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.Unknown_ReceivedDate = dtpOtherDocReceivedDate.Value;
                            caseDetail.Unknown_Form_Destination_File_Name = strUnknownDocFilePathDestination;
                        }

                        caseDetail.Note = txtNoteOnCase.Text.Trim();
                        caseDetail.Log_Id = "Log: " + txtCaseName.Text;
                        caseDetail.AddBill_Form = true;
                        caseDetail.AddBill_Received_Date = DateTime.Today;
                        caseDetail.Remove_Log = String.Empty;

                        String strSqlUpdateCase = "Update [dbo].[tbl_case] set [dbo].[tbl_case].[ModifiDate] = @ModifiDate, [dbo].[tbl_case].[ModifiStaff] = @ModifiStaff, " +
                                                    "[dbo].[tbl_case].[NPF_Form] = @NPF_Form, [dbo].[tbl_case].[NPF_Form_File_Name] = @NPF_Form_File_Name, " +
                                                    "[dbo].[tbl_case].[NPF_Form_Destination_File_Name] = @NPF_Form_Destination_File_Name, [dbo].[tbl_case].[NPF_Receiv_Date] = @NPF_Receiv_Date, " +
                                                    "[dbo].[tbl_case].[IB_Form] = @IB_Form, [dbo].[tbl_case].[IB_Form_File_Name] = @IB_Form_File_Name, " +
                                                    "[dbo].[tbl_case].[IB_Form_Destination_File_Name] = @IB_Form_Destination_File_Name, [dbo].[tbl_case].[IB_Receiv_Date] = @IB_Receiv_Date, " +
                                                    "[dbo].[tbl_case].[POP_Form] = @POP_Form, [dbo].[tbl_case].[POP_Form_File_Name] = @POP_Form_File_Name, " +
                                                    "[dbo].[tbl_case].[POP_Form_Destination_File_Name] = @POP_Form_Destination_File_Name, [dbo].[tbl_case].[POP_Receiv_Date] = @POP_Receiv_Date, " +
                                                    "[dbo].[tbl_case].[MedRec_Form] = @MedRec_Form, [dbo].[tbl_case].[MedRec_Form_File_Name] = @MedRec_Form_File_Name, " +
                                                    "[dbo].[tbl_case].[MedRec_Form_Destination_File_Name] = @MedRec_Form_Destination_File_Name, [dbo].[tbl_case].[MedRec_Receiv_Date] = @MedRec_Receiv_Date, " +
                                                    "[dbo].[tbl_case].[Unknown_Form] = @Unknown_Form, [dbo].[tbl_case].[Unknown_Form_File_Name] = @Unknown_Form_File_Name, " +
                                                    "[dbo].[tbl_case].[Unknown_Form_Destination_File_Name] = @Unknown_Form_Destination_File_Name, [dbo].[tbl_case].[Unknown_Receiv_Date] = @Unknown_Receiv_Date, " +
                                                    "[dbo].[tbl_case].[Note] = @CaseNote, [dbo].[tbl_case].[Log_ID] = @Log_Id, [dbo].[tbl_case].[AddBill_Form] = @AddBill_Form, " +
                                                    "[dbo].[tbl_case].[AddBill_Receiv_Date] = @AddBill_Receiv_Date, [dbo].[tbl_case].[Remove_Log] = @Remove_Log, " +
                                                    "[dbo].[tbl_case].[Case_status] = @CaseStatus " +
                                                    "where [dbo].[tbl_case].[Case_Name] = @Case_Id";

                        SqlCommand cmdUpdateCase = new SqlCommand(strSqlUpdateCase, connRN4);
                        cmdUpdateCase.CommandType = CommandType.Text;

                        cmdUpdateCase.Parameters.AddWithValue("@ModifiDate", caseDetail.ModificationDate);
                        cmdUpdateCase.Parameters.AddWithValue("@ModifiStaff", caseDetail.ModifyingStaff);
                        cmdUpdateCase.Parameters.AddWithValue("@NPF_Form", caseDetail.NPF_Form);
                        cmdUpdateCase.Parameters.AddWithValue("@NPF_Form_File_Name", caseDetail.NPF_Form_File_Name);
                        cmdUpdateCase.Parameters.AddWithValue("@NPF_Form_Destination_File_Name", caseDetail.NPF_Form_Destination_File_Name);
                        if (caseDetail.NPF_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@NPF_Receiv_Date", caseDetail.NPF_ReceivedDate);
                        else cmdUpdateCase.Parameters.AddWithValue("@NPF_Receiv_Date", DBNull.Value);

                        cmdUpdateCase.Parameters.AddWithValue("@IB_Form", caseDetail.IB_Form);
                        cmdUpdateCase.Parameters.AddWithValue("@IB_Form_File_Name", caseDetail.IB_Form_File_Name);
                        cmdUpdateCase.Parameters.AddWithValue("@IB_Form_Destination_File_Name", caseDetail.IB_Form_Destination_File_Name);
                        if (caseDetail.IB_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@IB_Receiv_Date", caseDetail.IB_ReceivedDate);
                        else cmdUpdateCase.Parameters.AddWithValue("@IB_Receiv_Date", DBNull.Value);

                        cmdUpdateCase.Parameters.AddWithValue("@POP_Form", caseDetail.POP_Form);
                        cmdUpdateCase.Parameters.AddWithValue("@POP_Form_File_Name", caseDetail.POP_Form_File_Name);
                        cmdUpdateCase.Parameters.AddWithValue("@POP_Form_Destination_File_Name", caseDetail.POP_Form_Destionation_File_Name);
                        if (caseDetail.POP_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@POP_Receiv_Date", caseDetail.POP_ReceivedDate);
                        else cmdUpdateCase.Parameters.AddWithValue("@POP_Receiv_Date", DBNull.Value);

                        cmdUpdateCase.Parameters.AddWithValue("@MedRec_Form", caseDetail.MedicalRecord_Form);
                        cmdUpdateCase.Parameters.AddWithValue("@MedRec_Form_File_Name", caseDetail.MedRec_Form_File_Name);
                        cmdUpdateCase.Parameters.AddWithValue("@MedRec_Form_Destination_File_Name", caseDetail.MedRec_Form_Destination_File_Name);
                        if (caseDetail.MedRec_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@MedRec_Receiv_Date", caseDetail.MedRec_ReceivedDate);
                        else cmdUpdateCase.Parameters.AddWithValue("@MedRec_Receiv_Date", DBNull.Value);

                        cmdUpdateCase.Parameters.AddWithValue("@Unknown_Form", caseDetail.Unknown_Form);
                        cmdUpdateCase.Parameters.AddWithValue("@Unknown_Form_File_Name", caseDetail.Unknown_Form_File_Name);
                        cmdUpdateCase.Parameters.AddWithValue("@Unknown_Form_Destination_File_Name", caseDetail.Unknown_Form_Destination_File_Name);
                        if (caseDetail.Unknown_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@Unknown_Receiv_Date", caseDetail.Unknown_ReceivedDate);
                        else cmdUpdateCase.Parameters.AddWithValue("@Unknown_Receiv_Date", DBNull.Value);

                        cmdUpdateCase.Parameters.AddWithValue("@CaseNote", caseDetail.Note);
                        cmdUpdateCase.Parameters.AddWithValue("@Log_Id", caseDetail.Log_Id);
                        cmdUpdateCase.Parameters.AddWithValue("@AddBill_Form", caseDetail.AddBill_Form);
                        if (caseDetail.AddBill_Received_Date != null) cmdUpdateCase.Parameters.AddWithValue("@AddBill_Receiv_Date", caseDetail.AddBill_Received_Date);
                        else cmdUpdateCase.Parameters.AddWithValue("@AddBill_Receiv_Date", DBNull.Value);

                        cmdUpdateCase.Parameters.AddWithValue("@Remove_Log", caseDetail.Remove_Log);

                        cmdUpdateCase.Parameters.AddWithValue("@CaseStatus", caseDetail.Status);

                        cmdUpdateCase.Parameters.AddWithValue("@Case_Id", caseDetail.CaseId);

                        //if (connRN.State == ConnectionState.Closed) connRN.Open();
                        if (connRN4.State != ConnectionState.Closed)
                        {
                            connRN4.Close();
                            connRN4.Open();
                        }
                        else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                        int nRowAffected = cmdUpdateCase.ExecuteNonQuery();
                        if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                        if (nRowAffected == 1)
                        {
                            MessageBox.Show("The change has been saved.", "Information");

                            btnNewMedBill_Case.Enabled = true;
                            btnEditMedBill.Enabled = true;
                            btnDeleteMedBill.Enabled = true;
                        }
                        else if (nRowAffected == 0) MessageBox.Show("The change has not been saved.", "Error");
                    }

                    //tbCMMManager.TabPages.Remove(tbpgCreateCase);
                    //tbCMMManager.SelectedTab = tbCMMManager.TabPages["tbpgCaseView"];

                    if (tbCMMManager.Contains(tbpgMedicalBill)) tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                    if (tbCMMManager.Contains(tbpgCreateCase)) tbCMMManager.TabPages.Remove(tbpgCreateCase);
                    //if (tbCMMManager.Contains(tbpgCaseView)) tbCMMManager.TabPages.Remove(tbpgCaseView);
                    //if (tbCMMManager.Contains(tbpgIndividual)) tbCMMManager.TabPages.Remove(tbpgIndividual);
                    tbCMMManager.SelectedIndex = 3;

                    return;
                }
                else if (dlgResult == DialogResult.No)
                {
                    if (tbCMMManager.Contains(tbpgMedicalBill)) tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                    if (tbCMMManager.Contains(tbpgCreateCase)) tbCMMManager.TabPages.Remove(tbpgCreateCase);
                    tbCMMManager.SelectedIndex = 3;
                    return;
                }
                //else if (dlgResult == DialogResult.Cancel)
                //{
                //    return;
                //}
            }
            else return;

            //tbCMMManager.TabPages.Remove(tbpgCreateCase);
            //tbCMMManager.SelectedIndex = 3;
        }

        private void chkMedRecordReceived_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox chkMedRecord = sender as CheckBox;

            if (chkMedRecord.Checked)
            {
                dtpMedBillMedRecord.Format = DateTimePickerFormat.Short;
            }
            else
            {
                dtpMedBillMedRecord.Format = DateTimePickerFormat.Custom;
                dtpMedBillMedRecord.CustomFormat = " ";
            }
        }

        private void chkMedBillNPFReceived_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox chkNPF = sender as CheckBox;

            if (chkNPF.Checked)
            {
                dtpMedBillNPF.Format = DateTimePickerFormat.Short;
            }
            else
            {
                dtpMedBillNPF.Format = DateTimePickerFormat.Custom;
                dtpMedBillNPF.CustomFormat = " ";
            }

        }

        private void chkMedBill_IBReceived_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox chkIB = sender as CheckBox;

            if (chkIB.Checked)
            {
                dtpMedBill_IB.Format = DateTimePickerFormat.Short;
            }
            else
            {
                dtpMedBill_IB.Format = DateTimePickerFormat.Custom;
                dtpMedBill_IB.CustomFormat = " ";
            }
        }

        private void chkMedBillPOPReceived_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox chkPOP = sender as CheckBox;

            if (chkPOP.Checked) dtpMedBillPOP.Format = DateTimePickerFormat.Short;
            else
            {
                dtpMedBillPOP.Format = DateTimePickerFormat.Custom;
                dtpMedBillPOP.CustomFormat = " ";
            }
        }

        private void chkOtherDocReceived_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox chkOtherDoc = sender as CheckBox;

            if (chkOtherDoc.Checked) dtpMedBillOtherDoc.Format = DateTimePickerFormat.Short;
            else
            {
                dtpMedBillOtherDoc.Format = DateTimePickerFormat.Custom;
                dtpMedBillOtherDoc.CustomFormat = " ";
            }
        }

        private void btnMedBill_Illness_Click(object sender, EventArgs e)
        {

            frmIllness frmIllnessList = new frmIllness();

            DateTime dtStartDate = DateTime.Parse(txtMembershipStartDate.Text.Trim());
            String IndividualId = txtIndividualID.Text;

            frmIllnessList.nLoggedInUserId = nLoggedUserId;
            frmIllnessList.LoggedInUserRole = LoggedInUserRole;

            frmIllnessList.strCaseIdIllness = strCaseIdForIllness;
            frmIllnessList.strIndividualId = IndividualId;

            frmIllnessList.IllnessSelected.IllnessId = Illness.IllnessId;
            frmIllnessList.IllnessSelected.IllnessNo = Illness.IllnessNo;
            frmIllnessList.IllnessNo = txtMedBill_Illness.Text.Trim();
            frmIllnessList.OldIllnessNo = txtMedBill_Illness.Text.Trim();
            frmIllnessList.IllnessSelected.ICD10Code = Illness.ICD10Code;
            frmIllnessList.strCaseIdIllness = txtMedBill_CaseNo.Text.Trim();
            frmIllnessList.MembershipStartDate = dtStartDate;

            frmIllnessList.ShowDialog(this);

            if (frmIllnessList.SelectedOption == IllnessOption.Select)
            {

                Illness.IllnessId = frmIllnessList.IllnessSelected.IllnessId;
                Illness.IllnessNo = frmIllnessList.IllnessSelected.IllnessNo;
                Illness.ICD10Code = frmIllnessList.IllnessSelected.ICD10Code;

                txtMedBill_Illness.Text = Illness.IllnessNo;

                String strQueryForDiseaseName = "select [dbo].[ICD10 Code].[Name] from [dbo].[ICD10 Code] where [dbo].[ICD10 Code].[ICD10_CODE__C] = @ICD10Code";

                SqlCommand cmdQueryForDiseaseName = new SqlCommand(strQueryForDiseaseName, connSalesforce2);
                cmdQueryForDiseaseName.CommandType = CommandType.Text;
                cmdQueryForDiseaseName.CommandText = strQueryForDiseaseName;

                cmdQueryForDiseaseName.Parameters.AddWithValue("@ICD10Code", Illness.ICD10Code);

                if (connSalesforce2.State == ConnectionState.Open)
                {
                    connSalesforce2.Close();
                    connSalesforce2.Open();
                }
                else if (connSalesforce2.State == ConnectionState.Closed) connSalesforce2.Open();

                SqlDataReader rdrDiseaseName = cmdQueryForDiseaseName.ExecuteReader();

                txtMedBill_ICD10Code.Text = String.Empty;
                txtMedBillDiseaseName.Text = String.Empty;

                if (rdrDiseaseName.HasRows)
                {
                    rdrDiseaseName.Read();

                    txtMedBill_ICD10Code.Text = Illness.ICD10Code;
                    txtMedBillDiseaseName.Text = rdrDiseaseName.GetString(0);
                }
                rdrDiseaseName.Close();
                if (connSalesforce2.State == ConnectionState.Open) connSalesforce2.Close();

                if (frmIllnessList.OldIllnessNo != frmIllnessList.NewIllnessNo)
                {
                    txtIncdProgram.Text = String.Empty;
                    txtMedBill_Incident.Text = String.Empty;
                }

                gvSettlementsInMedBill.Rows.Clear();

                ////////////////////////////////////////////////////////////////////////////////////////////////////
                //String strSqlQueryForSettlement = "select [dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement_type_code].[SettlementTypeValue], [dbo].[tbl_settlement].[Amount], " +
                //                  "[dbo].[tbl_settlement].[PersonalResponsibilityCredit], [dbo].[tbl_payment_method].[PaymentMethod_Value], " +
                //                  "[dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate], " +
                //                  "[dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
                //                  "[dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], [dbo].[tbl_settlement].[ACH_Reconciled], " +
                //                  "[dbo].[tbl_Credit_Card__c].[Name], [dbo].[tbl_settlement].[CMMCreditCardPaidDate], [dbo].[tbl_settlement].[CC_Reconciled], " +
                //                  "[dbo].[tbl_settlement].[AllowedAmount], [dbo].[tbl_settlement].[IneligibleReason], " +
                //                  "[dbo].[tbl_settlement].[Notes] " +
                //                  "from [dbo].[tbl_settlement] " +
                //                  "inner join [dbo].[tbl_settlement_type_code] on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                //                  "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
                //                  "inner join [dbo].[tbl_Credit_Card__c] on [dbo].[tbl_settlement].[CMMCreditCard] = [dbo].[tbl_Credit_Card__c].[CreditCard_Id] " +
                //                  "inner join [dbo].[tbl_medbill] on [dbo].[tbl_settlement].[MedicalBillID] = [dbo].[tbl_medbill].[BillNo] " +
                //                  "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                //                  "where[dbo].[tbl_illness].[Illness_Id] = @IllnessId and [dbo].[tbl_settlement].[IsDeleted] = 0 " +
                //                  "order by [dbo].[tbl_settlement].[Name]";

                //SqlCommand cmdQueryForSettlement = new SqlCommand(strSqlQueryForSettlement, connRN);
                //cmdQueryForSettlement.CommandType = CommandType.Text;

                ////cmdQueryForSettlement.Parameters.AddWithValue("@MedBillNo", MedBillNo);
                //cmdQueryForSettlement.Parameters.AddWithValue("@IllnessId", Illness.IllnessId);

                ////SqlDependency dependencySettlementInMedBill = new SqlDependency(cmdQueryForSettlement);
                ////dependencySettlementInMedBill.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillEditChange);

                ////if (connRN.State == ConnectionState.Closed) connRN.Open();
                //if (connRN.State != ConnectionState.Closed)
                //{
                //    connRN.Close();
                //    connRN.Open();
                //}
                //else if (connRN.State == ConnectionState.Closed) connRN.Open();
                //SqlDataReader rdrSettlement = cmdQueryForSettlement.ExecuteReader();
                //gvSettlementsInMedBill.Rows.Clear();
                //if (rdrSettlement.HasRows)
                //{
                //    while (rdrSettlement.Read())
                //    {
                //        DataGridViewRow row = new DataGridViewRow();
                //        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                //        if (!rdrSettlement.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(0) });
                //        if (!rdrSettlement.IsDBNull(1))
                //        {
                //            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();

                //            for (int i = 0; i < lstSettlementType.Count; i++)
                //            {
                //                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                //            }
                //            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                //            {
                //                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                //                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                //            }

                //            row.Cells.Add(comboCellSettlementType);
                //        }
                //        else
                //        {
                //            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
                //            for (int i = 0; i < lstSettlementType.Count; i++)
                //            {
                //                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                //            }

                //            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                //            {
                //                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                //                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                //            }

                //            row.Cells.Add(comboCellSettlementType);
                //        }

                //        if (!rdrSettlement.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(2).ToString("C") });
                //        else
                //        {
                //            Decimal Zero = 0;
                //            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                //        }


                //        if (!rdrSettlement.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(3).ToString("C") });
                //        else
                //        {
                //            Decimal Zero = 0;
                //            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                //        }

                //        /////////////////////////////////////////////////////////////////////
                //        if (!rdrSettlement.IsDBNull(4))
                //        {
                //            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                //            for (int i = 0; i < lstPaymentMethod.Count; i++)
                //            {
                //                if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                //                else comboCellPaymentMethod.Items.Add(String.Empty);
                //            }

                //            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                //            {
                //                if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                //                    comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                //            }

                //            row.Cells.Add(comboCellPaymentMethod);
                //        }
                //        else
                //        {
                //            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                //            for (int i = 0; i < lstPaymentMethod.Count; i++)
                //            {
                //                if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                //                else comboCellPaymentMethod.Items.Add(String.Empty);
                //                //comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                //            }

                //            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                //            {
                //                if ((!rdrSettlement.IsDBNull(4)) && comboCellPaymentMethod.Items[i] != null)
                //                {
                //                    if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                //                        comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                //                }
                //                else comboCellPaymentMethod.Value = null;
                //            }

                //            row.Cells.Add(comboCellPaymentMethod);

                //        }

                //        /////////////////////////////////////////////////////////////////////
                //        if (!rdrSettlement.IsDBNull(5))
                //        {

                //            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                //            approvedCell.Value = rdrSettlement.GetBoolean(5);
                //            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                //            row.Cells.Add(approvedCell);
                //        }
                //        else
                //        {
                //            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                //            approvedCell.Value = false;
                //            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                //            row.Cells.Add(approvedCell);
                //        }

                //        if (!rdrSettlement.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(6).ToString("MM/dd/yyyy")) });
                //        else row.Cells.Add(new CalendarCell { Value = null });

                //        // Payment information
                //        if (!rdrSettlement.IsDBNull(4))
                //        {
                //            String strPaymentMethod = rdrSettlement.GetString(4);

                //            switch (strPaymentMethod)
                //            {
                //                case "Check":
                //                    if (!rdrSettlement.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(7) });
                //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                //                    DataGridViewComboBoxCell comboCellCreditCardNoneForCheck = new DataGridViewComboBoxCell();
                //                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                //                    {
                //                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNoneForCheck.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                //                        else comboCellCreditCardNoneForCheck.Items.Add(String.Empty);
                //                    }
                //                    row.Cells.Add(comboCellCreditCardNoneForCheck);
                //                    if (!rdrSettlement.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(8).ToString("MM/dd/yyyy")) });
                //                    if (!rdrSettlement.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(9) });
                //                    break;
                //                case "ACH/Banking":
                //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                //                    if (!rdrSettlement.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(10) });
                //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                //                    DataGridViewComboBoxCell comboCellCreditCardNoneForACH = new DataGridViewComboBoxCell();
                //                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                //                    {
                //                        if (lstCreditCardInfo[i].CreditCardNo != null)
                //                            comboCellCreditCardNoneForACH.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                //                        else comboCellCreditCardNoneForACH.Items.Add(String.Empty);
                //                    }
                //                    row.Cells.Add(comboCellCreditCardNoneForACH);
                //                    if (!rdrSettlement.IsDBNull(11)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(11).ToString("MM/dd/yyyy")) });
                //                    if (!rdrSettlement.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(12) });
                //                    break;
                //                case "Credit Card":
                //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                //                    DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                //                    if (!rdrSettlement.IsDBNull(13))
                //                    {
                //                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                //                        {
                //                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                //                            else comboCellCreditCard.Items.Add(String.Empty);
                //                        }
                //                        for (int i = 0; i < comboCellCreditCard.Items.Count; i++)
                //                        {
                //                            if (rdrSettlement.GetString(13) == comboCellCreditCard.Items[i].ToString())
                //                                comboCellCreditCard.Value = comboCellCreditCard.Items[i];
                //                        }
                //                    }
                //                    else
                //                    {
                //                        //DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                //                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                //                        {
                //                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                //                            else comboCellCreditCard.Items.Add(String.Empty);
                //                        }
                //                        comboCellCreditCard.Value = String.Empty;
                //                        //row.Cells.Add(comboCellCreditCard);
                //                    }
                //                    row.Cells.Add(comboCellCreditCard);
                //                    if (!rdrSettlement.IsDBNull(14)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(14).ToString("MM/dd/yyyy")) });
                //                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                //                    if (!rdrSettlement.IsDBNull(15)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(15) });
                //                    else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                //                    break;
                //                default:
                //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                //                    DataGridViewComboBoxCell comboCellCreditCardNone = new DataGridViewComboBoxCell();
                //                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                //                    {
                //                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNone.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                //                        else comboCellCreditCardNone.Items.Add(String.Empty);
                //                    }
                //                    row.Cells.Add(comboCellCreditCardNone);
                //                    row.Cells.Add(new CalendarCell { Value = null });
                //                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                //                    break;
                //            }
                //        }
                //        else
                //        {

                //            DataGridViewTextBoxCell txtCheckNoCell = new DataGridViewTextBoxCell();
                //            txtCheckNoCell.Value = null;
                //            row.Cells.Add(txtCheckNoCell);
                //            DataGridViewTextBoxCell txtACHNoCell = new DataGridViewTextBoxCell();
                //            txtACHNoCell.Value = null;
                //            row.Cells.Add(txtACHNoCell);
                //            DataGridViewComboBoxCell comboCreditCardCell = new DataGridViewComboBoxCell();
                //            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                //            {
                //                if (lstCreditCardInfo[i].CreditCardNo != null) comboCreditCardCell.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                //                else comboCreditCardCell.Items.Add(String.Empty);
                //            }
                //            row.Cells.Add(comboCreditCardCell);
                //            comboCreditCardCell.ReadOnly = true;
                //            CalendarCell calPaymentDate = new CalendarCell();
                //            calPaymentDate.Value = null;
                //            row.Cells.Add(calPaymentDate);
                //            DataGridViewCheckBoxCell chkReconciledCell = new DataGridViewCheckBoxCell();
                //            chkReconciledCell.Value = false;
                //            row.Cells.Add(chkReconciledCell);

                //        }


                //        if (!rdrSettlement.IsDBNull(16)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(16).ToString("C") });
                //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                //        if (!rdrSettlement.IsDBNull(17))
                //        {
                //            if (dicIneligibleReason.Count > 0)
                //            {
                //                DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                //                for (int i = 0; i < dicIneligibleReason.Count; i++)
                //                {
                //                    comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                //                }
                //                comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[rdrSettlement.GetInt32(17)];
                //                row.Cells.Add(comboCellIneligibleReason);
                //            }
                //        }
                //        else
                //        {
                //            if (dicIneligibleReason.Count > 0)
                //            {
                //                DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                //                for (int i = 0; i < dicIneligibleReason.Count; i++)
                //                {
                //                    comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                //                }
                //                comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[0];
                //                row.Cells.Add(comboCellIneligibleReason);
                //            }
                //        }

                //        if (!rdrSettlement.IsDBNull(18)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(18) });
                //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                //        gvSettlementsInMedBill.Rows.Add(row);
                //        //AddNewRowToGVSettlementSafely(row);
                //    }
                //}
                //if (connRN.State != ConnectionState.Closed) connRN.Close();

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                ///
                //Decimal PersonalResponsibilityAmount = 0;

                //foreach (IncidentProgramInfo incdProgram in lstIncidentProgramInfo)
                //{
                //    if (incdProgram.bPersonalResponsibilityProgram == true) PersonalResponsibilityAmount = incdProgram.PersonalResponsibilityAmount;
                //}

                //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                //{
                //    if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value != null)
                //    {
                //        Decimal result = 0;
                //        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                //        {
                //            PersonalResponsibilityAmount -= result;
                //        }
                //    }
                //}

                //txtPersonalResponsibility.Text = PersonalResponsibilityAmount.ToString("C");

                //if (PersonalResponsibilityAmount < 0) txtPersonalResponsibility.BackColor = Color.Yellow;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                //{
                //    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
                //    {
                //        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = false;
                //        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                //        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                //        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                //        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                //    }

                //    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
                //    {
                //        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = false;
                //        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                //        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                //        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                //        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                //    }

                //    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
                //    {
                //        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = false;
                //        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                //        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                //        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                //        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                //    }
                //    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value == null)
                //    {
                //        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                //        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                //        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                //        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = true;
                //        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = true;
                //    }
                //}

                //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                //{
                //    if (gvSettlementsInMedBill[2, i]?.Value?.ToString() == "Ineligible") gvSettlementsInMedBill.Rows[i].DefaultCellStyle.BackColor = Color.Red;
                //    else
                //    {
                //        gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                //        gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                //    }
                //}

                //if (txtMedBillAmount.Text.Trim() != String.Empty)
                //{
                //    Decimal SettlementTotal = 0;
                //    Decimal Balance = 0;
                //    Decimal Result = 0;
                //    Decimal BillAmount = 0;
                //    if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out Result))
                //    {
                //        BillAmount = Result;

                //        for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                //        {
                //            Decimal Settlement = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                //            SettlementTotal += Settlement;
                //        }
                //        if (SettlementTotal > BillAmount) MessageBox.Show("Settlement Total exceeds the Medical Bill Amount.", "Alert");
                //        else
                //        {
                //            Balance = BillAmount - SettlementTotal;
                //            txtBalance.Text = Balance.ToString("C");
                //        }
                //    }
                //}

                //btnAddNewSettlement.Enabled = true;
                ////btnEditSettlement.Enabled = true;
                //btnSaveSettlement.Enabled = true;
                //btnDeleteSettlement.Enabled = true;


                ////////////////////////////////////////////////////////////////////////////////////////////////////
                return;
            }
            else if (frmIllnessList.SelectedOption == IllnessOption.Close)
            {
                txtMedBill_Illness.Text = String.Empty;

                Illness.IllnessId = String.Empty;
                Illness.IllnessNo = String.Empty;
                Illness.ICD10Code = String.Empty;
                return;
            }
            else if (frmIllnessList.SelectedOption == IllnessOption.Cancel)
            {
                return;
            }
        }

        private void btnMedBill_Incident_Click(object sender, EventArgs e)
        {
            frmIncident frmIncidentList = new frmIncident();

            //frmIncidentList.StartPosition = FormStartPosition.CenterParent;

            //DialogResult dlgResult = frmIncidentList.ShowDialog();

            //String IncidentId = txtMedBill_Incident.Text.Trim();
            String IncidentId = String.Empty; //frmIncidentList.IncidentSelected.IncidentId;

            //if (dlgResult == DialogResult.OK)
            //{
            //    IncidentId = frmIncidentList.IncidentSelected.IncidentId;
            //}

            String IndividualId = txtIndividualID.Text.Trim();
            //frmIncidentList.IncidentSelected.IncidentNo = txtMedBill_Incident.Text.Trim();

            //String IncidentId = txtMedBill_Incident.Text.Trim();
            strCaseIdForIllness = txtMedBill_CaseNo.Text.Trim();

            // 02/13/19 begin here to get Individual Id, Case Id, Illness Id, Incident Id to get Incident No
            if (txtMedBill_Illness.Text != String.Empty)
            {
                frmIncidentList.IndividualId = IndividualId;
                frmIncidentList.CaseId = strCaseIdForIllness;
                frmIncidentList.IllnessId = Illness.IllnessId;
                frmIncidentList.IllnessNo = txtMedBill_Illness.Text.Trim();
                frmIncidentList.IncidentSelected.IncidentNo = txtMedBill_Incident.Text.Trim();
                frmIncidentList.IncidentSelected.IncidentId = Incident.IncidentId;
                //frmIncidentList.ICD10Code = Illness.ICD10Code;
                frmIncidentList.nLoggedInId = nLoggedUserId;
                frmIncidentList.LoggedInUserRole = LoggedInUserRole;
                //frmIncidentList.IncidentSelected.IncidentId = IncidentId;

                DialogResult dlgIncident = frmIncidentList.ShowDialog(this);

                //if (dlgIncident == DialogResult.OK)
                if (frmIncidentList.SelectedOption == IncidentOption.Select)
                {
                    //txtMedBill_Incident.Text = frmIncidentList.IncidentSelected.IncidentId;
                    txtMedBill_Incident.Text = frmIncidentList.IncidentSelected.IncidentNo;
                    Incident.IncidentId = frmIncidentList.IncidentSelected.IncidentId;
                    IncidentId = frmIncidentList.IncidentSelected.IncidentId;


                    //
                    // This section is needed to calculate personal responsibility

                    //String strSqlQueryForNewPRBalance = ""
                    //String IncidentNo = txtMedBill_Incident.Text.Trim();
                    //String IndividualId = txtCaseIndividualID.Text.Trim();

                    //String strSqlQueryForIncidentChange = "select [cdc].[dbo_tbl_incident_CT].[Program_id], [dbo].[tbl_program].[ProgramName] from [cdc].[dbo_tbl_incident_CT] " +
                    //                                      "inner join [dbo].[tbl_program] on [cdc].[dbo_tbl_incident_CT].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                    //                                      "where [cdc].[dbo_tbl_incident_CT].[Incident_id] = @IncidentId and [cdc].[dbo_tbl_incident_CT].[Individual_id] = @IndividualId and " +
                    //                                      "([cdc].[dbo_tbl_incident_CT].[__$operation] = 2 or [cdc].[dbo_tbl_incident_CT].[__$operation] = 3 or " +
                    //                                      "[cdc].[dbo_tbl_incident_CT].[__$operation] = 4) " +      // capture incident program for insert, update
                    //                                      "order by [cdc].[dbo_tbl_incident_CT].[Program_id]";

                    //SqlCommand cmdQueryForIncidentChange = new SqlCommand(strSqlQueryForIncidentChange, connRN);
                    //cmdQueryForIncidentChange.CommandType = CommandType.Text;

                    //cmdQueryForIncidentChange.Parameters.AddWithValue("@IncidentId", IncidentId);
                    //cmdQueryForIncidentChange.Parameters.AddWithValue("@IndividualId", IndividualId);

                    //connRN.Open();
                    //SqlDataReader rdrIncidentChange = cmdQueryForIncidentChange.ExecuteReader();
                    //if (rdrIncidentChange.HasRows)
                    //{
                    //    while (rdrIncidentChange.Read())
                    //    {
                    //        //lstIncidentProgramInfo.Add(new IncidentProgramInfo { IncidentProgramId = rdrIncidentChange.GetInt16(0), IncidentProgramName = rdrIncidentChange.GetString(1).Trim() });
                    //        IncidentProgramInfo incidentProgram = new IncidentProgramInfo(rdrIncidentChange.GetInt16(0), rdrIncidentChange.GetString(1).Trim());
                    //        lstIncidentProgramInfo.Add(incidentProgram);
                    //    }
                    //}
                    //connRN.Close();

                    //Boolean bBronze = false;
                    //Boolean bSilver = false;
                    //Boolean bGold = false;
                    //Boolean bGoldPlus = false;
                    //Boolean bGoldMed1 = false;
                    //Boolean bGoldMed2 = false;

                    //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    //{
                    //    if (incidentInfo.IncidentProgramId == 3)
                    //    {
                    //        incidentInfo.bPersonalResponsibilityProgram = true;
                    //        bBronze = true;
                    //        break;
                    //    }
                    //}

                    //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    //{
                    //    if ((incidentInfo.IncidentProgramId == 2) && (bBronze == false))
                    //    {
                    //        incidentInfo.bPersonalResponsibilityProgram = true;
                    //        bSilver = true;
                    //        break;
                    //    }
                    //}

                    //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    //{
                    //    if ((incidentInfo.IncidentProgramId == 1) && (bBronze == false) && (bSilver == false))
                    //    {
                    //        incidentInfo.bPersonalResponsibilityProgram = true;
                    //        break;
                    //    }
                    //}

                    //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    //{
                    //    if ((incidentInfo.IncidentProgramId == 0) && (bBronze == false) && (bSilver == false) && (bGold == false))
                    //    {
                    //        incidentInfo.bPersonalResponsibilityProgram = true;
                    //        break;
                    //    }
                    //}

                    //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    //{
                    //    if ((incidentInfo.IncidentProgramId == 4) && (bBronze == false) && (bSilver == false) && (bGold == false) && (bGoldPlus == false))
                    //    {
                    //        incidentInfo.bPersonalResponsibilityProgram = true;
                    //        break;
                    //    }
                    //}

                    //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    //{
                    //    if ((incidentInfo.IncidentProgramId == 5) && (bBronze == false) && (bSilver == false) && (bGold == false) && (bGoldPlus == false) && (bGoldMed1 == false))
                    //    {
                    //        incidentInfo.bPersonalResponsibilityProgram = true;
                    //        break;
                    //    }
                    //}

                    //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    //{
                    //    if (incidentInfo.bPersonalResponsibilityProgram == true)
                    //        PersonalResponsibilityAmountInMedBill = incidentInfo.PersonalResponsibilityAmount;
                    //}


                    //Decimal PersonalResponsibilityAmount = 0;

                    //foreach (IncidentProgramInfo incdProgram in lstIncidentProgramInfo)
                    //{
                    //    if (incdProgram.bPersonalResponsibilityProgram == true) PersonalResponsibilityAmount = incdProgram.PersonalResponsibilityAmount;
                    //}

                    //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    //{
                    //    if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value != null)
                    //    {
                    //        Decimal result = 0;
                    //        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                    //        {
                    //            PersonalResponsibilityAmount -= result;
                    //        }
                    //    }
                    //}

                    //txtPersonalResponsibility.Text = PersonalResponsibilityAmount.ToString("C");
                    //if (PersonalResponsibilityAmount < 0) txtPersonalResponsibility.BackColor = Color.Yellow;

                    String strSqlQueryForIncidentProgram = "select [dbo].[tbl_program].[ProgramName] from [dbo].[tbl_program] " +
                                                           "inner join [dbo].[tbl_incident] on [dbo].[tbl_program].[Program_Id] = [dbo].[tbl_incident].[Program_id] " +
                                                           "where [dbo].[tbl_incident].[Incident_id] = @IncidentId and [dbo].[tbl_incident].[Individual_id] = @IndividualId";

                    SqlCommand cmdQueryForIncidentProgram = new SqlCommand(strSqlQueryForIncidentProgram, connRN);
                    cmdQueryForIncidentProgram.CommandType = CommandType.Text;

                    cmdQueryForIncidentProgram.Parameters.AddWithValue("@IncidentId", IncidentId);
                    cmdQueryForIncidentProgram.Parameters.AddWithValue("@IndividualId", IndividualId);

                    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                    if (connRN.State != ConnectionState.Closed)
                    {
                        connRN.Close();
                        connRN.Open();
                    }
                    else if (connRN.State == ConnectionState.Closed) connRN.Open();
                    Object objProgramName = cmdQueryForIncidentProgram.ExecuteScalar();
                    if (connRN.State != ConnectionState.Closed) connRN.Close();

                    String ProgramName = String.Empty;

                    if (objProgramName != null)
                    {
                        ProgramName = objProgramName.ToString();
                    }
                    else
                    {
                        MessageBox.Show("No Program name for the given incident: " + IncidentId, "Error", MessageBoxButtons.OK);
                        return;
                    }

                    if (ProgramName != String.Empty) txtIncdProgram.Text = ProgramName.Trim();

                    if (txtMemberProgram.Text.Trim() == txtIncdProgram.Text.Trim())
                    {
                        txtMemberProgram.BackColor = Color.White;
                        txtIncdProgram.BackColor = Color.White;
                    }
                    else
                    {
                        txtMemberProgram.BackColor = Color.Red;
                        txtIncdProgram.BackColor = Color.Red;
                    }

                    //String strSqlQueryForIncidentProgram = "select [dbo].[tbl_incident].[Program_id] from [dbo].[tbl_incident] " +
                    //                   "where [dbo].[tbl_incident].[Individual_id] = @IndividualId and" +
                    //                   "[dbo].[tbl_incidend].[Case_id] = @CaseId and " +
                    //                   "[dbo].[tbl_incident].[Illness_id] = @IllnessId and " +
                    //                   "[dbo].[tbl_incident].[IncidentNo] = @IncidentNo";



                    //String strSqlQueryForIncidentProgramId = "select [dbo].[tbl_incident].[IncidentNo] from [dbo].[tbl_incident] " +
                    //                                         "where [dbo].[tbl_incident]."

                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    String strSqlQueryForSettlement = "select [dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement_type_code].[SettlementTypeValue], [dbo].[tbl_settlement].[Amount], " +
                                              "[dbo].[tbl_settlement].[PersonalResponsibilityCredit], [dbo].[tbl_payment_method].[PaymentMethod_Value], " +
                                              "[dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate], " +
                                              "[dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
                                              "[dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], [dbo].[tbl_settlement].[ACH_Reconciled], " +
                                              "[dbo].[tbl_Credit_Card__c].[Name], [dbo].[tbl_settlement].[CMMCreditCardPaidDate], [dbo].[tbl_settlement].[CC_Reconciled], " +
                                              "[dbo].[tbl_settlement].[AllowedAmount], [dbo].[tbl_settlement].[IneligibleReason], " +
                                              "[dbo].[tbl_settlement].[Notes] " +
                                              "from [dbo].[tbl_settlement] " +
                                              "inner join [dbo].[tbl_settlement_type_code] on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                              "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
                                              "inner join [dbo].[tbl_Credit_Card__c] on [dbo].[tbl_settlement].[CMMCreditCard] = [dbo].[tbl_Credit_Card__c].[CreditCard_Id] " +
                                              "inner join [dbo].[tbl_medbill] on [dbo].[tbl_settlement].[MedicalBillID] = [dbo].[tbl_medbill].[BillNo] " +
                                              "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                                              "inner join [dbo].[tbl_incident] on [dbo].[tbl_medbill].[Incident_Id] = [dbo].[tbl_incident].[Incident_Id] " +
                                              "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                                              "[dbo].[tbl_illness].[Illness_Id] = @IllnessId and " +
                                              "[dbo].[tbl_incident].[Incident_Id] = @IncidentId and " +
                                              "[dbo].[tbl_settlement].[IsDeleted] = 0 " +
                                              "order by [dbo].[tbl_settlement].[Name]";

                    SqlCommand cmdQueryForSettlement = new SqlCommand(strSqlQueryForSettlement, connRN);
                    cmdQueryForSettlement.CommandType = CommandType.Text;

                    cmdQueryForSettlement.Parameters.AddWithValue("@MedBillNo", txtMedBillNo.Text.Trim());
                    cmdQueryForSettlement.Parameters.AddWithValue("@IllnessId", Int32.Parse(Illness.IllnessId));
                    cmdQueryForSettlement.Parameters.AddWithValue("@IncidentId", Int32.Parse(Incident.IncidentId));

                    //SqlDependency dependencySettlementInMedBill = new SqlDependency(cmdQueryForSettlement);
                    //dependencySettlementInMedBill.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillEditChange);

                    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                    if (connRN.State != ConnectionState.Closed)
                    {
                        connRN.Close();
                        connRN.Open();
                    }
                    else if (connRN.State == ConnectionState.Closed) connRN.Open();
                    SqlDataReader rdrSettlement = cmdQueryForSettlement.ExecuteReader();
                    gvSettlementsInMedBill.Rows.Clear();
                    if (rdrSettlement.HasRows)
                    {
                        while (rdrSettlement.Read())
                        {
                            DataGridViewRow row = new DataGridViewRow();
                            row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                            if (!rdrSettlement.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(0) });
                            if (!rdrSettlement.IsDBNull(1))
                            {
                                DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();

                                for (int i = 0; i < lstSettlementType.Count; i++)
                                {
                                    comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                                }
                                for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                                {
                                    if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                        comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                                }

                                row.Cells.Add(comboCellSettlementType);
                            }
                            else
                            {
                                DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
                                for (int i = 0; i < lstSettlementType.Count; i++)
                                {
                                    comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                                }

                                for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                                {
                                    if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                        comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                                }

                                row.Cells.Add(comboCellSettlementType);
                            }

                            if (!rdrSettlement.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(2).ToString("C") });
                            else
                            {
                                Decimal Zero = 0;
                                row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                            }


                            if (!rdrSettlement.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(3).ToString("C") });
                            else
                            {
                                Decimal Zero = 0;
                                row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                            }

                            /////////////////////////////////////////////////////////////////////
                            if (!rdrSettlement.IsDBNull(4))
                            {
                                DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                                for (int i = 0; i < lstPaymentMethod.Count; i++)
                                {
                                    if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                    else comboCellPaymentMethod.Items.Add(String.Empty);
                                }

                                for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                                {
                                    if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                        comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                                }

                                row.Cells.Add(comboCellPaymentMethod);
                            }
                            else
                            {
                                DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                                for (int i = 0; i < lstPaymentMethod.Count; i++)
                                {
                                    if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                    else comboCellPaymentMethod.Items.Add(String.Empty);
                                    //comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                }

                                for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                                {
                                    if ((!rdrSettlement.IsDBNull(4)) && comboCellPaymentMethod.Items[i] != null)
                                    {
                                        if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                            comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                                    }
                                    else comboCellPaymentMethod.Value = null;
                                }

                                row.Cells.Add(comboCellPaymentMethod);

                            }

                            /////////////////////////////////////////////////////////////////////
                            if (!rdrSettlement.IsDBNull(5))
                            {

                                DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                                approvedCell.Value = rdrSettlement.GetBoolean(5);
                                approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                                row.Cells.Add(approvedCell);
                            }
                            else
                            {
                                DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                                approvedCell.Value = false;
                                approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                                row.Cells.Add(approvedCell);
                            }

                            if (!rdrSettlement.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(6).ToString("MM/dd/yyyy")) });
                            else row.Cells.Add(new CalendarCell { Value = null });

                            // Payment information
                            if (!rdrSettlement.IsDBNull(4))
                            {
                                String strPaymentMethod = rdrSettlement.GetString(4);

                                switch (strPaymentMethod)
                                {
                                    case "Check":
                                        if (!rdrSettlement.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(7) });
                                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                        row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                        DataGridViewComboBoxCell comboCellCreditCardNoneForCheck = new DataGridViewComboBoxCell();
                                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                        {
                                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNoneForCheck.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                            else comboCellCreditCardNoneForCheck.Items.Add(String.Empty);
                                        }
                                        row.Cells.Add(comboCellCreditCardNoneForCheck);
                                        if (!rdrSettlement.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(8).ToString("MM/dd/yyyy")) });
                                        else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                        if (!rdrSettlement.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(9) });
                                        else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                        break;
                                    case "ACH/Banking":
                                        row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                        if (!rdrSettlement.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(10) });
                                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                        DataGridViewComboBoxCell comboCellCreditCardNoneForACH = new DataGridViewComboBoxCell();
                                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                        {
                                            if (lstCreditCardInfo[i].CreditCardNo != null)
                                                comboCellCreditCardNoneForACH.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                            else comboCellCreditCardNoneForACH.Items.Add(String.Empty);
                                        }
                                        row.Cells.Add(comboCellCreditCardNoneForACH);
                                        if (!rdrSettlement.IsDBNull(11)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(11).ToString("MM/dd/yyyy")) });
                                        else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                        if (!rdrSettlement.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(12) });
                                        else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                        break;
                                    case "Credit Card":
                                        row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                        row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                        DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                                        if (!rdrSettlement.IsDBNull(13))
                                        {
                                            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                            {
                                                if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                                else comboCellCreditCard.Items.Add(String.Empty);
                                            }
                                            for (int i = 0; i < comboCellCreditCard.Items.Count; i++)
                                            {
                                                if (rdrSettlement.GetString(13) == comboCellCreditCard.Items[i].ToString())
                                                    comboCellCreditCard.Value = comboCellCreditCard.Items[i];
                                            }
                                        }
                                        else
                                        {
                                            //DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                                            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                            {
                                                if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                                else comboCellCreditCard.Items.Add(String.Empty);
                                            }
                                            comboCellCreditCard.Value = String.Empty;
                                            //row.Cells.Add(comboCellCreditCard);
                                        }
                                        row.Cells.Add(comboCellCreditCard);
                                        if (!rdrSettlement.IsDBNull(14)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(14).ToString("MM/dd/yyyy")) });
                                        else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                        if (!rdrSettlement.IsDBNull(15)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(15) });
                                        else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                        break;
                                    default:
                                        row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                        row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                        DataGridViewComboBoxCell comboCellCreditCardNone = new DataGridViewComboBoxCell();
                                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                        {
                                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNone.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                            else comboCellCreditCardNone.Items.Add(String.Empty);
                                        }
                                        row.Cells.Add(comboCellCreditCardNone);
                                        row.Cells.Add(new CalendarCell { Value = null });
                                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                        break;
                                }
                            }
                            else
                            {

                                DataGridViewTextBoxCell txtCheckNoCell = new DataGridViewTextBoxCell();
                                txtCheckNoCell.Value = null;
                                row.Cells.Add(txtCheckNoCell);
                                DataGridViewTextBoxCell txtACHNoCell = new DataGridViewTextBoxCell();
                                txtACHNoCell.Value = null;
                                row.Cells.Add(txtACHNoCell);
                                DataGridViewComboBoxCell comboCreditCardCell = new DataGridViewComboBoxCell();
                                for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                {
                                    if (lstCreditCardInfo[i].CreditCardNo != null) comboCreditCardCell.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                    else comboCreditCardCell.Items.Add(String.Empty);
                                }
                                row.Cells.Add(comboCreditCardCell);
                                comboCreditCardCell.ReadOnly = true;
                                CalendarCell calPaymentDate = new CalendarCell();
                                calPaymentDate.Value = null;
                                row.Cells.Add(calPaymentDate);
                                DataGridViewCheckBoxCell chkReconciledCell = new DataGridViewCheckBoxCell();
                                chkReconciledCell.Value = false;
                                row.Cells.Add(chkReconciledCell);

                            }


                            if (!rdrSettlement.IsDBNull(16)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(16).ToString("C") });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                            if (!rdrSettlement.IsDBNull(17))
                            {
                                if (dicIneligibleReason.Count > 0)
                                {
                                    DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < dicIneligibleReason.Count; i++)
                                    {
                                        comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                                    }
                                    comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[rdrSettlement.GetInt32(17)];
                                    row.Cells.Add(comboCellIneligibleReason);
                                }
                            }
                            else
                            {
                                if (dicIneligibleReason.Count > 0)
                                {
                                    DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < dicIneligibleReason.Count; i++)
                                    {
                                        comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                                    }
                                    comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[0];
                                    row.Cells.Add(comboCellIneligibleReason);
                                }
                            }

                            if (!rdrSettlement.IsDBNull(18)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(18) });
                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                            gvSettlementsInMedBill.Rows.Add(row);
                            //AddNewRowToGVSettlementSafely(row);
                        }
                    }
                    rdrSettlement.Close();
                    if (connRN.State != ConnectionState.Closed) connRN.Close();

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    ///
                    //Decimal PersonalResponsibilityAmount = 0;

                    //foreach (IncidentProgramInfo incdProgram in lstIncidentProgramInfo)
                    //{
                    //    if (incdProgram.bPersonalResponsibilityProgram == true) PersonalResponsibilityAmount = incdProgram.PersonalResponsibilityAmount;
                    //}

                    //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    //{
                    //    if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value != null)
                    //    {
                    //        Decimal result = 0;
                    //        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                    //        {
                    //            PersonalResponsibilityAmount -= result;
                    //        }
                    //    }
                    //}

                    //txtPersonalResponsibility.Text = PersonalResponsibilityAmount.ToString("C");

                    //if (PersonalResponsibilityAmount < 0) txtPersonalResponsibility.BackColor = Color.Yellow;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    {
                        if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
                        {
                            gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                        }

                        if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
                        {
                            gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                        }

                        if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
                        {
                            gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                        }
                        if (gvSettlementsInMedBill["PaymentMethod", i]?.Value == null)
                        {
                            gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = true;
                        }
                    }

                    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    {
                        if (gvSettlementsInMedBill[2, i]?.Value?.ToString() == "Ineligible") gvSettlementsInMedBill.Rows[i].DefaultCellStyle.BackColor = Color.Salmon;
                        else
                        {
                            gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                            gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                        }
                    }

                    if (txtMedBillAmount.Text.Trim() != String.Empty)
                    {
                        Decimal SettlementTotal = 0;
                        Decimal Balance = 0;
                        Decimal Result = 0;
                        Decimal BillAmount = 0;
                        if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out Result))
                        {
                            BillAmount = Result;

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                //if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == ")
                                Decimal Settlement = 0;
                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Provider Payment" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Reimbursement" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Ineligible")
                                {
                                    Settlement = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                                    SettlementTotal += Settlement;
                                }
                            }
                            if (SettlementTotal > BillAmount) MessageBox.Show("Settlement Total exceeds the Medical Bill Amount.", "Alert");
                            else
                            {
                                Balance = BillAmount - SettlementTotal;
                                txtBalance.Text = Balance.ToString("C");
                            }
                        }
                    }

                    //btnAddNewSettlement.Enabled = true;
                    ////btnEditSettlement.Enabled = true;
                    //btnSaveSettlement.Enabled = true;
                    //btnDeleteSettlement.Enabled = true;

                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }
                else if (frmIncidentList.SelectedOption == IncidentOption.Close)
                {
                    txtIncdProgram.Text = String.Empty;
                    txtMedBill_Incident.Text = String.Empty;
                    return;
                }
                else if (frmIncidentList.SelectedOption == IncidentOption.Cancel)
                {
                    return;
                }
                //else if ((dlgIncident == DialogResult.Cancel)&&(frmIncidentList.bIncidentCanceled == true))
                //{

                //}
            }
            else
            {
                MessageBox.Show("No illess", "Information");
            }
        }

        private void btnMedBillCreatePgUpperSave_Click(object sender, EventArgs e)
        {
            Cursor.Current = Cursors.WaitCursor;

            if (txtMedBill_Illness.Text.Trim() == String.Empty)
            {
                MessageBox.Show("Please select an Illness.", "Alert", MessageBoxButtons.OK);
                return;
            }
            if (txtMedBill_Incident.Text.Trim() == String.Empty)
            {
                MessageBox.Show("Please select an Incident.", "Alert", MessageBoxButtons.OK);
                return;
            }
            if (txtMedBillAmount.Text.Trim() == String.Empty)
            {
                MessageBox.Show("Please enter Medical Bill Amount.", "Alert", MessageBoxButtons.OK);
                return;
            }
            if (txtMedicalProvider.Text.Trim() == String.Empty)
            {
                MessageBox.Show("Please select a Medical Provider.", "Alert", MessageBoxButtons.OK);
                return;
            }

            frmSaveNewMedBill frmSaveMedBill = new frmSaveNewMedBill();

            frmSaveMedBill.StartPosition = FormStartPosition.CenterParent;
            DialogResult dlgResult = frmSaveMedBill.ShowDialog();

            if (dlgResult == DialogResult.Yes)
            {
                String strMedBillNo = txtMedBillNo.Text.Trim();

                String strSqlQueryForMedBill = "select [dbo].[tbl_medbill].[BillNo] from [dbo].[tbl_medbill] where [dbo].[tbl_medbill].[BillNo] = @MedBillNo";

                SqlCommand cmdQueryForMedBill = new SqlCommand(strSqlQueryForMedBill, connRN5);
                cmdQueryForMedBill.Parameters.AddWithValue("@MedBillNo", strMedBillNo);

                if (connRN5.State != ConnectionState.Closed)
                {
                    connRN5.Close();
                    connRN5.Open();
                }
                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                Object ResultMedBillNo = cmdQueryForMedBill.ExecuteScalar();
                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                if (ResultMedBillNo == null)
                {
                    String strIndividualId = String.Empty;
                    String strCaseId = String.Empty;
                    String strBillStatus = String.Empty;
                    String strIllnessId = String.Empty;
                    String strIncidentId = String.Empty;

                    String strNewMedBillNo = String.Empty;
                    String strMedProvider = String.Empty;
                    String strPrescriptionName = String.Empty;
                    String strPrescriptionNo = String.Empty;
                    String strPrescriptionDescription = String.Empty;

                    if (txtIndividualIDMedBill.Text.Trim() != String.Empty) strIndividualId = txtIndividualIDMedBill.Text.Trim();
                    if (txtMedBill_CaseNo.Text.Trim() != String.Empty) strCaseId = txtMedBill_CaseNo.Text.Trim();

                    if (txtMedBill_Illness.Text.Trim() != String.Empty)
                    {
                        String IllnessNo = txtMedBill_Illness.Text.Trim();

                        String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

                        SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN5);
                        cmdQueryForIllnessId.CommandType = CommandType.Text;

                        cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", IllnessNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (objIllnessId != null) strIllnessId = objIllnessId.ToString();
                        else
                        {
                            MessageBox.Show("No Illness Id for given Illness No", "Error");
                            return;
                        }
                    }

                    if (txtMedBill_Incident.Text.Trim() != String.Empty)
                    {
                        String IncidentNo = txtMedBill_Incident.Text.Trim();

                        String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

                        SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN5);
                        cmdQueryForIncidentId.CommandType = CommandType.Text;

                        cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (objIncidentId != null) strIncidentId = objIncidentId.ToString();
                        else
                        {
                            MessageBox.Show("No Incident Id for given Incident No", "Error");
                            return;
                        }
                    }


                    if (txtMedBillNo.Text.Trim() != String.Empty) strNewMedBillNo = txtMedBillNo.Text.Trim();

                    String MedicalProvider = String.Empty;

                    if (txtMedicalProvider.Text.Trim() != String.Empty)
                    {
                        MedicalProvider = txtMedicalProvider.Text.Trim();
                    }
                    else
                    {
                        MessageBox.Show("Please enter the name of medical provider.", "Error");
                        return;
                    }

                    String PrescriptionName = String.Empty;

                    if (txtPrescriptionName.Text.Trim() != String.Empty)
                    {
                        PrescriptionName = txtPrescriptionName.Text.Trim();
                    }

                    String PrescriptionNo = String.Empty;

                    if (txtNumberOfMedication.Text.Trim() != String.Empty)
                    {
                        PrescriptionNo = txtNumberOfMedication.Text.Trim();
                    }

                    String PrescriptionDescription = String.Empty;

                    if (txtPrescriptionDescription.Text.Trim() != String.Empty)
                    {
                        PrescriptionDescription = txtPrescriptionDescription.Text.Trim();
                    }


                    int nPatientType = 0;   // default outpatient

                    if (rbOutpatient.Checked) nPatientType = 0;
                    else if (rbInpatient.Checked) nPatientType = 1;

                    String strNote = String.Empty;

                    if (comboMedBillType.SelectedItem.ToString() == "Medical Bill")
                    {
                        strNote = txtMedBillNote.Text.Trim();
                    }
                    else if (comboMedBillType.SelectedItem.ToString() == "Prescription")
                    {
                        strNote = txtPrescriptionNote.Text.Trim();
                    }
                    else if (comboMedBillType.SelectedItem.ToString() == "Physical Therapy")
                    {
                        strNote = txtPhysicalTherapyRxNote.Text.Trim();
                    }

                    String strSqlInsertNewMedBill = "insert into dbo.tbl_medbill (IsDeleted, BillNo, MedBillType_Id, BillStatus, BillClosed, CreatedDate, CreatedById, " +
                                                    "LastModifiedDate, LastModifiedById, " +
                                                    "LastActivityDate, LastViewedDate, LastReferencedDate, Case_Id, Incident_Id, Illness_Id, BillAmount, SettlementTotal, " +
                                                    "Balance, BillDate, TotalSharedAmount, Individual_Id, Contact_Id, MedicalProvider_Id, PendingReason, " +
                                                    "Account_At_Provider, ProviderPhoneNumber, ProviderContactPerson, " +
                                                    "ProposalLetterSentDate, HIPPASentDate, MedicalRecordDate, " +
                                                    "IneligibleReason, PersonalResponsibilityCredit, " +
                                                    "WellBeingCareTotal, WellBeingCare, DueDate, TotalNumberOfPhysicalTherapy, " +
                                                    "PrescriptionDrugName, PrescriptionNo, PrescriptionDescription, " +
                                                    "PatientTypeId, Note) " +
                                                    "values (@IsDeleted, @BillNo, @MedBillType_Id, @MedBillStatus, @MedBillClosed, @CreatedDate, @CreateById, " +
                                                    "@LastModifiedDate, @LastModifiedById, " +
                                                    "@LastActivityDate, @LastViewedDate, @LastReferencedDate, @Case_Id, @Incident_Id, @Illness_Id, @BillAmount, @SettlementTotal, " +
                                                    "@Balance, @BillDate, @TotalSharedAmount, @Individual_Id, @Contact_Id, @MedicalProvider_Id, @PendingReason, " +
                                                    "@Account_At_Provider, @ProviderPhoneNo, @ProviderContactPerson, " +
                                                    "@ProposalLetterSentDate, @HIPPASentDate, @MedicalRecordDate, " +
                                                    "@IneligibleReason, @PersonalResponsibilityCredit, " +
                                                    "@WellBeingCareTotal, @WellBeingCare, @DueDate, @TotalNumberOfPhysicalTherapy, " +
                                                    "@PrescriptionDrugName, @PrescriptionNo, @PrescriptionDescription, " +
                                                    "@PatientTypeId, @Note)";

                    SqlCommand cmdInsertNewMedBill = new SqlCommand(strSqlInsertNewMedBill, connRN5);
                    cmdInsertNewMedBill.CommandType = CommandType.Text;

                    cmdInsertNewMedBill.Parameters.AddWithValue("@IsDeleted", 0);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@BillNo", strNewMedBillNo);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@MedBillType_Id", comboMedBillType.SelectedIndex + 1);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@MedBillStatus", comboMedBillStatus.SelectedIndex);
                    if (cbMedBillClosed.SelectedIndex == 0) cmdInsertNewMedBill.Parameters.AddWithValue("@MedBillClosed", 0);
                    else if (cbMedBillClosed.SelectedIndex == 1) cmdInsertNewMedBill.Parameters.AddWithValue("@MedBillClosed", 1);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@CreatedDate", DateTime.Today);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@CreateById", nLoggedUserId);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@LastModifiedById", nLoggedUserId);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@LastViewedDate", DateTime.Today);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@LastReferencedDate", DateTime.Today);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@Case_Id", strCaseId);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@Incident_Id", strIncidentId);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@Illness_Id", strIllnessId);

                    Decimal BillAmountResult = 0;
                    Decimal BillAmount = 0;

                    if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out BillAmountResult))
                    {
                        BillAmount = BillAmountResult;
                        cmdInsertNewMedBill.Parameters.AddWithValue("@BillAmount", BillAmount);
                    }
                    else
                    {
                        MessageBox.Show("Bill Amount is invalid.", "Error");
                        return;
                    }

                    cmdInsertNewMedBill.Parameters.AddWithValue("@SettlementTotal", 0);

                    Decimal BalanceResult = 0;
                    Decimal Balance = 0;

                    if (Decimal.TryParse(txtBalance.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out BalanceResult))
                    {
                        Balance = BalanceResult;
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Balance", Balance);
                    }
                    else
                    {
                        MessageBox.Show("Balance is invalid.", "Error");
                        return;
                    }

                    cmdInsertNewMedBill.Parameters.AddWithValue("@BillDate", dtpBillDate.Value);

                    Decimal TotalSharedAmount = 0;
                    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    {
                        if ((gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString() == "CMM Provider Payment") ||
                            (gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString() == "Member Reimbursement") ||
                            (gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString() == "PR Reimbursement"))
                            TotalSharedAmount += Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                        if (gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString() == "Medical Provider Refund")
                            TotalSharedAmount -= Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                    }

                    cmdInsertNewMedBill.Parameters.AddWithValue("@TotalSharedAmount", TotalSharedAmount);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@Individual_Id", strIndividualId);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@Contact_Id", strIndividualId);

                    Boolean bMedicalProvider = false;
                    foreach (MedicalProviderInfo info in lstMedicalProvider)
                    {
                        if (info.Name.Trim() == txtMedicalProvider.Text.Trim())
                        {
                            cmdInsertNewMedBill.Parameters.AddWithValue("@MedicalProvider_Id", info.ID);
                            bMedicalProvider = true;
                            break;
                        }
                    }
                    if (!bMedicalProvider)
                    {
                        MessageBox.Show("Medical Provider name is invalid.", "Error");
                        return;
                    }

                    cmdInsertNewMedBill.Parameters.AddWithValue("@Account_At_Provider", txtMedBillAccountNoAtProvider.Text.Trim());
                    cmdInsertNewMedBill.Parameters.AddWithValue("@ProviderPhoneNo", txtMedProviderPhoneNo.Text.Trim());
                    cmdInsertNewMedBill.Parameters.AddWithValue("@ProviderContactPerson", txtProviderContactPerson.Text.Trim());
                    cmdInsertNewMedBill.Parameters.AddWithValue("@ProposalLetterSentDate", dtpProposalLetterSentDate.Value);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@HIPPASentDate", dtpHippaSentDate.Value);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@MedicalRecordDate", dtpMedicalRecordDate.Value);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@PersonalResponsibilityCredit", 500);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@WellBeingCareTotal", 0);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@WellBeingCare", 0);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@DueDate", dtpDueDate.Value);

                    if (comboMedBillType.SelectedIndex == 0)        // Medical Bill Type : Medical Bill
                    {
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", DBNull.Value);

                        cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", DBNull.Value);

                        cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", nPatientType);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", comboPendingReason.SelectedIndex);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", comboIneligibleReason.SelectedIndex);

                        cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
                    }
                    else if (comboMedBillType.SelectedIndex == 1)   // Medical Bill Type : Prescription
                    {
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", DBNull.Value);

                        cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", DBNull.Value);

                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", txtPrescriptionName.Text.Trim());
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", txtNumberOfMedication.Text.Trim());
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", txtPrescriptionDescription.Text.Trim());
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
                    }
                    else if (comboMedBillType.SelectedIndex == 2)   // Medical Bill Type : Physical Therapy
                    {
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", DBNull.Value);

                        cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", DBNull.Value);

                        int nNumberOfPhysicalTherapy = 0;
                        short result = 0;
                        if (Int16.TryParse(txtNumPhysicalTherapy.Text.Trim(), out result))
                        {
                            nNumberOfPhysicalTherapy = result;
                            cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", nNumberOfPhysicalTherapy);
                        }
                        else
                        {
                            MessageBox.Show("Please enter a positive integer in the Number of Physical Therapy Text Box.", "Alert");
                            return;
                        }

                        cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
                    }

                    if (connRN5.State != ConnectionState.Closed)
                    {
                        connRN5.Close();
                        connRN5.Open();
                    }
                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    int nRowInserted = cmdInsertNewMedBill.ExecuteNonQuery();
                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                    if (nRowInserted == 1)
                    {
                        MessageBox.Show("The medical bill has been saved.", "Information");

                        // handle Well Being Care case
                        Boolean bWellBeingCare = true;
                        Boolean bWellBeingCareEligible = true;

                        String strSqlQueryForICD10CodeForWellBeingCare = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_illness].[ICD_10_Id] from [dbo].[tbl_medbill] " +
                                                                         "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                                         "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                                                                         "[dbo].[tbl_medbill].[Individual_Id] = @IndividualId";

                        SqlCommand cmdQueryForICD10CodeForWellBeingCare = new SqlCommand(strSqlQueryForICD10CodeForWellBeingCare, connRN5);
                        cmdQueryForICD10CodeForWellBeingCare.CommandType = CommandType.Text;

                        cmdQueryForICD10CodeForWellBeingCare.Parameters.AddWithValue("@MedBillNo", strNewMedBillNo);
                        cmdQueryForICD10CodeForWellBeingCare.Parameters.AddWithValue("@IndividualId", strIndividualId);

                        String ICD10Code = String.Empty;

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                        SqlDataReader rdrICD10CodeForWellBeingCare = cmdQueryForICD10CodeForWellBeingCare.ExecuteReader();
                        if (rdrICD10CodeForWellBeingCare.HasRows)
                        {
                            rdrICD10CodeForWellBeingCare.Read();
                            if (!rdrICD10CodeForWellBeingCare.IsDBNull(1)) ICD10Code = rdrICD10CodeForWellBeingCare.GetString(1);
                        }
                        rdrICD10CodeForWellBeingCare.Close();
                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                        if (ICD10Code != "Z00.00" && ICD10Code != "Z00.012") bWellBeingCare = false;

                        if (ICD10Code == "Z00.00" || ICD10Code == "Z00.012")
                        {

                            String strSqlQueryForProgramForIndividual = "select [dbo].[contact].[Individual_ID__c], [dbo].[program].[Name] from [dbo].[contact] " +
                                                                        "inner join [dbo].[program] on [dbo].[contact].[c4g_Plan__c] = [dbo].[program].[ID] " +
                                                                        "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                            SqlCommand cmdQueryForProgramForIndividual = new SqlCommand(strSqlQueryForProgramForIndividual, connSalesforce2);
                            cmdQueryForProgramForIndividual.CommandType = CommandType.Text;

                            cmdQueryForProgramForIndividual.Parameters.AddWithValue("@IndividualId", strIndividualId);

                            if (connSalesforce2.State != ConnectionState.Closed)
                            {
                                connSalesforce2.Close();
                                connSalesforce2.Open();
                            }
                            else if (connSalesforce2.State == ConnectionState.Closed) connSalesforce2.Open();

                            String ProgramName = String.Empty;

                            SqlDataReader rdrProgramForIndividual = cmdQueryForProgramForIndividual.ExecuteReader();
                            if (rdrProgramForIndividual.HasRows)
                            {
                                rdrProgramForIndividual.Read();
                                if (!rdrProgramForIndividual.IsDBNull(1)) ProgramName = rdrProgramForIndividual.GetString(1);
                            }
                            rdrProgramForIndividual.Close();
                            if (connSalesforce2.State == ConnectionState.Open) connSalesforce2.Close();

                            if (ProgramName == "Gold Plus" || ProgramName == "Gold Medi-I" || ProgramName == "Gold Medi-II")
                            {
                                String strSqlQueryForIndividualStartDate = "select [dbo].[contact].[Membership_IND_Start_date__c] from [dbo].[contact] " +
                                                                           "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                                SqlCommand cmdQueryForIndividualStartDate = new SqlCommand(strSqlQueryForIndividualStartDate, connSalesforce2);
                                cmdQueryForIndividualStartDate.CommandType = CommandType.Text;

                                cmdQueryForIndividualStartDate.Parameters.AddWithValue("@IndividualId", strIndividualId);

                                if (connSalesforce2.State != ConnectionState.Closed)
                                {
                                    connSalesforce2.Close();
                                    connSalesforce2.Open();
                                }
                                else if (connSalesforce2.State == ConnectionState.Closed) connSalesforce2.Open();

                                Object objMembershipIndStartDate = cmdQueryForIndividualStartDate.ExecuteScalar();

                                if (connSalesforce2.State == ConnectionState.Open) connSalesforce2.Close();

                                DateTime MembershipIndStartDate = new DateTime();
                                if (objMembershipIndStartDate != null)
                                {
                                    MembershipIndStartDate = DateTime.Parse(objMembershipIndStartDate.ToString());
                                }

                                if (dtpBillDate.Value > MembershipIndStartDate.AddMonths(6))
                                {
                                    //String strSqlQueryForAnivDateForIndividualId = "select [dbo].[contact].[Aniv_Date], [dbo].[contact].[Membership_IND_Start_date__c] from [dbo].[contact] " +
                                    //                                               "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                                    //SqlCommand cmdQueryForAnivDateForIndividualId = new SqlCommand(strSqlQueryForAnivDateForIndividualId, connSalesforce);
                                    //cmdQueryForAnivDateForIndividualId.CommandType = CommandType.Text;

                                    //cmdQueryForAnivDateForIndividualId.Parameters.AddWithValue("@IndividualId", strIndividualId);

                                    //if (connSalesforce.State != ConnectionState.Closed)
                                    //{
                                    //    connSalesforce.Close();
                                    //    connSalesforce.Open();
                                    //}
                                    //else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                                    //DateTime? AnivDate = null;
                                    //DateTime? StartDate = null;

                                    //SqlDataReader rdrAnivDate = cmdQueryForAnivDateForIndividualId.ExecuteReader();
                                    //if (rdrAnivDate.HasRows)
                                    //{
                                    //    rdrAnivDate.Read();
                                    //    if (!rdrAnivDate.IsDBNull(0)) AnivDate = rdrAnivDate.GetDateTime(0);
                                    //    if (!rdrAnivDate.IsDBNull(1)) StartDate = rdrAnivDate.GetDateTime(1);
                                    //}
                                    //rdrAnivDate.Close();
                                    //if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                                    DateTime IndividualAnivDate = DateTime.Parse(txtAnivDate.Text);
                                    //if (AnivDate != null) IndividualAnivDate = AnivDate.Value;
                                    //else IndividualAnivDate = StartDate.Value;

                                   

                                    int nAnivYear = dtpBillDate.Value.Year;

                                    DateTime IndividualThisAnivDate = new DateTime(nAnivYear, IndividualAnivDate.Month, 1);
                                    DateTime IndividualLastAnivDate = new DateTime(nAnivYear - 1, IndividualAnivDate.Month, 1);

                                    String strSqlQueryForWellBeingIncidentsPerAnivYear = "select count([dbo].[tbl_incident].[IncidentNo]) from [dbo].[tbl_incident] " +
                                                                                         "inner join [dbo].[tbl_illness] on [dbo].[tbl_incident].[Illness_id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                                                         "inner join [dbo].[tbl_medbill] on [dbo].[tbl_incident].[Incident_id] = [dbo].[tbl_medbill].[Incident_Id] " +
                                                                                         "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                                                         "([dbo].[tbl_illness].[ICD_10_Id] = 'Z00.00' or [dbo].[tbl_illness].[ICD_10_Id] = 'Z00.012') and " +
                                                                                         "[dbo].[tbl_medbill].[BillDate] >= @LastAnivDate and " +
                                                                                         "[dbo].[tbl_medbill].[BillDate] < @ThisAnivDate";

                                    SqlCommand cmdQueryForWellBeingIncidentsPerAnivYear = new SqlCommand(strSqlQueryForWellBeingIncidentsPerAnivYear, connRN5);
                                    cmdQueryForWellBeingIncidentsPerAnivYear.CommandType = CommandType.Text;

                                    cmdQueryForWellBeingIncidentsPerAnivYear.Parameters.AddWithValue("@IndividualId", strIndividualId);
                                    cmdQueryForWellBeingIncidentsPerAnivYear.Parameters.AddWithValue("@LastAnivDate", IndividualLastAnivDate);
                                    cmdQueryForWellBeingIncidentsPerAnivYear.Parameters.AddWithValue("@ThisAnivDate", IndividualThisAnivDate);

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                    Object objIncidentCount = cmdQueryForWellBeingIncidentsPerAnivYear.ExecuteScalar();
                                    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                    int nIncidentCount = Int32.Parse(objIncidentCount.ToString());

                                    if (nIncidentCount == 1)
                                    {
                                        String strSqlQueryForWellBeingIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] " +
                                                                                   "inner join [dbo].[tbl_illness] on [dbo].[tbl_incident].[Illness_id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                                                   "inner join [dbo].[tbl_medbill] on [dbo].[tbl_incident].[Incident_id] = [dbo].[tbl_medbill].[Incident_Id] " +
                                                                                   "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                                                   "([dbo].[tbl_illness].[ICD_10_Id] = 'Z00.00' or [dbo].[tbl_illness].[ICD_10_Id] = 'Z00.012') and " +
                                                                                   "[dbo].[tbl_medbill].[BillDate] >= @LastAnivDate and " +
                                                                                   "[dbo].[tbl_medbill].[BillDate] < @ThisAnivDate";

                                        SqlCommand cmdQueryForWellBeingIncidentId = new SqlCommand(strSqlQueryForWellBeingIncidentId, connRN5);
                                        cmdQueryForWellBeingIncidentId.CommandType = CommandType.Text;

                                        cmdQueryForWellBeingIncidentId.Parameters.AddWithValue("@IndividualId", strIndividualId);
                                        cmdQueryForWellBeingIncidentId.Parameters.AddWithValue("@LastAnivDate", IndividualLastAnivDate);
                                        cmdQueryForWellBeingIncidentId.Parameters.AddWithValue("@ThisAnivDate", IndividualThisAnivDate);

                                        if (connRN5.State != ConnectionState.Closed)
                                        {
                                            connRN5.Close();
                                            connRN5.Open();
                                        }
                                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                        Object objWellBeingIncidentId = cmdQueryForWellBeingIncidentId.ExecuteScalar();
                                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                        if (objWellBeingIncidentId != null)
                                        {
                                            int nWellBeingIncidentId = Int32.Parse(objWellBeingIncidentId.ToString());

                                            String strSqlQueryForWellBeingTotalForIncident = "select sum([dbo].[tbl_medbill].[TotalSharedAmount]) from [dbo].[tbl_medbill] " +
                                                                                             "where [dbo].[tbl_medbill].[Incident_Id] = @IncidentId";

                                            SqlCommand cmdQueryForWellBeingTotalForIncident = new SqlCommand(strSqlQueryForWellBeingTotalForIncident, connRN5);
                                            cmdQueryForWellBeingTotalForIncident.CommandType = CommandType.Text;

                                            cmdQueryForWellBeingTotalForIncident.Parameters.AddWithValue("@IncidentId", nWellBeingIncidentId);

                                            if (connRN5.State != ConnectionState.Closed)
                                            {
                                                connRN5.Close();
                                                connRN5.Open();
                                            }
                                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                            Object objWellBeingTotalForIncident = cmdQueryForWellBeingTotalForIncident.ExecuteScalar();
                                            if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                            Decimal WellBeingTotalForIncident = Decimal.Parse(objWellBeingTotalForIncident.ToString());

                                            if (WellBeingTotalForIncident > 500)
                                            {
                                                // Set the well being care med bill ineligible strNewMedBillNo
                                                String strSqlUpdateMedBillWellBeingCareIneligible = "update [dbo].[tbl_medbill] set [dbo].[medbill].[BillStatus] = 3, " +
                                                                                                    "[dbo].[tbl_medbill].[WellBeingCare] = 0 " +
                                                                                                    "where [dbo].[tbl_medbill].[BillNo] = @WellBeingCareMedBill";

                                                SqlCommand cmdUpdateMedBillWellBeingCareIneligible = new SqlCommand(strSqlUpdateMedBillWellBeingCareIneligible, connRN5);
                                                cmdUpdateMedBillWellBeingCareIneligible.CommandType = CommandType.Text;

                                                cmdUpdateMedBillWellBeingCareIneligible.Parameters.AddWithValue("@WellBeingCareMedBill", strNewMedBillNo);

                                                if (connRN5.State != ConnectionState.Closed)
                                                {
                                                    connRN5.Close();
                                                    connRN5.Open();
                                                }
                                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                                int nWellBeingMedBillUpdated = cmdUpdateMedBillWellBeingCareIneligible.ExecuteNonQuery();

                                                if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                                if (nWellBeingMedBillUpdated == 0)
                                                {
                                                    MessageBox.Show("The well being med bill is not updated.", "Error");
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                // set the well being care med bill eligible
                                                String strSqlUpdateMedBillWellBeingCareEligible = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[BillStatus] = 2, " +
                                                                                                  "[dbo].[tbl_medbill].[WellBeingCare] = 1 " +
                                                                                                  "where [dbo].[tbl_medbill].[BillNo] = @WellBeingCareMedBill";

                                                SqlCommand cmdUpdateMedBillWellBeingCareEligible = new SqlCommand(strSqlUpdateMedBillWellBeingCareEligible, connRN5);
                                                cmdUpdateMedBillWellBeingCareEligible.CommandType = CommandType.Text;

                                                cmdUpdateMedBillWellBeingCareEligible.Parameters.AddWithValue("@WellBeingCareMedBill", strNewMedBillNo);

                                                if (connRN5.State != ConnectionState.Closed)
                                                {
                                                    connRN5.Close();
                                                    connRN5.Open();
                                                }
                                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                                int nWellBeingMedBillUpdated = cmdUpdateMedBillWellBeingCareEligible.ExecuteNonQuery();

                                                if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                                if (nWellBeingMedBillUpdated == 0)
                                                {
                                                    MessageBox.Show("The well being med bill is not updated.", "Error");
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                    else if (nIncidentCount > 1)
                                    {
                                        // Ineligible for Well Being Care
                                        String strSqlUpdateMedBillWellBeingCareIneligible = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[BillStatus] = 3, " +
                                                                                            "[dbo].[tbl_medbill].[WellBeingCare] = 0 " +
                                                                                            "where [dbo].[tbl_medbill].[BillNo] = @WellBeingCareMedBill";

                                        SqlCommand cmdUpdateMedBillWellBeingCareIneligible = new SqlCommand(strSqlUpdateMedBillWellBeingCareIneligible, connRN5);
                                        cmdUpdateMedBillWellBeingCareIneligible.CommandType = CommandType.Text;

                                        cmdUpdateMedBillWellBeingCareIneligible.Parameters.AddWithValue("@WellBeingCareMedBill", strNewMedBillNo);

                                        if (connRN5.State != ConnectionState.Closed)
                                        {
                                            connRN5.Close();
                                            connRN5.Open();
                                        }
                                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                        int nWellBeingMedBillUpdated = cmdUpdateMedBillWellBeingCareIneligible.ExecuteNonQuery();
                                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                        if (nWellBeingMedBillUpdated == 0)
                                        {
                                            MessageBox.Show("The well being med bill is not updated.", "Error");
                                            return;
                                        }
                                    }
                                }
                            }
                        }

                        if (gvSettlementsInMedBill.Rows.Count > 0)
                        {
                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {

                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value == null)
                                {
                                    MessageBox.Show("You have to select a Settlement Type.", "Alert");
                                    return;
                                }

                                Decimal result, SettlementAmount;
                                if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) SettlementAmount = result;
                                else
                                {
                                    MessageBox.Show("You have to enter decimal value in Settlement Amount field in Settlement " + gvSettlementsInMedBill[1, i]?.Value?.ToString(), "Alert");
                                    return;
                                }

                                result = 0;
                                Decimal PersonalResponsibilityAmount = 0;

                                if ((gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount") ||
                                    (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount") ||
                                    (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Discount") ||
                                    (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment"))
                                {
                                    //if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString() != String.Empty)
                                    if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value != null)
                                    {
                                        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) PersonalResponsibilityAmount = result;
                                        else
                                        {
                                            MessageBox.Show("Invalid Personal Responsibility.", "Error");
                                            return;
                                        }
                                    }
                                }

                                result = 0;
                                Decimal AllowedAmount = 0;
                                if (gvSettlementsInMedBill["AllowedAmount", i]?.Value?.ToString() != null)
                                {
                                    if (Decimal.TryParse(gvSettlementsInMedBill["AllowedAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) AllowedAmount = result;
                                    else
                                    {
                                        MessageBox.Show("You have to enter decimal value in Allowed Amount field in Settlement " + gvSettlementsInMedBill[1, i]?.Value?.ToString(), "Alert");
                                        return;
                                    }
                                }
                            }

                            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            Decimal MedBillAmount = Decimal.Parse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"));
                            Decimal SettlementAmountTotal = 0;

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                Decimal result = 0;
                                Decimal SettlementAmount = 0;
                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Provider Payment" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Reimbursement" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Ineligible")
                                {
                                    if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                                    {
                                        SettlementAmount = result;
                                        SettlementAmountTotal += SettlementAmount;
                                        if (SettlementAmountTotal > MedBillAmount)
                                        {
                                            MessageBox.Show("The total of settlement amount exceeds medical bill amount.");
                                            return;
                                        }
                                    }
                                }
                            }

                            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            Boolean bError = false;

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                String SettlementName = gvSettlementsInMedBill["SettlementName", i].Value.ToString();

                                // Check whether or not the settlement is already in data base
                                String strSqlQueryForSettlementName = "select [dbo].[tbl_settlement].[Name] from [dbo].[tbl_settlement] where [dbo].[tbl_settlement].[Name] = @Settlement";

                                SqlCommand cmdQueryForSettlementName = new SqlCommand(strSqlQueryForSettlementName, connRN5);
                                cmdQueryForSettlementName.CommandType = CommandType.Text;

                                cmdQueryForSettlementName.Parameters.AddWithValue("@Settlement", SettlementName);

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State != ConnectionState.Open) connRN5.Open();
                                /////////////////////////////////////////////////////////////////////

                                Object objResultSettlementName = cmdQueryForSettlementName.ExecuteScalar();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                if (objResultSettlementName == null)   // new settlement: save the settlement by using insert sql statement
                                {

                                    String strSqlCreateNewSettlement = "insert into [dbo].[tbl_settlement] (IsDeleted, Name, CreateDate, CreateByID, LastModifiedDate, LastModifiedByID, SystemModifiedStamp, " +
                                                                        "LastActivityDate, LastViewedDate, MedicalBillID, " +
                                                                        "SettlementType, Amount, PersonalResponsibilityCredit, CMMPaymentMethod, " +
                                                                        "CheckNo, CheckDate, CheckReconciled, ACH_Number, ACH_Date, ACH_Reconciled, CMMCreditCard, CMMCreditCardPaidDate, CC_Reconciled, " +
                                                                        "AllowedAmount, Notes, Approved, ApprovedDate, IneligibleReason) " +
                                                                        "values (0, @SettlementName, @CreateDate, @CreateByID, @LastModifiedDate, @LastModifiedByID, @SystemModifiedStamp, " +
                                                                        "@LastActivityDate, @LastViewedDate, @MedBillID, " +
                                                                        "@SettlementType, @SettlementAmount, @PersonalResponsibilityCredit, @CMMPaymentMethod, " +
                                                                        "@CheckNo, @CheckDate, @IsCheckReconciled, @ACH_Number, @ACH_Date, @IsACH_Reconciled, @CMMCreditCard, @CMMCreditCardPaidDate, @IsCC_Reconciled, " +
                                                                        "@AllowedAmount, @Notes, @IsApproved, @ApprovedDate, @IneligibleReason)";

                                    SqlCommand cmdInsertNewSettlement = new SqlCommand(strSqlCreateNewSettlement, connRN5);
                                    cmdInsertNewSettlement.CommandType = CommandType.Text;

                                    String NewSettlementName = gvSettlementsInMedBill["SettlementName", i].Value.ToString();
                                    String NewSettlementType = String.Empty;
                                    if (gvSettlementsInMedBill["SettlementTypeValue", i].Value != null) NewSettlementType = gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString();
                                    int nNewSettlementType = 0;
                                    for (int j = 0; j < lstSettlementType.Count; j++)
                                    {
                                        if (NewSettlementType == lstSettlementType[j].SettlementTypeValue) nNewSettlementType = lstSettlementType[j].SettlementTypeCode;
                                    }
                                    Decimal result = 0;
                                    Decimal SettlementAmount = 0;
                                    if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                                    {
                                        SettlementAmount = result;
                                        cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementAmount", SettlementAmount);
                                    }

                                    result = 0;
                                    Decimal PersonalResponsibilityAmount = 0;
                                    if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) PersonalResponsibilityAmount = result;
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@PersonalResponsibilityCredit", PersonalResponsibilityAmount);

                                    int NewIsApproved = 0;
                                    if (gvSettlementsInMedBill["Approved", i]?.Value != null)
                                    {
                                        if ((Boolean)gvSettlementsInMedBill["Approved", i]?.Value == true) NewIsApproved = 1;
                                    }
                                    DateTime? NewApprovedDate = null;
                                    if (gvSettlementsInMedBill["ApprovedDate", i]?.Value != null) NewApprovedDate = DateTime.Parse(gvSettlementsInMedBill["ApprovedDate", i].Value.ToString());

                                    String NewCMMPaymentMethod = String.Empty;
                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value != null) NewCMMPaymentMethod = gvSettlementsInMedBill["PaymentMethod", i].Value.ToString();
                                    int nNewCMMPaymentMethod = 0;
                                    for (int j = 0; j < lstPaymentMethod.Count; j++)
                                    {
                                        if (NewCMMPaymentMethod == lstPaymentMethod[j].PaymentMethodValue) nNewCMMPaymentMethod = lstPaymentMethod[j].PaymentMethodId;
                                    }

                                    String NewCheckNo = String.Empty;
                                    DateTime? NewCheckDate = null;
                                    int NewCheckReconciled = 0;
                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
                                    {
                                        if (gvSettlementsInMedBill["CheckNo", i].Value != null) NewCheckNo = gvSettlementsInMedBill["CheckNo", i].Value.ToString();
                                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null) NewCheckDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                        if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewCheckReconciled = 1;
                                    }

                                    String NewACH_Number = String.Empty;
                                    DateTime? NewACH_Date = null;
                                    int NewACH_Reconciled = 0;
                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
                                    {
                                        if (gvSettlementsInMedBill["ACHNo", i].Value != null) NewACH_Number = gvSettlementsInMedBill["ACHNo", i].Value.ToString();
                                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null) NewACH_Date = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                        if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewACH_Reconciled = 1;
                                    }

                                    int nCMMCreditCard = 0;
                                    DateTime? NewCreditCardPaidDate = null;
                                    int NewIsCCReconciled = 0;

                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
                                    {
                                        String CreditCard = gvSettlementsInMedBill[13, i]?.Value?.ToString();
                                        for (int j = 0; j < lstCreditCardInfo.Count; j++)
                                        {
                                            if (CreditCard == lstCreditCardInfo[j].CreditCardNo)
                                            {
                                                nCMMCreditCard = lstCreditCardInfo[j].CreditCardId;
                                            }
                                        }
                                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            NewCreditCardPaidDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                        if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewIsCCReconciled = 1;
                                    }

                                    Decimal NewAllowedAmount = 0;
                                    if (gvSettlementsInMedBill["AllowedAmount", i].Value != null) NewAllowedAmount = Decimal.Parse(gvSettlementsInMedBill["AllowedAmount", i].Value.ToString());
                                    String NewNote = String.Empty;
                                    if (gvSettlementsInMedBill["Note", i].Value != null) NewNote = gvSettlementsInMedBill["Note", i].Value.ToString();

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementName", NewSettlementName);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CreateDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CreateByID", nLoggedUserId);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastModifiedByID", nLoggedUserId);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@SystemModifiedStamp", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastViewedDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@MedBillID", txtMedBillNo.Text.Trim());
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementType", nNewSettlementType);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsApproved", NewIsApproved);

                                    if (NewApprovedDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ApprovedDate", NewApprovedDate);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@ApprovedDate", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CMMPaymentMethod", nNewCMMPaymentMethod);

                                    if (NewCheckNo != String.Empty) cmdInsertNewSettlement.Parameters.AddWithValue("@CheckNo", NewCheckNo);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@CheckNo", DBNull.Value);

                                    if (NewCheckDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@CheckDate", NewCheckDate);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@CheckDate", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsCheckReconciled", NewCheckReconciled);

                                    if (NewACH_Number != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Number", NewACH_Number);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Number", DBNull.Value);

                                    if (NewACH_Date != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Date", NewACH_Date);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Date", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsACH_Reconciled", NewACH_Reconciled);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCard", nCMMCreditCard);

                                    if (NewCreditCardPaidDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", NewCreditCardPaidDate);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsCC_Reconciled", NewIsCCReconciled);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@AllowedAmount", NewAllowedAmount);

                                    if (NewNote != null) cmdInsertNewSettlement.Parameters.AddWithValue("@Notes", NewNote);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@Notes", DBNull.Value);

                                    int nIneligibleReason = 0;
                                    for (int j = 0; j < dicIneligibleReason.Count; j++)
                                    {
                                        if (gvSettlementsInMedBill["IneligibleReason", i]?.Value?.ToString() == dicIneligibleReason[j]) nIneligibleReason = j;
                                    }
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IneligibleReason", nIneligibleReason);

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                    int nSettlementInserted = cmdInsertNewSettlement.ExecuteNonQuery();
                                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                    if (nSettlementInserted == 0) bError = true;

                                }
                                else  // the settlement with the name exist, update the settlement
                                {
                                    String UpdateSettlementName = objResultSettlementName.ToString();
                                    String UpdateMedBill = txtMedBillNo.Text.Trim();

                                    String strSqlUpdateSettlement = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[LastModifiedDate] = @LastModifiedDate, " +
                                                                    "[dbo].[tbl_settlement].[LastModifiedByID] = @LastModifiedByID, " +
                                                                    "[dbo].[tbl_settlement].[LastActivityDate] = @LastActivityDate, " +
                                                                    "[dbo].[tbl_settlement].[SettlementType] = @SettlementType, " +
                                                                    "[dbo].[tbl_settlement].[Amount] = @SettlementAmount, " +
                                                                    "[dbo].[tbl_settlement].[PersonalResponsibilityCredit] = @PersonalResponsibilityCredit, " +
                                                                    "[dbo].[tbl_settlement].[Approved] = @IsApproved, " +
                                                                    "[dbo].[tbl_settlement].[ApprovedDate] = @ApprovedDate, " +
                                                                    "[dbo].[tbl_settlement].[CMMPaymentMethod] = @CMMPaymentMethod, " +
                                                                    "[dbo].[tbl_settlement].[CheckNo] = @CheckNo, " +
                                                                    "[dbo].[tbl_settlement].[CheckDate] = @CheckDate, " +
                                                                    "[dbo].[tbl_settlement].[CheckReconciled] = @CheckReconciled, " +
                                                                    "[dbo].[tbl_settlement].[ACH_Number] = @ACH_Number, " +
                                                                    "[dbo].[tbl_settlement].[ACH_Date] = @ACH_Date, " +
                                                                    "[dbo].[tbl_settlement].[ACH_Reconciled] = @ACH_Reconciled, " +
                                                                    "[dbo].[tbl_settlement].[CMMCreditCard] = @CMMCreditCard, " +
                                                                    "[dbo].[tbl_settlement].[CMMCreditCardPaidDate] = @CMMCreditCardPaidDate, " +
                                                                    "[dbo].[tbl_settlement].[CC_Reconciled] = @CC_Reconciled, " +
                                                                    "[dbo].[tbl_settlement].[AllowedAmount] = @AllowedAmount, " +
                                                                    "[dbo].[tbl_settlement].[Notes] = @Note, " +
                                                                    "[dbo].[tbl_settlement].[IneligibleReason] = @IneligibleReason " +
                                                                    "where [dbo].[tbl_settlement].[Name] = @SettlementName and [dbo].[tbl_settlement].[MedicalBillID] = @MedBillName";

                                    int nSettlementType = 0;
                                    String strSettlementType = String.Empty;
                                    if (gvSettlementsInMedBill["SettlementTypeValue", i].Value != null) strSettlementType = gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString();
                                    for (int j = 0; j < lstSettlementType.Count; j++)
                                    {
                                        if (strSettlementType == lstSettlementType[j].SettlementTypeValue) nSettlementType = lstSettlementType[j].SettlementTypeCode;
                                    }

                                    Decimal SettlementAmount = 0;
                                    if (gvSettlementsInMedBill["SettlementAmount", i].Value != null)
                                    {
                                        SettlementAmount = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency);
                                    }

                                    Decimal PersonalResponsibilityAmt = 0;
                                    if (gvSettlementsInMedBill["PersonalResponsibility", i].Value != null)
                                    {
                                        PersonalResponsibilityAmt = Decimal.Parse(gvSettlementsInMedBill["PersonalResponsibility", i].Value.ToString(), NumberStyles.Currency);
                                    }

                                    // Payment method
                                    int nPaymentMethod = 0;
                                    String PaymentMethod = String.Empty;
                                    if (gvSettlementsInMedBill["PaymentMethod", i].Value != null)
                                        PaymentMethod = gvSettlementsInMedBill["PaymentMethod", i].Value.ToString();
                                    for (int j = 0; j < lstPaymentMethod.Count; j++)
                                    {
                                        if (PaymentMethod == lstPaymentMethod[j].PaymentMethodValue) nPaymentMethod = lstPaymentMethod[j].PaymentMethodId;
                                    }

                                    // Approved or not
                                    int nApproved = 0;
                                    if (gvSettlementsInMedBill["Approved", i].Value != null)
                                    {
                                        if ((Boolean)gvSettlementsInMedBill["Approved", i].Value) nApproved = 1;
                                    }

                                    DateTime? ApprovedDate = null;
                                    if (gvSettlementsInMedBill["ApprovedDate", i].Value != null) ApprovedDate = DateTime.Parse(gvSettlementsInMedBill["ApprovedDate", i].Value.ToString());


                                    String CheckNo = String.Empty;
                                    DateTime? CheckIssueDate = null;
                                    int nCheckReconciled = 0;

                                    String ACH_No = String.Empty;
                                    DateTime? ACH_Date = null;
                                    int nACHReconciled = 0;

                                    String CreditCard = String.Empty;
                                    int nCreditCard = 0;
                                    DateTime? CreditCardPaidDate = null;
                                    int nCCReconciled = 0;

                                    switch (PaymentMethod)
                                    {
                                        case "Check":
                                            if (gvSettlementsInMedBill["CheckNo", i].Value != null) CheckNo = gvSettlementsInMedBill["CheckNo", i].Value.ToString();
                                            if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            {
                                                if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty) CheckIssueDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                            }
                                            Boolean bCheckReconciledResult = false;
                                            if (gvSettlementsInMedBill["Reconciled", i].Value != null)
                                            {
                                                if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bCheckReconciledResult))
                                                {
                                                    if (bCheckReconciledResult) nCheckReconciled = 1;
                                                }
                                            }
                                            break;
                                        case "ACH/Banking":
                                            if (gvSettlementsInMedBill["ACHNo", i].Value != null) ACH_No = gvSettlementsInMedBill["ACHNo", i].Value.ToString();
                                            if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            {
                                                if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty) ACH_Date = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                            }
                                            Boolean bACHReconciledResult = false;
                                            if (gvSettlementsInMedBill["Reconciled", i].Value != null)
                                            {
                                                if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bACHReconciledResult))
                                                {
                                                    if (bACHReconciledResult) nACHReconciled = 1;
                                                }
                                            }
                                            break;
                                        case "Credit Card":
                                            if (gvSettlementsInMedBill["CreditCard", i].Value != null) CreditCard = gvSettlementsInMedBill["CreditCard", i].Value.ToString();
                                            for (int j = 0; j < lstCreditCardInfo.Count; j++)
                                            {
                                                if (CreditCard == lstCreditCardInfo[j].CreditCardNo) nCreditCard = lstCreditCardInfo[j].CreditCardId;
                                            }
                                            if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            {
                                                if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty)
                                                    CreditCardPaidDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                            }
                                            Boolean bCCReconciledResult = false;
                                            if (gvSettlementsInMedBill[15, i].Value != null)
                                            {
                                                if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bCCReconciledResult))
                                                {
                                                    if (bCCReconciledResult) nCCReconciled = 1;
                                                }
                                            }
                                            break;
                                    }

                                    // Allowed Amount
                                    Decimal AllowedAmount = 0;
                                    if (gvSettlementsInMedBill["AllowedAmount", i].Value != null)
                                    {
                                        AllowedAmount = Decimal.Parse(gvSettlementsInMedBill["AllowedAmount", i].Value.ToString(), NumberStyles.Currency);
                                    }

                                    // Note
                                    String Note = String.Empty;
                                    if (gvSettlementsInMedBill["Note", i].Value != null) Note = gvSettlementsInMedBill["Note", i].Value.ToString();



                                    SqlCommand cmdUpdateSettlement = new SqlCommand(strSqlUpdateSettlement, connRN5);
                                    cmdUpdateSettlement.CommandType = CommandType.Text;

                                    cmdUpdateSettlement.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@LastModifiedByID", nLoggedUserId);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@SettlementType", nSettlementType);


                                    cmdUpdateSettlement.Parameters.AddWithValue("@SettlementAmount", SettlementAmount);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@PersonalResponsibilityCredit", PersonalResponsibilityAmt);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@IsApproved", nApproved);
                                    if (ApprovedDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@ApprovedDate", ApprovedDate);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@ApprovedDate", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@CMMPaymentMethod", nPaymentMethod);

                                    if (CheckNo != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@CheckNo", CheckNo);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@CheckNo", DBNull.Value);

                                    if (CheckIssueDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@CheckDate", CheckIssueDate);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@CheckDate", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@CheckReconciled", nCheckReconciled);

                                    if (ACH_No != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Number", ACH_No);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Number", DBNull.Value);

                                    if (ACH_Date != null) cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Date", ACH_Date);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Date", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Reconciled", nACHReconciled);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCard", nCreditCard);

                                    if (CreditCardPaidDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", CreditCardPaidDate);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", DBNull.Value);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@CC_Reconciled", nCCReconciled);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@AllowedAmount", AllowedAmount);
                                    if (Note != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@Note", Note);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@Note", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@SettlementName", UpdateSettlementName);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@MedBillName", UpdateMedBill);

                                    int nIneligibleReason = 0;
                                    for (int j = 0; j < dicIneligibleReason.Count; j++)
                                    {
                                        if (gvSettlementsInMedBill["IneligibleReason", i]?.Value?.ToString() == dicIneligibleReason[j]) nIneligibleReason = j;
                                    }
                                    cmdUpdateSettlement.Parameters.AddWithValue("@IneligibleReason", nIneligibleReason);

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                    int nSettlmentsUpdated = cmdUpdateSettlement.ExecuteNonQuery();
                                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                    if (nSettlmentsUpdated == 0) bError = true;
                                }
                            }

                            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "Ineligible")
                                {
                                    gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                                    gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                                }
                            }

                            if (bError == false)
                            {
                                MessageBox.Show("Settlements have been saved.", "Info");
                            }
                            else if (bError == true)
                            {
                                MessageBox.Show("Some of settlments have not been saved.", "Error");
                                //return;
                            }
                        }
                        // prepare settlement gv
                        //MedBillNo

                        String strSqlQueryForSettlement = "select [dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement_type_code].[SettlementTypeValue], [dbo].[tbl_settlement].[Amount], " +
                                  "[dbo].[tbl_settlement].[PersonalResponsibilityCredit], [dbo].[tbl_payment_method].[PaymentMethod_Value], " +
                                  "[dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate], " +
                                  "[dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
                                  "[dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], [dbo].[tbl_settlement].[ACH_Reconciled], " +
                                  "[dbo].[tbl_Credit_Card__c].[Name], [dbo].[tbl_settlement].[CMMCreditCardPaidDate], [dbo].[tbl_settlement].[CC_Reconciled], " +
                                  "[dbo].[tbl_settlement].[AllowedAmount], [dbo].[tbl_settlement].[IneligibleReason], " +
                                  "[dbo].[tbl_settlement].[Notes] " +
                                  "from [dbo].[tbl_settlement] inner join [dbo].[tbl_settlement_type_code] " +
                                  "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                  "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
                                  "inner join [dbo].[tbl_Credit_Card__c] on [dbo].[tbl_settlement].[CMMCreditCard] = [dbo].[tbl_Credit_Card__c].[CreditCard_Id]" +
                                  "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and " +
                                  "[dbo].[tbl_settlement].[IsDeleted] = 0 " +
                                  "order by [dbo].[tbl_settlement].[Name]";

                        SqlCommand cmdQueryForSettlement = new SqlCommand(strSqlQueryForSettlement, connRN5);
                        cmdQueryForSettlement.CommandType = CommandType.Text;

                        cmdQueryForSettlement.Parameters.AddWithValue("@MedBillNo", strNewMedBillNo);

                        SqlDependency dependencySettlementInMedBill = new SqlDependency(cmdQueryForSettlement);
                        dependencySettlementInMedBill.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillEditChange);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        SqlDataReader rdrSettlement = cmdQueryForSettlement.ExecuteReader();
                        gvSettlementsInMedBill.Rows.Clear();
                        if (rdrSettlement.HasRows)
                        {
                            while (rdrSettlement.Read())
                            {
                                DataGridViewRow row = new DataGridViewRow();
                                row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                if (!rdrSettlement.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(0) });
                                if (!rdrSettlement.IsDBNull(1))
                                {
                                    DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();

                                    for (int i = 0; i < lstSettlementType.Count; i++)
                                    {
                                        comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                                    }
                                    for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                                    {
                                        if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                            comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                                    }

                                    row.Cells.Add(comboCellSettlementType);
                                }
                                else
                                {
                                    DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstSettlementType.Count; i++)
                                    {
                                        comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                                    }

                                    for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                                    {
                                        if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                            comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                                    }

                                    row.Cells.Add(comboCellSettlementType);
                                }

                                if (!rdrSettlement.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(2).ToString("C") });
                                else
                                {
                                    Decimal Zero = 0;
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                                }


                                if (!rdrSettlement.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(3).ToString("C") });
                                else
                                {
                                    Decimal Zero = 0;
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                                }

                                if (!rdrSettlement.IsDBNull(4))
                                {
                                    DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                                    for (int i = 0; i < lstPaymentMethod.Count; i++)
                                    {
                                        if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                        else comboCellPaymentMethod.Items.Add(String.Empty);
                                    }

                                    for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                                    {
                                        if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                            comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                                    }

                                    row.Cells.Add(comboCellPaymentMethod);
                                }
                                else
                                {
                                    DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                                    for (int i = 0; i < lstPaymentMethod.Count; i++)
                                    {
                                        if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                        else comboCellPaymentMethod.Items.Add(String.Empty);
                                    }

                                    for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                                    {
                                        if ((!rdrSettlement.IsDBNull(4)) && comboCellPaymentMethod.Items[i] != null)
                                        {
                                            if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                                comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                                        }
                                        else comboCellPaymentMethod.Value = null;
                                    }

                                    row.Cells.Add(comboCellPaymentMethod);

                                }

                                if (!rdrSettlement.IsDBNull(5))
                                {

                                    DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                                    approvedCell.Value = rdrSettlement.GetBoolean(5);
                                    approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                                    row.Cells.Add(approvedCell);
                                }
                                else
                                {
                                    DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                                    approvedCell.Value = false;
                                    approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                                    row.Cells.Add(approvedCell);
                                }

                                if (!rdrSettlement.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(6).ToString("MM/dd/yyyy")) });
                                else row.Cells.Add(new CalendarCell { Value = null });

                                // Payment information
                                if (!rdrSettlement.IsDBNull(4))
                                {
                                    String strPaymentMethod = rdrSettlement.GetString(4);

                                    switch (strPaymentMethod)
                                    {
                                        case "Check":
                                            if (!rdrSettlement.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(7) });
                                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            DataGridViewComboBoxCell comboCellCreditCardNoneForCheck = new DataGridViewComboBoxCell();
                                            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                            {
                                                if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNoneForCheck.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                                else comboCellCreditCardNoneForCheck.Items.Add(String.Empty);
                                            }
                                            row.Cells.Add(comboCellCreditCardNoneForCheck);
                                            if (!rdrSettlement.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(8).ToString("MM/dd/yyyy")) });
                                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                            if (!rdrSettlement.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(9) });
                                            else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                            break;
                                        case "ACH/Banking":
                                            row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            if (!rdrSettlement.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(10) });
                                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            DataGridViewComboBoxCell comboCellCreditCardNoneForACH = new DataGridViewComboBoxCell();
                                            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                            {
                                                if (lstCreditCardInfo[i].CreditCardNo != null)
                                                    comboCellCreditCardNoneForACH.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                                else comboCellCreditCardNoneForACH.Items.Add(String.Empty);
                                            }
                                            row.Cells.Add(comboCellCreditCardNoneForACH);
                                            if (!rdrSettlement.IsDBNull(11)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(11).ToString("MM/dd/yyyy")) });
                                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                            if (!rdrSettlement.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(12) });
                                            else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                            break;
                                        case "Credit Card":
                                            row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                                            if (!rdrSettlement.IsDBNull(13))
                                            {
                                                for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                                {
                                                    if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                                    else comboCellCreditCard.Items.Add(String.Empty);
                                                }
                                                for (int i = 0; i < comboCellCreditCard.Items.Count; i++)
                                                {
                                                    if (rdrSettlement.GetString(13) == comboCellCreditCard.Items[i].ToString())
                                                        comboCellCreditCard.Value = comboCellCreditCard.Items[i];
                                                }
                                            }
                                            else
                                            {
                                                for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                                {
                                                    if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                                    else comboCellCreditCard.Items.Add(String.Empty);
                                                }
                                                comboCellCreditCard.Value = String.Empty;
                                            }
                                            row.Cells.Add(comboCellCreditCard);
                                            if (!rdrSettlement.IsDBNull(14)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(14).ToString("MM/dd/yyyy")) });
                                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                            if (!rdrSettlement.IsDBNull(15)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(15) });
                                            else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                            break;
                                        default:
                                            row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            DataGridViewComboBoxCell comboCellCreditCardNone = new DataGridViewComboBoxCell();
                                            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                            {
                                                if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNone.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                                else comboCellCreditCardNone.Items.Add(String.Empty);
                                            }
                                            row.Cells.Add(comboCellCreditCardNone);
                                            row.Cells.Add(new CalendarCell { Value = null });
                                            row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                            break;
                                    }
                                }
                                else
                                {

                                    DataGridViewTextBoxCell txtCheckNoCell = new DataGridViewTextBoxCell();
                                    txtCheckNoCell.Value = null;
                                    row.Cells.Add(txtCheckNoCell);
                                    DataGridViewTextBoxCell txtACHNoCell = new DataGridViewTextBoxCell();
                                    txtACHNoCell.Value = null;
                                    row.Cells.Add(txtACHNoCell);
                                    DataGridViewComboBoxCell comboCreditCardCell = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCreditCardCell.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCreditCardCell.Items.Add(String.Empty);
                                    }
                                    row.Cells.Add(comboCreditCardCell);
                                    comboCreditCardCell.ReadOnly = true;
                                    CalendarCell calPaymentDate = new CalendarCell();
                                    calPaymentDate.Value = null;
                                    row.Cells.Add(calPaymentDate);
                                    DataGridViewCheckBoxCell chkReconciledCell = new DataGridViewCheckBoxCell();
                                    chkReconciledCell.Value = false;
                                    row.Cells.Add(chkReconciledCell);
                                }

                                if (!rdrSettlement.IsDBNull(16)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(16).ToString("C") });
                                else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                                if (!rdrSettlement.IsDBNull(17))
                                {
                                    if (dicIneligibleReason.Count > 0)
                                    {
                                        DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                                        for (int i = 0; i < dicIneligibleReason.Count; i++)
                                        {
                                            comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                                        }
                                        comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[rdrSettlement.GetInt32(17)];
                                        row.Cells.Add(comboCellIneligibleReason);
                                    }
                                }
                                else
                                {
                                    if (dicIneligibleReason.Count > 0)
                                    {
                                        DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                                        for (int i = 0; i < dicIneligibleReason.Count; i++)
                                        {
                                            comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                                        }
                                        comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[0];
                                        row.Cells.Add(comboCellIneligibleReason);
                                    }
                                }

                                if (!rdrSettlement.IsDBNull(18)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(18) });
                                else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                                gvSettlementsInMedBill.Rows.Add(row);
                            }
                        }
                        rdrSettlement.Close();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        String strIllnessIdForIncidentSharedTotal = String.Empty;

                        if (txtMedBill_Illness.Text.Trim() != String.Empty)
                        {
                            String IllnessNo = txtMedBill_Illness.Text.Trim();

                            String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

                            SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN5);
                            cmdQueryForIllnessId.CommandType = CommandType.Text;

                            cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", txtMedBill_Illness.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (objIllnessId != null) strIllnessIdForIncidentSharedTotal = objIllnessId.ToString();
                            else
                            {
                                MessageBox.Show("No Illness Id for given Illness No", "Error");
                                return;
                            }
                        }

                        String strIncidentIdForIncidentSharedTotal = String.Empty;

                        if (txtMedBill_Incident.Text.Trim() != String.Empty)
                        {
                            String IncidentNo = txtMedBill_Incident.Text.Trim();

                            String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

                            SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN5);
                            cmdQueryForIncidentId.CommandType = CommandType.Text;

                            cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", txtMedBill_Incident.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (objIncidentId != null) strIncidentIdForIncidentSharedTotal = objIncidentId.ToString();
                            else
                            {
                                MessageBox.Show("No Incident Id for given Incident No", "Error");
                                return;
                            }
                        }

                        // Calculate the Total Shared Amount in Medical Bill

                        if (gvSettlementsInMedBill.Rows.Count > 0)
                        {
                            String strSqlQueryForTotalSharedAmountSettlementInMedBill = "select sum([dbo].[tbl_settlement].[Amount]) from [dbo].[tbl_settlement] " +
                                                                                        "inner join [dbo].[tbl_settlement_type_code] " +
                                                                                        "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                                                        "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillId and " +
                                                                                        "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                                                        "([dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'Member Reimbursement' or " +
                                                                                        "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'CMM Provider Payment' or " +
                                                                                        "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'PR Reimbursement')";

                            SqlCommand cmdQueryForTotalSharedAmountInSettlemetsInMedBill = new SqlCommand(strSqlQueryForTotalSharedAmountSettlementInMedBill, connRN5);
                            cmdQueryForTotalSharedAmountInSettlemetsInMedBill.CommandType = CommandType.Text;

                            cmdQueryForTotalSharedAmountInSettlemetsInMedBill.Parameters.AddWithValue("@MedBillId", txtMedBillNo.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                            Object objTotalSharedAmountSettlementInMedBill = cmdQueryForTotalSharedAmountInSettlemetsInMedBill.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            Decimal TotalSharedAmountSettlement = 0;
                            if (objTotalSharedAmountSettlementInMedBill.ToString() != String.Empty)
                            {
                                TotalSharedAmountSettlement = Decimal.Parse(objTotalSharedAmountSettlementInMedBill.ToString());
                            }

                            String strSqlQueryForMedicalProviderRefund = "select sum([dbo].[tbl_settlement].[Amount]) from [dbo].[tbl_settlement] " +
                                                                         "inner join [dbo].[tbl_settlement_type_code] " +
                                                                         "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                                         "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillId and " +
                                                                         "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                                         "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'Medical Provider Refund'";

                            SqlCommand cmdQueryForMedicalProviderRefund = new SqlCommand(strSqlQueryForMedicalProviderRefund, connRN5);
                            cmdQueryForMedicalProviderRefund.CommandType = CommandType.Text;

                            cmdQueryForMedicalProviderRefund.Parameters.AddWithValue("@MedBillId", txtMedBillNo.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                            Object objMedicalProviderRefund = cmdQueryForMedicalProviderRefund.ExecuteScalar();

                            Decimal MedicalProviderRefund = 0;
                            if (objMedicalProviderRefund.ToString() != String.Empty) MedicalProviderRefund = Decimal.Parse(objMedicalProviderRefund.ToString());

                            TotalSharedAmountSettlement -= MedicalProviderRefund;

                            String strSqlUpdateMedBillForTotalSharedAmount = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[TotalSharedAmount] = @TotalSharedAmount " +
                                                     "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                                                     "[dbo].[tbl_medbill].[IsDeleted] = 0 and " +
                                                     "[dbo].[tbl_medbill].[Illness_Id] = @IllnessId and " +
                                                     "[dbo].[tbl_medbill].[Incident_Id] = @IncidentId and " +
                                                     "[dbo].[tbl_medbill].[Individual_Id] = @IndividualId";

                            SqlCommand cmdUpdateMedBillForTotalSharedAmount = new SqlCommand(strSqlUpdateMedBillForTotalSharedAmount, connRN5);
                            cmdUpdateMedBillForTotalSharedAmount.CommandType = CommandType.Text;

                            cmdUpdateMedBillForTotalSharedAmount.Parameters.AddWithValue("@TotalSharedAmount", TotalSharedAmountSettlement);
                            cmdUpdateMedBillForTotalSharedAmount.Parameters.AddWithValue("@MedBillNo", txtMedBillNo.Text.Trim());
                            cmdUpdateMedBillForTotalSharedAmount.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessIdForIncidentSharedTotal));
                            cmdUpdateMedBillForTotalSharedAmount.Parameters.AddWithValue("@IncidentId", Int32.Parse(strIncidentIdForIncidentSharedTotal));
                            cmdUpdateMedBillForTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            int nMedBillUpdated = cmdUpdateMedBillForTotalSharedAmount.ExecuteNonQuery();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (nMedBillUpdated == 0)
                            {
                                MessageBox.Show("The Medical Bill has not been updated with Total Shared Amount.", "Error");
                                return;
                            }

                            if (strIllnessIdForIncidentSharedTotal != String.Empty &&
                                strIncidentIdForIncidentSharedTotal != String.Empty)
                            {

                                String strSqlQueryForIncidentTotalSharedAmount = "select sum([dbo].[tbl_medbill].[TotalSharedAmount]) from [dbo].[tbl_medbill] " +
                                                     "where [dbo].[tbl_medbill].[IsDeleted] = 0 and " +
                                                     "[dbo].[tbl_medbill].[Illness_Id] = @IllnessId and " +
                                                     "[dbo].[tbl_medbill].[Incident_Id] = @IncidentId and " +
                                                     "[dbo].[tbl_medbill].[Individual_Id] = @IndividualId";

                                SqlCommand cmdQueryForIncidentTotalSharedAmount = new SqlCommand(strSqlQueryForIncidentTotalSharedAmount, connRN5);
                                cmdQueryForIncidentTotalSharedAmount.CommandType = CommandType.Text;

                                cmdQueryForIncidentTotalSharedAmount.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessIdForIncidentSharedTotal));
                                cmdQueryForIncidentTotalSharedAmount.Parameters.AddWithValue("@IncidentId", Int32.Parse(strIncidentIdForIncidentSharedTotal));
                                cmdQueryForIncidentTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                Object objIncidentTotalSharedAmount = cmdQueryForIncidentTotalSharedAmount.ExecuteScalar();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                Decimal IncidentTotalSharedAmount = 0;
                                if (objIncidentTotalSharedAmount.ToString() != String.Empty)
                                {
                                    IncidentTotalSharedAmount = Decimal.Parse(objIncidentTotalSharedAmount.ToString());
                                }
                                else
                                {
                                    MessageBox.Show("No Incident Total Shared Amount", "Error");
                                    return;
                                }

                                String strUpdateIncidentSharedTotal = "update [dbo].[tbl_incident] set [dbo].[tbl_incident].[TotalSharedAmount] = @TotalSharedAmount " +
                                          "where [dbo].[tbl_incident].[IsDeleted] = 0 and " +
                                          "[dbo].[tbl_incident].[Incident_id] = @IncidentId and" +
                                          "[dbo].[tbl_incident].[Illness_id] = @IllnessId and " +
                                          "[dbo].[tbl_incident].[Individual_id] = @IndividualId";

                                SqlCommand cmdUpdateIncidentSharedTotal = new SqlCommand(strUpdateIncidentSharedTotal, connRN5);
                                cmdUpdateIncidentSharedTotal.CommandType = CommandType.Text;

                                cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@TotalSharedAmount", IncidentTotalSharedAmount);
                                cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@IncidentId", Int32.Parse(strIncidentIdForIncidentSharedTotal));
                                cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessIdForIncidentSharedTotal));
                                cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                int nIncidentUpdated = cmdUpdateIncidentSharedTotal.ExecuteNonQuery();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                // check whether nIncidentUpdate is 1 or 3
                                if (nIncidentUpdated == 3)
                                {
                                    String strSqlQueryForIllnessTotalSharedAmount = "select sum([dbo].[tbl_incident].[TotalSharedAmount]) from [dbo].[tbl_incident] " +
                                                   "where [dbo].[tbl_incident].[IsDeleted] = 0 and " +
                                                   "[dbo].[tbl_incident].[Illness_id] = @IllnessId and " +
                                                   "[dbo].[tbl_incident].[Individual_id] = @IndividualId";


                                    SqlCommand cmdQueryForIllnessTotalSharedAmount = new SqlCommand(strSqlQueryForIllnessTotalSharedAmount, connRN5);
                                    cmdQueryForIllnessTotalSharedAmount.CommandType = CommandType.Text;

                                    cmdQueryForIllnessTotalSharedAmount.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessIdForIncidentSharedTotal));
                                    cmdQueryForIllnessTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                    Object objIllnessTotalSharedAmount = cmdQueryForIllnessTotalSharedAmount.ExecuteScalar();
                                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                    Decimal IllnessTotalSharedAmount = 0;
                                    if (objIllnessTotalSharedAmount.ToString() != String.Empty) IllnessTotalSharedAmount = Decimal.Parse(objIllnessTotalSharedAmount.ToString());

                                    String strSqlUpdateIllnessSharedTotal = "update [dbo].[tbl_illness] set [dbo].[tbl_illness].[TotalSharedAmount] = @TotalSharedAmount " +
                                            "where [dbo].[tbl_illness].[IsDeleted] = 0 and " +
                                            "[dbo].[tbl_illness].[Illness_Id] = @IllnessId and " +
                                            "[dbo].[tbl_illness].[Individual_Id] = @IndividualId";

                                    SqlCommand cmdUpdateIllnessSharedTotal = new SqlCommand(strSqlUpdateIllnessSharedTotal, connRN5);
                                    cmdUpdateIllnessSharedTotal.CommandType = CommandType.Text;

                                    cmdUpdateIllnessSharedTotal.Parameters.AddWithValue("@TotalSharedAmount", IllnessTotalSharedAmount);
                                    cmdUpdateIllnessSharedTotal.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessIdForIncidentSharedTotal));
                                    cmdUpdateIllnessSharedTotal.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                    int nIllnessUpdated = cmdUpdateIllnessSharedTotal.ExecuteNonQuery();
                                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                    if (nIllnessUpdated == 1)
                                    {
                                        String strSqlQueryForIndividualTotalSharedAmount = "select sum([dbo].[tbl_illness].[TotalSharedAmount]) from [dbo].[tbl_illness] " +
                                                       "where [dbo].[tbl_illness].[IsDeleted] = 0 and " +
                                                       "[dbo].[tbl_illness].[Individual_Id] = @IndividualId";

                                        SqlCommand cmdQueryForIndividualTotalSharedAmount = new SqlCommand(strSqlQueryForIndividualTotalSharedAmount, connRN5);
                                        cmdQueryForIndividualTotalSharedAmount.CommandType = CommandType.Text;

                                        cmdQueryForIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                        if (connRN5.State != ConnectionState.Closed)
                                        {
                                            connRN5.Close();
                                            connRN5.Open();
                                        }
                                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                        Object objIndividualTotalSharedAmount = cmdQueryForIndividualTotalSharedAmount.ExecuteScalar();
                                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                        Decimal IndividualTotalSharedAmount = 0;
                                        if (objIndividualTotalSharedAmount.ToString() != String.Empty) IndividualTotalSharedAmount = Decimal.Parse(objIndividualTotalSharedAmount.ToString());


                                        String strSqlUpdateIndividualTotalSharedAmount = "update [dbo].[contact] set [dbo].[contact].[c4g_Total_Shared_Amount__c] = @IndividualTotalSharedAmount " +
                                                                                         "where [dbo].[contact].[IsDeleted] = 0 and " +
                                                                                         "[dbo].[contact].[Individual_ID__c] = @IndividualId";

                                        SqlCommand cmdUpdateIndividualTotalSharedAmount = new SqlCommand(strSqlUpdateIndividualTotalSharedAmount, connSalesforce2);
                                        cmdUpdateIndividualTotalSharedAmount.CommandType = CommandType.Text;

                                        cmdUpdateIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualTotalSharedAmount", IndividualTotalSharedAmount);
                                        cmdUpdateIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                        if (connSalesforce2.State == ConnectionState.Open)
                                        {
                                            connSalesforce2.Close();
                                            connSalesforce2.Open();
                                        }
                                        else if (connSalesforce2.State == ConnectionState.Closed) connSalesforce2.Open();

                                        int nIndividualUpdated = cmdUpdateIndividualTotalSharedAmount.ExecuteNonQuery();
                                        if (connSalesforce2.State == ConnectionState.Open) connSalesforce2.Close();

                                        if (nIndividualUpdated == 1) txtTotalSharedAmount.Text = IndividualTotalSharedAmount.ToString("C");

                                        if (nIndividualUpdated != 1)
                                        {
                                            MessageBox.Show("Individual Total Shared Amount has not been updated.", "Alert");
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        MessageBox.Show("Illness total Shared Amount has not been updated.", "Alert");
                                        return;
                                    }
                                }
                                else
                                {
                                    MessageBox.Show("Incident Total Shared Amount has not been updated.", "Alert");
                                    return;
                                }
                            }
                        }

                        String strSqlQueryForTotalMedBillAmountForIndividualId = "select sum([dbo].[tbl_medbill].[BillAmount]) from [dbo].[tbl_medbill] " +
                                                                                    "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                                                    "[dbo].[tbl_medbill].[IsDeleted] = 0";

                        SqlCommand cmdQueryForTotalMedBillAmountForIndividualId = new SqlCommand(strSqlQueryForTotalMedBillAmountForIndividualId, connRN5);
                        cmdQueryForTotalMedBillAmountForIndividualId.CommandType = CommandType.Text;

                        cmdQueryForTotalMedBillAmountForIndividualId.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objTotalMedBillAmountForIndividualId = cmdQueryForTotalMedBillAmountForIndividualId.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        Decimal TotalMedBillAmountForIndividualId = 0;
                        if (objTotalMedBillAmountForIndividualId != null) TotalMedBillAmountForIndividualId = Decimal.Parse(objTotalMedBillAmountForIndividualId.ToString());

                        String strSqlUpdateIndividualTotalMedBillAmount = "update [dbo].[contact] set [dbo].[contact].[c4g_Incidents_Total_Amount__c] = @MedBillTotalForIndividual " +
                                                                            "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                        SqlCommand cmdUpdateIndividualTotalMedBillAmount = new SqlCommand(strSqlUpdateIndividualTotalMedBillAmount, connSalesforce2);
                        cmdUpdateIndividualTotalMedBillAmount.CommandType = CommandType.Text;

                        cmdUpdateIndividualTotalMedBillAmount.Parameters.AddWithValue("@MedBillTotalForIndividual", TotalMedBillAmountForIndividualId);
                        cmdUpdateIndividualTotalMedBillAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                        if (connSalesforce2.State == ConnectionState.Open)
                        {
                            connSalesforce2.Close();
                            connSalesforce2.Open();
                        }
                        else if (connSalesforce2.State == ConnectionState.Closed) connSalesforce2.Open();

                        int nIndividualTotalMedBillUpdated = cmdUpdateIndividualTotalMedBillAmount.ExecuteNonQuery();
                        if (connSalesforce2.State == ConnectionState.Open) connSalesforce2.Close();

                        if (nIndividualTotalMedBillUpdated == 1) txtTotalMedBillAmount.Text = TotalMedBillAmountForIndividualId.ToString("C");

                        if (nIndividualTotalMedBillUpdated != 1)
                        {
                            MessageBox.Show("The individual Medical Bill Amount Total has not been updated.", "Error");
                            return;
                        }

                    }
                    else if (nRowInserted == 0)
                    {
                        MessageBox.Show("The Medical Bill has not been saved.", "Error");
                        return;
                    }

                    bIsModified = false;

                }
                else if (ResultMedBillNo.ToString() == strMedBillNo)
                {
                    String strIndividualId = String.Empty;
                    String strCaseId = String.Empty;
                    String strBillStatus = String.Empty;
                    String strIllnessId = String.Empty;
                    String strIncidentId = String.Empty;

                    String MedBillNo = txtMedBillNo.Text.Trim();
                    String IndividualId = txtIndividualIDMedBill.Text.Trim();
                    strIndividualId = IndividualId;

                    if (txtMedBill_Illness.Text.Trim() != String.Empty)
                    {
                        String IllnessNo = txtMedBill_Illness.Text.Trim();

                        String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

                        SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN5);
                        cmdQueryForIllnessId.CommandType = CommandType.Text;

                        cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", IllnessNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (objIllnessId != null) strIllnessId = objIllnessId.ToString();
                        else
                        {
                            MessageBox.Show("No Illness Id for given Illness No", "Error");
                            return;
                        }
                    }

                    if (txtMedBill_Incident.Text.Trim() != String.Empty)
                    {
                        String IncidentNo = txtMedBill_Incident.Text.Trim();

                        String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

                        SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN5);
                        cmdQueryForIncidentId.CommandType = CommandType.Text;

                        cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (objIncidentId != null) strIncidentId = objIncidentId.ToString();
                        else
                        {
                            MessageBox.Show("No Incident Id for given Incident No", "Error");
                            return;
                        }
                    }

                    // Get medical provider id
                    //String strSqlQueryForMedicalProviderId = "select [dbo].[tbl_MedicalProvider].[ID] from [dbo].[tbl_MedicalProvider] where [dbo].[tbl_MedicalProvider].[Name] = @MedicalProviderName";
                    String strSqlQueryForMedicalProviderId = "select [dbo].[account].[Id] from [dbo].[account] where [dbo].[account].[Name] = @MedicalProviderName";

                    SqlCommand cmdQueryForMedicalProviderId = new SqlCommand(strSqlQueryForMedicalProviderId, connSalesforce2);
                    cmdQueryForMedicalProviderId.CommandType = CommandType.Text;

                    cmdQueryForMedicalProviderId.Parameters.AddWithValue("@MedicalProviderName", txtMedicalProvider.Text.Trim());

                    if (connSalesforce2.State != ConnectionState.Closed)
                    {
                        connSalesforce2.Close();
                        connSalesforce2.Open();
                    }
                    else if (connSalesforce2.State == ConnectionState.Closed) connSalesforce2.Open();
                    Object objMedicalProviderId = cmdQueryForMedicalProviderId.ExecuteScalar();
                    if (connSalesforce2.State == ConnectionState.Open) connSalesforce2.Close();

                    String MedicalProviderId = String.Empty;
                    if (objMedicalProviderId != null) MedicalProviderId = objMedicalProviderId.ToString();
                    else
                    {
                        MessageBox.Show("No Medical Provider Id for Medical Provider name: " + txtMedicalProvider.Text.Trim(), "Error", MessageBoxButtons.OK);
                        return;
                    }

                    int nPatientType = 0;   // default outpatient

                    if (rbOutpatient.Checked) nPatientType = 0;
                    else if (rbInpatient.Checked) nPatientType = 1;

                    String strNote = String.Empty;

                    if (comboMedBillType.SelectedItem.ToString() == "Medical Bill")
                    {
                        strNote = txtMedBillNote.Text.Trim();
                    }
                    else if (comboMedBillType.SelectedItem.ToString() == "Prescription")
                    {
                        strNote = txtPrescriptionNote.Text.Trim();
                    }
                    else if (comboMedBillType.SelectedItem.ToString() == "Physical Therapy")
                    {
                        strNote = txtPhysicalTherapyRxNote.Text.Trim();
                    }

                    // Update the Medical Bill
                    String strSqlUpdateMedBill = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[LastModifiedDate] = @NewLastModifiedDate, " +
                                                 "[dbo].[tbl_medbill].[LastModifiedById] = @NewLastModifiedById, " +
                                                 "[dbo].[tbl_medbill].[Case_Id] = @NewCaseId, [dbo].[tbl_medbill].[Incident_Id] = @NewIncidentId, " +
                                                 "[dbo].[tbl_medbill].[Illness_Id] = @NewIllnessId, " +
                                                 "[dbo].[tbl_medbill].[BillAmount] = @NewBillAmount, [dbo].[tbl_medbill].[MedBillType_Id] = @NewMedBillType_Id, " +
                                                 "[dbo].[tbl_medbill].[BillStatus] = @NewMedBillStatus, " +
                                                 "[dbo].[tbl_medbill].[BillClosed] = @NewMedBillClosed, " +
                                                 "[dbo].[tbl_medbill].[SettlementTotal] = @NewSettlementTotal, [dbo].[tbl_medbill].[Balance] = @NewBalance, " +
                                                 "[dbo].[tbl_medbill].[BillDate] = @NewBillDate, [dbo].[tbl_medbill].[DueDate] = @NewDueDate, [dbo].[tbl_medbill].[TotalSharedAmount] = @NewTotalSharedAmount, " +
                                                 "[dbo].[tbl_medbill].[Guarantor] = @NewGuarantor, " +
                                                 "[dbo].[tbl_medbill].[MedicalProvider_Id] = @NewMedicalProviderId, " +
                                                 "[dbo].[tbl_medbill].[Account_At_Provider] = @NewAccountAtProvider, " +
                                                 "[dbo].[tbl_medbill].[ProviderPhoneNumber] = @NewProviderPhoneNo, " +
                                                 "[dbo].[tbl_medbill].[ProviderContactPerson] = @NewProviderContactPerson, " +
                                                 "[dbo].[tbl_medbill].[ProposalLetterSentDate] = @NewProposalLetterSentDate, " +
                                                 "[dbo].[tbl_medbill].[HIPPASentDate] = @NewHIPPASentDate, " +
                                                 "[dbo].[tbl_medbill].[MedicalRecordDate] = @NewMedicalRecordDate, " +
                                                 "[dbo].[tbl_medbill].[PrescriptionDrugName] = @NewPrescriptionDrugName, [dbo].[tbl_medbill].[PrescriptionNo] = @NewPrescriptionNo, " +
                                                 "[dbo].[tbl_medbill].[PrescriptionDescription] = @NewPrescriptionDescription, " +
                                                 "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy] = @NewTotalNumberOfPhysicalTherapy, " +
                                                 "[dbo].[tbl_medbill].[PatientTypeId] = @NewPatientTypeId, " +
                                                 "[dbo].[tbl_medbill].[Note] = @Note, " +
                                                 "[dbo].[tbl_medbill].[WellBeingCareTotal] = @NewWellBeingCareTotal, [dbo].[tbl_medbill].[WellBeingCare] = @NewWellBeingCare, " +
                                                 "[dbo].[tbl_medbill].[IneligibleReason] = @NewIneligibleReason, [dbo].[tbl_medbill].[PendingReason] = @NewPendingReason " +
                                                 "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and [dbo].[tbl_medbill].[Contact_Id] = @IndividualId";

                    SqlCommand cmdUpdateMedBill = new SqlCommand(strSqlUpdateMedBill, connRN5);
                    cmdUpdateMedBill.CommandType = CommandType.Text;

                    cmdUpdateMedBill.Parameters.AddWithValue("@NewLastModifiedDate", DateTime.Today.ToString("MM/dd/yyyy"));
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewLastModifiedById", nLoggedUserId);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewCaseId", txtMedBill_CaseNo.Text.Trim());
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewIncidentId", strIncidentId);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewIllnessId", strIllnessId);
                    Decimal BillAmount = 0;
                    Decimal BillAmountResult = 0;

                    if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out BillAmountResult))
                    {
                        BillAmount = BillAmountResult;
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewBillAmount", BillAmount);
                    }
                    else
                    {
                        MessageBox.Show("Bill Amount is invalid.", "Error");
                        return;
                    }
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewMedBillType_Id", comboMedBillType.SelectedIndex + 1);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewMedBillStatus", comboMedBillStatus.SelectedIndex);
                    if (cbMedBillClosed.SelectedIndex == 0) cmdUpdateMedBill.Parameters.AddWithValue("@NewMedBillClosed", 0);
                    else if (cbMedBillClosed.SelectedIndex == 1) cmdUpdateMedBill.Parameters.AddWithValue("@NewMedBillClosed", 1);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewSettlementTotal", 0);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewBalance", 0);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewBillDate", dtpBillDate.Value);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewDueDate", dtpDueDate.Value);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalSharedAmount", 0);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewGuarantor", txtMedBillGuarantor.Text.Trim());
                    Boolean bMedicalProvider = false;
                    foreach (MedicalProviderInfo info in lstMedicalProvider)
                    {
                        if (info.Name.Trim() == txtMedicalProvider.Text.Trim())
                        {
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewMedicalProviderId", info.ID);
                            bMedicalProvider = true;
                            break;
                        }
                    }
                    if (!bMedicalProvider)
                    {
                        MessageBox.Show("Medical Provider name is invalid.", "Error");
                        return;
                    }

                    cmdUpdateMedBill.Parameters.AddWithValue("@NewAccountAtProvider", txtMedBillAccountNoAtProvider.Text.Trim());
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewProviderPhoneNo", txtMedProviderPhoneNo.Text.Trim());
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewProviderContactPerson", txtProviderContactPerson.Text.Trim());
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewProposalLetterSentDate", dtpProposalLetterSentDate.Value);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewHIPPASentDate", dtpHippaSentDate.Value);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewMedicalRecordDate", dtpMedicalRecordDate.Value);

                    if (comboMedBillType.SelectedIndex == 0)        // Medical Bill Type - Medical Bill
                    {
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", DBNull.Value);

                        cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", DBNull.Value);

                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", nPatientType);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", comboPendingReason.SelectedIndex);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", comboIneligibleReason.SelectedIndex);

                        cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);

                    }
                    if (comboMedBillType.SelectedIndex == 1)        // Medical Bill Type - Prescription
                    {
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", DBNull.Value);

                        cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", DBNull.Value);

                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", txtPrescriptionName.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", txtNumberOfMedication.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", txtPrescriptionDescription.Text.Trim());

                        cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);
                    }
                    if (comboMedBillType.SelectedIndex == 2)        // Medical Bill Type - Physical Therapy
                    {
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", DBNull.Value);

                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", DBNull.Value);

                        int nNumberOfPhysicalTherapy = 0;
                        short NumPhysicalTherapyResult = 0;
                        if (Int16.TryParse(txtNumPhysicalTherapy.Text.Trim(), out NumPhysicalTherapyResult))
                        {
                            nNumberOfPhysicalTherapy = NumPhysicalTherapyResult;
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", nNumberOfPhysicalTherapy);
                        }
                        else
                        {
                            MessageBox.Show("Please enter a positive integer in Number of Physical Therapy Text Box.", "Error");
                            return;
                        }

                        cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);
                    }


                    cmdUpdateMedBill.Parameters.AddWithValue("@NewWellBeingCareTotal", 0);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewWellBeingCare", 0);
                    cmdUpdateMedBill.Parameters.AddWithValue("@MedBillNo", MedBillNo);
                    cmdUpdateMedBill.Parameters.AddWithValue("@IndividualId", IndividualId);

                    if (connRN5.State != ConnectionState.Closed)
                    {
                        connRN5.Close();
                        connRN5.Open();
                    }
                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    int nAffectedRow = cmdUpdateMedBill.ExecuteNonQuery();
                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                    if (nAffectedRow == 1)
                    {
                        // Delete MedBill in use
                        String MedBillInUse = txtMedBillNo.Text.Trim();
                        String strSqlDeleteMedBillInUse = "delete from [dbo].[tbl_MedBillInUse] " +
                                                          "where [dbo].[tbl_MedBillInUse].[BillNo] = @BillNo and [dbo].[tbl_MedBillInUse].[EditingStaff] = @ModifyingStaff";

                        //MedBillNo
                        SqlCommand cmdDeleteMedBillInUse = new SqlCommand(strSqlDeleteMedBillInUse, connRN5);
                        cmdDeleteMedBillInUse.CommandType = CommandType.Text;

                        cmdDeleteMedBillInUse.Parameters.AddWithValue("@BillNo", MedBillInUse);
                        cmdDeleteMedBillInUse.Parameters.AddWithValue("@ModifyingStaff", nLoggedUserId);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        int nMedBillInUseDeleted = cmdDeleteMedBillInUse.ExecuteNonQuery();
                        //if (nMedBillInUseDeleted == 0)
                        //{
                        //    MessageBox.Show("Medical Bill in use: " + MedBillInUse + " has not been deleted from tbl_MedBillInUse.", "Error");
                        //}
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        // handle Well Being Care case
                        String strNewMedBillNo = String.Empty;

                        if (txtMedBillNo.Text.Trim() != String.Empty) strNewMedBillNo = txtMedBillNo.Text.Trim();

                        Boolean bWellBeingCare = true;
                        Boolean bWellBeingCareEligible = true;

                        String strSqlQueryForICD10CodeForWellBeingCare = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_illness].[ICD_10_Id] from [dbo].[tbl_medbill] " +
                                                                         "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                                         "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                                                                         "[dbo].[tbl_medbill].[Individual_Id] = @IndividualId";

                        SqlCommand cmdQueryForICD10CodeForWellBeingCare = new SqlCommand(strSqlQueryForICD10CodeForWellBeingCare, connRN5);
                        cmdQueryForICD10CodeForWellBeingCare.CommandType = CommandType.Text;

                        cmdQueryForICD10CodeForWellBeingCare.Parameters.AddWithValue("@MedBillNo", strNewMedBillNo);
                        cmdQueryForICD10CodeForWellBeingCare.Parameters.AddWithValue("@IndividualId", strIndividualId);

                        String ICD10Code = String.Empty;

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                        SqlDataReader rdrICD10CodeForWellBeingCare = cmdQueryForICD10CodeForWellBeingCare.ExecuteReader();
                        if (rdrICD10CodeForWellBeingCare.HasRows)
                        {
                            rdrICD10CodeForWellBeingCare.Read();
                            if (!rdrICD10CodeForWellBeingCare.IsDBNull(1)) ICD10Code = rdrICD10CodeForWellBeingCare.GetString(1);
                        }
                        rdrICD10CodeForWellBeingCare.Close();
                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                        if (ICD10Code != "Z00.00" && ICD10Code != "Z00.012") bWellBeingCare = false;

                        if (ICD10Code == "Z00.00" || ICD10Code == "Z00.012")
                        {

                            String strSqlQueryForProgramForIndividual = "select [dbo].[contact].[Individual_ID__c], [dbo].[program].[Name] from [dbo].[contact] " +
                                                                        "inner join [dbo].[program] on [dbo].[contact].[c4g_Plan__c] = [dbo].[program].[ID] " +
                                                                        "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                            SqlCommand cmdQueryForProgramForIndividual = new SqlCommand(strSqlQueryForProgramForIndividual, connSalesforce2);
                            cmdQueryForProgramForIndividual.CommandType = CommandType.Text;

                            cmdQueryForProgramForIndividual.Parameters.AddWithValue("@IndividualId", strIndividualId);

                            if (connSalesforce2.State != ConnectionState.Closed)
                            {
                                connSalesforce2.Close();
                                connSalesforce2.Open();
                            }
                            else if (connSalesforce2.State == ConnectionState.Closed) connSalesforce2.Open();

                            String ProgramName = String.Empty;

                            SqlDataReader rdrProgramForIndividual = cmdQueryForProgramForIndividual.ExecuteReader();
                            if (rdrProgramForIndividual.HasRows)
                            {
                                rdrProgramForIndividual.Read();
                                if (!rdrProgramForIndividual.IsDBNull(1)) ProgramName = rdrProgramForIndividual.GetString(1);
                            }
                            rdrProgramForIndividual.Close();
                            if (connSalesforce2.State == ConnectionState.Open) connSalesforce2.Close();

                            if (ProgramName == "Gold Plus" || ProgramName == "Gold Medi-I" || ProgramName == "Gold Medi-II")
                            {
                                String strSqlQueryForIndividualStartDate = "select [dbo].[contact].[Membership_IND_Start_date__c] from [dbo].[contact] " +
                                                                           "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                                SqlCommand cmdQueryForIndividualStartDate = new SqlCommand(strSqlQueryForIndividualStartDate, connSalesforce2);
                                cmdQueryForIndividualStartDate.CommandType = CommandType.Text;

                                cmdQueryForIndividualStartDate.Parameters.AddWithValue("@IndividualId", strIndividualId);

                                if (connSalesforce2.State != ConnectionState.Closed)
                                {
                                    connSalesforce2.Close();
                                    connSalesforce2.Open();
                                }
                                else if (connSalesforce2.State == ConnectionState.Closed) connSalesforce2.Open();

                                Object objMembershipIndStartDate = cmdQueryForIndividualStartDate.ExecuteScalar();

                                if (connSalesforce2.State == ConnectionState.Open) connSalesforce2.Close();

                                DateTime MembershipIndStartDate = new DateTime();
                                if (objMembershipIndStartDate != null)
                                {
                                    MembershipIndStartDate = DateTime.Parse(objMembershipIndStartDate.ToString());
                                }

                                if (dtpBillDate.Value > MembershipIndStartDate.AddMonths(6))
                                {

                                    // this query has to be modified - no Aniv_Date on [dbo].[contact] table
                                    //String strSqlQueryForAnivDateForIndividualId = "select [dbo].[contact].[Aniv_Date], [dbo].[contact].[Membership_IND_Start_date__c] from [dbo].[contact] " +
                                    //                                               "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                                    //SqlCommand cmdQueryForAnivDateForIndividualId = new SqlCommand(strSqlQueryForAnivDateForIndividualId, connRN5);

                                    //cmdQueryForAnivDateForIndividualId.CommandType = CommandType.Text;

                                    //cmdQueryForAnivDateForIndividualId.Parameters.AddWithValue("@IndividualId", strIncidentId);


                                    //if (connSalesforce.State != ConnectionState.Closed)
                                    //{
                                    //    connSalesforce.Close();
                                    //    connSalesforce.Open();
                                    //}
                                    //else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                                    //DateTime? AnivDate = null;
                                    //DateTime? StartDate = null;

                                    //SqlDataReader rdrAnivDate = cmdQueryForAnivDateForIndividualId.ExecuteReader();
                                    //if (rdrAnivDate.HasRows)
                                    //{
                                    //    rdrAnivDate.Read();
                                    //    if (!rdrAnivDate.IsDBNull(0)) AnivDate = rdrAnivDate.GetDateTime(0);
                                    //    if (!rdrAnivDate.IsDBNull(1)) StartDate = rdrAnivDate.GetDateTime(1);
                                    //}
                                    //rdrAnivDate.Close();
                                    //if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                                    DateTime IndividualAnivDate = DateTime.Parse(txtAnivDate.Text);
                                    //if (AnivDate != null) IndividualAnivDate = AnivDate.Value;
                                    //else IndividualAnivDate = StartDate.Value;



                                    int nAnivYear = dtpBillDate.Value.Year;

                                    DateTime IndividualThisAnivDate = new DateTime(nAnivYear, IndividualAnivDate.Month, 1);
                                    DateTime IndividualLastAnivDate = new DateTime(nAnivYear - 1, IndividualAnivDate.Month, 1);

                                    String strSqlQueryForWellBeingIncidentsPerAnivYear = "select count([dbo].[tbl_incident].[IncidentNo]) from [dbo].[tbl_incident] " +
                                                                                         "inner join [dbo].[tbl_illness] on [dbo].[tbl_incident].[Illness_id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                                                         "inner join [dbo].[tbl_medbill] on [dbo].[tbl_incident].[Incident_id] = [dbo].[tbl_medbill].[Incident_Id] " +
                                                                                         "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                                                         "([dbo].[tbl_illness].[ICD_10_Id] = 'Z00.00' or [dbo].[tbl_illness].[ICD_10_Id] = 'Z00.012') and " +
                                                                                         "[dbo].[tbl_medbill].[BillDate] >= @LastAnivDate and " +
                                                                                         "[dbo].[tbl_medbill].[BillDate] < @ThisAnivDate";

                                    SqlCommand cmdQueryForWellBeingIncidentsPerAnivYear = new SqlCommand(strSqlQueryForWellBeingIncidentsPerAnivYear, connRN5);
                                    cmdQueryForWellBeingIncidentsPerAnivYear.CommandType = CommandType.Text;

                                    cmdQueryForWellBeingIncidentsPerAnivYear.Parameters.AddWithValue("@IndividualId", strIndividualId);
                                    cmdQueryForWellBeingIncidentsPerAnivYear.Parameters.AddWithValue("@LastAnivDate", IndividualLastAnivDate);
                                    cmdQueryForWellBeingIncidentsPerAnivYear.Parameters.AddWithValue("@ThisAnivDate", IndividualThisAnivDate);

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                    Object objIncidentCount = cmdQueryForWellBeingIncidentsPerAnivYear.ExecuteScalar();
                                    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                    int nIncidentCount = Int32.Parse(objIncidentCount.ToString());

                                    if (nIncidentCount == 1)
                                    {
                                        String strSqlQueryForWellBeingIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] " +
                                                                                   "inner join [dbo].[tbl_illness] on [dbo].[tbl_incident].[Illness_id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                                                   "inner join [dbo].[tbl_medbill] on [dbo].[tbl_incident].[Incident_id] = [dbo].[tbl_medbill].[Incident_Id] " +
                                                                                   "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                                                   "([dbo].[tbl_illness].[ICD_10_Id] = 'Z00.00' or [dbo].[tbl_illness].[ICD_10_Id] = 'Z00.012') and " +
                                                                                   "[dbo].[tbl_medbill].[BillDate] >= @LastAnivDate and " +
                                                                                   "[dbo].[tbl_medbill].[BillDate] < @ThisAnivDate";

                                        SqlCommand cmdQueryForWellBeingIncidentId = new SqlCommand(strSqlQueryForWellBeingIncidentId, connRN5);
                                        cmdQueryForWellBeingIncidentId.CommandType = CommandType.Text;

                                        cmdQueryForWellBeingIncidentId.Parameters.AddWithValue("@IndividualId", strIndividualId);
                                        cmdQueryForWellBeingIncidentId.Parameters.AddWithValue("@LastAnivDate", IndividualLastAnivDate);
                                        cmdQueryForWellBeingIncidentId.Parameters.AddWithValue("@ThisAnivDate", IndividualThisAnivDate);

                                        if (connRN5.State != ConnectionState.Closed)
                                        {
                                            connRN5.Close();
                                            connRN5.Open();
                                        }
                                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                        Object objWellBeingIncidentId = cmdQueryForWellBeingIncidentId.ExecuteScalar();
                                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                        if (objWellBeingIncidentId != null)
                                        {
                                            int nWellBeingIncidentId = Int32.Parse(objWellBeingIncidentId.ToString());

                                            String strSqlQueryForWellBeingTotalForIncident = "select sum([dbo].[tbl_medbill].[TotalSharedAmount]) from [dbo].[tbl_medbill] " +
                                                                                             "where [dbo].[tbl_medbill].[Incident_Id] = @IncidentId";

                                            SqlCommand cmdQueryForWellBeingTotalForIncident = new SqlCommand(strSqlQueryForWellBeingTotalForIncident, connRN5);
                                            cmdQueryForWellBeingTotalForIncident.CommandType = CommandType.Text;

                                            cmdQueryForWellBeingTotalForIncident.Parameters.AddWithValue("@IncidentId", nWellBeingIncidentId);

                                            if (connRN5.State != ConnectionState.Closed)
                                            {
                                                connRN5.Close();
                                                connRN5.Open();
                                            }
                                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                            Object objWellBeingTotalForIncident = cmdQueryForWellBeingTotalForIncident.ExecuteScalar();
                                            if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                            Decimal WellBeingTotalForIncident = Decimal.Parse(objWellBeingTotalForIncident.ToString());

                                            if (WellBeingTotalForIncident > 500)
                                            {
                                                // Set the well being care med bill ineligible strNewMedBillNo
                                                String strSqlUpdateMedBillWellBeingCareIneligible = "update [dbo].[tbl_medbill] set [dbo].[medbill].[BillStatus] = 3, " +
                                                                                                    "[dbo].[tbl_medbill].[WellBeingCare] = 0 " +
                                                                                                    "where [dbo].[tbl_medbill].[BillNo] = @WellBeingCareMedBill";

                                                SqlCommand cmdUpdateMedBillWellBeingCareIneligible = new SqlCommand(strSqlUpdateMedBillWellBeingCareIneligible, connRN5);
                                                cmdUpdateMedBillWellBeingCareIneligible.CommandType = CommandType.Text;

                                                cmdUpdateMedBillWellBeingCareIneligible.Parameters.AddWithValue("@WellBeingCareMedBill", strNewMedBillNo);

                                                if (connRN5.State != ConnectionState.Closed)
                                                {
                                                    connRN5.Close();
                                                    connRN5.Open();
                                                }
                                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                                int nWellBeingMedBillUpdated = cmdUpdateMedBillWellBeingCareIneligible.ExecuteNonQuery();

                                                if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                                if (nWellBeingMedBillUpdated == 0)
                                                {
                                                    MessageBox.Show("The well being med bill is not updated.", "Error");
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                // set the well being care med bill eligible
                                                String strSqlUpdateMedBillWellBeingCareEligible = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[BillStatus] = 2, " +
                                                                                                  "[dbo].[tbl_medbill].[WellBeingCare] = 1 " +
                                                                                                  "where [dbo].[tbl_medbill].[BillNo] = @WellBeingCareMedBill";

                                                SqlCommand cmdUpdateMedBillWellBeingCareEligible = new SqlCommand(strSqlUpdateMedBillWellBeingCareEligible, connRN5);
                                                cmdUpdateMedBillWellBeingCareEligible.CommandType = CommandType.Text;

                                                cmdUpdateMedBillWellBeingCareEligible.Parameters.AddWithValue("@WellBeingCareMedBill", strNewMedBillNo);

                                                if (connRN5.State != ConnectionState.Closed)
                                                {
                                                    connRN5.Close();
                                                    connRN5.Open();
                                                }
                                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                                int nWellBeingMedBillUpdated = cmdUpdateMedBillWellBeingCareEligible.ExecuteNonQuery();

                                                if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                                if (nWellBeingMedBillUpdated == 0)
                                                {
                                                    MessageBox.Show("The well being med bill is not updated.", "Error");
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                    else if (nIncidentCount > 1)
                                    {
                                        // Ineligible for Well Being Care
                                        String strSqlUpdateMedBillWellBeingCareIneligible = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[BillStatus] = 3, " +
                                                                                            "[dbo].[tbl_medbill].[WellBeingCare] = 0 " +
                                                                                            "where [dbo].[tbl_medbill].[BillNo] = @WellBeingCareMedBill";

                                        SqlCommand cmdUpdateMedBillWellBeingCareIneligible = new SqlCommand(strSqlUpdateMedBillWellBeingCareIneligible, connRN5);
                                        cmdUpdateMedBillWellBeingCareIneligible.CommandType = CommandType.Text;

                                        cmdUpdateMedBillWellBeingCareIneligible.Parameters.AddWithValue("@WellBeingCareMedBill", strNewMedBillNo);

                                        if (connRN5.State != ConnectionState.Closed)
                                        {
                                            connRN5.Close();
                                            connRN5.Open();
                                        }
                                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                        int nWellBeingMedBillUpdated = cmdUpdateMedBillWellBeingCareIneligible.ExecuteNonQuery();
                                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                        if (nWellBeingMedBillUpdated == 0)
                                        {
                                            MessageBox.Show("The well being med bill is not updated.", "Error");
                                            return;
                                        }
                                    }
                                }
                            }
                        }

                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        if (gvSettlementsInMedBill.Rows.Count > 0)
                        {
                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value == null)
                                {
                                    MessageBox.Show("You have to select a Settlement Type.", "Alert");
                                    return;
                                }

                                Decimal result, SettlementAmount;
                                if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) SettlementAmount = result;
                                else
                                {
                                    MessageBox.Show("You have to enter decimal value in Settlement Amount field in Settlement " + gvSettlementsInMedBill[1, i]?.Value?.ToString(), "Alert");
                                    return;
                                }

                                result = 0;
                                Decimal PersonalResponsibilityAmount = 0;

                                if ((gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount") ||
                                    (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount") ||
                                    (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment"))
                                {
                                    if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value != null)
                                    {
                                        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) PersonalResponsibilityAmount = result;
                                        else
                                        {
                                            MessageBox.Show("Invalid Personal Responsibility.", "Error");
                                            return;
                                        }
                                    }
                                }

                                result = 0;
                                Decimal AllowedAmount = 0;
                                if (gvSettlementsInMedBill["AllowedAmount", i]?.Value?.ToString() != null)
                                {
                                    if (Decimal.TryParse(gvSettlementsInMedBill["AllowedAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) AllowedAmount = result;
                                    else
                                    {
                                        MessageBox.Show("You have to enter decimal value in Allowed Amount field in Settlement " + gvSettlementsInMedBill[1, i]?.Value?.ToString(), "Alert");
                                        return;
                                    }
                                }
                            }

                            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            Decimal MedBillAmount = Decimal.Parse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"));
                            Decimal SettlementAmountTotal = 0;

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                Decimal result = 0;
                                Decimal SettlementAmount = 0;
                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Provider Payment" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Reimbursement" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Ineligible")
                                {
                                    if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                                    {
                                        SettlementAmount = result;
                                        SettlementAmountTotal += SettlementAmount;
                                        if (SettlementAmountTotal > MedBillAmount)
                                        {
                                            MessageBox.Show("The total of settlement amount exceeds medical bill amount.");
                                            return;
                                        }
                                    }
                                }
                            }

                            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            Boolean bError = false;

                            String strSqlQueryForSettlementType = "select [dbo].[tbl_settlement_type_code].[SettlementTypeCode], [dbo].[tbl_settlement_type_code].[SettlementTypeValue] " +
                                        "from [dbo].[tbl_settlement_type_code]";

                            SqlCommand cmdQueryForSettlementType = new SqlCommand(strSqlQueryForSettlementType, connRN5);
                            cmdQueryForSettlementType.CommandType = CommandType.Text;

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            SqlDataReader rdrSettlementType = cmdQueryForSettlementType.ExecuteReader();
                            lstSettlementType.Clear();
                            if (rdrSettlementType.HasRows)
                            {
                                while (rdrSettlementType.Read())
                                {
                                    if (rdrSettlementType.GetInt16(0) > 0)
                                        lstSettlementType.Add(new SettlementTypeInfo { SettlementTypeCode = rdrSettlementType.GetInt16(0), SettlementTypeValue = rdrSettlementType.GetString(1) });
                                }
                            }
                            rdrSettlementType.Close();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                String SettlementName = gvSettlementsInMedBill["SettlementName", i].Value.ToString();

                                // Check whether or not the settlement is already in data base
                                String strSqlQueryForSettlementName = "select [dbo].[tbl_settlement].[Name] from [dbo].[tbl_settlement] where [dbo].[tbl_settlement].[Name] = @Settlement";

                                SqlCommand cmdQueryForSettlementName = new SqlCommand(strSqlQueryForSettlementName, connRN5);
                                cmdQueryForSettlementName.CommandType = CommandType.Text;

                                cmdQueryForSettlementName.Parameters.AddWithValue("@Settlement", SettlementName);

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                Object objResultSettlementName = cmdQueryForSettlementName.ExecuteScalar();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                if (objResultSettlementName == null)   // new settlement: save the settlement by using insert sql statement
                                {

                                    String strSqlCreateNewSettlement = "insert into [dbo].[tbl_settlement] (IsDeleted, Name, CreateDate, CreateByID, LastModifiedDate, LastModifiedByID, SystemModifiedStamp, " +
                                                                        "LastActivityDate, LastViewedDate, MedicalBillID, " +
                                                                        "SettlementType, Amount, PersonalResponsibilityCredit, CMMPaymentMethod, " +
                                                                        "CheckNo, CheckDate, CheckReconciled, ACH_Number, ACH_Date, ACH_Reconciled, CMMCreditCard, CMMCreditCardPaidDate, CC_Reconciled, " +
                                                                        "AllowedAmount, Notes, Approved, ApprovedDate, IneligibleReason) " +
                                                                        "values (0, @SettlementName, @CreateDate, @CreateByID, @LastModifiedDate, @LastModifiedByID, @SystemModifiedStamp, " +
                                                                        "@LastActivityDate, @LastViewedDate, @MedBillID, " +
                                                                        "@SettlementType, @SettlementAmount, @PersonalResponsibilityCredit, @CMMPaymentMethod, " +
                                                                        "@CheckNo, @CheckDate, @IsCheckReconciled, @ACH_Number, @ACH_Date, @IsACH_Reconciled, @CMMCreditCard, @CMMCreditCardPaidDate, @IsCC_Reconciled, " +
                                                                        "@AllowedAmount, @Notes, @IsApproved, @ApprovedDate, @IneligibleReason)";

                                    SqlCommand cmdInsertNewSettlement = new SqlCommand(strSqlCreateNewSettlement, connRN5);
                                    cmdInsertNewSettlement.CommandType = CommandType.Text;

                                    String NewSettlementName = gvSettlementsInMedBill["SettlementName", i].Value.ToString();
                                    String NewSettlementType = String.Empty;
                                    if (gvSettlementsInMedBill["SettlementTypeValue", i].Value != null) NewSettlementType = gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString();
                                    int nNewSettlementType = 0;
                                    for (int j = 0; j < lstSettlementType.Count; j++)
                                    {
                                        if (NewSettlementType == lstSettlementType[j].SettlementTypeValue) nNewSettlementType = lstSettlementType[j].SettlementTypeCode;
                                    }
                                    Decimal result = 0;
                                    Decimal SettlementAmount = 0;
                                    if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                                    {
                                        SettlementAmount = result;
                                        cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementAmount", SettlementAmount);
                                    }

                                    result = 0;
                                    Decimal PersonalResponsibilityAmount = 0;
                                    if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) PersonalResponsibilityAmount = result;
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@PersonalResponsibilityCredit", PersonalResponsibilityAmount);

                                    int NewIsApproved = 0;
                                    if (gvSettlementsInMedBill["Approved", i]?.Value != null)
                                    {
                                        if ((Boolean)gvSettlementsInMedBill["Approved", i]?.Value == true) NewIsApproved = 1;
                                    }
                                    DateTime? NewApprovedDate = null;
                                    if (gvSettlementsInMedBill["ApprovedDate", i]?.Value != null) NewApprovedDate = DateTime.Parse(gvSettlementsInMedBill["ApprovedDate", i].Value.ToString());

                                    String NewCMMPaymentMethod = String.Empty;
                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value != null) NewCMMPaymentMethod = gvSettlementsInMedBill["PaymentMethod", i].Value.ToString();
                                    int nNewCMMPaymentMethod = 0;
                                    for (int j = 0; j < lstPaymentMethod.Count; j++)
                                    {
                                        if (NewCMMPaymentMethod == lstPaymentMethod[j].PaymentMethodValue) nNewCMMPaymentMethod = lstPaymentMethod[j].PaymentMethodId;
                                    }

                                    String NewCheckNo = String.Empty;
                                    DateTime? NewCheckDate = null;
                                    int NewCheckReconciled = 0;
                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
                                    {
                                        if (gvSettlementsInMedBill["CheckNo", i].Value != null) NewCheckNo = gvSettlementsInMedBill["CheckNo", i].Value.ToString();
                                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null) NewCheckDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                        if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewCheckReconciled = 1;
                                    }

                                    String NewACH_Number = String.Empty;
                                    DateTime? NewACH_Date = null;
                                    int NewACH_Reconciled = 0;
                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
                                    {
                                        if (gvSettlementsInMedBill["ACHNo", i].Value != null) NewACH_Number = gvSettlementsInMedBill["ACHNo", i].Value.ToString();
                                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null) NewACH_Date = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                        if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewACH_Reconciled = 1;
                                    }

                                    int nCMMCreditCard = 0;
                                    DateTime? NewCreditCardPaidDate = null;
                                    int NewIsCCReconciled = 0;

                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
                                    {
                                        String CreditCard = gvSettlementsInMedBill[13, i]?.Value?.ToString();
                                        for (int j = 0; j < lstCreditCardInfo.Count; j++)
                                        {
                                            if (CreditCard == lstCreditCardInfo[j].CreditCardNo)
                                            {
                                                nCMMCreditCard = lstCreditCardInfo[j].CreditCardId;
                                            }
                                        }
                                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            NewCreditCardPaidDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                        if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewIsCCReconciled = 1;
                                    }

                                    Decimal NewAllowedAmount = 0;
                                    if (gvSettlementsInMedBill["AllowedAmount", i].Value != null) NewAllowedAmount = Decimal.Parse(gvSettlementsInMedBill["AllowedAmount", i].Value.ToString());
                                    String NewNote = String.Empty;
                                    if (gvSettlementsInMedBill["Note", i].Value != null) NewNote = gvSettlementsInMedBill["Note", i].Value.ToString();


                                    cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementName", NewSettlementName);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CreateDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CreateByID", nLoggedUserId);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastModifiedByID", nLoggedUserId);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@SystemModifiedStamp", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastViewedDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@MedBillID", txtMedBillNo.Text.Trim());
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementType", nNewSettlementType);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsApproved", NewIsApproved);

                                    if (NewApprovedDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ApprovedDate", NewApprovedDate);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@ApprovedDate", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CMMPaymentMethod", nNewCMMPaymentMethod);

                                    if (NewCheckNo != String.Empty) cmdInsertNewSettlement.Parameters.AddWithValue("@CheckNo", NewCheckNo);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@CheckNo", DBNull.Value);

                                    if (NewCheckDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@CheckDate", NewCheckDate);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@CheckDate", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsCheckReconciled", NewCheckReconciled);

                                    if (NewACH_Number != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Number", NewACH_Number);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Number", DBNull.Value);

                                    if (NewACH_Date != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Date", NewACH_Date);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Date", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsACH_Reconciled", NewACH_Reconciled);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCard", nCMMCreditCard);

                                    if (NewCreditCardPaidDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", NewCreditCardPaidDate);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsCC_Reconciled", NewIsCCReconciled);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@AllowedAmount", NewAllowedAmount);

                                    if (NewNote != null) cmdInsertNewSettlement.Parameters.AddWithValue("@Notes", NewNote);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@Notes", DBNull.Value);

                                    int nIneligibleReason = 0;
                                    for (int j = 0; j < dicIneligibleReason.Count; j++)
                                    {
                                        if (gvSettlementsInMedBill["IneligibleReason", i]?.Value?.ToString() == dicIneligibleReason[j]) nIneligibleReason = j;
                                    }
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IneligibleReason", nIneligibleReason);

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                    int nSettlementInserted = cmdInsertNewSettlement.ExecuteNonQuery();
                                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                    if (nSettlementInserted == 0) bError = true;

                                }
                                else  // the settlement with the name exist, update the settlement
                                {
                                    String UpdateSettlementName = objResultSettlementName.ToString();
                                    String UpdateMedBill = txtMedBillNo.Text.Trim();

                                    String strSqlUpdateSettlement = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[LastModifiedDate] = @LastModifiedDate, " +
                                                                    "[dbo].[tbl_settlement].[LastModifiedByID] = @LastModifiedByID, " +
                                                                    "[dbo].[tbl_settlement].[LastActivityDate] = @LastActivityDate, " +
                                                                    "[dbo].[tbl_settlement].[SettlementType] = @SettlementType, " +
                                                                    "[dbo].[tbl_settlement].[Amount] = @SettlementAmount, " +
                                                                    "[dbo].[tbl_settlement].[PersonalResponsibilityCredit] = @PersonalResponsibilityCredit, " +
                                                                    "[dbo].[tbl_settlement].[Approved] = @IsApproved, " +
                                                                    "[dbo].[tbl_settlement].[ApprovedDate] = @ApprovedDate, " +
                                                                    "[dbo].[tbl_settlement].[CMMPaymentMethod] = @CMMPaymentMethod, " +
                                                                    "[dbo].[tbl_settlement].[CheckNo] = @CheckNo, " +
                                                                    "[dbo].[tbl_settlement].[CheckDate] = @CheckDate, " +
                                                                    "[dbo].[tbl_settlement].[CheckReconciled] = @CheckReconciled, " +
                                                                    "[dbo].[tbl_settlement].[ACH_Number] = @ACH_Number, " +
                                                                    "[dbo].[tbl_settlement].[ACH_Date] = @ACH_Date, " +
                                                                    "[dbo].[tbl_settlement].[ACH_Reconciled] = @ACH_Reconciled, " +
                                                                    "[dbo].[tbl_settlement].[CMMCreditCard] = @CMMCreditCard, " +
                                                                    "[dbo].[tbl_settlement].[CMMCreditCardPaidDate] = @CMMCreditCardPaidDate, " +
                                                                    "[dbo].[tbl_settlement].[CC_Reconciled] = @CC_Reconciled, " +
                                                                    "[dbo].[tbl_settlement].[AllowedAmount] = @AllowedAmount, " +
                                                                    "[dbo].[tbl_settlement].[Notes] = @Note, " +
                                                                    "[dbo].[tbl_settlement].[IneligibleReason] = @IneligibleReason " +
                                                                    "where [dbo].[tbl_settlement].[Name] = @SettlementName and [dbo].[tbl_settlement].[MedicalBillID] = @MedBillName";

                                    int nSettlementType = 0;
                                    String strSettlementType = String.Empty;
                                    if (gvSettlementsInMedBill["SettlementTypeValue", i].Value != null) strSettlementType = gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString();
                                    for (int j = 0; j < lstSettlementType.Count; j++)
                                    {
                                        if (strSettlementType == lstSettlementType[j].SettlementTypeValue) nSettlementType = lstSettlementType[j].SettlementTypeCode;
                                    }

                                    Decimal SettlementAmount = 0;
                                    if (gvSettlementsInMedBill["SettlementAmount", i].Value != null)
                                    {
                                        SettlementAmount = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency);
                                    }

                                    Decimal PersonalResponsibilityAmt = 0;
                                    if (gvSettlementsInMedBill["PersonalResponsibility", i].Value != null)
                                    {
                                        PersonalResponsibilityAmt = Decimal.Parse(gvSettlementsInMedBill["PersonalResponsibility", i].Value.ToString(), NumberStyles.Currency);
                                    }

                                    // Payment method
                                    int nPaymentMethod = 0;
                                    String PaymentMethod = String.Empty;
                                    if (gvSettlementsInMedBill["PaymentMethod", i].Value != null)
                                        PaymentMethod = gvSettlementsInMedBill["PaymentMethod", i].Value.ToString();
                                    for (int j = 0; j < lstPaymentMethod.Count; j++)
                                    {
                                        if (PaymentMethod == lstPaymentMethod[j].PaymentMethodValue) nPaymentMethod = lstPaymentMethod[j].PaymentMethodId;
                                    }

                                    // Approved or not
                                    int nApproved = 0;
                                    if (gvSettlementsInMedBill["Approved", i].Value != null)
                                    {
                                        if ((Boolean)gvSettlementsInMedBill["Approved", i].Value) nApproved = 1;
                                    }

                                    DateTime? ApprovedDate = null;
                                    if (gvSettlementsInMedBill["ApprovedDate", i].Value != null) ApprovedDate = DateTime.Parse(gvSettlementsInMedBill["ApprovedDate", i].Value.ToString());


                                    String CheckNo = String.Empty;
                                    DateTime? CheckIssueDate = null;
                                    int nCheckReconciled = 0;

                                    String ACH_No = String.Empty;
                                    DateTime? ACH_Date = null;
                                    int nACHReconciled = 0;

                                    String CreditCard = String.Empty;
                                    int nCreditCard = 0;
                                    DateTime? CreditCardPaidDate = null;
                                    int nCCReconciled = 0;

                                    switch (PaymentMethod)
                                    {
                                        case "Check":
                                            if (gvSettlementsInMedBill["CheckNo", i].Value != null) CheckNo = gvSettlementsInMedBill["CheckNo", i].Value.ToString();
                                            if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            {
                                                if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty) CheckIssueDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                            }
                                            Boolean bCheckReconciledResult = false;
                                            if (gvSettlementsInMedBill["Reconciled", i].Value != null)
                                            {
                                                if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bCheckReconciledResult))
                                                {
                                                    if (bCheckReconciledResult) nCheckReconciled = 1;
                                                }
                                            }
                                            break;
                                        case "ACH/Banking":
                                            if (gvSettlementsInMedBill["ACHNo", i].Value != null) ACH_No = gvSettlementsInMedBill["ACHNo", i].Value.ToString();
                                            if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            {
                                                if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty) ACH_Date = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                            }
                                            Boolean bACHReconciledResult = false;
                                            if (gvSettlementsInMedBill["Reconciled", i].Value != null)
                                            {
                                                if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bACHReconciledResult))
                                                {
                                                    if (bACHReconciledResult) nACHReconciled = 1;
                                                }
                                            }
                                            break;
                                        case "Credit Card":
                                            if (gvSettlementsInMedBill["CreditCard", i].Value != null) CreditCard = gvSettlementsInMedBill["CreditCard", i].Value.ToString();
                                            for (int j = 0; j < lstCreditCardInfo.Count; j++)
                                            {
                                                if (CreditCard == lstCreditCardInfo[j].CreditCardNo) nCreditCard = lstCreditCardInfo[j].CreditCardId;
                                            }
                                            if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            {
                                                if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty)
                                                    CreditCardPaidDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                            }
                                            Boolean bCCReconciledResult = false;
                                            if (gvSettlementsInMedBill[15, i].Value != null)
                                            {
                                                if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bCCReconciledResult))
                                                {
                                                    if (bCCReconciledResult) nCCReconciled = 1;
                                                }
                                            }
                                            break;
                                    }

                                    // Allowed Amount
                                    Decimal AllowedAmount = 0;
                                    if (gvSettlementsInMedBill["AllowedAmount", i].Value != null)
                                    {
                                        AllowedAmount = Decimal.Parse(gvSettlementsInMedBill["AllowedAmount", i].Value.ToString(), NumberStyles.Currency);
                                    }

                                    // Note
                                    String Note = String.Empty;
                                    if (gvSettlementsInMedBill["Note", i].Value != null) Note = gvSettlementsInMedBill["Note", i].Value.ToString();



                                    SqlCommand cmdUpdateSettlement = new SqlCommand(strSqlUpdateSettlement, connRN5);
                                    cmdUpdateSettlement.CommandType = CommandType.Text;

                                    cmdUpdateSettlement.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@LastModifiedByID", nLoggedUserId);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@SettlementType", nSettlementType);


                                    cmdUpdateSettlement.Parameters.AddWithValue("@SettlementAmount", SettlementAmount);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@PersonalResponsibilityCredit", PersonalResponsibilityAmt);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@IsApproved", nApproved);
                                    if (ApprovedDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@ApprovedDate", ApprovedDate);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@ApprovedDate", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@CMMPaymentMethod", nPaymentMethod);

                                    if (CheckNo != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@CheckNo", CheckNo);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@CheckNo", DBNull.Value);

                                    if (CheckIssueDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@CheckDate", CheckIssueDate);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@CheckDate", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@CheckReconciled", nCheckReconciled);

                                    if (ACH_No != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Number", ACH_No);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Number", DBNull.Value);

                                    if (ACH_Date != null) cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Date", ACH_Date);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Date", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Reconciled", nACHReconciled);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCard", nCreditCard);

                                    if (CreditCardPaidDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", CreditCardPaidDate);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", DBNull.Value);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@CC_Reconciled", nCCReconciled);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@AllowedAmount", AllowedAmount);
                                    if (Note != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@Note", Note);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@Note", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@SettlementName", UpdateSettlementName);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@MedBillName", UpdateMedBill);

                                    int nIneligibleReason = 0;
                                    for (int j = 0; j < dicIneligibleReason.Count; j++)
                                    {
                                        if (gvSettlementsInMedBill["IneligibleReason", i]?.Value?.ToString() == dicIneligibleReason[j]) nIneligibleReason = j;
                                    }
                                    cmdUpdateSettlement.Parameters.AddWithValue("@IneligibleReason", nIneligibleReason);

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                    int nRowUpdated = cmdUpdateSettlement.ExecuteNonQuery();
                                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                    if (nRowUpdated == 0) bError = true;
                                }
                            }

                            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "Ineligible")
                                {
                                    gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                                    gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                                }
                            }

                            if (bError == false)
                            {
                                MessageBox.Show("Settlements have been saved.", "Info");
                            }
                            else if (bError == true)
                            {
                                MessageBox.Show("Some of settlments have not been saved.", "Error");
                                //return;
                            }
                        }

                        MessageBox.Show("The Medical Bill has been updated.", "Information");

                        if (cbMedBillClosed.SelectedIndex == 1)
                        {
                            String CaseNo = txtMedBill_CaseNo.Text.Trim();

                            String strSqlQueryForMedBillsInCase = "select [dbo].[tbl_medbill].[BillClosed], [dbo].[tbl_medbill].[BillNo] from [dbo].[tbl_medbill] " +
                                                                  "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                                  "[dbo].[tbl_medbill].[Case_Id] = @CaseId";

                            SqlCommand cmdQueryForMedBillsInCase = new SqlCommand(strSqlQueryForMedBillsInCase, connRN5);
                            cmdQueryForMedBillsInCase.CommandType = CommandType.Text;

                            cmdQueryForMedBillsInCase.Parameters.AddWithValue("@IndividualId", IndividualId);
                            cmdQueryForMedBillsInCase.Parameters.AddWithValue("@CaseId", CaseNo);

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                            SqlDataReader rdrMedBillsInCase = cmdQueryForMedBillsInCase.ExecuteReader();

                            Boolean bBillClosed = true;
                            if (rdrMedBillsInCase.HasRows)
                            {
                                while (rdrMedBillsInCase.Read())
                                {
                                    if (!rdrMedBillsInCase.IsDBNull(0))
                                    {
                                        if (rdrMedBillsInCase.GetBoolean(0) == false) bBillClosed = false;
                                    }
                                    else bBillClosed = false;
                                }
                            }
                            rdrMedBillsInCase.Close();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (bBillClosed == true)
                            {
                                String strSetCaseToClosed = "update [dbo].[tbl_case] set [dbo].[tbl_case].[Case_status] = 2 " +
                                                            "where [dbo].[tbl_case].[Case_Name] = @CaseNo and " +
                                                            "[dbo].[tbl_case].[individual_id] = @IndividualId";

                                SqlCommand cmdSetCaseToClosed = new SqlCommand(strSetCaseToClosed, connRN5);
                                cmdSetCaseToClosed.CommandType = CommandType.Text;

                                cmdSetCaseToClosed.Parameters.AddWithValue("@CaseNo", CaseNo);
                                cmdSetCaseToClosed.Parameters.AddWithValue("@IndividualId", IndividualId);

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                int nCaseClosed = cmdSetCaseToClosed.ExecuteNonQuery();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                if (nCaseClosed == 1)
                                {
                                    MessageBox.Show("The case has been closed.", "Information");
                                    cbCaseStatus.SelectedIndex = 2;
                                    cbCaseStatus.Enabled = true;
                                }
                            }
                        }
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        if (gvSettlementsInMedBill.Rows.Count > 0)
                        {
                            String strSqlQueryForTotalSharedAmountInMedBill = "select sum([dbo].[tbl_settlement].[Amount]) from [dbo].[tbl_settlement] " +
                                                      "inner join [dbo].[tbl_settlement_type_code] on " +
                                                      "[dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                      "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and " +
                                                      "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                      "([dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'CMM Provider Payment' or " +
                                                      "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'Member Reimbursement' or " +
                                                      "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'PR Reimbursement')";

                            SqlCommand cmdQueryForTotalSharedAmountInMedBill = new SqlCommand(strSqlQueryForTotalSharedAmountInMedBill, connRN5);
                            cmdQueryForTotalSharedAmountInMedBill.CommandType = CommandType.Text;

                            cmdQueryForTotalSharedAmountInMedBill.Parameters.AddWithValue("@MedBillNo", strMedBillNo);

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objTotalSharedAmountInMedBill = cmdQueryForTotalSharedAmountInMedBill.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            Decimal TotalSharedAmountInMedBill = 0;
                            if (objTotalSharedAmountInMedBill.ToString() != String.Empty) TotalSharedAmountInMedBill = Decimal.Parse(objTotalSharedAmountInMedBill.ToString());

                            String strSqlQueryForMedicalProviderRefund = "select sum([dbo].[tbl_settlement].[Amount]) from [dbo].[tbl_settlement] " +
                                                                         "inner join [dbo].[tbl_settlement_type_code] on " +
                                                                         "[dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                                         "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and " +
                                                                         "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                                         "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'Medical Provider Refund'";

                            SqlCommand cmdQueryForMedicalProviderRefund = new SqlCommand(strSqlQueryForMedicalProviderRefund, connRN5);
                            cmdQueryForMedicalProviderRefund.CommandType = CommandType.Text;

                            cmdQueryForMedicalProviderRefund.Parameters.AddWithValue("@MedBillNo", strMedBillNo);

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objTotalMedicalProviderRefund = cmdQueryForMedicalProviderRefund.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            Decimal TotalMedicalProviderRefund = 0;
                            if (objTotalMedicalProviderRefund.ToString() != String.Empty) TotalMedicalProviderRefund = Decimal.Parse(objTotalMedicalProviderRefund.ToString());

                            TotalSharedAmountInMedBill -= TotalMedicalProviderRefund;

                            String strSqlUpdateMedBillWithTotalSharedAmount = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[TotalSharedAmount] = @TotalSharedAmount " +
                                                      "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                                                      "[dbo].[tbl_medbill].[IsDeleted] = 0 and " +
                                                      "[dbo].[tbl_medbill].[Illness_Id] = @IllnessId and " +
                                                      "[dbo].[tbl_medbill].[Incident_Id] = @IncidentId and " +
                                                      "[dbo].[tbl_medbill].[Individual_Id] = @IndividualId";


                            SqlCommand cmdUpdateMedBillWithTotalSharedAmount = new SqlCommand(strSqlUpdateMedBillWithTotalSharedAmount, connRN5);
                            cmdUpdateMedBillWithTotalSharedAmount.CommandType = CommandType.Text;

                            cmdUpdateMedBillWithTotalSharedAmount.Parameters.AddWithValue("@TotalSharedAmount", TotalSharedAmountInMedBill);
                            cmdUpdateMedBillWithTotalSharedAmount.Parameters.AddWithValue("@MedBillNo", strMedBillNo);
                            cmdUpdateMedBillWithTotalSharedAmount.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessId));
                            cmdUpdateMedBillWithTotalSharedAmount.Parameters.AddWithValue("@IncidentId", Int32.Parse(strIncidentId));
                            cmdUpdateMedBillWithTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            int nMedBillUpdated = cmdUpdateMedBillWithTotalSharedAmount.ExecuteNonQuery();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (nMedBillUpdated == 0)
                            {
                                MessageBox.Show("The Medical Bill has not been updated with Total Shared Amount.", "Error");
                                return;
                            }

                            String strSqlQueryForIncidentTotalSharedAmount = "select sum([dbo].[tbl_medbill].[TotalSharedAmount]) from [dbo].[tbl_medbill] " +
                                                     "where [dbo].[tbl_medbill].[IsDeleted] = 0 and " +
                                                     "[dbo].[tbl_medbill].[Illness_Id] = @IllnessId and " +
                                                     "[dbo].[tbl_medbill].[Incident_Id] = @IncidentId and " +
                                                     "[dbo].[tbl_medbill].[Individual_Id] = @IndividualId";

                            SqlCommand cmdQueryForIncidentTotalSharedAmount = new SqlCommand(strSqlQueryForIncidentTotalSharedAmount, connRN5);
                            cmdQueryForIncidentTotalSharedAmount.CommandType = CommandType.Text;

                            cmdQueryForIncidentTotalSharedAmount.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessId));
                            cmdQueryForIncidentTotalSharedAmount.Parameters.AddWithValue("@IncidentId", Int32.Parse(strIncidentId));
                            cmdQueryForIncidentTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objIncidentTotalSharedAmount = cmdQueryForIncidentTotalSharedAmount.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            Decimal IncidentTotalSharedAmount = 0;
                            if (objIncidentTotalSharedAmount.ToString() != String.Empty) IncidentTotalSharedAmount = Decimal.Parse(objIncidentTotalSharedAmount.ToString());
                            else
                            {
                                MessageBox.Show("No Incident Total Shared Amount", "Error");
                                return;
                            }

                            String strSqlUpdateIncidentSharedTotalAmount = "update [dbo].[tbl_incident] set [dbo].[tbl_incident].[TotalSharedAmount] = @TotalSharedAmount," +
                                                                           "[dbo].[tbl_incident].[ModifiStaff] = @ModifiStaff " +
                                                                           "where [dbo].[tbl_incident].[IsDeleted] = 0 and " +
                                                                           "[dbo].[tbl_incident].[Illness_id] = @IllnessId and " +
                                                                           "[dbo].[tbl_incident].[Incident_id] = @IncidentId and " +
                                                                           "[dbo].[tbl_incident].[Individual_id] = @IndividualId";

                            SqlCommand cmdUpdateIncidentSharedTotal = new SqlCommand(strSqlUpdateIncidentSharedTotalAmount, connRN5);
                            cmdUpdateIncidentSharedTotal.CommandType = CommandType.Text;

                            cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@TotalSharedAmount", IncidentTotalSharedAmount);
                            cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@ModifiStaff", nLoggedUserId);
                            cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessId));
                            cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@IncidentId", Int32.Parse(strIncidentId));
                            cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            int nIncidentUpdated = cmdUpdateIncidentSharedTotal.ExecuteNonQuery(); // incident id is null in incident_history table
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (nIncidentUpdated == 3)
                            {
                                String strSqlQueryForIllnessTotalSharedAmount = "select sum([dbo].[tbl_incident].[TotalSharedAmount]) from [dbo].[tbl_incident] " +
                                                    "where [dbo].[tbl_incident].[IsDeleted] = 0 and " +
                                                    "[dbo].[tbl_incident].[Illness_id] = @IllnessId and " +
                                                    "[dbo].[tbl_incident].[Individual_id] = @IndividualId";

                                SqlCommand cmdQueryForIllnessTotalSharedAmount = new SqlCommand(strSqlQueryForIllnessTotalSharedAmount, connRN5);
                                cmdQueryForIllnessTotalSharedAmount.CommandType = CommandType.Text;

                                cmdQueryForIllnessTotalSharedAmount.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessId));
                                cmdQueryForIllnessTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                Object objIllnessTotalSharedAmount = cmdQueryForIllnessTotalSharedAmount.ExecuteScalar();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                Decimal IllnessTotalSharedAmount = 0;
                                if (objIllnessTotalSharedAmount.ToString() != String.Empty) IllnessTotalSharedAmount = Decimal.Parse(objIllnessTotalSharedAmount.ToString());

                                String strSqlUpdateIllnessSharedTotal = "update [dbo].[tbl_illness] set [dbo].[tbl_illness].[TotalSharedAmount] = @TotalSharedAmount " +
                                            "where [dbo].[tbl_illness].[IsDeleted] = 0 and " +
                                            "[dbo].[tbl_illness].[Illness_Id] = @IllnessId and " +
                                            "[dbo].[tbl_illness].[Individual_Id] = @IndividualId";

                                SqlCommand cmdUpdateIllnessSharedTotal = new SqlCommand(strSqlUpdateIllnessSharedTotal, connRN5);
                                cmdUpdateIllnessSharedTotal.CommandType = CommandType.Text;

                                cmdUpdateIllnessSharedTotal.Parameters.AddWithValue("@TotalSharedAmount", IllnessTotalSharedAmount);
                                cmdUpdateIllnessSharedTotal.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessId));
                                cmdUpdateIllnessSharedTotal.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                int nIllnessUpdated = cmdUpdateIllnessSharedTotal.ExecuteNonQuery();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                if (nIllnessUpdated == 1)
                                {

                                    String strSqlQueryForIndividualTotalSharedAmount = "select sum([dbo].[tbl_illness].[TotalSharedAmount]) from [dbo].[tbl_illness] " +
                                                        "where [dbo].[tbl_illness].[IsDeleted] = 0 and " +
                                                        "[dbo].[tbl_illness].[Individual_Id] = @IndividualId";

                                    SqlCommand cmdQueryForIndividualTotalSharedAmount = new SqlCommand(strSqlQueryForIndividualTotalSharedAmount, connRN5);
                                    cmdQueryForIndividualTotalSharedAmount.CommandType = CommandType.Text;
                                    cmdQueryForIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                    Object objIndividualTotalSharedAmount = cmdQueryForIndividualTotalSharedAmount.ExecuteScalar();
                                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                    Decimal IndividualTotalSharedAmount = 0;
                                    if (objIndividualTotalSharedAmount.ToString() != String.Empty) IndividualTotalSharedAmount = Decimal.Parse(objIndividualTotalSharedAmount.ToString());

                                    String strSqlUpdateIndividualTotalSharedAmount = "update [dbo].[contact] set [dbo].[contact].[c4g_Total_Shared_Amount__c] = @IndividualTotalSharedAmount " +
                                                                                     "where [dbo].[contact].[IsDeleted] = 0 and " +
                                                                                     "[dbo].[contact].[Individual_ID__c] = @IndividualId";

                                    SqlCommand cmdUpdateIndividualTotalSharedAmount = new SqlCommand(strSqlUpdateIndividualTotalSharedAmount, connSalesforce4);
                                    cmdUpdateIndividualTotalSharedAmount.CommandType = CommandType.Text;

                                    cmdUpdateIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualTotalSharedAmount", IndividualTotalSharedAmount);
                                    cmdUpdateIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                    if (connSalesforce4.State == ConnectionState.Open)
                                    {
                                        connSalesforce4.Close();
                                        connSalesforce4.Open();
                                    }
                                    else if (connSalesforce4.State == ConnectionState.Closed) connSalesforce4.Open();
                                    int nIndividualUpdated = cmdUpdateIndividualTotalSharedAmount.ExecuteNonQuery();
                                    if (connSalesforce4.State != ConnectionState.Closed) connSalesforce4.Close();

                                    if (nIndividualUpdated == 1) txtTotalSharedAmount.Text = IndividualTotalSharedAmount.ToString("C");

                                    if (nIndividualUpdated != 1)
                                    {
                                        MessageBox.Show("Individual Total Shared Amount has not been updated.", "Error");
                                        return;
                                    }
                                }
                                else
                                {
                                    MessageBox.Show("Illness Total Shared Amount has not been updated.", "Error");
                                    return;
                                }
                            }
                            else
                            {
                                MessageBox.Show("Incident Total Shared Amount has not been updated.", "Error");
                                return;
                            }
                        }
                        String strSqlQueryForTotalMedBillAmountForIndividualId = "select sum([dbo].[tbl_medbill].[BillAmount]) from [dbo].[tbl_medbill] " +
                                                         "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                         "[dbo].[tbl_medbill].[IsDeleted] = 0";

                        SqlCommand cmdQueryForTotalMedBillAmountForIndividualId = new SqlCommand(strSqlQueryForTotalMedBillAmountForIndividualId, connRN5);
                        cmdQueryForTotalMedBillAmountForIndividualId.CommandType = CommandType.Text;

                        cmdQueryForTotalMedBillAmountForIndividualId.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objTotalMedBillAmountForIndividualId = cmdQueryForTotalMedBillAmountForIndividualId.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        Decimal TotalMedBillAmountForIndividualId = 0;
                        if (objTotalMedBillAmountForIndividualId != null) TotalMedBillAmountForIndividualId = Decimal.Parse(objTotalMedBillAmountForIndividualId.ToString());

                        String strSqlUpdateIndividualTotalMedBillAmount = "update [dbo].[contact] set [dbo].[contact].[c4g_Incidents_Total_Amount__c] = @MedBillTotalForIndividual " +
                                                                          "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                        SqlCommand cmdUpdateIndividualTotalMedBillAmount = new SqlCommand(strSqlUpdateIndividualTotalMedBillAmount, connSalesforce4);
                        cmdUpdateIndividualTotalMedBillAmount.CommandType = CommandType.Text;

                        cmdUpdateIndividualTotalMedBillAmount.Parameters.AddWithValue("@MedBillTotalForIndividual", TotalMedBillAmountForIndividualId);
                        cmdUpdateIndividualTotalMedBillAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                        if (connSalesforce4.State == ConnectionState.Open)
                        {
                            connSalesforce4.Close();
                            connSalesforce4.Open();
                        }
                        else if (connSalesforce4.State == ConnectionState.Closed) connSalesforce4.Open();

                        int nIndividualTotalMedBillUpdated = cmdUpdateIndividualTotalMedBillAmount.ExecuteNonQuery();
                        if (connSalesforce4.State == ConnectionState.Open) connSalesforce4.Close();

                        if (nIndividualTotalMedBillUpdated == 1) txtTotalMedBillAmount.Text = TotalMedBillAmountForIndividualId.ToString("C");



                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        return;
                    }
                    else if (nAffectedRow == 0)
                    {
                        MessageBox.Show("The Medical Bill has not been updated.", "Error");
                        return;
                    }

                    bIsModified = false;
                }
            }
            else if (dlgResult == DialogResult.No)
            {
                return;
            }

            Cursor.Current = Cursors.Default;
        }


        /// <summary>
        /// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>

        private void btnBrowseNPF_Click(object sender, EventArgs e)
        {
            OpenFileDialog OpenSourceFileDlg = new OpenFileDialog();

            OpenSourceFileDlg.Filter = "PDF Files | *.pdf; | JPG Files | *.jpg; *.jpeg";
            OpenSourceFileDlg.DefaultExt = "pdf";
            OpenSourceFileDlg.RestoreDirectory = true;

            if (OpenSourceFileDlg.ShowDialog() == DialogResult.OK)
            {
                strNPFormFilePathSource = OpenSourceFileDlg.FileName;
                strNPFormFilePathDestination = strDestinationPath + "_NPF_" + DateTime.Now.ToString("MM-dd-yyyy-HH-mm-ss") + "_" + OpenSourceFileDlg.SafeFileName;
                txtNPFFormFilePath.Text = strNPFormFilePathSource;
                btnNPFFormUpload.Enabled = true;
                return;
            }
            else return;
        }

        private void btnViewNPF_Click(object sender, EventArgs e)
        {
            if (chkMedBillNPFReceived.Checked)
            {
                String CaseName = strCaseIdSelected;
                String ContactId = strContactIdSelected;

                String strSqlQueryForNPFForm = "select dbo.tbl_case.NPF_Form_Destination_File_Name from dbo.tbl_case where dbo.tbl_case.Case_Name = @Case_Name and dbo.tbl_case.Contact_ID = @ContactId";

                SqlCommand cmdQueryForNPFForm = new SqlCommand(strSqlQueryForNPFForm, connRN);
                cmdQueryForNPFForm.CommandType = CommandType.Text;

                cmdQueryForNPFForm.Parameters.AddWithValue("@Case_Name", CaseName);
                cmdQueryForNPFForm.Parameters.AddWithValue("@ContactId", ContactId);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                //String NPF_FileName = cmdQueryForNPFForm.ExecuteScalar() as String;
                Object objNPF_FileName = cmdQueryForNPFForm.ExecuteScalar();
                if (connRN.State != ConnectionState.Closed) connRN.Close();

                String NPF_FileName = String.Empty;

                if (objNPF_FileName != null) NPF_FileName = objNPF_FileName.ToString();
                else
                {
                    MessageBox.Show("No NPF Form Destination File Name for Case Name: " + CaseName, "Error", MessageBoxButtons.OK);
                    return;
                }

                if (NPF_FileName != String.Empty)
                {
                    ProcessStartInfo psi = new ProcessStartInfo();
                    psi.FileName = NPF_FileName;

                    Process.Start(psi);
                }
            }
        }

        private void btnViewIB_Click(object sender, EventArgs e)
        {
            if (chkMedBill_IBReceived.Checked)
            {
                String CaseName = strCaseIdSelected;
                String ContactId = strContactIdSelected;

                String strSqlQueryForIBForm = "select dbo.tbl_case.IB_Form_Destination_File_Name from dbo.tbl_case where dbo.tbl_case.Case_Name = @Case_Name and dbo.tbl_case.Contact_ID = @ContactId";

                SqlCommand cmdQueryForIBForm = new SqlCommand(strSqlQueryForIBForm, connRN);
                cmdQueryForIBForm.CommandType = CommandType.Text;

                cmdQueryForIBForm.Parameters.AddWithValue("@Case_Name", CaseName);
                cmdQueryForIBForm.Parameters.AddWithValue("@ContactId", ContactId);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                //String IB_FileName = cmdQueryForIBForm.ExecuteScalar() as String;
                Object objIB_FileName = cmdQueryForIBForm.ExecuteScalar();
                if (connRN.State != ConnectionState.Closed) connRN.Close();

                String IB_FileName = String.Empty;
                if (objIB_FileName != null) IB_FileName = objIB_FileName.ToString();
                else
                {
                    MessageBox.Show("No IB Form Destination File Name for Case Name: " + CaseName, "Error", MessageBoxButtons.OK);
                    return;
                }

                if (IB_FileName != String.Empty)
                {
                    ProcessStartInfo psi = new ProcessStartInfo();
                    psi.FileName = IB_FileName;

                    Process.Start(psi);
                }
            }
        }

        private void btnViewPoP_Click(object sender, EventArgs e)
        {
            if (chkMedBillPOPReceived.Checked)
            {
                String CaseName = strCaseIdSelected;
                String ContactId = strContactIdSelected;

                String strSqlQueryForPOPForm = "select dbo.tbl_case.POP_Form_Destination_File_Name from dbo.tbl_case where dbo.tbl_case.Case_Name = @Case_Name and dbo.tbl_case.Contact_ID = @ContactId";

                SqlCommand cmdQueryForPOPForm = new SqlCommand(strSqlQueryForPOPForm, connRN);
                cmdQueryForPOPForm.CommandType = CommandType.Text;

                cmdQueryForPOPForm.Parameters.AddWithValue("@Case_Name", CaseName);
                cmdQueryForPOPForm.Parameters.AddWithValue("@ContactId", ContactId);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                //String POP_FileName = cmdQueryForPOPForm.ExecuteScalar() as String;
                Object objPOP_FileName = cmdQueryForPOPForm.ExecuteScalar();
                if (connRN.State != ConnectionState.Closed) connRN.Close();

                String POP_FileName = String.Empty;
                if (objPOP_FileName != null) POP_FileName = objPOP_FileName.ToString();
                else
                {
                    MessageBox.Show("No POP Form Destination File Name for Case Name: " + CaseName, "Error", MessageBoxButtons.OK);
                    return;
                }

                if (POP_FileName != String.Empty)
                {
                    ProcessStartInfo psi = new ProcessStartInfo();
                    psi.FileName = POP_FileName;

                    Process.Start(psi);
                }
            }
        }

        private void btnViewMedRecord_Click(object sender, EventArgs e)
        {
            if (chkMedRecordReceived.Checked)
            {
                String CaseName = strCaseIdSelected;
                String ContactId = strContactIdSelected;

                String strSqlQueryForMedRecordForm = "select dbo.tbl_case.MedRec_Form_Destination_File_Name from dbo.tbl_case where dbo.tbl_case.Case_Name = @Case_Name and dbo.tbl_case.Contact_ID = @ContactId";

                SqlCommand cmdQueryForMedRecordForm = new SqlCommand(strSqlQueryForMedRecordForm, connRN);
                cmdQueryForMedRecordForm.CommandType = CommandType.Text;

                cmdQueryForMedRecordForm.Parameters.AddWithValue("@Case_Name", CaseName);
                cmdQueryForMedRecordForm.Parameters.AddWithValue("@ContactId", ContactId);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                //String MedRecord_FileName = cmdQueryForMedRecordForm.ExecuteScalar() as String;
                Object objMedRecord_FileName = cmdQueryForMedRecordForm.ExecuteScalar();
                if (connRN.State != ConnectionState.Closed) connRN.Close();

                String MedRecord_FileName = String.Empty;
                if (objMedRecord_FileName != null) MedRecord_FileName = objMedRecord_FileName.ToString();
                else
                {
                    MessageBox.Show("No Med Rec Form Destination File Name for Case Name: " + CaseName, "Error", MessageBoxButtons.OK);
                    return;
                }

                if (MedRecord_FileName != String.Empty)
                {
                    ProcessStartInfo psi = new ProcessStartInfo();
                    psi.FileName = MedRecord_FileName;

                    Process.Start(psi);
                }
            }
        }

        private void btnViewOtherDoc_Click(object sender, EventArgs e)
        {
            if (chkOtherDocReceived.Checked)
            {
                String CaseName = strCaseIdSelected;
                String ContactId = strContactIdSelected;

                String strSqlQueryForUnknownDocForm = "select dbo.tbl_case.Unknown_Form_Destination_File_Name from dbo.tbl_case where dbo.tbl_case.Case_Name = @Case_Name and dbo.tbl_case.Contact_ID = @ContactId";

                SqlCommand cmdQueryForUnknownDocForm = new SqlCommand(strSqlQueryForUnknownDocForm, connRN);
                cmdQueryForUnknownDocForm.CommandType = CommandType.Text;

                cmdQueryForUnknownDocForm.Parameters.AddWithValue("@Case_Name", CaseName);
                cmdQueryForUnknownDocForm.Parameters.AddWithValue("@ContactId", ContactId);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                //String UnknownDoc_FileName = cmdQueryForUnknownDocForm.ExecuteScalar() as String;
                Object objUnknownDoc_FileName = cmdQueryForUnknownDocForm.ExecuteScalar();
                if (connRN.State != ConnectionState.Closed) connRN.Close();

                String UnknownDoc_FileName = String.Empty;
                if (objUnknownDoc_FileName != null) UnknownDoc_FileName = objUnknownDoc_FileName.ToString();
                else
                {
                    MessageBox.Show("No Unknown Form Destination File Name for Case Name: " + CaseName, "Error", MessageBoxButtons.OK);
                    return;
                }

                if (UnknownDoc_FileName != String.Empty)
                {
                    ProcessStartInfo psi = new ProcessStartInfo();
                    psi.FileName = UnknownDoc_FileName;

                    Process.Start(psi);
                }
            }
        }

        public String MedBillNote(int med_bill_note_id)
        {
            if (med_bill_note_id >= 0)
            {
                String strMedBillNote = String.Empty;

                String strSqlQueryForMedicalNote1Value = "select dbo.tbl_MedBillNoteType.MedBillNoteTypeValue from dbo.tbl_MedBillNoteType " +
                                                         "where dbo.tbl_MedBillNoteType.MedBillNoteTypeId = @MedBillNoteTypeId";

                SqlCommand cmdQueryForMedicalNote1 = new SqlCommand(strSqlQueryForMedicalNote1Value, connRN);
                cmdQueryForMedicalNote1.CommandType = CommandType.Text;

                cmdQueryForMedicalNote1.Parameters.AddWithValue("@MedBillNoteTypeId", med_bill_note_id);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                //strMedBillNote = cmdQueryForMedicalNote1.ExecuteScalar().ToString();
                Object objMedBillNote = cmdQueryForMedicalNote1.ExecuteScalar();
                if (connRN.State != ConnectionState.Closed) connRN.Close();

                if (objMedBillNote != null) strMedBillNote = objMedBillNote.ToString();
                else
                {
                    //MessageBox.Show("No Medical Note Type")
                }

                return strMedBillNote;
            }
            else return String.Empty;
        }

        private void btnMedBillCreationPgUpperCancel_Click(object sender, EventArgs e)
        {

            DialogResult dlgClose = MessageBox.Show("Do you want to close Medical Bill Page?", "Alert", MessageBoxButtons.YesNo);

            if (dlgClose == DialogResult.Yes)
            {
                DialogResult dlgResult = MessageBox.Show("Do you want to save the change?", "Alert", MessageBoxButtons.YesNo);

                if (dlgResult == DialogResult.Yes)
                {
                    String strMedBillNo = txtMedBillNo.Text.Trim();

                    String strSqlQueryForMedBill = "select [dbo].[tbl_medbill].[BillNo] from [dbo].[tbl_medbill] where [dbo].[tbl_medbill].[BillNo] = @MedBillNo";

                    SqlCommand cmdQueryForMedBill = new SqlCommand(strSqlQueryForMedBill, connRN5);
                    cmdQueryForMedBill.Parameters.AddWithValue("@MedBillNo", strMedBillNo);

                    if (connRN5.State != ConnectionState.Closed)
                    {
                        connRN5.Close();
                        connRN5.Open();
                    }
                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    Object ResultMedBillNo = cmdQueryForMedBill.ExecuteScalar();
                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                    if (ResultMedBillNo == null)
                    {
                        String strIndividualId = String.Empty;
                        String strCaseId = String.Empty;
                        String strBillStatus = String.Empty;
                        String strIllnessId = String.Empty;
                        String strIncidentId = String.Empty;

                        String strNewMedBillNo = String.Empty;
                        String strMedProvider = String.Empty;
                        String strPrescriptionName = String.Empty;
                        String strPrescriptionNo = String.Empty;
                        String strPrescriptionDescription = String.Empty;

                        if (txtMedBill_Illness.Text.Trim() != String.Empty)
                        {
                            String IllnessNo = txtMedBill_Illness.Text.Trim();

                            String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

                            SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN5);
                            cmdQueryForIllnessId.CommandType = CommandType.Text;

                            cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", IllnessNo);

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (objIllnessId != null) strIllnessId = objIllnessId.ToString();
                            else
                            {
                                MessageBox.Show("No Illness Id for given Illness No", "Error");
                                return;
                            }
                        }

                        if (txtMedBill_Incident.Text.Trim() != String.Empty)
                        {
                            String IncidentNo = txtMedBill_Incident.Text.Trim();

                            String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

                            SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN5);
                            cmdQueryForIncidentId.CommandType = CommandType.Text;

                            cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (objIncidentId != null) strIncidentId = objIncidentId.ToString();
                            else
                            {
                                MessageBox.Show("No Incident Id for given Incident No", "Error");
                                return;
                            }
                        }

                        if (txtIndividualIDMedBill.Text.Trim() != String.Empty) strIndividualId = txtIndividualIDMedBill.Text.Trim();
                        if (txtMedBill_CaseNo.Text.Trim() != String.Empty) strCaseId = txtMedBill_CaseNo.Text.Trim();
                        //if (txtMedicalBillStatus.Text.Trim() != String.Empty) strBillStatus = txtMedicalBillStatus.Text.Trim();

                        if (txtMedBill_Illness.Text.Trim() != String.Empty) strIllnessId = Illness.IllnessId;
                        //if (txtMedBill_Incident.Text.Trim() != String.Empty) strIncidentId = txtMedBill_Incident.Text.Trim();
                        //strIncidentId = Incident.IncidentId;

                        if (txtMedBillNo.Text.Trim() != String.Empty) strNewMedBillNo = txtMedBillNo.Text.Trim();

                        String MedicalProvider = String.Empty;

                        if (txtMedicalProvider.Text.Trim() != String.Empty)
                        {
                            MedicalProvider = txtMedicalProvider.Text.Trim();
                        }

                        String PrescriptionName = String.Empty;

                        if (txtPrescriptionName.Text.Trim() != String.Empty)
                        {
                            PrescriptionName = txtPrescriptionName.Text.Trim();
                        }

                        String PrescriptionNo = String.Empty;

                        if (txtNumberOfMedication.Text.Trim() != String.Empty)
                        {
                            PrescriptionNo = txtNumberOfMedication.Text.Trim();
                        }

                        String PrescriptionDescription = String.Empty;

                        if (txtPrescriptionDescription.Text.Trim() != String.Empty)
                        {
                            PrescriptionDescription = txtPrescriptionDescription.Text.Trim();
                        }


                        int nPatientType = 0;   // default outpatient

                        if (rbOutpatient.Checked) nPatientType = 0;
                        else if (rbInpatient.Checked) nPatientType = 1;

                        //int nSelectedMedNote = cbMedicalBillNote1.SelectedIndex;

                        String strNote = String.Empty;

                        if (comboMedBillType.SelectedItem.ToString() == "Medical Bill")
                        {
                            strNote = txtMedBillNote.Text.Trim();
                        }
                        else if (comboMedBillType.SelectedItem.ToString() == "Prescription")
                        {
                            strNote = txtPrescriptionNote.Text.Trim();
                        }
                        else if (comboMedBillType.SelectedItem.ToString() == "Physical Therapy")
                        {
                            strNote = txtPhysicalTherapyRxNote.Text.Trim();
                        }



                        String strSqlInsertNewMedBill = "insert into dbo.tbl_medbill (IsDeleted, BillNo, MedBillType_Id, CreatedDate, CreatedById, LastModifiedDate, LastModifiedById, " +
                                                        "LastActivityDate, LastViewedDate, LastReferencedDate, Case_Id, Incident_Id, Illness_Id, BillAmount, SettlementTotal, " +
                                                        "Balance, BillDate, TotalSharedAmount, Individual_Id, Contact_Id, MedicalProvider_Id, PendingReason, " +
                                                        "Account_At_Provider, ProviderPhoneNumber, ProviderContactPerson, " +
                                                        "ProposalLetterSentDate, HIPPASentDate, MedicalRecordDate, " +
                                                        "BillStatus, ProofOfPaymentReceivedDate, IneligibleReason, OriginalPrescription, PersonalResponsibilityCredit, " +
                                                        "WellBeingCareTotal, WellBeingCare, DueDate, TotalNumberOfPhysicalTherapy, " +
                                                        "PrescriptionDrugName, PrescriptionNo, PrescriptionDescription, " +
                                                        "PatientTypeId, Note) " +
                                                        "values (@IsDeleted, @BillNo, @MedBillType_Id, @CreatedDate, @CreateById, @LastModifiedDate, @LastModifiedById, " +
                                                        "@LastActivityDate, @LastViewedDate, @LastReferencedDate, @Case_Id, @Incident_Id, @Illness_Id, @BillAmount, @SettlementTotal, " +
                                                        "@Balance, @BillDate, @TotalSharedAmount, @Individual_Id, @Contact_Id, @MedicalProvider_Id, @PendingReason, " +
                                                        "@Account_At_Provider, @ProviderPhoneNo, @ProviderContactPerson, " +
                                                        "@ProposalLetterSentDate, @HIPPASentDate, @MedicalRecordDate, " +
                                                        "@BillStatus, @ProofOfPaymentReceivedDate, @IneligibleReason, @OriginalPrescription, @PersonalResponsibilityCredit, " +
                                                        "@WellBeingCareTotal, @WellBeingCare, @DueDate, @TotalNumberOfPhysicalTherapy, " +
                                                        "@PrescriptionDrugName, @PrescriptionNo, @PrescriptionDescription, " +
                                                        "@PatientTypeId, @Note)";

                        SqlCommand cmdInsertNewMedBill = new SqlCommand(strSqlInsertNewMedBill, connRN5);
                        cmdInsertNewMedBill.CommandType = CommandType.Text;

                        cmdInsertNewMedBill.Parameters.AddWithValue("@IsDeleted", 0);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@BillNo", strNewMedBillNo);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@MedBillType_Id", comboMedBillType.SelectedIndex + 1);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@CreatedDate", DateTime.Today);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@CreateById", nLoggedUserId);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@LastModifiedById", nLoggedUserId);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@LastViewedDate", DateTime.Today);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@LastReferencedDate", DateTime.Today);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Case_Id", strCaseId);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Incident_Id", strIncidentId);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Illness_Id", strIllnessId);
                        Decimal dBillAmount = 0;
                        Decimal BillAmount = 0;

                        if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out dBillAmount))
                        {
                            BillAmount = dBillAmount;
                            cmdInsertNewMedBill.Parameters.AddWithValue("@BillAmount", BillAmount);
                        }
                        else
                        {
                            MessageBox.Show("Bill Amount should be currency value.", "Error", MessageBoxButtons.OK);
                            return;
                        }
                        cmdInsertNewMedBill.Parameters.AddWithValue("@SettlementTotal", 0);

                        Decimal dBalance = 0;
                        if (!Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out dBalance))
                        {
                            MessageBox.Show("Balance should be currency value.", "Error");
                        }
                        else
                        {
                            cmdInsertNewMedBill.Parameters.AddWithValue("@Balance", Decimal.Parse(txtBalance.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US")));
                        }

                        cmdInsertNewMedBill.Parameters.AddWithValue("@BillDate", dtpBillDate.Value);

                        Decimal TotalSharedAmount = 0;
                        for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                        {
                            if ((gvSettlementsInMedBill["SettlementType", i].Value.ToString() == "CMM Provider Payment") ||
                                (gvSettlementsInMedBill["SettlementType", i].Value.ToString() == "Member Reimbursement"))
                                TotalSharedAmount += Decimal.Parse(gvSettlementsInMedBill["SettlementType", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                            if (gvSettlementsInMedBill["SettlementType", i].Value.ToString() == "Medical Provider Refund")
                                TotalSharedAmount -= Decimal.Parse(gvSettlementsInMedBill["SettlementType", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                        }

                        cmdInsertNewMedBill.Parameters.AddWithValue("@TotalSharedAmount", TotalSharedAmount);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Individual_Id", strIndividualId);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Contact_Id", strIndividualId);
                        foreach (MedicalProviderInfo info in lstMedicalProvider)
                        {
                            if (info.Name.Trim() == txtMedicalProvider.Text.Trim())
                            {
                                cmdInsertNewMedBill.Parameters.AddWithValue("@MedicalProvider_Id", info.ID);
                                break;
                            }
                        }

                        cmdInsertNewMedBill.Parameters.AddWithValue("@Account_At_Provider", txtMedBillAccountNoAtProvider.Text.Trim());
                        cmdInsertNewMedBill.Parameters.AddWithValue("@ProviderPhoneNo", txtMedProviderPhoneNo.Text.Trim());
                        cmdInsertNewMedBill.Parameters.AddWithValue("@ProviderContactPerson", txtProviderContactPerson.Text.Trim());
                        cmdInsertNewMedBill.Parameters.AddWithValue("@ProposalLetterSentDate", dtpProposalLetterSentDate.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@HIPPASentDate", dtpHippaSentDate.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@MedicalRecordDate", dtpMedicalRecordDate.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@BillStatus", comboMedBillStatus.SelectedIndex);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@ProofOfPaymentReceivedDate", DateTime.Today);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@OriginalPrescription", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PersonalResponsibilityCredit", 500);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@WellBeingCareTotal", 0);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@WellBeingCare", 0);
                        //cmdInsertNewMedBill.Parameters.AddWithValue("@Memo", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@DueDate", DateTime.Today);

                        if (comboMedBillType.SelectedIndex == 0)        // Medical Bill Type : Medical Bill
                        {
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", DBNull.Value);

                            cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", DBNull.Value);

                            cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", nPatientType);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", comboPendingReason.SelectedIndex);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", comboIneligibleReason.SelectedIndex);

                            cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
                        }
                        else if (comboMedBillType.SelectedIndex == 1)   // Medical Bill Type : Prescription
                        {
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", DBNull.Value);

                            cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", DBNull.Value);

                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", txtPrescriptionName.Text.Trim());
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", txtNumberOfMedication.Text.Trim());
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", txtPrescriptionDescription.Text.Trim());
                            cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
                        }
                        else if (comboMedBillType.SelectedIndex == 2)   // Medical Bill Type : Physical Therapy
                        {
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", DBNull.Value);

                            cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", DBNull.Value);

                            int nNumberOfPhysicalTherapy = 0;
                            short result = 0;
                            if (Int16.TryParse(txtNumPhysicalTherapy.Text.Trim(), out result))
                            {
                                nNumberOfPhysicalTherapy = result;
                                cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", nNumberOfPhysicalTherapy);
                            }
                            else MessageBox.Show("Please enter a positive integer in Number of Physical Therapy Text Box.", "Alert");

                            cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
                        }

                        //if (connRN.State == ConnectionState.Closed) connRN.Open();
                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        int nRowInserted = cmdInsertNewMedBill.ExecuteNonQuery();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (nRowInserted == 1)
                        {
                            MessageBox.Show("The Medical Bill has been saved.", "Information");
                        }
                        else if (nRowInserted == 0)
                        {
                            MessageBox.Show("The Medical Bill has not been saved.", "Error");
                        }

                        bIsModified = false;

                        //tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                        //tbCMMManager.SelectedTab = tbCMMManager.TabPages["tbpgCreateCase"];

                    }
                    else if (ResultMedBillNo.ToString() == strMedBillNo)
                    {
                        // update the med bill
                        String strIllnessId = String.Empty;
                        String strIncidentId = String.Empty;

                        String MedBillNo = txtMedBillNo.Text.Trim();
                        String IndividualId = txtIndividualIDMedBill.Text.Trim();
                        strIncidentId = Incident.IncidentId;


                        if (txtMedBill_Illness.Text.Trim() != String.Empty)
                        {
                            String IllnessNo = txtMedBill_Illness.Text.Trim();

                            String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

                            SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN5);
                            cmdQueryForIllnessId.CommandType = CommandType.Text;

                            cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", IllnessNo);

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (objIllnessId != null) strIllnessId = objIllnessId.ToString();
                            else
                            {
                                MessageBox.Show("No Illness Id for given Illness No", "Error");
                                return;
                            }
                        }

                        if (txtMedBill_Incident.Text.Trim() != String.Empty)
                        {
                            String IncidentNo = txtMedBill_Incident.Text.Trim();

                            String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

                            SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN5);
                            cmdQueryForIncidentId.CommandType = CommandType.Text;

                            cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (objIncidentId != null) strIncidentId = objIncidentId.ToString();
                            else
                            {
                                MessageBox.Show("No Incident Id for given Incident No", "Error");
                                return;
                            }
                        }

                        //String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] " +
                        //            "where [dbo].[tbl_illness].[Individual_Id] = @IndividualId and [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

                        //SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN);
                        //cmdQueryForIllnessId.CommandType = CommandType.Text;

                        //cmdQueryForIllnessId.Parameters.AddWithValue("@IndividualId", IndividualId);
                        //cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", txtMedBill_Illness.Text.Trim());

                        ////if (connRN.State == ConnectionState.Closed) connRN.Open();
                        //if (connRN.State != ConnectionState.Closed)
                        //{
                        //    connRN.Close();
                        //    connRN.Open();
                        //}
                        //else if (connRN.State == ConnectionState.Closed) connRN.Open();
                        ////int nIllnessId = Int32.Parse(cmdQueryForIllnessId.ExecuteScalar().ToString());
                        //Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                        //if (connRN.State != ConnectionState.Closed) connRN.Close();

                        //int nIllnessId = 0;
                        //int nIllnessIdResult = 0;
                        //if (objIllnessId != null)
                        //{
                        //    if (Int32.TryParse(objIllnessId.ToString(), NumberStyles.Integer, new CultureInfo("en-US"), out nIllnessIdResult)) nIllnessId = nIllnessIdResult;
                        //}
                        //else
                        //{
                        //    MessageBox.Show("No Illness Id for Illness No: " + txtMedBill_Illness.Text.Trim(), "Error", MessageBoxButtons.OK);
                        //    return;
                        //}

                        // Get medical provider id
                        //String strSqlQueryForMedicalProviderId = "select [dbo].[tbl_MedicalProvider].[ID] from [dbo].[tbl_MedicalProvider] where [dbo].[tbl_MedicalProvider].[Name] = @MedicalProviderName";

                        //SqlCommand cmdQueryForMedicalProviderId = new SqlCommand(strSqlQueryForMedicalProviderId, connRN5);
                        //cmdQueryForMedicalProviderId.CommandType = CommandType.Text;

                        //cmdQueryForMedicalProviderId.Parameters.AddWithValue("@MedicalProviderName", txtMedicalProvider.Text.Trim());

                        ////if (connRN.State == ConnectionState.Closed) connRN.Open();
                        //if (connRN5.State != ConnectionState.Closed)
                        //{
                        //    connRN5.Close();
                        //    connRN5.Open();
                        //}
                        //else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        ////String MedicalProviderId = cmdQueryForMedicalProviderId.ExecuteScalar().ToString();
                        //Object objMedicalProviderId = cmdQueryForMedicalProviderId.ExecuteScalar();
                        //if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        String strSqlQueryForMedicalProviderId = "select [dbo].[account].[Id] from [dbo].[account] where [dbo].[account].[Name] = @MedicalProviderName";

                        SqlCommand cmdQueryForMedicalProviderId = new SqlCommand(strSqlQueryForMedicalProviderId, connSalesforce2);
                        cmdQueryForMedicalProviderId.CommandType = CommandType.Text;

                        cmdQueryForMedicalProviderId.Parameters.AddWithValue("@MedicalProviderName", txtMedicalProvider.Text.Trim());

                        if (connSalesforce2.State != ConnectionState.Closed)
                        {
                            connSalesforce2.Close();
                            connSalesforce2.Open();
                        }
                        else if (connSalesforce2.State == ConnectionState.Closed) connSalesforce2.Open();
                        Object objMedicalProviderId = cmdQueryForMedicalProviderId.ExecuteScalar();
                        if (connSalesforce2.State == ConnectionState.Open) connSalesforce2.Close();                          

                        String MedicalProviderId = String.Empty;
                        if (objMedicalProviderId != null) MedicalProviderId = objMedicalProviderId.ToString();
                        else
                        {
                            MessageBox.Show("No Medical Provider Id for Medical Provider Name: " + txtMedicalProvider.Text.Trim(), "Error", MessageBoxButtons.OK);
                            return;
                        }

                        int nPatientType = 0;   // default outpatient

                        if (rbOutpatient.Checked) nPatientType = 0;
                        else if (rbInpatient.Checked) nPatientType = 1;

                        String strNote = String.Empty;

                        if (comboMedBillType.SelectedItem.ToString() == "Medical Bill")
                        {
                            strNote = txtMedBillNote.Text.Trim();
                        }
                        else if (comboMedBillType.SelectedItem.ToString() == "Prescription")
                        {
                            strNote = txtPrescriptionNote.Text.Trim();
                        }
                        else if (comboMedBillType.SelectedItem.ToString() == "Physical Therapy")
                        {
                            strNote = txtPhysicalTherapyRxNote.Text.Trim();
                        }

                        // Update the Medical Bill
                        String strSqlUpdateMedBill = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[LastModifiedDate] = @NewLastModifiedDate, [dbo].[tbl_medbill].[LastModifiedById] = @NewLastModifiedById, " +
                                                         "[dbo].[tbl_medbill].[Case_Id] = @NewCaseId, [dbo].[tbl_medbill].[Incident_Id] = @NewIncidentId, [dbo].[tbl_medbill].[Illness_Id] = @NewIllnessId, " +
                                                         "[dbo].[tbl_medbill].[BillAmount] = @NewBillAmount, [dbo].[tbl_medbill].[MedBillType_Id] = @NewMedBillType_Id, " +
                                                         "[dbo].[tbl_medbill].[SettlementTotal] = @NewSettlementTotal, [dbo].[tbl_medbill].[Balance] = @NewBalance, " +
                                                         "[dbo].[tbl_medbill].[BillDate] = @NewBillDate, [dbo].[tbl_medbill].[DueDate] = @NewDueDate, [dbo].[tbl_medbill].[TotalSharedAmount] = @NewTotalSharedAmount, " +
                                                         "[dbo].[tbl_medbill].[Guarantor] = @NewGuarantor, " +
                                                         "[dbo].[tbl_medbill].[MedicalProvider_Id] = @NewMedicalProviderId, " +
                                                         "[dbo].[tbl_medbill].[Account_At_Provider] = @NewAccountAtProvider, " +
                                                         "[dbo].[tbl_medbill].[ProviderPhoneNumber] = @NewProviderPhoneNo, " +
                                                         "[dbo].[tbl_medbill].[ProviderContactPerson] = @NewProviderContactPerson, " +
                                                         "[dbo].[tbl_medbill].[ProposalLetterSentDate] = @NewProposalLetterSentDate, " +
                                                         "[dbo].[tbl_medbill].[HIPPASentDate] = @NewHIPPASentDate, " +
                                                         "[dbo].[tbl_medbill].[MedicalRecordDate] = @NewMedicalRecordDate, " +
                                                         "[dbo].[tbl_medbill].[PrescriptionDrugName] = @NewPrescriptionDrugName, [dbo].[tbl_medbill].[PrescriptionNo] = @NewPrescriptionNo, " +
                                                         "[dbo].[tbl_medbill].[PrescriptionDescription] = @NewPrescriptionDescription, " +
                                                         "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy] = @NewTotalNumberOfPhysicalTherapy, " +
                                                         "[dbo].[tbl_medbill].[PatientTypeId] = @NewPatientTypeId, " +
                                                         "[dbo].[tbl_medbill].[Note] = @Note, " +
                                                         "[dbo].[tbl_medbill].[WellBeingCareTotal] = @NewWellBeingCareTotal, [dbo].[tbl_medbill].[WellBeingCare] = @NewWellBeingCare, " +
                                                         "[dbo].[tbl_medbill].[IneligibleReason] = @NewIneligibleReason, [dbo].[tbl_medbill].[PendingReason] = @NewPendingReason, " +
                                                         "[dbo].[tbl_medbill].[OriginalPrescription] = @NewOriginalPrescription " +
                                                         "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and [dbo].[tbl_medbill].[Contact_Id] = @IndividualId";

                        SqlCommand cmdUpdateMedBill = new SqlCommand(strSqlUpdateMedBill, connRN5);
                        cmdUpdateMedBill.CommandType = CommandType.Text;

                        cmdUpdateMedBill.Parameters.AddWithValue("@NewLastModifiedDate", DateTime.Today.ToString("MM/dd/yyyy"));
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewLastModifiedById", nLoggedUserId);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewCaseId", txtMedBill_CaseNo.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewIncidentId", strIncidentId);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewIllnessId", strIllnessId);
                        Decimal resultBillAmount = 0;
                        Decimal BillAmount = 0;
                        if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out resultBillAmount))
                        {
                            BillAmount = resultBillAmount;
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewBillAmount", BillAmount);
                        }
                        else
                        {
                            MessageBox.Show("Invalid Bill Amount", "Error", MessageBoxButtons.OK);
                            return;
                        }
                        //cmdUpdateMedBill.Parameters.AddWithValue("@NewBillAmount", Decimal.Parse(txtMedBillAmount.Text.Substring(1).Trim()));
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewMedBillType_Id", comboMedBillType.SelectedIndex + 1);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewSettlementTotal", 0);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewBalance", 0);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewBillDate", dtpBillDate.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewDueDate", dtpDueDate.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalSharedAmount", 0);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewGuarantor", txtMedBillGuarantor.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewMedicalProviderId", MedicalProviderId);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewAccountAtProvider", txtMedBillAccountNoAtProvider.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewProviderPhoneNo", txtMedProviderPhoneNo.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewProviderContactPerson", txtProviderContactPerson.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewProposalLetterSentDate", dtpProposalLetterSentDate.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewHIPPASentDate", dtpHippaSentDate.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewMedicalRecordDate", dtpMedicalRecordDate.Value);

                        if (comboMedBillType.SelectedIndex == 0)        // Medical Bill Type - Medical Bill
                        {
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", DBNull.Value);

                            cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", DBNull.Value);

                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", nPatientType);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", comboPendingReason.SelectedIndex);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", comboIneligibleReason.SelectedIndex);

                            cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);

                        }
                        if (comboMedBillType.SelectedIndex == 1)        // Medical Bill Type - Prescription
                        {
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", DBNull.Value);

                            cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", DBNull.Value);

                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", txtPrescriptionName.Text.Trim());
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", txtNumberOfMedication.Text.Trim());
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", txtPrescriptionDescription.Text.Trim());

                            cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);
                        }
                        if (comboMedBillType.SelectedIndex == 2)        // Medical Bill Type - Physical Therapy
                        {
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", DBNull.Value);

                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", DBNull.Value);

                            int nNumberOfPhysicalTherapy = 0;
                            short result = 0;
                            if (Int16.TryParse(txtNumPhysicalTherapy.Text.Trim(), out result))
                            {
                                nNumberOfPhysicalTherapy = result;
                                cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", nNumberOfPhysicalTherapy);
                            }
                            else MessageBox.Show("Please enter a positive integer in Number of Physical Therapy Text Box.", "Alert");

                            cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);
                        }


                        cmdUpdateMedBill.Parameters.AddWithValue("@NewWellBeingCareTotal", 0);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewWellBeingCare", 0);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewOriginalPrescription", String.Empty);
                        cmdUpdateMedBill.Parameters.AddWithValue("@MedBillNo", MedBillNo);
                        cmdUpdateMedBill.Parameters.AddWithValue("@IndividualId", IndividualId);

                        //if (connRN.State == ConnectionState.Closed) connRN.Open();
                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        int nAffectedRow = cmdUpdateMedBill.ExecuteNonQuery();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (nAffectedRow == 1)
                        {
                            MessageBox.Show("The Medical Bill has been updated.", "Information");
                        }
                        else if (nAffectedRow == 0)
                        {
                            MessageBox.Show("The Medical Bill has not been updated.", "Error");
                        }

                        bIsModified = false;

                        //tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                        //tbCMMManager.SelectedIndex = 4;

                    }

                    tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                    tbCMMManager.SelectedIndex = 4;
                }
                else if (dlgResult == DialogResult.No)
                {
                    tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                    tbCMMManager.SelectedIndex = 4;
                    return;
                }
                //else if (dlgResult == DialogResult.Cancel)
                //{
                //    return;
                //}
            }
            else return;
        }

        //private void btnNewMedBill_Click(object sender, EventArgs e)
        //{

        //    int nRowSelected;
        //    String strCaseNameSelected = String.Empty;
        //    String strIndividualId = txtIndividualID.Text.Trim();
        //    String strPatientLastName = txtLastName.Text.Trim();
        //    String strPatientFirstName = txtFirstName.Text.Trim();
        //    String strPatientMiddleName = txtMiddleName.Text.Trim();
        //    String strDateOfBirth = txtDateOfBirth.Text.Trim();
        //    String strSSN = txtIndividualSSN.Text.Trim();
        //    String strStreetAddr = txtStreetAddress1.Text.Trim();
        //    String strCity = txtCity1.Text.Trim();
        //    String strState = txtState1.Text.Trim();
        //    String strZip = txtZip1.Text.Trim();


        //    if (gvCaseViewCaseHistory.Rows.Count > 0)
        //    {
        //        nRowSelected = gvCaseViewCaseHistory.CurrentCell.RowIndex;

        //        txtIndividualIDMedBill.Text = strIndividualId.Trim();

        //        if (strPatientMiddleName != String.Empty) txtPatientNameMedBill.Text = strPatientLastName + ", " + strPatientFirstName + " " + strPatientMiddleName;
        //        else txtPatientNameMedBill.Text = strPatientLastName + ", " + strPatientFirstName;

        //        txtMedBillDOB.Text = strDateOfBirth;
        //        txtMedBillSSN.Text = strSSN;
        //        txtMedBillAddress.Text = strStreetAddr + ", " + strCity + ", " + strState + " " + strZip;

        //        strCaseNameSelected = gvCaseViewCaseHistory["CaseName", nRowSelected].Value.ToString().Trim();
        //        strCaseIdSelected = strCaseNameSelected;
        //        strContactIdSelected = gvCaseViewCaseHistory["Individual_Id", nRowSelected].Value.ToString().Trim();

        //        strCaseIdForIllness = strCaseNameSelected;
        //        txtMedBill_CaseNo.Text = strCaseNameSelected;
        //        txtMedicalBillStatus.Text = "Pending Status";


        //        String strSqlQueryForCase = "select dbo.tbl_case.Case_Name, dbo.tbl_case.[NPF_Form], dbo.tbl_case.[NPF_Form_File_Name], dbo.tbl_case.[NPF_Receiv_Date], " +
        //                                    "dbo.tbl_case.[IB_Form], dbo.tbl_case.[IB_Form_File_Name], dbo.tbl_case.[IB_Receiv_Date], " +
        //                                    "dbo.tbl_case.[POP_Form], dbo.tbl_case.[POP_Form_File_Name], dbo.tbl_case.[POP_Receiv_Date], " +
        //                                    "dbo.tbl_case.[MedRec_Form], dbo.tbl_case.[MedRec_Form_File_Name], dbo.tbl_case.[MedRec_Receiv_Date], " +
        //                                    "dbo.tbl_case.[Unknown_Form], dbo.tbl_case.[Unknown_Form_File_Name], dbo.tbl_case.[Unknown_Receiv_Date] " +
        //                                    "from dbo.tbl_case where Case_Name = @CaseId";

        //        SqlCommand cmdQueryForDocumentReceivedDate = new SqlCommand(strSqlQueryForCase, connRN);
        //        cmdQueryForDocumentReceivedDate.CommandType = CommandType.Text;

        //        cmdQueryForDocumentReceivedDate.Parameters.AddWithValue("@CaseId", strCaseNameSelected);

        //        connRN.Open();
        //        SqlDataReader rdrDocsReceivedDate = cmdQueryForDocumentReceivedDate.ExecuteReader();

        //        if (rdrDocsReceivedDate.HasRows)
        //        {
        //            rdrDocsReceivedDate.Read();

        //            if (rdrDocsReceivedDate.GetBoolean(1) == true)
        //            {
        //                chkMedBillNPFReceived.Checked = true;
        //                dtpMedBillNPF.Format = DateTimePickerFormat.Short;
        //                dtpMedBillNPF.Value = rdrDocsReceivedDate.GetDateTime(3);
        //                btnViewNPF.Enabled = true;
        //            }
        //            else
        //            {
        //                dtpMedBillNPF.Format = DateTimePickerFormat.Custom;
        //                dtpMedBillNPF.CustomFormat = " ";
        //                btnViewNPF.Enabled = false;
        //            }

        //            chkMedBillNPFReceived.Enabled = false;

        //            if (rdrDocsReceivedDate.GetBoolean(4) == true)
        //            {
        //                chkMedBill_IBReceived.Checked = true;
        //                dtpMedBill_IB.Format = DateTimePickerFormat.Short;
        //                dtpMedBill_IB.Value = rdrDocsReceivedDate.GetDateTime(6);
        //                btnViewIB.Enabled = true;
        //            }
        //            else
        //            {
        //                dtpMedBill_IB.Format = DateTimePickerFormat.Custom;
        //                dtpMedBill_IB.CustomFormat = " ";
        //                btnViewIB.Enabled = false;
        //            }

        //            chkMedBill_IBReceived.Enabled = false;

        //            if (rdrDocsReceivedDate.GetBoolean(7) == true)
        //            {
        //                chkMedBillPOPReceived.Checked = true;
        //                dtpMedBillPOP.Format = DateTimePickerFormat.Short;
        //                dtpMedBillPOP.Value = rdrDocsReceivedDate.GetDateTime(9);
        //                btnViewPoP.Enabled = true;
        //            }
        //            else
        //            {
        //                dtpMedBillPOP.Format = DateTimePickerFormat.Custom;
        //                dtpMedBillPOP.CustomFormat = " ";
        //                btnViewPoP.Enabled = false;
        //            }

        //            chkMedBillPOPReceived.Enabled = false;

        //            if (rdrDocsReceivedDate.GetBoolean(10) == true)
        //            {
        //                chkMedRecordReceived.Checked = true;
        //                dtpMedBillMedRecord.Format = DateTimePickerFormat.Short;
        //                dtpMedBillMedRecord.Value = rdrDocsReceivedDate.GetDateTime(12);
        //                btnViewMedRecord.Enabled = true;
        //            }
        //            else
        //            {
        //                dtpMedBillMedRecord.Format = DateTimePickerFormat.Custom;
        //                dtpMedBillMedRecord.CustomFormat = " ";
        //                btnViewMedRecord.Enabled = false;
        //            }

        //            chkMedRecordReceived.Enabled = false;

        //            if (rdrDocsReceivedDate.GetBoolean(13) == true)
        //            {
        //                chkOtherDocReceived.Checked = true;
        //                dtpMedBillOtherDoc.Format = DateTimePickerFormat.Short;
        //                dtpMedBillOtherDoc.Value = rdrDocsReceivedDate.GetDateTime(15);
        //                btnViewOtherDoc.Enabled = true;
        //            }
        //            else
        //            {
        //                dtpMedBillOtherDoc.Format = DateTimePickerFormat.Custom;
        //                dtpMedBillOtherDoc.CustomFormat = " ";
        //                btnViewOtherDoc.Enabled = false;
        //            }

        //            chkOtherDocReceived.Enabled = false;

        //        }
        //        connRN.Close();

        //        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //        String strQueryForICD10Codes = "select dbo.[ICD10 Code].ID, dbo.[ICD10 Code].ICD10_CODE__C, dbo.[ICD10 Code].Name from [dbo].[ICD10 Code]";

        //        SqlCommand cmdQueryForICD10Codes = new SqlCommand(strQueryForICD10Codes, connSalesforce);

        //        cmdQueryForICD10Codes.CommandType = CommandType.Text;
        //        cmdQueryForICD10Codes.CommandText = strQueryForICD10Codes;

        //        connSalesforce.Open();
        //        SqlDataReader rdrICD10Codes = cmdQueryForICD10Codes.ExecuteReader();


        //        lstICD10CodeInfo.Clear();

        //        if (rdrICD10Codes.HasRows)
        //        {
        //            while (rdrICD10Codes.Read())
        //            {
        //                lstICD10CodeInfo.Add(new ICD10CodeInfo { Id = rdrICD10Codes.GetString(0), ICD10Code = rdrICD10Codes.GetString(1), Name = rdrICD10Codes.GetString(2) });
        //            }
        //        }

        //        connSalesforce.Close();

        //        var srcICD10Codes = new AutoCompleteStringCollection();

        //        for (int i = 0; i < lstICD10CodeInfo.Count; i++)
        //        {
        //            srcICD10Codes.Add(lstICD10CodeInfo[i].ICD10Code);
        //        }

        //        txtMedBill_ICD10Code.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
        //        txtMedBill_ICD10Code.AutoCompleteSource = AutoCompleteSource.CustomSource;
        //        txtMedBill_ICD10Code.AutoCompleteCustomSource = srcICD10Codes;

        //        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //        String strSqlQueryForMaxMedBillNo = "select max(dbo.tbl_medbill.BillNo) from dbo.tbl_medbill";

        //        SqlCommand cmdQueryForMaxBillNo = new SqlCommand(strSqlQueryForMaxMedBillNo, connRN);
        //        cmdQueryForMaxBillNo.CommandType = CommandType.Text;

        //        connRN.Open();
        //        String strMaxMedBillNo = cmdQueryForMaxBillNo.ExecuteScalar().ToString();
        //        connRN.Close();
        //        String strNewMedBillNo = String.Empty;


        //        if (strMaxMedBillNo != String.Empty)
        //        {
        //            int nNewMedBillNo = Int32.Parse(strMaxMedBillNo.Substring(8));
        //            nNewMedBillNo++;
        //            int nLeadingZero = 0;
        //            while ((nNewMedBillNo.ToString().Length + nLeadingZero) < 7) nLeadingZero++;
        //            strNewMedBillNo = "MEDBILL-";
        //            for (int i = 0; i < nLeadingZero; i++) strNewMedBillNo += '0';

        //            strNewMedBillNo += nNewMedBillNo.ToString();
        //        }


        //        txtMedBillNo.Text = strNewMedBillNo;


        //        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //        String strSqlQueryForMedicalProvider = "select dbo.tbl_MedicalProvider.ID, dbo.tbl_MedicalProvider.Name, dbo.tbl_MedicalProvider.Type from dbo.tbl_MedicalProvider";

        //        SqlCommand cmdQueryForMedicalProvider = new SqlCommand(strSqlQueryForMedicalProvider, connRN);
        //        cmdQueryForMedicalProvider.CommandType = CommandType.Text;

        //        connRN.Open();

        //        SqlDataReader rdrMedicalProvider = cmdQueryForMedicalProvider.ExecuteReader();

        //        lstMedicalProvider.Clear();
        //        if (rdrMedicalProvider.HasRows)
        //        {
        //            while (rdrMedicalProvider.Read())
        //            {
        //                MedicalProviderInfo info = new MedicalProviderInfo();

        //                if (!rdrMedicalProvider.IsDBNull(0)) info.ID = rdrMedicalProvider.GetString(0);
        //                if (!rdrMedicalProvider.IsDBNull(1)) info.Name = rdrMedicalProvider.GetString(1);
        //                if (!rdrMedicalProvider.IsDBNull(2)) info.Type = rdrMedicalProvider.GetString(2);

        //                lstMedicalProvider.Add(info);
        //            }
        //        }

        //        connRN.Close();

        //        var srcMedicalProvider = new AutoCompleteStringCollection();

        //        for (int i = 0; i < lstMedicalProvider.Count; i++)
        //        {
        //            srcMedicalProvider.Add(lstMedicalProvider[i].Name);
        //        }

        //        txtMedicalProvider.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
        //        txtMedicalProvider.AutoCompleteSource = AutoCompleteSource.CustomSource;
        //        txtMedicalProvider.AutoCompleteCustomSource = srcMedicalProvider;


        //        tbCMMManager.TabPages.Insert(3, tbpgMedicalBill);
        //        tbCMMManager.SelectedIndex = 3;
        //    }
        //}

        private void btnNewMedBill_Case_Click(object sender, EventArgs e)
        {
            //if (!tbCMMManager.TabPages.Contains(tbpgMedicalBill))
            //{
            MedBillStart = PrevTabPage;
            medbillMode = MedBillMode.AddNew;

            //gvCaseViewCaseHistory
            int nRowSelected;

            String strCaseNameSelected = String.Empty;
            String strPatientLastName = txtLastName.Text.Trim();
            String strPatientFirstName = txtFirstName.Text.Trim();
            String strPatientMiddleName = txtMiddleName.Text.Trim();
            String strDateOfBirth = dtpBirthDate.Value.ToString("MM/dd/yyyy");
            String strSSN = txtIndividualSSN.Text.Trim();
            String strStreetAddr = txtStreetAddress1.Text.Trim();
            String strCity = txtCity1.Text.Trim();
            String strState = txtState1.Text.Trim();
            String strZip = txtZip1.Text.Trim();
            String strCurrentProgram = txtProgram.Text.Trim();

            if (PrevTabPage == TabPage.Individual)
            {
                if (gvProcessingCaseNo.Rows.Count > 0)
                {
                    InitializeMedBillTabOnNewMedBill();

                    //nRowSelected = gvProcessingCaseNo.CurrentCell.RowIndex;

                    txtIndividualIDMedBill.Text = strIndividualId.Trim();

                    if (strPatientMiddleName != String.Empty) txtPatientNameMedBill.Text = strPatientLastName + ", " + strPatientFirstName + " " + strPatientMiddleName;
                    else txtPatientNameMedBill.Text = strPatientLastName + ", " + strPatientFirstName;

                    txtMedBillDOB.Text = strDateOfBirth;
                    txtMedBillSSN.Text = strSSN;
                    txtMedBillAddress.Text = strStreetAddr + ", " + strCity + ", " + strState + " " + strZip;

                    //strCaseNameSelected = gvProcessingCaseNo["CaseIdForIndividual", nRowSelected].Value.ToString().Trim();
                    strCaseNameSelected = txtCaseName.Text.Trim();
                    strCaseIdSelected = strCaseNameSelected;
                    strContactIdSelected = strIndividualId;

                    strCaseIdForIllness = strCaseNameSelected;
                    txtMedBill_CaseNo.Text = strCaseNameSelected;
                    txtMemberProgram.Text = strCurrentProgram;

                    //txtMedicalBillStatus.Text = "Pending Status";

                    String strSqlQueryForCase = "select dbo.tbl_case.Case_Name, dbo.tbl_case.[NPF_Form], dbo.tbl_case.[NPF_Form_File_Name], dbo.tbl_case.[NPF_Receiv_Date], " +
                            "dbo.tbl_case.[IB_Form], dbo.tbl_case.[IB_Form_File_Name], dbo.tbl_case.[IB_Receiv_Date], " +
                            "dbo.tbl_case.[POP_Form], dbo.tbl_case.[POP_Form_File_Name], dbo.tbl_case.[POP_Receiv_Date], " +
                            "dbo.tbl_case.[MedRec_Form], dbo.tbl_case.[MedRec_Form_File_Name], dbo.tbl_case.[MedRec_Receiv_Date], " +
                            "dbo.tbl_case.[Unknown_Form], dbo.tbl_case.[Unknown_Form_File_Name], dbo.tbl_case.[Unknown_Receiv_Date] " +
                            "from dbo.tbl_case where Case_Name = @CaseId";

                    SqlCommand cmdQueryForDocumentReceivedDate = new SqlCommand(strSqlQueryForCase, connRN4);
                    cmdQueryForDocumentReceivedDate.CommandType = CommandType.Text;

                    cmdQueryForDocumentReceivedDate.Parameters.AddWithValue("@CaseId", strCaseNameSelected);

                    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    SqlDataReader rdrDocsReceivedDate = cmdQueryForDocumentReceivedDate.ExecuteReader();

                    if (rdrDocsReceivedDate.HasRows)
                    {
                        rdrDocsReceivedDate.Read();

                        if (rdrDocsReceivedDate.GetBoolean(1) == true)
                        {
                            chkMedBillNPFReceived.Checked = true;
                            dtpMedBillNPF.Format = DateTimePickerFormat.Short;
                            dtpMedBillNPF.Value = rdrDocsReceivedDate.GetDateTime(3);
                            btnViewNPF.Enabled = true;
                        }
                        else
                        {
                            dtpMedBillNPF.Format = DateTimePickerFormat.Custom;
                            dtpMedBillNPF.CustomFormat = " ";
                            btnViewNPF.Enabled = false;
                        }

                        chkMedBillNPFReceived.Enabled = false;

                        if (rdrDocsReceivedDate.GetBoolean(4) == true)
                        {
                            chkMedBill_IBReceived.Checked = true;
                            dtpMedBill_IB.Format = DateTimePickerFormat.Short;
                            dtpMedBill_IB.Value = rdrDocsReceivedDate.GetDateTime(6);
                            btnViewIB.Enabled = true;
                        }
                        else
                        {
                            dtpMedBill_IB.Format = DateTimePickerFormat.Custom;
                            dtpMedBill_IB.CustomFormat = " ";
                            btnViewIB.Enabled = false;
                        }

                        chkMedBill_IBReceived.Enabled = false;

                        if (rdrDocsReceivedDate.GetBoolean(7) == true)
                        {
                            chkMedBillPOPReceived.Checked = true;
                            dtpMedBillPOP.Format = DateTimePickerFormat.Short;
                            dtpMedBillPOP.Value = rdrDocsReceivedDate.GetDateTime(9);
                            btnViewPoP.Enabled = true;
                        }
                        else
                        {
                            dtpMedBillPOP.Format = DateTimePickerFormat.Custom;
                            dtpMedBillPOP.CustomFormat = " ";
                            btnViewPoP.Enabled = false;
                        }

                        chkMedBillPOPReceived.Enabled = false;

                        if (rdrDocsReceivedDate.GetBoolean(10) == true)
                        {
                            chkMedRecordReceived.Checked = true;
                            dtpMedBillMedRecord.Format = DateTimePickerFormat.Short;
                            dtpMedBillMedRecord.Value = rdrDocsReceivedDate.GetDateTime(12);
                            btnViewMedRecord.Enabled = true;
                        }
                        else
                        {
                            dtpMedBillMedRecord.Format = DateTimePickerFormat.Custom;
                            dtpMedBillMedRecord.CustomFormat = " ";
                            btnViewMedRecord.Enabled = false;
                        }

                        chkMedRecordReceived.Enabled = false;

                        if (rdrDocsReceivedDate.GetBoolean(13) == true)
                        {
                            chkOtherDocReceived.Checked = true;
                            dtpMedBillOtherDoc.Format = DateTimePickerFormat.Short;
                            dtpMedBillOtherDoc.Value = rdrDocsReceivedDate.GetDateTime(15);
                            btnViewOtherDoc.Enabled = true;
                        }
                        else
                        {
                            dtpMedBillOtherDoc.Format = DateTimePickerFormat.Custom;
                            dtpMedBillOtherDoc.CustomFormat = " ";
                            btnViewOtherDoc.Enabled = false;
                        }

                        chkOtherDocReceived.Enabled = false;

                    }
                    rdrDocsReceivedDate.Close();
                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    String strQueryForICD10Codes = "select dbo.[ICD10 Code].ID, dbo.[ICD10 Code].ICD10_CODE__C, dbo.[ICD10 Code].Name from [dbo].[ICD10 Code]";

                    SqlCommand cmdQueryForICD10Codes = new SqlCommand(strQueryForICD10Codes, connSalesforce3);

                    cmdQueryForICD10Codes.CommandType = CommandType.Text;
                    cmdQueryForICD10Codes.CommandText = strQueryForICD10Codes;

                    //if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                    if (connSalesforce3.State == ConnectionState.Open)
                    {
                        connSalesforce3.Close();
                        connSalesforce3.Open();
                    }
                    else if (connSalesforce3.State == ConnectionState.Closed) connSalesforce3.Open();
                    SqlDataReader rdrICD10Codes = cmdQueryForICD10Codes.ExecuteReader();

                    lstICD10CodeInfo.Clear();
                    if (rdrICD10Codes.HasRows)
                    {
                        while (rdrICD10Codes.Read())
                        {
                            lstICD10CodeInfo.Add(new ICD10CodeInfo { Id = rdrICD10Codes.GetString(0), ICD10Code = rdrICD10Codes.GetString(1), Name = rdrICD10Codes.GetString(2) });
                        }
                    }
                    rdrICD10Codes.Close();
                    if (connSalesforce3.State != ConnectionState.Closed) connSalesforce3.Close();

                    var srcICD10Codes = new AutoCompleteStringCollection();

                    for (int i = 0; i < lstICD10CodeInfo.Count; i++)
                    {
                        srcICD10Codes.Add(lstICD10CodeInfo[i].ICD10Code);
                    }

                    txtMedBill_ICD10Code.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                    txtMedBill_ICD10Code.AutoCompleteSource = AutoCompleteSource.CustomSource;
                    txtMedBill_ICD10Code.AutoCompleteCustomSource = srcICD10Codes;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    String strSqlQueryForCountMedBill = "select count([dbo].[tbl_medbill].[BillNo]) from [dbo].[tbl_medbill]";

                    SqlCommand cmdQueryForCountMedBill = new SqlCommand(strSqlQueryForCountMedBill, connRN4);
                    cmdQueryForCountMedBill.CommandType = CommandType.Text;

                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    int nMedBillCount = (int)cmdQueryForCountMedBill.ExecuteScalar();
                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();


                    String strNewMedBillNo = String.Empty;
                    if (nMedBillCount > 0)
                    {
                        if (connRN4.State != ConnectionState.Closed)
                        {
                            connRN4.Close();
                            connRN4.Open();
                        }
                        else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                        SqlCommand cmdNewMedBillId = connRN4.CreateCommand();
                        SqlTransaction tranGetNewMedBillId = connRN4.BeginTransaction(IsolationLevel.Serializable);

                        cmdNewMedBillId.Connection = connRN4;
                        cmdNewMedBillId.Transaction = tranGetNewMedBillId;

                        try
                        {
                            String strSqlQueryForLastMedBillId = "select [dbo].[tbl_LastID].[MedBillId] from [dbo].[tbl_LastID] where [dbo].[tbl_LastID].[Id] = 1";
                            cmdNewMedBillId.CommandType = CommandType.Text;
                            cmdNewMedBillId.CommandText = strSqlQueryForLastMedBillId;

                            Object objLastMedBillNo = cmdNewMedBillId.ExecuteScalar();

                            String NewMedBillNo = String.Empty;
                            if (objLastMedBillNo != null) NewMedBillNo = objLastMedBillNo.ToString();

                            int nNewMedBillNo = Int32.Parse(NewMedBillNo.Substring(8));
                            nNewMedBillNo++;

                            int nLeadingZero = 0;
                            while ((nNewMedBillNo.ToString().Length + nLeadingZero) < 7) nLeadingZero++;
                            strNewMedBillNo = "MEDBILL-";
                            for (int i = 0; i < nLeadingZero; i++) strNewMedBillNo += '0';

                            strNewMedBillNo += nNewMedBillNo.ToString();

                            String strSqlUpdateLastMedBillId = "update [dbo].[tbl_LastID] set [dbo].[tbl_LastID].[MedBillId] = @NewMedBillId where [dbo].[tbl_LastID].[Id] = 1";
                            cmdNewMedBillId.CommandType = CommandType.Text;
                            cmdNewMedBillId.CommandText = strSqlUpdateLastMedBillId;

                            cmdNewMedBillId.Parameters.AddWithValue("@NewMedBillId", strNewMedBillNo);

                            int nNewMedBillNoUpdated = cmdNewMedBillId.ExecuteNonQuery();

                            tranGetNewMedBillId.Commit();
                        }
                        catch (Exception ex)
                        {
                            try
                            {
                                tranGetNewMedBillId.Rollback();
                                MessageBox.Show(ex.Message, "Error");
                                return;
                            }
                            catch (SqlException se)
                            {
                                MessageBox.Show(se.Message, "Sql Error");
                                return;
                            }
                        }

                        if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                    }
                    else
                    {
                        strNewMedBillNo = "MEDBILL-0150000";

                        if (connRN4.State != ConnectionState.Closed)
                        {
                            connRN4.Close();
                            connRN4.Open();
                        }
                        else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                        SqlCommand cmdNewMedBillId = connRN4.CreateCommand();
                        SqlTransaction tranGetNewMedBillId = connRN4.BeginTransaction(IsolationLevel.Serializable);

                        cmdNewMedBillId.Connection = connRN4;
                        cmdNewMedBillId.Transaction = tranGetNewMedBillId;

                        try
                        {
                            String strSqlUpdateLastMedBillId = "update [dbo].[tbl_LastID] set [dbo].[tbl_LastID].[MedBillId] = @NewMedBillId where [dbo].[tbl_LastID].[Id] = 1";
                            cmdNewMedBillId.CommandType = CommandType.Text;
                            cmdNewMedBillId.CommandText = strSqlUpdateLastMedBillId;

                            cmdNewMedBillId.Parameters.AddWithValue("@NewMedBillId", strNewMedBillNo);

                            int nNewMedBillNoUpdated = cmdNewMedBillId.ExecuteNonQuery();

                            tranGetNewMedBillId.Commit();
                        }
                        catch (Exception ex)
                        {
                            try
                            {
                                tranGetNewMedBillId.Rollback();
                                MessageBox.Show(ex.Message, "Error");
                                return;
                            }
                            catch (SqlException se)
                            {
                                MessageBox.Show(se.Message, "Sql Error");
                                return;
                            }
                        }

                        if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    }

                    //String strSqlQueryForMaxMedBillNo = "select max(dbo.tbl_medbill.BillNo) from dbo.tbl_medbill";

                    //SqlCommand cmdQueryForMaxBillNo = new SqlCommand(strSqlQueryForMaxMedBillNo, connRN4);
                    //cmdQueryForMaxBillNo.CommandType = CommandType.Text;

                    ////if (connRN.State == ConnectionState.Closed) connRN.Open();
                    //if (connRN4.State != ConnectionState.Closed)
                    //{
                    //    connRN4.Close();
                    //    connRN4.Open();
                    //}
                    //else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    ////String strMaxMedBillNo = cmdQueryForMaxBillNo.ExecuteScalar().ToString();
                    //Object objMaxMedBillNo = cmdQueryForMaxBillNo.ExecuteScalar();
                    //if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    //String strMaxMedBillNo = String.Empty;
                    //if (objMaxMedBillNo != null) strMaxMedBillNo = objMaxMedBillNo.ToString();

                    ////String strNewMedBillNo = String.Empty;
                    //if (strMaxMedBillNo != String.Empty)
                    //{
                    //    int nNewMedBillNo = Int32.Parse(strMaxMedBillNo.Substring(8));
                    //    nNewMedBillNo++;
                    //    int nLeadingZero = 0;
                    //    while ((nNewMedBillNo.ToString().Length + nLeadingZero) < 7) nLeadingZero++;
                    //    strNewMedBillNo = "MEDBILL-";
                    //    for (int i = 0; i < nLeadingZero; i++) strNewMedBillNo += '0';

                    //    strNewMedBillNo += nNewMedBillNo.ToString();
                    //}
                    //else strNewMedBillNo = "MEDBILL - 0150000";
                    txtMedBillNo.Text = strNewMedBillNo;

                    // Populate Medical Bill Type combo box

                    String strSqlQueryForMedBillTypes = "select [dbo].[tbl_medbill_type].[MedBillTypeName] from [dbo].[tbl_medbill_type]";

                    SqlCommand cmdQueryForMedBillTypes = new SqlCommand(strSqlQueryForMedBillTypes, connRN4);
                    cmdQueryForMedBillTypes.CommandType = CommandType.Text;

                    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                    SqlDataReader rdrMedBillTypes = cmdQueryForMedBillTypes.ExecuteReader();
                    comboMedBillType.Items.Clear();
                    if (rdrMedBillTypes.HasRows)
                    {
                        while (rdrMedBillTypes.Read())
                        {
                            if (!rdrMedBillTypes.IsDBNull(0)) comboMedBillType.Items.Add(rdrMedBillTypes.GetString(0));
                        }
                    }
                    rdrMedBillTypes.Close();
                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                    comboMedBillType.SelectedIndex = (int)MedBillType.MedicalBill - 1;

                    // Populate Pending Reason
                    comboPendingReason.Items.Clear();
                    if (dicPendingReason.Count > 0)
                    {
                        for (int i = 0; i < dicPendingReason.Count; i++)
                        {
                            comboPendingReason.Items.Add(dicPendingReason[i]);
                        }
                        comboPendingReason.SelectedIndex = 0;
                    }

                    // Populate Ineligible Reason
                    comboIneligibleReason.Items.Clear();
                    if (dicIneligibleReason.Count > 0)
                    {
                        for (int i = 0; i < dicIneligibleReason.Count; i++)
                        {
                            comboIneligibleReason.Items.Add(dicIneligibleReason[i]);
                        }
                        comboIneligibleReason.SelectedIndex = 0;
                    }

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //String strSqlQueryForMedicalProvider = "select dbo.tbl_MedicalProvider.ID, dbo.tbl_MedicalProvider.Name, dbo.tbl_MedicalProvider.Type from dbo.tbl_MedicalProvider";

                    //SqlCommand cmdQueryForMedicalProvider = new SqlCommand(strSqlQueryForMedicalProvider, connRN4);
                    //cmdQueryForMedicalProvider.CommandType = CommandType.Text;

                    ////if (connRN.State == ConnectionState.Closed) connRN.Open();
                    //if (connRN4.State != ConnectionState.Closed)
                    //{
                    //    connRN4.Close();
                    //    connRN4.Open();
                    //}
                    //else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                    //SqlDataReader rdrMedicalProvider = cmdQueryForMedicalProvider.ExecuteReader();

                    //lstMedicalProvider.Clear();
                    //if (rdrMedicalProvider.HasRows)
                    //{
                    //    while (rdrMedicalProvider.Read())
                    //    {
                    //        MedicalProviderInfo info = new MedicalProviderInfo();

                    //        if (!rdrMedicalProvider.IsDBNull(0)) info.ID = rdrMedicalProvider.GetString(0);
                    //        if (!rdrMedicalProvider.IsDBNull(1)) info.Name = rdrMedicalProvider.GetString(1);
                    //        if (!rdrMedicalProvider.IsDBNull(2)) info.Type = rdrMedicalProvider.GetString(2);

                    //        lstMedicalProvider.Add(info);
                    //    }
                    //}

                    //if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    var srcMedicalProvider = new AutoCompleteStringCollection();

                    for (int i = 0; i < lstMedicalProvider.Count; i++)
                    {
                        srcMedicalProvider.Add(lstMedicalProvider[i].Name);
                    }

                    // Settlement gv
                    //String strSqlQueryForSettlement = "select [dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement_type_code].[SettlementTypeValue], [dbo].[tbl_settlement].[Amount], " +
                    //          "[dbo].[tbl_settlement].[PersonalResponsibilityCredit], [dbo].[tbl_payment_method].[PaymentMethod_Value], " +
                    //          "[dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate], " +
                    //          "[dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
                    //          "[dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], [dbo].[tbl_settlement].[ACH_Reconciled], " +
                    //          "[dbo].[tbl_Credit_Card__c].[Name], [dbo].[tbl_settlement].[CMMCreditCardPaidDate], [dbo].[tbl_settlement].[CC_Reconciled], " +
                    //          "[dbo].[tbl_settlement].[AllowedAmount], [dbo].[tbl_settlement].[IneligibleReason], " +
                    //          "[dbo].[tbl_settlement].[Notes] " +
                    //          "from [dbo].[tbl_settlement] inner join [dbo].[tbl_settlement_type_code] " +
                    //          "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                    //          "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
                    //          "inner join [dbo].[tbl_Credit_Card__c] on [dbo].[tbl_settlement].[CMMCreditCard] = [dbo].[tbl_Credit_Card__c].[CreditCard_Id]" +
                    //          "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and " +
                    //          "[dbo].[tbl_settlement].[IsDeleted] = 0 " +
                    //          "order by [dbo].[tbl_settlement].[Name]";

                    //SqlCommand cmdQueryForSettlement = new SqlCommand(strSqlQueryForSettlement, connRN);
                    //cmdQueryForSettlement.CommandType = CommandType.Text;

                    //cmdQueryForSettlement.Parameters.AddWithValue("@MedBillNo", MedBillNo);

                    //SqlDependency dependencySettlementInMedBill = new SqlDependency(cmdQueryForSettlement);
                    //dependencySettlementInMedBill.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillEditChange);

                    ////if (connRN.State == ConnectionState.Closed) connRN.Open();
                    //if (connRN.State != ConnectionState.Closed)
                    //{
                    //    connRN.Close();
                    //    connRN.Open();
                    //}
                    //else if (connRN.State == ConnectionState.Closed) connRN.Open();
                    //SqlDataReader rdrSettlement = cmdQueryForSettlement.ExecuteReader();
                    //gvSettlementsInMedBill.Rows.Clear();
                    //if (rdrSettlement.HasRows)
                    //{
                    //    while (rdrSettlement.Read())
                    //    {
                    //        DataGridViewRow row = new DataGridViewRow();
                    //        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                    //        if (!rdrSettlement.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(0) });
                    //        if (!rdrSettlement.IsDBNull(1))
                    //        {
                    //            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();

                    //            for (int i = 0; i < lstSettlementType.Count; i++)
                    //            {
                    //                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                    //            }
                    //            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                    //            {
                    //                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                    //                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                    //            }

                    //            row.Cells.Add(comboCellSettlementType);
                    //        }
                    //        else
                    //        {
                    //            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
                    //            for (int i = 0; i < lstSettlementType.Count; i++)
                    //            {
                    //                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                    //            }

                    //            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                    //            {
                    //                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                    //                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                    //            }

                    //            row.Cells.Add(comboCellSettlementType);
                    //        }

                    //        if (!rdrSettlement.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(2).ToString("C") });
                    //        else
                    //        {
                    //            Decimal Zero = 0;
                    //            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                    //        }


                    //        if (!rdrSettlement.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(3).ToString("C") });
                    //        else
                    //        {
                    //            Decimal Zero = 0;
                    //            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                    //        }

                    //        /////////////////////////////////////////////////////////////////////
                    //        if (!rdrSettlement.IsDBNull(4))
                    //        {
                    //            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                    //            for (int i = 0; i < lstPaymentMethod.Count; i++)
                    //            {
                    //                if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                    //                else comboCellPaymentMethod.Items.Add(String.Empty);
                    //            }

                    //            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                    //            {
                    //                if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                    //                    comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                    //            }

                    //            row.Cells.Add(comboCellPaymentMethod);
                    //        }
                    //        else
                    //        {
                    //            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                    //            for (int i = 0; i < lstPaymentMethod.Count; i++)
                    //            {
                    //                if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                    //                else comboCellPaymentMethod.Items.Add(String.Empty);
                    //                //comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                    //            }

                    //            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                    //            {
                    //                if ((!rdrSettlement.IsDBNull(4)) && comboCellPaymentMethod.Items[i] != null)
                    //                {
                    //                    if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                    //                        comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                    //                }
                    //                else comboCellPaymentMethod.Value = null;
                    //            }

                    //            row.Cells.Add(comboCellPaymentMethod);

                    //        }

                    //        /////////////////////////////////////////////////////////////////////
                    //        if (!rdrSettlement.IsDBNull(5))
                    //        {

                    //            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                    //            approvedCell.Value = rdrSettlement.GetBoolean(5);
                    //            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                    //            row.Cells.Add(approvedCell);
                    //        }
                    //        else
                    //        {
                    //            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                    //            approvedCell.Value = false;
                    //            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                    //            row.Cells.Add(approvedCell);
                    //        }

                    //        if (!rdrSettlement.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(6).ToString("MM/dd/yyyy")) });
                    //        else row.Cells.Add(new CalendarCell { Value = null });

                    //        // Payment information
                    //        if (!rdrSettlement.IsDBNull(4))
                    //        {
                    //            String strPaymentMethod = rdrSettlement.GetString(4);

                    //            switch (strPaymentMethod)
                    //            {
                    //                case "Check":
                    //                    if (!rdrSettlement.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(7) });
                    //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    DataGridViewComboBoxCell comboCellCreditCardNoneForCheck = new DataGridViewComboBoxCell();
                    //                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    //                    {
                    //                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNoneForCheck.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    //                        else comboCellCreditCardNoneForCheck.Items.Add(String.Empty);
                    //                    }
                    //                    row.Cells.Add(comboCellCreditCardNoneForCheck);
                    //                    if (!rdrSettlement.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(8).ToString("MM/dd/yyyy")) });
                    //                    if (!rdrSettlement.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(9) });
                    //                    break;
                    //                case "ACH/Banking":
                    //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    if (!rdrSettlement.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(10) });
                    //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    DataGridViewComboBoxCell comboCellCreditCardNoneForACH = new DataGridViewComboBoxCell();
                    //                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    //                    {
                    //                        if (lstCreditCardInfo[i].CreditCardNo != null)
                    //                            comboCellCreditCardNoneForACH.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    //                        else comboCellCreditCardNoneForACH.Items.Add(String.Empty);
                    //                    }
                    //                    row.Cells.Add(comboCellCreditCardNoneForACH);
                    //                    if (!rdrSettlement.IsDBNull(11)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(11).ToString("MM/dd/yyyy")) });
                    //                    if (!rdrSettlement.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(12) });
                    //                    break;
                    //                case "Credit Card":
                    //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                    //                    if (!rdrSettlement.IsDBNull(13))
                    //                    {
                    //                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    //                        {
                    //                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    //                            else comboCellCreditCard.Items.Add(String.Empty);
                    //                        }
                    //                        for (int i = 0; i < comboCellCreditCard.Items.Count; i++)
                    //                        {
                    //                            if (rdrSettlement.GetString(13) == comboCellCreditCard.Items[i].ToString())
                    //                                comboCellCreditCard.Value = comboCellCreditCard.Items[i];
                    //                        }
                    //                    }
                    //                    else
                    //                    {
                    //                        //DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                    //                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    //                        {
                    //                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    //                            else comboCellCreditCard.Items.Add(String.Empty);
                    //                        }
                    //                        comboCellCreditCard.Value = String.Empty;
                    //                        //row.Cells.Add(comboCellCreditCard);
                    //                    }
                    //                    row.Cells.Add(comboCellCreditCard);
                    //                    if (!rdrSettlement.IsDBNull(14)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(14).ToString("MM/dd/yyyy")) });
                    //                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    //                    if (!rdrSettlement.IsDBNull(15)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(15) });
                    //                    else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                    //                    break;
                    //                default:
                    //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    DataGridViewComboBoxCell comboCellCreditCardNone = new DataGridViewComboBoxCell();
                    //                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    //                    {
                    //                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNone.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    //                        else comboCellCreditCardNone.Items.Add(String.Empty);
                    //                    }
                    //                    row.Cells.Add(comboCellCreditCardNone);
                    //                    row.Cells.Add(new CalendarCell { Value = null });
                    //                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                    //                    break;
                    //            }
                    //        }
                    //        else
                    //        {

                    //            DataGridViewTextBoxCell txtCheckNoCell = new DataGridViewTextBoxCell();
                    //            txtCheckNoCell.Value = null;
                    //            row.Cells.Add(txtCheckNoCell);
                    //            DataGridViewTextBoxCell txtACHNoCell = new DataGridViewTextBoxCell();
                    //            txtACHNoCell.Value = null;
                    //            row.Cells.Add(txtACHNoCell);
                    //            DataGridViewComboBoxCell comboCreditCardCell = new DataGridViewComboBoxCell();
                    //            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    //            {
                    //                if (lstCreditCardInfo[i].CreditCardNo != null) comboCreditCardCell.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    //                else comboCreditCardCell.Items.Add(String.Empty);
                    //            }
                    //            row.Cells.Add(comboCreditCardCell);
                    //            comboCreditCardCell.ReadOnly = true;
                    //            CalendarCell calPaymentDate = new CalendarCell();
                    //            calPaymentDate.Value = null;
                    //            row.Cells.Add(calPaymentDate);
                    //            DataGridViewCheckBoxCell chkReconciledCell = new DataGridViewCheckBoxCell();
                    //            chkReconciledCell.Value = false;
                    //            row.Cells.Add(chkReconciledCell);

                    //        }


                    //        if (!rdrSettlement.IsDBNull(16)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(16).ToString("C") });
                    //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                    //        if (!rdrSettlement.IsDBNull(17))
                    //        {
                    //            if (dicIneligibleReason.Count > 0)
                    //            {
                    //                DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                    //                for (int i = 0; i < dicIneligibleReason.Count; i++)
                    //                {
                    //                    comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                    //                }
                    //                comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[rdrSettlement.GetInt32(17)];
                    //                row.Cells.Add(comboCellIneligibleReason);
                    //            }
                    //        }
                    //        else
                    //        {
                    //            if (dicIneligibleReason.Count > 0)
                    //            {
                    //                DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                    //                for (int i = 0; i < dicIneligibleReason.Count; i++)
                    //                {
                    //                    comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                    //                }
                    //                comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[0];
                    //                row.Cells.Add(comboCellIneligibleReason);
                    //            }
                    //        }

                    //        if (!rdrSettlement.IsDBNull(18)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(18) });
                    //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                    //        gvSettlementsInMedBill.Rows.Add(row);
                    //        //AddNewRowToGVSettlementSafely(row);
                    //    }
                    //}
                    //if (connRN.State != ConnectionState.Closed) connRN.Close();

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    ///
                    //Decimal PersonalResponsibilityAmount = 0;

                    //foreach (IncidentProgramInfo incdProgram in lstIncidentProgramInfo)
                    //{
                    //    if (incdProgram.bPersonalResponsibilityProgram == true) PersonalResponsibilityAmount = incdProgram.PersonalResponsibilityAmount;
                    //}

                    //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    //{
                    //    if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value != null)
                    //    {
                    //        Decimal result = 0;
                    //        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                    //        {
                    //            PersonalResponsibilityAmount -= result;
                    //        }
                    //    }
                    //}

                    //txtPersonalResponsibility.Text = PersonalResponsibilityAmount.ToString("C");

                    //if (PersonalResponsibilityAmount < 0) txtPersonalResponsibility.BackColor = Color.Yellow;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    {
                        if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
                        {
                            gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                        }

                        if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
                        {
                            gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                        }

                        if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
                        {
                            gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                        }
                        if (gvSettlementsInMedBill["PaymentMethod", i]?.Value == null)
                        {
                            gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = true;
                        }
                    }

                    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    {
                        if (gvSettlementsInMedBill[2, i]?.Value?.ToString() == "Ineligible") gvSettlementsInMedBill.Rows[i].DefaultCellStyle.BackColor = Color.Salmon;
                        else
                        {
                            gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                            gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                        }
                    }

                    if (txtMedBillAmount.Text.Trim() != String.Empty)
                    {
                        Decimal SettlementTotal = 0;
                        Decimal Balance = 0;
                        Decimal Result = 0;
                        Decimal BillAmount = 0;
                        if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out Result))
                        {
                            BillAmount = Result;

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                Decimal Settlement = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                                SettlementTotal += Settlement;
                            }
                            if (SettlementTotal > BillAmount) MessageBox.Show("Settlement Total exceeds the Medical Bill Amount.", "Alert");
                            else
                            {
                                Balance = BillAmount - SettlementTotal;
                                txtBalance.Text = Balance.ToString("C");
                            }
                        }
                    }

                    //btnAddNewSettlement.Enabled = true;
                    ////btnEditSettlement.Enabled = true;
                    //btnSaveSettlement.Enabled = true;
                    //btnDeleteSettlement.Enabled = true;

                    //tbCMMManager.TabPages.Insert(5, tbpgMedicalBill);
                    //tbCMMManager.SelectedIndex = 5;


                    // Med Bill fields initialization
                    cbMedBillClosed.SelectedIndex = 0;
                    txtMedBillAmount.Text = String.Empty;
                    txtBalance.Text = String.Empty;
                    rbOutpatient.Checked = false;
                    rbInpatient.Checked = false;
                    txtMedBillNote.Text = String.Empty;

                    // Prescription fields initialization
                    txtMedBillAmount.Text = String.Empty;
                    txtBalance.Text = String.Empty;
                    txtPrescriptionName.Text = String.Empty;
                    txtNumberOfMedication.Text = String.Empty;
                    txtPrescriptionDescription.Text = String.Empty;
                    txtPrescriptionNote.Text = String.Empty;

                    // Physical Therapy fields initialization
                    txtMedBillAmount.Text = String.Empty;
                    txtBalance.Text = String.Empty;
                    txtNumPhysicalTherapy.Text = String.Empty;
                    txtPhysicalTherapyRxNote.Text = String.Empty;



                    // Prepare settlement gridview



                    //// Etc group
                    //txtMedBillAccountNoAtProvider.Text = String.Empty;
                    //txtMedProviderPhoneNo.Text = String.Empty;
                    //txtProviderContactPerson.Text = String.Empty;

                    //tbCMMManager.TabPages.Remove(tbpgCreateCase);
                    //tbCMMManager.TabPages.Insert(5, tbpgMedicalBill);
                    //tbCMMManager.SelectedIndex = 5;

                    EnableMedicalBillForm();

                    btnMedBillCreatePgUpperSave.Enabled = true;
                    //btnMedBillCreationPgLowerSave.Enabled = true;

                    tbCMMManager.SelectedTab = tbpgMedicalBill;

                }
                else
                {
                    MessageBox.Show("Please create a case first.", "Alert");
                }
            }
            //else if (PrevTabPage == TabPage.CaseView)
            else
            {
                if (gvCaseViewCaseHistory.Rows.Count > 0)
                {
                    InitializeMedBillTabOnNewMedBill();
                    //nRowSelected = gvCaseViewCaseHistory.CurrentCell.RowIndex;

                    txtIndividualIDMedBill.Text = strIndividualId.Trim();

                    if (strPatientMiddleName != String.Empty) txtPatientNameMedBill.Text = strPatientLastName + ", " + strPatientFirstName + " " + strPatientMiddleName;
                    else txtPatientNameMedBill.Text = strPatientLastName + ", " + strPatientFirstName;

                    txtMedBillDOB.Text = strDateOfBirth;
                    txtMedBillSSN.Text = strSSN;
                    txtMedBillAddress.Text = strStreetAddr + ", " + strCity + ", " + strState + " " + strZip;

                    //strCaseNameSelected = gvCaseViewCaseHistory["CaseName", nRowSelected].Value.ToString().Trim();
                    strCaseNameSelected = txtCaseName.Text.Trim();
                    strCaseIdSelected = strCaseNameSelected;
                    //strContactIdSelected = gvCaseViewCaseHistory["Individual_Id", nRowSelected].Value.ToString().Trim();
                    strContactIdSelected = strIndividualId;

                    strCaseIdForIllness = strCaseNameSelected;
                    txtMedBill_CaseNo.Text = strCaseNameSelected;
                    txtMemberProgram.Text = strCurrentProgram;
                    //txtMedicalBillStatus.Text = "Pending Status";


                    String strSqlQueryForCase = "select dbo.tbl_case.Case_Name, dbo.tbl_case.[NPF_Form], dbo.tbl_case.[NPF_Form_File_Name], dbo.tbl_case.[NPF_Receiv_Date], " +
                                                "dbo.tbl_case.[IB_Form], dbo.tbl_case.[IB_Form_File_Name], dbo.tbl_case.[IB_Receiv_Date], " +
                                                "dbo.tbl_case.[POP_Form], dbo.tbl_case.[POP_Form_File_Name], dbo.tbl_case.[POP_Receiv_Date], " +
                                                "dbo.tbl_case.[MedRec_Form], dbo.tbl_case.[MedRec_Form_File_Name], dbo.tbl_case.[MedRec_Receiv_Date], " +
                                                "dbo.tbl_case.[Unknown_Form], dbo.tbl_case.[Unknown_Form_File_Name], dbo.tbl_case.[Unknown_Receiv_Date] " +
                                                "from dbo.tbl_case where Case_Name = @CaseId";

                    SqlCommand cmdQueryForDocumentReceivedDate = new SqlCommand(strSqlQueryForCase, connRN4);
                    cmdQueryForDocumentReceivedDate.CommandType = CommandType.Text;

                    cmdQueryForDocumentReceivedDate.Parameters.AddWithValue("@CaseId", strCaseNameSelected);

                    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    SqlDataReader rdrDocsReceivedDate = cmdQueryForDocumentReceivedDate.ExecuteReader();

                    if (rdrDocsReceivedDate.HasRows)
                    {
                        rdrDocsReceivedDate.Read();

                        if (rdrDocsReceivedDate.GetBoolean(1) == true)
                        {
                            chkMedBillNPFReceived.Checked = true;
                            dtpMedBillNPF.Format = DateTimePickerFormat.Short;
                            dtpMedBillNPF.Value = rdrDocsReceivedDate.GetDateTime(3);
                            btnViewNPF.Enabled = true;
                        }
                        else
                        {
                            dtpMedBillNPF.Format = DateTimePickerFormat.Custom;
                            dtpMedBillNPF.CustomFormat = " ";
                            btnViewNPF.Enabled = false;
                        }

                        chkMedBillNPFReceived.Enabled = false;

                        if (rdrDocsReceivedDate.GetBoolean(4) == true)
                        {
                            chkMedBill_IBReceived.Checked = true;
                            dtpMedBill_IB.Format = DateTimePickerFormat.Short;
                            dtpMedBill_IB.Value = rdrDocsReceivedDate.GetDateTime(6);
                            btnViewIB.Enabled = true;
                        }
                        else
                        {
                            dtpMedBill_IB.Format = DateTimePickerFormat.Custom;
                            dtpMedBill_IB.CustomFormat = " ";
                            btnViewIB.Enabled = false;
                        }

                        chkMedBill_IBReceived.Enabled = false;

                        if (rdrDocsReceivedDate.GetBoolean(7) == true)
                        {
                            chkMedBillPOPReceived.Checked = true;
                            dtpMedBillPOP.Format = DateTimePickerFormat.Short;
                            dtpMedBillPOP.Value = rdrDocsReceivedDate.GetDateTime(9);
                            btnViewPoP.Enabled = true;
                        }
                        else
                        {
                            dtpMedBillPOP.Format = DateTimePickerFormat.Custom;
                            dtpMedBillPOP.CustomFormat = " ";
                            btnViewPoP.Enabled = false;
                        }

                        chkMedBillPOPReceived.Enabled = false;

                        if (rdrDocsReceivedDate.GetBoolean(10) == true)
                        {
                            chkMedRecordReceived.Checked = true;
                            dtpMedBillMedRecord.Format = DateTimePickerFormat.Short;
                            dtpMedBillMedRecord.Value = rdrDocsReceivedDate.GetDateTime(12);
                            btnViewMedRecord.Enabled = true;
                        }
                        else
                        {
                            dtpMedBillMedRecord.Format = DateTimePickerFormat.Custom;
                            dtpMedBillMedRecord.CustomFormat = " ";
                            btnViewMedRecord.Enabled = false;
                        }

                        chkMedRecordReceived.Enabled = false;

                        if (rdrDocsReceivedDate.GetBoolean(13) == true)
                        {
                            chkOtherDocReceived.Checked = true;
                            dtpMedBillOtherDoc.Format = DateTimePickerFormat.Short;
                            dtpMedBillOtherDoc.Value = rdrDocsReceivedDate.GetDateTime(15);
                            btnViewOtherDoc.Enabled = true;
                        }
                        else
                        {
                            dtpMedBillOtherDoc.Format = DateTimePickerFormat.Custom;
                            dtpMedBillOtherDoc.CustomFormat = " ";
                            btnViewOtherDoc.Enabled = false;
                        }

                        chkOtherDocReceived.Enabled = false;

                    }
                    rdrDocsReceivedDate.Close();
                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();


                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    String strQueryForICD10Codes = "select dbo.[ICD10 Code].ID, dbo.[ICD10 Code].ICD10_CODE__C, dbo.[ICD10 Code].Name from [dbo].[ICD10 Code]";

                    SqlCommand cmdQueryForICD10Codes = new SqlCommand(strQueryForICD10Codes, connSalesforce3);

                    cmdQueryForICD10Codes.CommandType = CommandType.Text;
                    cmdQueryForICD10Codes.CommandText = strQueryForICD10Codes;

                    //if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                    if (connSalesforce3.State == ConnectionState.Open)
                    {
                        connSalesforce3.Close();
                        connSalesforce3.Open();
                    }
                    else if (connSalesforce3.State == ConnectionState.Closed) connSalesforce3.Open();
                    SqlDataReader rdrICD10Codes = cmdQueryForICD10Codes.ExecuteReader();

                    lstICD10CodeInfo.Clear();
                    if (rdrICD10Codes.HasRows)
                    {
                        while (rdrICD10Codes.Read())
                        {
                            lstICD10CodeInfo.Add(new ICD10CodeInfo { Id = rdrICD10Codes.GetString(0), ICD10Code = rdrICD10Codes.GetString(1), Name = rdrICD10Codes.GetString(2) });
                        }
                    }
                    rdrICD10Codes.Close();
                    if (connSalesforce3.State != ConnectionState.Closed) connSalesforce3.Close();

                    var srcICD10Codes = new AutoCompleteStringCollection();

                    for (int i = 0; i < lstICD10CodeInfo.Count; i++)
                    {
                        srcICD10Codes.Add(lstICD10CodeInfo[i].ICD10Code);
                    }

                    txtMedBill_ICD10Code.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                    txtMedBill_ICD10Code.AutoCompleteSource = AutoCompleteSource.CustomSource;
                    txtMedBill_ICD10Code.AutoCompleteCustomSource = srcICD10Codes;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    ///

                    String strSqlQueryForCountMedBill = "select count([dbo].[tbl_medbill].[BillNo]) from [dbo].[tbl_medbill]";

                    SqlCommand cmdQueryForCountMedBill = new SqlCommand(strSqlQueryForCountMedBill, connRN4);
                    cmdQueryForCountMedBill.CommandType = CommandType.Text;

                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    int nMedBillCount = (int)cmdQueryForCountMedBill.ExecuteScalar();
                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    String strNewMedBillNo = String.Empty;
                    if (nMedBillCount > 0)
                    {
                        if (connRN4.State != ConnectionState.Closed)
                        {
                            connRN4.Close();
                            connRN4.Open();
                        }
                        else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                        SqlCommand cmdNewMedBillId = connRN4.CreateCommand();
                        SqlTransaction tranGetNewMedBillId = connRN4.BeginTransaction(IsolationLevel.Serializable);

                        cmdNewMedBillId.Connection = connRN4;
                        cmdNewMedBillId.Transaction = tranGetNewMedBillId;

                        try
                        {
                            String strSqlQueryForLastMedBillId = "select [dbo].[tbl_LastID].[MedBillId] from [dbo].[tbl_LastID] where [dbo].[tbl_LastID].[Id] = 1";
                            cmdNewMedBillId.CommandType = CommandType.Text;
                            cmdNewMedBillId.CommandText = strSqlQueryForLastMedBillId;

                            Object objLastMedBillNo = cmdNewMedBillId.ExecuteScalar();

                            String NewMedBillNo = String.Empty;
                            if (objLastMedBillNo != null) NewMedBillNo = objLastMedBillNo.ToString();

                            int nNewMedBillNo = Int32.Parse(NewMedBillNo.Substring(8));
                            nNewMedBillNo++;

                            int nLeadingZero = 0;
                            while ((nNewMedBillNo.ToString().Length + nLeadingZero) < 7) nLeadingZero++;
                            strNewMedBillNo = "MEDBILL-";
                            for (int i = 0; i < nLeadingZero; i++) strNewMedBillNo += '0';

                            strNewMedBillNo += nNewMedBillNo.ToString();

                            String strSqlUpdateLastMedBillId = "update [dbo].[tbl_LastID] set [dbo].[tbl_LastID].[MedBillId] = @NewMedBillId where [dbo].[tbl_LastID].[Id] = 1";
                            cmdNewMedBillId.CommandType = CommandType.Text;
                            cmdNewMedBillId.CommandText = strSqlUpdateLastMedBillId;

                            cmdNewMedBillId.Parameters.AddWithValue("@NewMedBillId", strNewMedBillNo);

                            int nNewMedBillNoUpdated = cmdNewMedBillId.ExecuteNonQuery();

                            tranGetNewMedBillId.Commit();
                        }
                        catch (Exception ex)
                        {
                            try
                            {
                                tranGetNewMedBillId.Rollback();
                                MessageBox.Show(ex.Message, "Error");
                                return;
                            }
                            catch (SqlException se)
                            {
                                MessageBox.Show(se.Message, "Sql Error");
                                return;
                            }
                        }

                        if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                    }
                    else
                    {
                        strNewMedBillNo = "MEDBILL-0150000";

                        if (connRN4.State != ConnectionState.Closed)
                        {
                            connRN4.Close();
                            connRN4.Open();
                        }
                        else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                        SqlCommand cmdNewMedBillId = connRN4.CreateCommand();
                        SqlTransaction tranGetNewMedBillId = connRN4.BeginTransaction(IsolationLevel.Serializable);

                        cmdNewMedBillId.Connection = connRN4;
                        cmdNewMedBillId.Transaction = tranGetNewMedBillId;

                        try
                        {
                            String strSqlUpdateLastMedBillId = "update [dbo].[tbl_LastID] set [dbo].[tbl_LastID].[MedBillId] = @NewMedBillId where [dbo].[tbl_LastID].[Id] = 1";
                            cmdNewMedBillId.CommandType = CommandType.Text;
                            cmdNewMedBillId.CommandText = strSqlUpdateLastMedBillId;

                            cmdNewMedBillId.Parameters.AddWithValue("@NewMedBillId", strNewMedBillNo);

                            int nNewMedBillNoUpdated = cmdNewMedBillId.ExecuteNonQuery();

                            tranGetNewMedBillId.Commit();
                        }
                        catch (Exception ex)
                        {
                            try
                            {
                                tranGetNewMedBillId.Rollback();
                                MessageBox.Show(ex.Message, "Error");
                                return;
                            }
                            catch (SqlException se)
                            {
                                MessageBox.Show(se.Message, "Sql Error");
                                return;
                            }
                        }

                        if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    }
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //String strSqlQueryForMaxMedBillNo = "select max(dbo.tbl_medbill.BillNo) from dbo.tbl_medbill";

                    //SqlCommand cmdQueryForMaxBillNo = new SqlCommand(strSqlQueryForMaxMedBillNo, connRN4);
                    //cmdQueryForMaxBillNo.CommandType = CommandType.Text;

                    ////if (connRN.State == ConnectionState.Closed) connRN.Open();
                    //if (connRN4.State != ConnectionState.Closed)
                    //{
                    //    connRN4.Close();
                    //    connRN4.Open();
                    //}
                    //else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    ////String strMaxMedBillNo = cmdQueryForMaxBillNo.ExecuteScalar().ToString();
                    //Object objMaxMedBillNo = cmdQueryForMaxBillNo.ExecuteScalar();
                    //if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    //String strMaxMedBillNo = String.Empty;

                    //if (objMaxMedBillNo != null) strMaxMedBillNo = objMaxMedBillNo.ToString();

                    //String strNewMedBillNo = String.Empty;

                    //if (strMaxMedBillNo != String.Empty)
                    //{
                    //    int nNewMedBillNo = Int32.Parse(strMaxMedBillNo.Substring(8));
                    //    nNewMedBillNo++;
                    //    int nLeadingZero = 0;
                    //    while ((nNewMedBillNo.ToString().Length + nLeadingZero) < 7) nLeadingZero++;
                    //    strNewMedBillNo = "MEDBILL-";
                    //    for (int i = 0; i < nLeadingZero; i++) strNewMedBillNo += '0';

                    //    strNewMedBillNo += nNewMedBillNo.ToString();
                    //}
                    //else strNewMedBillNo = "MEDBILL - 0150000";
                    txtMedBillNo.Text = strNewMedBillNo;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// Populate the medical bill types
                    /// 
                    //String strSqlQueryForMedBillTypes = "select [dbo].[tbl_medbill_type].[MedBillTypeId], [dbo].[tbl_medbill_type].[MedBillTypeName] from [dbo].[tbl_medbill_type]";
                    String strSqlQueryForMedBillTypes = "select [dbo].[tbl_medbill_type].[MedBillTypeName] from [dbo].[tbl_medbill_type]";

                    SqlCommand cmdQueryForMedBillTypes = new SqlCommand(strSqlQueryForMedBillTypes, connRN4);
                    cmdQueryForMedBillTypes.CommandType = CommandType.Text;

                    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    SqlDataReader rdrMedBillTypes = cmdQueryForMedBillTypes.ExecuteReader();
                    comboMedBillType.Items.Clear();

                    if (rdrMedBillTypes.HasRows)
                    {
                        while (rdrMedBillTypes.Read())
                        {
                            if (!rdrMedBillTypes.IsDBNull(0)) comboMedBillType.Items.Add(rdrMedBillTypes.GetString(0));
                        }
                    }
                    rdrMedBillTypes.Close();
                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                    comboMedBillType.SelectedIndex = (int)MedBillType.MedicalBill - 1;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// Populate the medical bill status
                    /// 
                    comboMedBillStatus.Items.Clear();
                    if (dicMedBillStatus.Count > 0)
                    {
                        for (int i = 0; i < dicMedBillStatus.Count; i++)
                        {
                            comboMedBillStatus.Items.Add(dicMedBillStatus[i]);
                        }
                        comboMedBillStatus.SelectedIndex = 0;
                    }


                    // Populate Pending Reason
                    comboPendingReason.Items.Clear();
                    if (dicPendingReason.Count > 0)
                    {
                        for (int i = 0; i < dicPendingReason.Count; i++)
                        {
                            comboPendingReason.Items.Add(dicPendingReason[i]);
                        }
                        comboPendingReason.SelectedIndex = 0;
                    }

                    // Populate Ineligible Reason
                    comboIneligibleReason.Items.Clear();
                    if (dicIneligibleReason.Count > 0)
                    {
                        for (int i = 0; i < dicIneligibleReason.Count; i++)
                        {
                            comboIneligibleReason.Items.Add(dicIneligibleReason[i]);
                        }
                        comboIneligibleReason.SelectedIndex = 0;
                    }

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //String strSqlQueryForMedicalProvider = "select dbo.tbl_MedicalProvider.ID, dbo.tbl_MedicalProvider.Name, dbo.tbl_MedicalProvider.Type from dbo.tbl_MedicalProvider";

                    //SqlCommand cmdQueryForMedicalProvider = new SqlCommand(strSqlQueryForMedicalProvider, connRN4);
                    //cmdQueryForMedicalProvider.CommandType = CommandType.Text;

                    ////if (connRN.State == ConnectionState.Closed) connRN.Open();
                    //if (connRN4.State != ConnectionState.Closed)
                    //{
                    //    connRN4.Close();
                    //    connRN4.Open();
                    //}
                    //else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                    //SqlDataReader rdrMedicalProvider = cmdQueryForMedicalProvider.ExecuteReader();

                    //lstMedicalProvider.Clear();
                    //if (rdrMedicalProvider.HasRows)
                    //{
                    //    while (rdrMedicalProvider.Read())
                    //    {
                    //        MedicalProviderInfo info = new MedicalProviderInfo();

                    //        if (!rdrMedicalProvider.IsDBNull(0)) info.ID = rdrMedicalProvider.GetString(0);
                    //        if (!rdrMedicalProvider.IsDBNull(1)) info.Name = rdrMedicalProvider.GetString(1);
                    //        if (!rdrMedicalProvider.IsDBNull(2)) info.Type = rdrMedicalProvider.GetString(2);

                    //        lstMedicalProvider.Add(info);
                    //    }
                    //}

                    //if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    var srcMedicalProvider = new AutoCompleteStringCollection();

                    for (int i = 0; i < lstMedicalProvider.Count; i++)
                    {
                        srcMedicalProvider.Add(lstMedicalProvider[i].Name);
                    }

                    txtMedicalProvider.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                    txtMedicalProvider.AutoCompleteSource = AutoCompleteSource.CustomSource;
                    txtMedicalProvider.AutoCompleteCustomSource = srcMedicalProvider;

                    // Prepare settlement gv
                    //String strSqlQueryForSettlement = "select [dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement_type_code].[SettlementTypeValue], [dbo].[tbl_settlement].[Amount], " +
                    //          "[dbo].[tbl_settlement].[PersonalResponsibilityCredit], [dbo].[tbl_payment_method].[PaymentMethod_Value], " +
                    //          "[dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate], " +
                    //          "[dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
                    //          "[dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], [dbo].[tbl_settlement].[ACH_Reconciled], " +
                    //          "[dbo].[tbl_Credit_Card__c].[Name], [dbo].[tbl_settlement].[CMMCreditCardPaidDate], [dbo].[tbl_settlement].[CC_Reconciled], " +
                    //          "[dbo].[tbl_settlement].[AllowedAmount], [dbo].[tbl_settlement].[IneligibleReason], " +
                    //          "[dbo].[tbl_settlement].[Notes] " +
                    //          "from [dbo].[tbl_settlement] inner join [dbo].[tbl_settlement_type_code] " +
                    //          "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                    //          "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
                    //          "inner join [dbo].[tbl_Credit_Card__c] on [dbo].[tbl_settlement].[CMMCreditCard] = [dbo].[tbl_Credit_Card__c].[CreditCard_Id]" +
                    //          "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and " +
                    //          "[dbo].[tbl_settlement].[IsDeleted] = 0 " +
                    //          "order by [dbo].[tbl_settlement].[Name]";

                    //SqlCommand cmdQueryForSettlement = new SqlCommand(strSqlQueryForSettlement, connRN);
                    //cmdQueryForSettlement.CommandType = CommandType.Text;

                    //cmdQueryForSettlement.Parameters.AddWithValue("@MedBillNo", MedBillNo);

                    //SqlDependency dependencySettlementInMedBill = new SqlDependency(cmdQueryForSettlement);
                    //dependencySettlementInMedBill.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillEditChange);

                    ////if (connRN.State == ConnectionState.Closed) connRN.Open();
                    //if (connRN.State != ConnectionState.Closed)
                    //{
                    //    connRN.Close();
                    //    connRN.Open();
                    //}
                    //else if (connRN.State == ConnectionState.Closed) connRN.Open();
                    //SqlDataReader rdrSettlement = cmdQueryForSettlement.ExecuteReader();
                    //gvSettlementsInMedBill.Rows.Clear();
                    //if (rdrSettlement.HasRows)
                    //{
                    //    while (rdrSettlement.Read())
                    //    {
                    //        DataGridViewRow row = new DataGridViewRow();
                    //        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                    //        if (!rdrSettlement.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(0) });
                    //        if (!rdrSettlement.IsDBNull(1))
                    //        {
                    //            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();

                    //            for (int i = 0; i < lstSettlementType.Count; i++)
                    //            {
                    //                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                    //            }
                    //            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                    //            {
                    //                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                    //                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                    //            }

                    //            row.Cells.Add(comboCellSettlementType);
                    //        }
                    //        else
                    //        {
                    //            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
                    //            for (int i = 0; i < lstSettlementType.Count; i++)
                    //            {
                    //                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                    //            }

                    //            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                    //            {
                    //                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                    //                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                    //            }

                    //            row.Cells.Add(comboCellSettlementType);
                    //        }

                    //        if (!rdrSettlement.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(2).ToString("C") });
                    //        else
                    //        {
                    //            Decimal Zero = 0;
                    //            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                    //        }


                    //        if (!rdrSettlement.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(3).ToString("C") });
                    //        else
                    //        {
                    //            Decimal Zero = 0;
                    //            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                    //        }

                    //        /////////////////////////////////////////////////////////////////////
                    //        if (!rdrSettlement.IsDBNull(4))
                    //        {
                    //            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                    //            for (int i = 0; i < lstPaymentMethod.Count; i++)
                    //            {
                    //                if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                    //                else comboCellPaymentMethod.Items.Add(String.Empty);
                    //            }

                    //            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                    //            {
                    //                if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                    //                    comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                    //            }

                    //            row.Cells.Add(comboCellPaymentMethod);
                    //        }
                    //        else
                    //        {
                    //            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                    //            for (int i = 0; i < lstPaymentMethod.Count; i++)
                    //            {
                    //                if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                    //                else comboCellPaymentMethod.Items.Add(String.Empty);
                    //                //comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                    //            }

                    //            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                    //            {
                    //                if ((!rdrSettlement.IsDBNull(4)) && comboCellPaymentMethod.Items[i] != null)
                    //                {
                    //                    if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                    //                        comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                    //                }
                    //                else comboCellPaymentMethod.Value = null;
                    //            }

                    //            row.Cells.Add(comboCellPaymentMethod);

                    //        }

                    //        /////////////////////////////////////////////////////////////////////
                    //        if (!rdrSettlement.IsDBNull(5))
                    //        {

                    //            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                    //            approvedCell.Value = rdrSettlement.GetBoolean(5);
                    //            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                    //            row.Cells.Add(approvedCell);
                    //        }
                    //        else
                    //        {
                    //            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                    //            approvedCell.Value = false;
                    //            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                    //            row.Cells.Add(approvedCell);
                    //        }

                    //        if (!rdrSettlement.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(6).ToString("MM/dd/yyyy")) });
                    //        else row.Cells.Add(new CalendarCell { Value = null });

                    //        // Payment information
                    //        if (!rdrSettlement.IsDBNull(4))
                    //        {
                    //            String strPaymentMethod = rdrSettlement.GetString(4);

                    //            switch (strPaymentMethod)
                    //            {
                    //                case "Check":
                    //                    if (!rdrSettlement.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(7) });
                    //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    DataGridViewComboBoxCell comboCellCreditCardNoneForCheck = new DataGridViewComboBoxCell();
                    //                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    //                    {
                    //                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNoneForCheck.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    //                        else comboCellCreditCardNoneForCheck.Items.Add(String.Empty);
                    //                    }
                    //                    row.Cells.Add(comboCellCreditCardNoneForCheck);
                    //                    if (!rdrSettlement.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(8).ToString("MM/dd/yyyy")) });
                    //                    if (!rdrSettlement.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(9) });
                    //                    break;
                    //                case "ACH/Banking":
                    //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    if (!rdrSettlement.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(10) });
                    //                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    DataGridViewComboBoxCell comboCellCreditCardNoneForACH = new DataGridViewComboBoxCell();
                    //                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    //                    {
                    //                        if (lstCreditCardInfo[i].CreditCardNo != null)
                    //                            comboCellCreditCardNoneForACH.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    //                        else comboCellCreditCardNoneForACH.Items.Add(String.Empty);
                    //                    }
                    //                    row.Cells.Add(comboCellCreditCardNoneForACH);
                    //                    if (!rdrSettlement.IsDBNull(11)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(11).ToString("MM/dd/yyyy")) });
                    //                    if (!rdrSettlement.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(12) });
                    //                    break;
                    //                case "Credit Card":
                    //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                    //                    if (!rdrSettlement.IsDBNull(13))
                    //                    {
                    //                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    //                        {
                    //                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    //                            else comboCellCreditCard.Items.Add(String.Empty);
                    //                        }
                    //                        for (int i = 0; i < comboCellCreditCard.Items.Count; i++)
                    //                        {
                    //                            if (rdrSettlement.GetString(13) == comboCellCreditCard.Items[i].ToString())
                    //                                comboCellCreditCard.Value = comboCellCreditCard.Items[i];
                    //                        }
                    //                    }
                    //                    else
                    //                    {
                    //                        //DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                    //                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    //                        {
                    //                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    //                            else comboCellCreditCard.Items.Add(String.Empty);
                    //                        }
                    //                        comboCellCreditCard.Value = String.Empty;
                    //                        //row.Cells.Add(comboCellCreditCard);
                    //                    }
                    //                    row.Cells.Add(comboCellCreditCard);
                    //                    if (!rdrSettlement.IsDBNull(14)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(14).ToString("MM/dd/yyyy")) });
                    //                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    //                    if (!rdrSettlement.IsDBNull(15)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(15) });
                    //                    else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                    //                    break;
                    //                default:
                    //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                    //                    DataGridViewComboBoxCell comboCellCreditCardNone = new DataGridViewComboBoxCell();
                    //                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    //                    {
                    //                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNone.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    //                        else comboCellCreditCardNone.Items.Add(String.Empty);
                    //                    }
                    //                    row.Cells.Add(comboCellCreditCardNone);
                    //                    row.Cells.Add(new CalendarCell { Value = null });
                    //                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                    //                    break;
                    //            }
                    //        }
                    //        else
                    //        {

                    //            DataGridViewTextBoxCell txtCheckNoCell = new DataGridViewTextBoxCell();
                    //            txtCheckNoCell.Value = null;
                    //            row.Cells.Add(txtCheckNoCell);
                    //            DataGridViewTextBoxCell txtACHNoCell = new DataGridViewTextBoxCell();
                    //            txtACHNoCell.Value = null;
                    //            row.Cells.Add(txtACHNoCell);
                    //            DataGridViewComboBoxCell comboCreditCardCell = new DataGridViewComboBoxCell();
                    //            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    //            {
                    //                if (lstCreditCardInfo[i].CreditCardNo != null) comboCreditCardCell.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                    //                else comboCreditCardCell.Items.Add(String.Empty);
                    //            }
                    //            row.Cells.Add(comboCreditCardCell);
                    //            comboCreditCardCell.ReadOnly = true;
                    //            CalendarCell calPaymentDate = new CalendarCell();
                    //            calPaymentDate.Value = null;
                    //            row.Cells.Add(calPaymentDate);
                    //            DataGridViewCheckBoxCell chkReconciledCell = new DataGridViewCheckBoxCell();
                    //            chkReconciledCell.Value = false;
                    //            row.Cells.Add(chkReconciledCell);

                    //        }


                    //        if (!rdrSettlement.IsDBNull(16)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(16).ToString("C") });
                    //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                    //        if (!rdrSettlement.IsDBNull(17))
                    //        {
                    //            if (dicIneligibleReason.Count > 0)
                    //            {
                    //                DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                    //                for (int i = 0; i < dicIneligibleReason.Count; i++)
                    //                {
                    //                    comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                    //                }
                    //                comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[rdrSettlement.GetInt32(17)];
                    //                row.Cells.Add(comboCellIneligibleReason);
                    //            }
                    //        }
                    //        else
                    //        {
                    //            if (dicIneligibleReason.Count > 0)
                    //            {
                    //                DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                    //                for (int i = 0; i < dicIneligibleReason.Count; i++)
                    //                {
                    //                    comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                    //                }
                    //                comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[0];
                    //                row.Cells.Add(comboCellIneligibleReason);
                    //            }
                    //        }

                    //        if (!rdrSettlement.IsDBNull(18)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(18) });
                    //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                    //        gvSettlementsInMedBill.Rows.Add(row);
                    //        //AddNewRowToGVSettlementSafely(row);
                    //    }
                    //}
                    //if (connRN.State != ConnectionState.Closed) connRN.Close();

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    ///
                    //Decimal PersonalResponsibilityAmount = 0;

                    //foreach (IncidentProgramInfo incdProgram in lstIncidentProgramInfo)
                    //{
                    //    if (incdProgram.bPersonalResponsibilityProgram == true) PersonalResponsibilityAmount = incdProgram.PersonalResponsibilityAmount;
                    //}

                    //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    //{
                    //    if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value != null)
                    //    {
                    //        Decimal result = 0;
                    //        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                    //        {
                    //            PersonalResponsibilityAmount -= result;
                    //        }
                    //    }
                    //}

                    //txtPersonalResponsibility.Text = PersonalResponsibilityAmount.ToString("C");

                    //if (PersonalResponsibilityAmount < 0) txtPersonalResponsibility.BackColor = Color.Yellow;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    {
                        if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
                        {
                            gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                        }

                        if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
                        {
                            gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                        }

                        if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
                        {
                            gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                            gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                        }
                        if (gvSettlementsInMedBill["PaymentMethod", i]?.Value == null)
                        {
                            gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = true;
                            gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = true;
                        }
                    }

                    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    {
                        if (gvSettlementsInMedBill[2, i]?.Value?.ToString() == "Ineligible") gvSettlementsInMedBill.Rows[i].DefaultCellStyle.BackColor = Color.Salmon;
                        else
                        {
                            gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                            gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                        }
                    }

                    if (txtMedBillAmount.Text.Trim() != String.Empty)
                    {
                        Decimal SettlementTotal = 0;
                        Decimal Balance = 0;
                        Decimal Result = 0;
                        Decimal BillAmount = 0;
                        if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out Result))
                        {
                            BillAmount = Result;

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                Decimal Settlement = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                                SettlementTotal += Settlement;
                            }
                            if (SettlementTotal > BillAmount) MessageBox.Show("Settlement Total exceeds the Medical Bill Amount.", "Alert");
                            else
                            {
                                Balance = BillAmount - SettlementTotal;
                                txtBalance.Text = Balance.ToString("C");
                            }
                        }
                    }

                    //btnAddNewSettlement.Enabled = true;
                    ////btnEditSettlement.Enabled = true;
                    //btnSaveSettlement.Enabled = true;
                    //btnDeleteSettlement.Enabled = true;

                    //tbCMMManager.TabPages.Insert(5, tbpgMedicalBill);
                    //tbCMMManager.SelectedIndex = 5;

                    // Med Bill fields initialization
                    txtMedBillAmount.Text = String.Empty;
                    txtBalance.Text = String.Empty;
                    rbOutpatient.Checked = false;
                    rbInpatient.Checked = false;
                    txtMedBillNote.Text = String.Empty;

                    // Prescription fields initialization
                    txtMedBillAmount.Text = String.Empty;
                    txtBalance.Text = String.Empty;
                    txtPrescriptionName.Text = String.Empty;
                    txtNumberOfMedication.Text = String.Empty;
                    txtPrescriptionDescription.Text = String.Empty;
                    txtPrescriptionNote.Text = String.Empty;

                    // Physical Therapy fields initialization
                    txtMedBillAmount.Text = String.Empty;
                    txtBalance.Text = String.Empty;
                    txtNumPhysicalTherapy.Text = String.Empty;
                    txtPhysicalTherapyRxNote.Text = String.Empty;

                    //// Etc group
                    //txtMedBillAccountNoAtProvider.Text = String.Empty;
                    //txtMedProviderPhoneNo.Text = String.Empty;
                    //txtProviderContactPerson.Text = String.Empty;

                    //tbCMMManager.TabPages.Remove(tbpgCreateCase);
                    //tbCMMManager.TabPages.Insert(5, tbpgMedicalBill);
                    //tbCMMManager.SelectedIndex = 5;

                    EnableMedicalBillForm();

                    btnMedBillCreatePgUpperSave.Enabled = true;
                    //btnMedBillCreationPgLowerSave.Enabled = true;
                    tbCMMManager.SelectedTab = tbpgMedicalBill;
                }
                else
                {
                    MessageBox.Show("Please create a case first", "Alert");
                }
            }



            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //btnAddNewSettlement.Enabled = false;
            //btnSaveSettlement.Enabled = false;
            ////btnEditSettlement.Enabled = false;
            //btnDeleteSettlement.Enabled = false;

            //}
            //else MessageBox.Show("Medical Bill page is already open", "Alert");
        }

        private void InitializeMedBillTabOnNewMedBill()
        {
            txtMedBill_Illness.Text = String.Empty;
            txtMedBill_Incident.Text = String.Empty;
            txtIncdProgram.Text = String.Empty;

            txtMedBill_ICD10Code.Text = String.Empty;
            txtMedBillDiseaseName.Text = String.Empty;

            //txtMedicalBillStatus.Text = "Pending Status";
            txtMedBillAmount.Text = String.Empty;
            txtNumPhysicalTherapy.Text = String.Empty;
            txtNumberOfMedication.Text = String.Empty;
            txtPrescriptionDescription.Text = String.Empty;
            txtPrescriptionName.Text = String.Empty;
            txtMedicalProvider.Text = String.Empty;
            rbInpatient.Checked = false;
            rbOutpatient.Checked = false;

            txtTotalSharedAmtMedBill.Text = String.Empty;

            // Etc group
            txtMedBillAccountNoAtProvider.Text = String.Empty;
            txtMedProviderPhoneNo.Text = String.Empty;
            txtProviderContactPerson.Text = String.Empty;

            dtpBillDate.Text = String.Empty;
            dtpDueDate.Text = String.Empty;

            gvSettlementsInMedBill.Rows.Clear();
        }

        private void tbCMMManager_SelectedIndexChanged(object sender, EventArgs e)
        {
            if ((tbCMMManager.SelectedTab == tbCMMManager.TabPages["tbpgDashboardRNManager"]) ||
                (tbCMMManager.SelectedTab == tbCMMManager.TabPages["tbpgDashboardRNStaff"]) ||
                (tbCMMManager.SelectedTab == tbCMMManager.TabPages["tbpgDashboardNPManager"]) ||
                (tbCMMManager.SelectedTab == tbCMMManager.TabPages["tbpgDashboardNPStaff"]) ||
                (tbCMMManager.SelectedTab == tbCMMManager.TabPages["tbpgDashboardFDManager"]) ||
                (tbCMMManager.SelectedTab == tbCMMManager.TabPages["tbpgDashboardFDStaff"]))
            {
                BeforePrevTabPage = PrevTabPage;
                PrevTabPage = CurrentTabPage;
                CurrentTabPage = TabPage.DashBoard;
            }

            if (tbCMMManager.SelectedTab == tbCMMManager.TabPages["tbpgIndividual"])
            {
                BeforePrevTabPage = PrevTabPage;
                PrevTabPage = CurrentTabPage;
                CurrentTabPage = TabPage.Individual;
            }

            if (tbCMMManager.SelectedTab == tbCMMManager.TabPages["tbpgCaseView"])
            {
                BeforePrevTabPage = PrevTabPage;
                PrevTabPage = CurrentTabPage;
                CurrentTabPage = TabPage.CaseView;
            }

            if (tbCMMManager.SelectedTab == tbCMMManager.TabPages["tbpgCreateCase"])
            {
                BeforePrevTabPage = PrevTabPage;
                PrevTabPage = CurrentTabPage;
                CurrentTabPage = TabPage.Case;
            }

            if (tbCMMManager.SelectedTab == tbCMMManager.TabPages["tbpgMedicalBill"])
            {
                BeforePrevTabPage = PrevTabPage;
                PrevTabPage = CurrentTabPage;
                CurrentTabPage = TabPage.MedBill;
            }
        }

        //private void gvSettlementsInMedBill_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        //{

        //}

        //private void gvSettlementsInMedBill_RowValidated(object sender, DataGridViewCellEventArgs e)
        //{
        //    MessageBox.Show("Row has been validated");
        //}

        private void btnAddNewSettlement_Click(object sender, EventArgs e)
        {
            Decimal MedBillAmount = 0;
            Decimal Result = 0;

            if (txtMedBill_Illness.Text.Trim() == String.Empty)
            {
                MessageBox.Show("Illness No is empty", "Error");
                return;
            }

            if (txtMedBill_Incident.Text.Trim() == String.Empty)
            {
                MessageBox.Show("Incident No is empty.", "Error");
                return;
            }

            if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out Result))
            {
                MedBillAmount = Result;
            }
            else
            {
                MessageBox.Show("The Medical Bill Amount is invalid.", "Error");
                return;
            }

            if (txtMedicalProvider.Text.Trim() == String.Empty)
            {
                MessageBox.Show("The Medical Provider name is empty.", "Error");
                return;
            }



            settlementMode = SettlementMode.AddNew;
            String SettlementName = "STLM-";

            int nFirstSettlementNo = 300000;

            String strSqlQueryForCountSettlement = "select count([dbo].[tbl_settlement].[Name]) from [dbo].[tbl_settlement]";

            SqlCommand cmdQueryForCountSettlement = new SqlCommand(strSqlQueryForCountSettlement, connRN5);
            cmdQueryForCountSettlement.CommandType = CommandType.Text;

            if (connRN5.State != ConnectionState.Closed)
            {
                connRN5.Close();
                connRN5.Open();
            }
            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
            int nSettlementCount = (int)cmdQueryForCountSettlement.ExecuteScalar();
            if (connRN.State != ConnectionState.Closed) connRN.Close();

            if (nSettlementCount > 0)
            {
                if (connRN5.State != ConnectionState.Closed)
                {
                    connRN5.Close();
                    connRN5.Open();
                }
                if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                SqlCommand cmdSettlementNo = connRN5.CreateCommand();
                SqlTransaction tranSettlementNo = connRN5.BeginTransaction(IsolationLevel.Serializable);

                cmdSettlementNo.Connection = connRN5;
                cmdSettlementNo.Transaction = tranSettlementNo;

                try
                {
                    String strSqlQueryForLastSettlementNo = "select [dbo].[tbl_LastID].[SettlementId] from [dbo].[tbl_LastID] where [dbo].[tbl_LastID].[Id] = 1";

                    cmdSettlementNo.CommandText = strSqlQueryForLastSettlementNo;
                    cmdSettlementNo.CommandType = CommandType.Text;

                    Object objLastSettlementNo = cmdSettlementNo.ExecuteScalar();
                    String strLastSettlementNo = String.Empty;

                    if (objLastSettlementNo != null) strLastSettlementNo = objLastSettlementNo.ToString();

                    int nNewSettlementNo = Int32.Parse(strLastSettlementNo.Substring(5));
                    nNewSettlementNo++;
                    SettlementName += nNewSettlementNo.ToString();

                    String strSqlUpdateLastSettlementNo = "update [dbo].[tbl_LastID] set [dbo].[tbl_LastID].[SettlementId] = @NewSettlementNo where [dbo].[tbl_LastID].[Id] = 1";

                    cmdSettlementNo.CommandText = strSqlUpdateLastSettlementNo;
                    cmdSettlementNo.CommandType = CommandType.Text;

                    cmdSettlementNo.Parameters.AddWithValue("@NewSettlementNo", SettlementName);
                    int nSettlementNameUpdated = cmdSettlementNo.ExecuteNonQuery();

                    tranSettlementNo.Commit();
                }
                catch (Exception ex)
                {
                    try
                    {
                        tranSettlementNo.Rollback();
                        MessageBox.Show(ex.Message, "Error");
                        return;
                    }
                    catch (SqlException se)
                    {
                        MessageBox.Show(se.Message, "Sql Error");
                        return;
                    }
                }
                if (connRN5.State != ConnectionState.Closed) connRN5.Close();
            }
            else if (nSettlementCount == 0)
            {

                if (connRN5.State != ConnectionState.Closed)
                {
                    connRN5.Close();
                    connRN5.Open();
                }
                if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                SqlCommand cmdSettlementNo = connRN5.CreateCommand();
                SqlTransaction tranSettlementNo = connRN5.BeginTransaction(IsolationLevel.Serializable);

                cmdSettlementNo.Connection = connRN5;
                cmdSettlementNo.Transaction = tranSettlementNo;

                try
                {
                    SettlementName += nFirstSettlementNo.ToString();
                    String strUpdateLastSettlementNo = "update [dbo].[tbl_LastID] set [dbo].[tbl_LastID].[SettlementId] = @FirstSettlementNo where [dbo].[tbl_LastID].[Id] = 1";

                    cmdSettlementNo.CommandText = strUpdateLastSettlementNo;
                    cmdSettlementNo.CommandType = CommandType.Text;

                    cmdSettlementNo.Parameters.AddWithValue("@FirstSettlementNo", SettlementName);
                    int nSettlementNoUpdated = cmdSettlementNo.ExecuteNonQuery();
                    tranSettlementNo.Commit();
                }
                catch (Exception ex)
                {
                    try
                    {
                        tranSettlementNo.Rollback();
                        MessageBox.Show(ex.Message, "Error");
                        return;
                    }
                    catch (SqlException se)
                    {
                        MessageBox.Show(se.Message, "Sql Error");
                        return;
                    }
                }
                if (connRN5.State != ConnectionState.Closed) connRN5.Close();
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //String strSqlQueryForMaxSettlementName = "select max([dbo].[tbl_settlement].[Name]) from [dbo].[tbl_settlement]";

            //SqlCommand cmdQueryForMaxSettlement = new SqlCommand(strSqlQueryForMaxSettlementName, connRN5);
            //cmdQueryForMaxSettlement.CommandType = CommandType.Text;

            ////if (connRN.State == ConnectionState.Closed) connRN.Open();
            //if (connRN5.State != ConnectionState.Closed)
            //{
            //    connRN5.Close();
            //    connRN5.Open();
            //}
            //else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

            ////String MaxSettlementName = cmdQueryForMaxSettlement.ExecuteScalar().ToString();
            //Object objMaxSettlementName = cmdQueryForMaxSettlement.ExecuteScalar();
            //if (connRN.State != ConnectionState.Closed) connRN.Close();

            //String MaxSettlementName = String.Empty;

            //if (objMaxSettlementName != null) MaxSettlementName = objMaxSettlementName.ToString();

            //if (MaxSettlementName == String.Empty) SettlementName += nFirstSettlementNo.ToString();
            //else
            //{
            //    int NextSettlementNo = Int32.Parse(MaxSettlementName.Substring(5));
            //    NextSettlementNo++;
            //    SettlementName += NextSettlementNo.ToString();
            //}

            if (gvSettlementsInMedBill.Rows.Count == 0)
            {
                gvSettlementsInMedBill.Rows.Add();
                gvSettlementsInMedBill["Selected", 0].Value = true;
                gvSettlementsInMedBill["SettlementName", 0].Value = SettlementName;

                // Populate settlement type
                DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
                for (int i = 0; i < lstSettlementType.Count; i++)
                {
                    comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                }
                gvSettlementsInMedBill[2, 0] = comboCellSettlementType;

                DataGridViewCheckBoxCell chkApprovedCell = new DataGridViewCheckBoxCell();
                chkApprovedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;

                gvSettlementsInMedBill["Approved", 0] = chkApprovedCell;

                if (LoggedInUserRole == UserRole.RNManager) chkApprovedCell.ReadOnly = false;
                else if (LoggedInUserRole == UserRole.RNStaff) chkApprovedCell.ReadOnly = true;

                // Populate payment method type - 10-04-18 begin debugging here
                DataGridViewComboBoxCell comboCellPaymentType = new DataGridViewComboBoxCell();
                for (int i = 0; i < lstPaymentMethod.Count; i++)
                {
                    comboCellPaymentType.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                }
                gvSettlementsInMedBill["PaymentMethod", 0] = comboCellPaymentType;

                for (int i = 0; i < comboCellPaymentType.Items.Count - 1; i++)
                {
                    if (comboCellPaymentType.Items[i].ToString() == "None")
                        gvSettlementsInMedBill["PaymentMethod", 0].Value = comboCellPaymentType.Items[i];
                }

                // Populate credit cards
                DataGridViewComboBoxCell comboCellCreditCards = new DataGridViewComboBoxCell();
                for (int i = 0; i < lstCreditCardInfo.Count; i++)
                {
                    comboCellCreditCards.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                }

                gvSettlementsInMedBill["CreditCard", 0] = comboCellCreditCards;

                for (int i = 0; i < comboCellCreditCards.Items.Count; i++)
                {
                    if (comboCellCreditCards.Items[i].ToString() == "None")
                        gvSettlementsInMedBill["CreditCard", 0].Value = comboCellCreditCards.Items[i];
                }

                DataGridViewCheckBoxCell Reconciled = new DataGridViewCheckBoxCell();

                Reconciled.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;

                gvSettlementsInMedBill["Reconciled", 0] = Reconciled;

                //DataGridViewComboBoxCell comboIneligibleReasonCell = new DataGridViewComboBoxCell();
                gvSettlementsInMedBill["IneligibleReason", 0].Value = null;
                gvSettlementsInMedBill["IneligibleReason", 0].ReadOnly = true;

                //btnSaveSettlement.Enabled = true;
                btnDeleteSettlement.Enabled = true;

            }
            else if (gvSettlementsInMedBill.Rows.Count > 0)
            {
                Boolean bNotEmpty = false;
                for (int i = 2; i < gvSettlementsInMedBill.ColumnCount; i++)
                {
                    if (gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells[i].Value != null)
                    {
                        bNotEmpty = true;
                        break;
                    }
                }
                if (bNotEmpty)
                {
                    gvSettlementsInMedBill.Rows.Add();
                    gvSettlementsInMedBill["Selected", gvSettlementsInMedBill.Rows.Count - 1].Value = true;
                    gvSettlementsInMedBill["SettlementName", gvSettlementsInMedBill.Rows.Count - 1].Value = SettlementName;

                    //String NextSettlementName = gvSettlementsInMedBill["SettlementName", gvSettlementsInMedBill.Rows.Count - 2].Value.ToString();

                    //int nNextSettlementNo = Int32.Parse(NextSettlementName.Substring(5));
                    //nNextSettlementNo++;
                    //NextSettlementName = NextSettlementName.Substring(0, 4) + "-" + nNextSettlementNo.ToString();

                    //if (Int32.Parse(SettlementName.Substring(5)) >= Int32.Parse(NextSettlementName.Substring(5)))
                    //    gvSettlementsInMedBill["SettlementName", gvSettlementsInMedBill.Rows.Count - 1].Value = SettlementName;
                    //else gvSettlementsInMedBill["SettlementName", gvSettlementsInMedBill.Rows.Count - 1].Value = NextSettlementName;

                    // Populate settlement type
                    DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();

                    for (int i = 0; i < lstSettlementType.Count; i++)
                    {
                        comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                    }
                    gvSettlementsInMedBill["SettlementTypeValue", gvSettlementsInMedBill.Rows.Count - 1] = comboCellSettlementType;



                    // Populate payment method type
                    DataGridViewComboBoxCell comboCellPaymentType = new DataGridViewComboBoxCell();
                    for (int i = 0; i < lstPaymentMethod.Count; i++)
                    {
                        if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentType.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                        else comboCellPaymentType.Items.Add(String.Empty);
                    }

                    gvSettlementsInMedBill["PaymentMethod", gvSettlementsInMedBill.Rows.Count - 1] = comboCellPaymentType;

                    for (int i = 0; i < comboCellPaymentType.Items.Count - 1; i++)
                    {
                        if (comboCellPaymentType.Items[i].ToString() == "None")
                            gvSettlementsInMedBill["PaymentMethod", gvSettlementsInMedBill.Rows.Count - 1].Value = comboCellPaymentType.Items[i];
                    }

                    // Approved check box
                    DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                    approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;

                    gvSettlementsInMedBill["Approved", gvSettlementsInMedBill.Rows.Count - 1] = approvedCell;

                    if (LoggedInUserRole == UserRole.RNManager) approvedCell.ReadOnly = false;
                    else if (LoggedInUserRole == UserRole.RNStaff) approvedCell.ReadOnly = true;

                    //if (LoggedInUserRole == UserRole.RNManager) gvSettlementsInMedBill["Approved", gvSettlementsInMedBill.Rows.Count - 1].ReadOnly = false;
                    //else if (LoggedInUserRole == UserRole.RNStaff) gvSettlementsInMedBill["Approved", gvSettlementsInMedBill.Rows.Count - 1].ReadOnly = true;




                    // Populate credit cards
                    DataGridViewComboBoxCell comboCellCreditCards = new DataGridViewComboBoxCell();
                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                    {
                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCards.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                        else comboCellCreditCards.Items.Add(String.Empty);
                    }
                    gvSettlementsInMedBill["CreditCard", gvSettlementsInMedBill.Rows.Count - 1] = comboCellCreditCards;
                    for (int i = 0; i < comboCellCreditCards.Items.Count; i++)
                    {
                        if (comboCellCreditCards.Items[i].ToString() == String.Empty)
                            gvSettlementsInMedBill["CreditCard", gvSettlementsInMedBill.Rows.Count - 1].Value = comboCellCreditCards.Items[i];
                    }

                    if (gvSettlementsInMedBill["PaymentMethod", gvSettlementsInMedBill.Rows.Count - 1]?.Value?.ToString() == "Check")
                    {
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["CheckNo"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["Reconciled"].ReadOnly = false;

                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["ACHNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["CreditCard"].ReadOnly = true;
                    }

                    if (gvSettlementsInMedBill["PaymentMethod", gvSettlementsInMedBill.Rows.Count - 1]?.Value?.ToString() == "ACH/Banking")
                    {
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["ACHNo"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["Reconciled"].ReadOnly = false;

                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["CheckNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["CreditCard"].ReadOnly = true;
                    }

                    if (gvSettlementsInMedBill["PaymentMethod", gvSettlementsInMedBill.Rows.Count - 1]?.Value?.ToString() == "Credit Card")
                    {
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["CreditCard"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["Reconciled"].ReadOnly = false;

                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["CheckNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["ACHNo"].ReadOnly = true;
                    }
                    if (gvSettlementsInMedBill["PaymentMethod", gvSettlementsInMedBill.Rows.Count - 1]?.Value?.ToString() == String.Empty)
                    {
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["CheckNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["ACHNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["CreditCard"].ReadOnly = true;

                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["PaymentDate"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[gvSettlementsInMedBill.Rows.Count - 1].Cells["Reconciled"].ReadOnly = true;
                    }

                    DataGridViewCheckBoxCell ReconciledCel = new DataGridViewCheckBoxCell();
                    ReconciledCel.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;

                    gvSettlementsInMedBill["Reconciled", gvSettlementsInMedBill.Rows.Count - 1] = ReconciledCel;

                    gvSettlementsInMedBill["IneligibleReason", gvSettlementsInMedBill.Rows.Count - 1].Value = null;
                    gvSettlementsInMedBill["IneligibleReason", gvSettlementsInMedBill.Rows.Count - 1].ReadOnly = true;

                    //btnSaveSettlement.Enabled = true;
                    btnDeleteSettlement.Enabled = true;

                }
                else
                {
                    MessageBox.Show("The last row is empty!");
                }
            }
        }

        //private void btnSave_Click(object sender, EventArgs e)
        //{
        //    Boolean bSelected = false;
        //    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
        //    {
        //        if ((Boolean)gvSettlementsInMedBill[0, i].Value == true) bSelected = true;
        //    }
        //    if (!bSelected)
        //    {
        //        MessageBox.Show("You have to select at least one settlement to save.", "Alert");
        //        return;
        //    }

        //    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
        //    {
        //        if ((Boolean)gvSettlementsInMedBill[0, i].Value == true)
        //        {
        //            if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value == null)
        //            {
        //                MessageBox.Show("You have to select a Settlement Type.", "Alert");
        //                return;
        //            }

        //            Decimal result, SettlementAmount;
        //            if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) SettlementAmount = result;
        //            else
        //            {
        //                MessageBox.Show("You have to enter decimal value in Settlement Amount field in Settlement " + gvSettlementsInMedBill[1, i]?.Value?.ToString(), "Alert");
        //                return;
        //            }

        //            result = 0;
        //            Decimal PersonalResponsibilityAmount = 0;

        //            if ((gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount") ||
        //                (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount") ||
        //                (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment"))
        //            {
        //                if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) PersonalResponsibilityAmount = result;
        //                else
        //                {
        //                    MessageBox.Show("You have to enter decimal value in Personal Responsibility field in Settlement " + gvSettlementsInMedBill[1, i]?.Value?.ToString(), "Alert");
        //                    return;
        //                }
        //            }

        //            result = 0;
        //            Decimal AllowedAmount = 0;
        //            if (gvSettlementsInMedBill["AllowedAmount", i]?.Value?.ToString() != null)
        //            {
        //                if (Decimal.TryParse(gvSettlementsInMedBill["AllowedAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) AllowedAmount = result;
        //                else
        //                {
        //                    MessageBox.Show("You have to enter decimal value in Allowed Amount field in Settlement " + gvSettlementsInMedBill[1, i]?.Value?.ToString(), "Alert");
        //                    return;
        //                }
        //            }
        //        }
        //    }

        //    Decimal MedBillAmount = Decimal.Parse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"));
        //    Decimal SettlementAmountTotal = 0;

        //    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
        //    {
        //        Decimal result = 0;
        //        Decimal SettlementAmount = 0;
        //        if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount" ||
        //            gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount" ||
        //            gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment" ||
        //            gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Provider Payment" ||
        //            gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Discount" ||
        //            gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Reimbursement" ||
        //            gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Ineligible")
        //        {
        //            if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
        //            {
        //                SettlementAmount = result;
        //                SettlementAmountTotal += SettlementAmount;
        //                if (SettlementAmountTotal > MedBillAmount)
        //                {
        //                    MessageBox.Show("The total of settlement amount exceeds medical bill amount.");
        //                    return;
        //                }
        //            }
        //        }
        //    }

        //    Boolean bError = false;
        //    int nSelected = 0;

        //    for(int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
        //    {
        //        if ((Boolean)gvSettlementsInMedBill["Selected", i].Value == true)
        //        {
        //            nSelected++;
        //        }
        //    }

        //    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
        //    {
        //        if ((Boolean)gvSettlementsInMedBill["Selected", i].Value == true)
        //        {
        //            String strSqlQueryForSettlementType = "select [dbo].[tbl_settlement_type_code].[SettlementTypeCode], [dbo].[tbl_settlement_type_code].[SettlementTypeValue] " +
        //                                                  "from [dbo].[tbl_settlement_type_code]";

        //            SqlCommand cmdQueryForSettlementType = new SqlCommand(strSqlQueryForSettlementType, connRN);
        //            cmdQueryForSettlementType.CommandType = CommandType.Text;

        //            //if (connRN.State == ConnectionState.Closed) connRN.Open();
        //            if (connRN.State != ConnectionState.Closed)
        //            {
        //                connRN.Close();
        //                connRN.Open();
        //            }
        //            else if (connRN.State == ConnectionState.Closed) connRN.Open();
        //            SqlDataReader rdrSettlementType = cmdQueryForSettlementType.ExecuteReader();
        //            lstSettlementType.Clear();
        //            if (rdrSettlementType.HasRows)
        //            {
        //                while (rdrSettlementType.Read())
        //                {
        //                    if (rdrSettlementType.GetInt16(0) > 0)
        //                        lstSettlementType.Add(new SettlementTypeInfo { SettlementTypeCode = rdrSettlementType.GetInt16(0), SettlementTypeValue = rdrSettlementType.GetString(1) });
        //                }
        //            }
        //            if (connRN.State != ConnectionState.Closed) connRN.Close();

        //            String SettlementName = gvSettlementsInMedBill["SettlementName", i].Value.ToString();

        //            // Check whether or not the settlement is already in data base
        //            String strSqlQueryForSettlementName = "select [dbo].[tbl_settlement].[Name] from [dbo].[tbl_settlement] where [dbo].[tbl_settlement].[Name] = @Settlement";

        //            SqlCommand cmdQueryForSettlementName = new SqlCommand(strSqlQueryForSettlementName, connRN);
        //            cmdQueryForSettlementName.CommandType = CommandType.Text;

        //            cmdQueryForSettlementName.Parameters.AddWithValue("@Settlement", SettlementName);

        //            //if (connRN.State == ConnectionState.Closed) connRN.Open();
        //            if (connRN.State != ConnectionState.Closed)
        //            {
        //                connRN.Close();
        //                connRN.Open();
        //            }
        //            else if (connRN.State == ConnectionState.Closed) connRN.Open();

        //            Object objResultSettlementName = cmdQueryForSettlementName.ExecuteScalar();
        //            if (connRN.State != ConnectionState.Closed) connRN.Close();

        //            if (objResultSettlementName == null)   // new settlement: save the settlement by using insert sql statement
        //            {

        //                String strSqlCreateNewSettlement = "insert into [dbo].[tbl_settlement] (IsDeleted, Name, CreateDate, CreateByID, LastModifiedDate, LastModifiedByID, SystemModifiedStamp, " +
        //                                                   "LastActivityDate, LastViewedDate, MedicalBillID, " +
        //                                                   "SettlementType, Amount, PersonalResponsibilityCredit, CMMPaymentMethod, " +
        //                                                   "CheckNo, CheckDate, CheckReconciled, ACH_Number, ACH_Date, ACH_Reconciled, CMMCreditCard, CMMCreditCardPaidDate, CC_Reconciled, " +
        //                                                   "AllowedAmount, Notes, Approved, ApprovedDate, IneligibleReason) " +
        //                                                   "values (0, @SettlementName, @CreateDate, @CreateByID, @LastModifiedDate, @LastModifiedByID, @SystemModifiedStamp, " +
        //                                                   "@LastActivityDate, @LastViewedDate, @MedBillID, " +
        //                                                   "@SettlementType, @SettlementAmount, @PersonalResponsibilityCredit, @CMMPaymentMethod, " +
        //                                                   "@CheckNo, @CheckDate, @IsCheckReconciled, @ACH_Number, @ACH_Date, @IsACH_Reconciled, @CMMCreditCard, @CMMCreditCardPaidDate, @IsCC_Reconciled, " +
        //                                                   "@AllowedAmount, @Notes, @IsApproved, @ApprovedDate, @IneligibleReason)";

        //                SqlCommand cmdInsertNewSettlement = new SqlCommand(strSqlCreateNewSettlement, connRN);
        //                cmdInsertNewSettlement.CommandType = CommandType.Text;

        //                String NewSettlementName = gvSettlementsInMedBill["SettlementName", i].Value.ToString();
        //                String NewSettlementType = String.Empty;
        //                if (gvSettlementsInMedBill["SettlementTypeValue", i].Value != null) NewSettlementType = gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString();
        //                int nNewSettlementType = 0;
        //                for (int j = 0; j < lstSettlementType.Count; j++)
        //                {
        //                    if (NewSettlementType == lstSettlementType[j].SettlementTypeValue) nNewSettlementType = lstSettlementType[j].SettlementTypeCode;
        //                }
        //                Decimal result = 0;
        //                Decimal SettlementAmount = 0;
        //                if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
        //                {
        //                    SettlementAmount = result;
        //                    cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementAmount", SettlementAmount);
        //                }

        //                result = 0;
        //                Decimal PersonalResponsibilityAmount = 0;
        //                if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) PersonalResponsibilityAmount = result;
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@PersonalResponsibilityCredit", PersonalResponsibilityAmount);

        //                int NewIsApproved = 0;
        //                if (gvSettlementsInMedBill["Approved", i]?.Value != null)
        //                {
        //                    if ((Boolean)gvSettlementsInMedBill["Approved", i]?.Value == true) NewIsApproved = 1;
        //                }
        //                DateTime? NewApprovedDate = null;
        //                if (gvSettlementsInMedBill["ApprovedDate", i]?.Value != null) NewApprovedDate = DateTime.Parse(gvSettlementsInMedBill["ApprovedDate", i].Value.ToString());

        //                String NewCMMPaymentMethod = String.Empty;
        //                if (gvSettlementsInMedBill["PaymentMethod", i]?.Value != null) NewCMMPaymentMethod = gvSettlementsInMedBill["PaymentMethod", i].Value.ToString();
        //                int nNewCMMPaymentMethod = 0;
        //                for (int j = 0; j < lstPaymentMethod.Count; j++)
        //                {
        //                    if (NewCMMPaymentMethod == lstPaymentMethod[j].PaymentMethodValue) nNewCMMPaymentMethod = lstPaymentMethod[j].PaymentMethodId;
        //                }

        //                String NewCheckNo = String.Empty;
        //                DateTime? NewCheckDate = null;
        //                int NewCheckReconciled = 0;
        //                if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
        //                {
        //                    if (gvSettlementsInMedBill["CheckNo", i].Value != null) NewCheckNo = gvSettlementsInMedBill["CheckNo", i].Value.ToString();
        //                    if (gvSettlementsInMedBill["PaymentDate", i].Value != null) NewCheckDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
        //                    if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewCheckReconciled = 1;
        //                }

        //                String NewACH_Number = String.Empty;
        //                DateTime? NewACH_Date = null;
        //                int NewACH_Reconciled = 0;
        //                if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
        //                {
        //                    if (gvSettlementsInMedBill["ACHNo", i].Value != null) NewACH_Number = gvSettlementsInMedBill["ACHNo", i].Value.ToString();
        //                    if (gvSettlementsInMedBill["PaymentDate", i].Value != null) NewACH_Date = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
        //                    if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewACH_Reconciled = 1;
        //                }

        //                int nCMMCreditCard = 0;
        //                DateTime? NewCreditCardPaidDate = null;
        //                int NewIsCCReconciled = 0;

        //                if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
        //                {
        //                    String CreditCard = gvSettlementsInMedBill[13, i]?.Value?.ToString();
        //                    for (int j = 0; j < lstCreditCardInfo.Count; j++)
        //                    {
        //                        if (CreditCard == lstCreditCardInfo[j].CreditCardNo)
        //                        {
        //                            nCMMCreditCard = lstCreditCardInfo[j].CreditCardId;
        //                        }
        //                    }
        //                    if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
        //                        NewCreditCardPaidDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
        //                    if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewIsCCReconciled = 1;
        //                }

        //                Decimal NewAllowedAmount = 0;
        //                if (gvSettlementsInMedBill["AllowedAmount", i].Value != null) NewAllowedAmount = Decimal.Parse(gvSettlementsInMedBill["AllowedAmount", i].Value.ToString());
        //                String NewNote = String.Empty;
        //                if (gvSettlementsInMedBill["Note", i].Value != null) NewNote = gvSettlementsInMedBill["Note", i].Value.ToString();


        //                cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementName", NewSettlementName);
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@CreateDate", DateTime.Today);
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@CreateByID", nLoggedUserId);
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@LastModifiedByID", nLoggedUserId);
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@SystemModifiedStamp", DateTime.Today);
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@LastViewedDate", DateTime.Today);
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@MedBillID", txtMedBillNo.Text.Trim());
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementType", nNewSettlementType);

        //                cmdInsertNewSettlement.Parameters.AddWithValue("@IsApproved", NewIsApproved);

        //                if (NewApprovedDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ApprovedDate", NewApprovedDate);
        //                else cmdInsertNewSettlement.Parameters.AddWithValue("@ApprovedDate", DBNull.Value);

        //                cmdInsertNewSettlement.Parameters.AddWithValue("@CMMPaymentMethod", nNewCMMPaymentMethod);

        //                if (NewCheckNo != String.Empty) cmdInsertNewSettlement.Parameters.AddWithValue("@CheckNo", NewCheckNo);
        //                else cmdInsertNewSettlement.Parameters.AddWithValue("@CheckNo", DBNull.Value);

        //                if (NewCheckDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@CheckDate", NewCheckDate);
        //                else cmdInsertNewSettlement.Parameters.AddWithValue("@CheckDate", DBNull.Value);

        //                cmdInsertNewSettlement.Parameters.AddWithValue("@IsCheckReconciled", NewCheckReconciled);

        //                if (NewACH_Number != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Number", NewACH_Number);
        //                else cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Number", DBNull.Value);

        //                if (NewACH_Date != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Date", NewACH_Date);
        //                else cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Date", DBNull.Value);

        //                cmdInsertNewSettlement.Parameters.AddWithValue("@IsACH_Reconciled", NewACH_Reconciled);
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCard", nCMMCreditCard);

        //                if (NewCreditCardPaidDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", NewCreditCardPaidDate);
        //                else cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", DBNull.Value);

        //                cmdInsertNewSettlement.Parameters.AddWithValue("@IsCC_Reconciled", NewIsCCReconciled);
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@AllowedAmount", NewAllowedAmount);

        //                if (NewNote != null) cmdInsertNewSettlement.Parameters.AddWithValue("@Notes", NewNote);
        //                else cmdInsertNewSettlement.Parameters.AddWithValue("@Notes", DBNull.Value);

        //                int nIneligibleReason = 0;
        //                for (int j = 0; j < dicIneligibleReason.Count; j++)
        //                {
        //                    if (gvSettlementsInMedBill["IneligibleReason", i]?.Value?.ToString() == dicIneligibleReason[j]) nIneligibleReason = j;
        //                }
        //                cmdInsertNewSettlement.Parameters.AddWithValue("@IneligibleReason", nIneligibleReason);

        //                //if (connRN.State == ConnectionState.Closed) connRN.Open();
        //                if (connRN.State != ConnectionState.Closed)
        //                {
        //                    connRN.Close();
        //                    connRN.Open();
        //                }
        //                else if (connRN.State == ConnectionState.Closed) connRN.Open();
        //                int nRowInserted = cmdInsertNewSettlement.ExecuteNonQuery();
        //                if (connRN.State != ConnectionState.Closed) connRN.Close();

        //                //if (nRowInserted == 1)
        //                //{
        //                //    MessageBox.Show("Settlements have been saved.", "Information");
        //                //    return;
        //                //}
        //                //else
        //                //{
        //                //    MessageBox.Show("Some of settlement have not been saved.", "Error");
        //                //}
        //                if (nRowInserted == 1)
        //                {
        //                    //SettlementAmount
        //                    //if ((SettlementType)nNewSettlementType == SettlementType.MemberReimbursement ||
        //                    //    (SettlementType)nNewSettlementType == SettlementType.CMMProviderPayment)
        //                    //{
        //                    //    //String strSqlUpdateMedBill = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[TotalSharedAmount] = @Settlement"  
        //                    //    // 11/01/18 begin here
        //                    //}



        //                }

        //                if (nRowInserted == 0) bError = true;

        //            }
        //            else  // the settlement with the name exist, update the settlement
        //            {
        //                String UpdateSettlementName = objResultSettlementName.ToString();
        //                String UpdateMedBill = txtMedBillNo.Text.Trim();

        //                String strSqlUpdateSettlement = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[LastModifiedDate] = @LastModifiedDate, " +
        //                                                "[dbo].[tbl_settlement].[LastModifiedByID] = @LastModifiedByID, " +
        //                                                "[dbo].[tbl_settlement].[LastActivityDate] = @LastActivityDate, " +
        //                                                "[dbo].[tbl_settlement].[SettlementType] = @SettlementType, " +
        //                                                "[dbo].[tbl_settlement].[Amount] = @SettlementAmount, " +
        //                                                "[dbo].[tbl_settlement].[PersonalResponsibilityCredit] = @PersonalResponsibilityCredit, " +
        //                                                "[dbo].[tbl_settlement].[Approved] = @IsApproved, " +
        //                                                "[dbo].[tbl_settlement].[ApprovedDate] = @ApprovedDate, " +
        //                                                "[dbo].[tbl_settlement].[CMMPaymentMethod] = @CMMPaymentMethod, " +
        //                                                "[dbo].[tbl_settlement].[CheckNo] = @CheckNo, " +
        //                                                "[dbo].[tbl_settlement].[CheckDate] = @CheckDate, " +
        //                                                "[dbo].[tbl_settlement].[CheckReconciled] = @CheckReconciled, " +
        //                                                "[dbo].[tbl_settlement].[ACH_Number] = @ACH_Number, " +
        //                                                "[dbo].[tbl_settlement].[ACH_Date] = @ACH_Date, " +
        //                                                "[dbo].[tbl_settlement].[ACH_Reconciled] = @ACH_Reconciled, " +
        //                                                "[dbo].[tbl_settlement].[CMMCreditCard] = @CMMCreditCard, " +
        //                                                "[dbo].[tbl_settlement].[CMMCreditCardPaidDate] = @CMMCreditCardPaidDate, " +
        //                                                "[dbo].[tbl_settlement].[CC_Reconciled] = @CC_Reconciled, " +
        //                                                "[dbo].[tbl_settlement].[AllowedAmount] = @AllowedAmount, " +
        //                                                "[dbo].[tbl_settlement].[Notes] = @Note, " +
        //                                                "[dbo].[tbl_settlement].[IneligibleReason] = @IneligibleReason " +
        //                                                "where [dbo].[tbl_settlement].[Name] = @SettlementName and [dbo].[tbl_settlement].[MedicalBillID] = @MedBillName";

        //                int nSettlementType = 0;
        //                String strSettlementType = String.Empty;
        //                if (gvSettlementsInMedBill["SettlementTypeValue", i].Value != null) strSettlementType = gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString();
        //                for (int j = 0; j < lstSettlementType.Count; j++)
        //                {
        //                    if (strSettlementType == lstSettlementType[j].SettlementTypeValue) nSettlementType = lstSettlementType[j].SettlementTypeCode;
        //                }

        //                Decimal SettlementAmount = 0;
        //                if (gvSettlementsInMedBill["SettlementAmount", i].Value != null)
        //                {
        //                    SettlementAmount = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency);
        //                }

        //                Decimal PersonalResponsibilityAmt = 0;
        //                if (gvSettlementsInMedBill["PersonalResponsibility", i].Value != null)
        //                {
        //                    PersonalResponsibilityAmt = Decimal.Parse(gvSettlementsInMedBill["PersonalResponsibility", i].Value.ToString(), NumberStyles.Currency);
        //                }

        //                // Payment method
        //                int nPaymentMethod = 0;
        //                String PaymentMethod = String.Empty;
        //                if (gvSettlementsInMedBill["PaymentMethod", i].Value != null)
        //                    PaymentMethod = gvSettlementsInMedBill["PaymentMethod", i].Value.ToString();
        //                for (int j = 0; j < lstPaymentMethod.Count; j++)
        //                {
        //                    if (PaymentMethod == lstPaymentMethod[j].PaymentMethodValue) nPaymentMethod = lstPaymentMethod[j].PaymentMethodId;
        //                }

        //                // Approved or not
        //                int nApproved = 0;
        //                if (gvSettlementsInMedBill["Approved", i].Value != null)
        //                {
        //                    if ((Boolean)gvSettlementsInMedBill["Approved", i].Value) nApproved = 1;
        //                }

        //                DateTime? ApprovedDate = null;
        //                if (gvSettlementsInMedBill["ApprovedDate", i].Value != null) ApprovedDate = DateTime.Parse(gvSettlementsInMedBill["ApprovedDate", i].Value.ToString());


        //                String CheckNo = String.Empty;
        //                DateTime? CheckIssueDate = null;
        //                int nCheckReconciled = 0;

        //                String ACH_No = String.Empty;
        //                DateTime? ACH_Date = null;
        //                int nACHReconciled = 0;

        //                String CreditCard = String.Empty;
        //                int nCreditCard = 0;
        //                DateTime? CreditCardPaidDate = null;
        //                int nCCReconciled = 0;

        //                switch (PaymentMethod)
        //                {
        //                    case "Check":
        //                        if (gvSettlementsInMedBill["CheckNo", i].Value != null) CheckNo = gvSettlementsInMedBill["CheckNo", i].Value.ToString();
        //                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
        //                        {
        //                            if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty) CheckIssueDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
        //                        }
        //                        Boolean bCheckReconciledResult = false;
        //                        if (gvSettlementsInMedBill["Reconciled", i].Value != null)
        //                        {
        //                            if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bCheckReconciledResult))
        //                            {
        //                                if (bCheckReconciledResult) nCheckReconciled = 1;
        //                            }
        //                        }
        //                        break;
        //                    case "ACH/Banking":
        //                        if (gvSettlementsInMedBill["ACHNo", i].Value != null) ACH_No = gvSettlementsInMedBill["ACHNo", i].Value.ToString();
        //                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
        //                        {
        //                            if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty) ACH_Date = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
        //                        }
        //                        Boolean bACHReconciledResult = false;
        //                        if (gvSettlementsInMedBill["Reconciled", i].Value != null)
        //                        {
        //                            if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bACHReconciledResult))
        //                            {
        //                                if (bACHReconciledResult) nACHReconciled = 1;
        //                            }
        //                        }
        //                        break;
        //                    case "Credit Card":
        //                        if (gvSettlementsInMedBill["CreditCard", i].Value != null) CreditCard = gvSettlementsInMedBill["CreditCard", i].Value.ToString();
        //                        for (int j = 0; j < lstCreditCardInfo.Count; j++)
        //                        {
        //                            if (CreditCard == lstCreditCardInfo[j].CreditCardNo) nCreditCard = lstCreditCardInfo[j].CreditCardId;
        //                        }
        //                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
        //                        {
        //                            if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty)
        //                                CreditCardPaidDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
        //                        }
        //                        Boolean bCCReconciledResult = false;
        //                        if (gvSettlementsInMedBill[15, i].Value != null)
        //                        {
        //                            if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bCCReconciledResult))
        //                            {
        //                                if (bCCReconciledResult) nCCReconciled = 1;
        //                            }
        //                        }
        //                        break;
        //                }

        //                // Allowed Amount
        //                Decimal AllowedAmount = 0;
        //                if (gvSettlementsInMedBill["AllowedAmount", i].Value != null)
        //                {
        //                    AllowedAmount = Decimal.Parse(gvSettlementsInMedBill["AllowedAmount", i].Value.ToString(), NumberStyles.Currency);
        //                }

        //                // Note
        //                String Note = String.Empty;
        //                if (gvSettlementsInMedBill["Note", i].Value != null) Note = gvSettlementsInMedBill["Note", i].Value.ToString();



        //                SqlCommand cmdUpdateSettlement = new SqlCommand(strSqlUpdateSettlement, connRN);
        //                cmdUpdateSettlement.CommandType = CommandType.Text;

        //                cmdUpdateSettlement.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
        //                cmdUpdateSettlement.Parameters.AddWithValue("@LastModifiedByID", nLoggedUserId);
        //                cmdUpdateSettlement.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
        //                cmdUpdateSettlement.Parameters.AddWithValue("@SettlementType", nSettlementType);


        //                cmdUpdateSettlement.Parameters.AddWithValue("@SettlementAmount", SettlementAmount);
        //                cmdUpdateSettlement.Parameters.AddWithValue("@PersonalResponsibilityCredit", PersonalResponsibilityAmt);

        //                cmdUpdateSettlement.Parameters.AddWithValue("@IsApproved", nApproved);
        //                if (ApprovedDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@ApprovedDate", ApprovedDate);
        //                else cmdUpdateSettlement.Parameters.AddWithValue("@ApprovedDate", DBNull.Value);

        //                cmdUpdateSettlement.Parameters.AddWithValue("@CMMPaymentMethod", nPaymentMethod);

        //                if (CheckNo != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@CheckNo", CheckNo);
        //                else cmdUpdateSettlement.Parameters.AddWithValue("@CheckNo", DBNull.Value);

        //                if (CheckIssueDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@CheckDate", CheckIssueDate);
        //                else cmdUpdateSettlement.Parameters.AddWithValue("@CheckDate", DBNull.Value);

        //                cmdUpdateSettlement.Parameters.AddWithValue("@CheckReconciled", nCheckReconciled);

        //                if (ACH_No != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Number", ACH_No);
        //                else cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Number", DBNull.Value);

        //                if (ACH_Date != null) cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Date", ACH_Date);
        //                else cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Date", DBNull.Value);

        //                cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Reconciled", nACHReconciled);
        //                cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCard", nCreditCard);

        //                if (CreditCardPaidDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", CreditCardPaidDate);
        //                else cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", DBNull.Value);
        //                cmdUpdateSettlement.Parameters.AddWithValue("@CC_Reconciled", nCCReconciled);
        //                cmdUpdateSettlement.Parameters.AddWithValue("@AllowedAmount", AllowedAmount);
        //                if (Note != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@Note", Note);
        //                else cmdUpdateSettlement.Parameters.AddWithValue("@Note", DBNull.Value);

        //                cmdUpdateSettlement.Parameters.AddWithValue("@SettlementName", UpdateSettlementName);
        //                cmdUpdateSettlement.Parameters.AddWithValue("@MedBillName", UpdateMedBill);

        //                int nIneligibleReason = 0;
        //                for (int j = 0; j < dicIneligibleReason.Count; j++)
        //                {
        //                    if (gvSettlementsInMedBill["IneligibleReason", i]?.Value?.ToString() == dicIneligibleReason[j]) nIneligibleReason = j;
        //                }
        //                cmdUpdateSettlement.Parameters.AddWithValue("@IneligibleReason", nIneligibleReason);

        //                //if (connRN.State == ConnectionState.Closed) connRN.Open();
        //                if (connRN.State != ConnectionState.Closed)
        //                {
        //                    connRN.Close();
        //                    connRN.Open();
        //                }
        //                else if (connRN.State == ConnectionState.Closed) connRN.Open();

        //                int nRowUpdated = cmdUpdateSettlement.ExecuteNonQuery();
        //                if (connRN.State != ConnectionState.Closed) connRN.Close();

        //                //if (nRowUpdated == 1)
        //                //{
        //                //    MessageBox.Show("Settlements have been saved.", "Information");
        //                //    return;
        //                //}
        //                //else
        //                //{
        //                //    MessageBox.Show("Some of settlement have not been saved.", "Error");
        //                //}

        //                if (nRowUpdated == 0) bError = true;
        //            }
        //        }
        //    }

        //    ////////////////////////////////////////////////////////////////////////////////////////////////////////

        //    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
        //    {
        //        if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "Ineligible")
        //        {
        //            gvSettlementsInMedBill["IneligibleReason", i].Value = null;
        //            gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
        //        }
        //    }

        //    if ((bError == false)&&(nSelected > 0))
        //    {
        //        MessageBox.Show("Settlements have been saved.", "Info");
        //        return;
        //    }
        //    else if ((bError == true)&&(nSelected > 0))
        //    {
        //        MessageBox.Show("Some of settlments have not been saved.", "Error");
        //        return;
        //    }
        //}

        private void OnSettlementsInMedBillChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnSettlementsInMedBillChange;

                UpdateGridViewSettlementsInMedBill();
            }

        }

        private void UpdateGridViewSettlementsInMedBill()
        {
            //String MedicalBillNo = String.Empty;
            //MedicalBillNo = gvMedBill[1, nRowSelected].Value.ToString();




            String strSqlQueryForSettlementsInMedBill = "select [dbo].[tbl_settlement].[SelfPayDiscount], [dbo].[tbl_settlement].[_3rdPartyDiscount], [dbo].[tbl_settlement].[MemberPayment], " +
                                            "[dbo].[tbl_settlement].[CMMProviderPayment], [dbo].[tbl_settlement].[Eligibility], [dbo].[tbl_settlement].[AllowedAmount], " +
                                            "[dbo].[tbl_settlement].[CMMDiscount], [dbo].[tbl_settlement].[MemberReimbursement], " +
                                            "[dbo].[tbl_payment_method].[PaymentMethod_Value], [dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
                                            "[dbo].[tbl_Credit_Card__c].[Name], [dbo].[tbl_settlement].[CMMCreditCardPaidDay], [dbo].[tbl_settlement].[CC_Reconciled], " +
                                            "[dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], [dbo].[tbl_settlement].[ACH_Reconciled],  " +
                                            "[dbo].[tbl_settlement].[Notes], [dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate] " +
                                            "from (([dbo].[tbl_settlement] inner join [dbo].[tbl_Credit_Card__c] on [dbo].[tbl_settlement].[CMMCreditCard] = [dbo].[tbl_Credit_Card__c].[CreditCard_Id]) " +
                                            "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id]) " +
                                            "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo";


            SqlCommand cmdQueryForSettlementInMedBill = new SqlCommand(strSqlQueryForSettlementsInMedBill, connRN);
            cmdQueryForSettlementInMedBill.CommandType = CommandType.Text;

            cmdQueryForSettlementInMedBill.Parameters.AddWithValue("@MedBillNo", MedicalBillNo);
            cmdQueryForSettlementInMedBill.Notification = null;

            SqlDependency dependencySettlements = new SqlDependency(cmdQueryForSettlementInMedBill);
            dependencySettlements.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillChange);

            //if (connRN.State == ConnectionState.Closed) connRN.Open();
            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrSettlements = cmdQueryForSettlementInMedBill.ExecuteReader();

            gvSettlementsInMedBill.Rows.Clear();
            if (rdrSettlements.HasRows)
            {

                while (rdrSettlements.Read())
                {

                    DataGridViewRow row = new DataGridViewRow();
                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                    if (!rdrSettlements.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(0).ToString("C") });
                    if (!rdrSettlements.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(1).ToString("C") });
                    if (!rdrSettlements.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(2).ToString("C") });
                    if (!rdrSettlements.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(3).ToString("C") });
                    if (!rdrSettlements.IsDBNull(4))
                    {
                        DataGridViewComboBoxCell cellEligibility = new DataGridViewComboBoxCell();
                        cellEligibility.Items.Add("Yes");
                        cellEligibility.Items.Add("No");

                        if (rdrSettlements.GetBoolean(4)) cellEligibility.Value = "Yes";
                        else cellEligibility.Value = "No";

                        row.Cells.Add(cellEligibility);
                    }
                    if (!rdrSettlements.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(5).ToString("C") });
                    if (!rdrSettlements.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(6).ToString("C") });
                    if (!rdrSettlements.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(7).ToString("C") });
                    if (!rdrSettlements.IsDBNull(8))
                    {
                        DataGridViewComboBoxCell cellPaymentMethod = new DataGridViewComboBoxCell();

                        foreach (PaymentMethod paymt_method in lstPaymentMethod)
                        {
                            cellPaymentMethod.Items.Add(paymt_method.PaymentMethodValue);
                        }

                        cellPaymentMethod.Value = rdrSettlements.GetString(8);

                        row.Cells.Add(cellPaymentMethod);
                    }
                    if (!rdrSettlements.IsDBNull(9)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetString(9) });
                    if (!rdrSettlements.IsDBNull(10)) row.Cells.Add(new CalendarCell { Value = rdrSettlements.GetDateTime(10) });
                    if (!rdrSettlements.IsDBNull(11)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlements.GetBoolean(11) });

                    // Credit Card Info
                    if (!rdrSettlements.IsDBNull(12))
                    {
                        DataGridViewComboBoxCell cellCreditCard = new DataGridViewComboBoxCell();

                        foreach (CreditCardInfo info in lstCreditCardInfo)
                        {
                            cellCreditCard.Items.Add(info.CreditCardNo);
                        }

                        cellCreditCard.Value = rdrSettlements.GetString(12);
                        row.Cells.Add(cellCreditCard);
                    }
                    if (!rdrSettlements.IsDBNull(13)) row.Cells.Add(new CalendarCell { Value = rdrSettlements.GetDateTime(13) });
                    if (!rdrSettlements.IsDBNull(14)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlements.GetBoolean(14) });
                    if (!rdrSettlements.IsDBNull(15)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetString(15) });
                    if (!rdrSettlements.IsDBNull(16)) row.Cells.Add(new CalendarCell { Value = rdrSettlements.GetDateTime(16) });
                    if (!rdrSettlements.IsDBNull(17)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlements.GetBoolean(17) });
                    if (!rdrSettlements.IsDBNull(18)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetString(18) });
                    if (!rdrSettlements.IsDBNull(19)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlements.GetBoolean(19) });
                    if (!rdrSettlements.IsDBNull(20)) row.Cells.Add(new CalendarCell { Value = rdrSettlements.GetDateTime(20) });

                    gvSettlementsInMedBill.Rows.Add(row);

                }

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    if (gvSettlementsInMedBill[5, i].Value.ToString() == "No") gvSettlementsInMedBill.Rows[i].DefaultCellStyle.BackColor = Color.Red;
                }
            }
            rdrSettlements.Close();
            if (connRN.State != ConnectionState.Closed) connRN.Close();


            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //String strSqlQueryForSettlementsInMedBill = "select [dbo].[tbl_settlement].[ServiceDate], [dbo].[tbl_settlement].[Description_CPT_Code], [dbo].[tbl_settlement].[Amount], " +
            //                                            "[dbo].[tbl_settlement].[SelfPayDiscount], [dbo].[tbl_settlement].[_3rdPartyDiscount], [dbo].[tbl_settlement].[MemberPayment], " +
            //                                            "[dbo].[tbl_settlement].[RemainingBalance], [dbo].[tbl_settlement].[CMMProviderPayment], [dbo].[tbl_settlement].[MedicareValue], " +
            //                                            "[dbo].[tbl_settlement].[Eligibility], [dbo].[tbl_settlement].[AllowedAmount], [dbo].[tbl_settlement].[CMMDiscount], " +
            //                                            "[dbo].[tbl_settlement].[MemberReimbursement], [dbo].[tbl_settlement].[CMMPaymentMethod], [dbo].[tbl_settlement].[AdjustmentFinalBalance], " +
            //                                            "[dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
            //                                            "[dbo].[tbl_settlement].[CMMCreditCard], [dbo].[tbl_settlement].[CMMCreditCardPopulated], [dbo].[tbl_settlement].[CMMCreditCardPaidDay], " +
            //                                            "[dbo].[tbl_settlement].[CC_Reconciled], [dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], " +
            //                                            "[dbo].[tbl_settlement].[ACH_Reconciled], [dbo].[tbl_settlement].[Notes], " +
            //                                            "[dbo].[tbl_settlement].[AmountOver150KIncidentLimitFormula], [dbo].[tbl_settlement].[AmountOver150KIncidentLimitSnapShot], " +
            //                                            "[dbo].[tbl_settlement].[WellBeingCare], [dbo].[tbl_settlement].[PersonalResponsibilityAmountForReset], " +
            //                                            "[dbo].[tbl_settlement].[WellBeingCareSharedForReset], [dbo].[tbl_settlement].[MedicalBillDate], " +
            //                                            "[dbo].[tbl_settlement].[PersonalResponsibilityForBill], " +
            //                                            "[dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate] " +
            //                                            "from [dbo].[tbl_settlement] where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillId";

            //SqlCommand cmdQueryForSettlementInMedBill = new SqlCommand(strSqlQueryForSettlementsInMedBill, connRN);
            //cmdQueryForSettlementInMedBill.CommandType = CommandType.Text;

            //cmdQueryForSettlementInMedBill.Parameters.AddWithValue("@MedBillId", MedicalBillNo);
            //cmdQueryForSettlementInMedBill.Notification = null;

            //SqlDependency dependencySettlements = new SqlDependency(cmdQueryForSettlementInMedBill);
            //dependencySettlements.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillChange);

            //connRN.Open();
            //SqlDataReader rdrSettlements = cmdQueryForSettlementInMedBill.ExecuteReader();

            //gvSettlementsInMedBill.Rows.Clear();
            //if (rdrSettlements.HasRows)
            //{

            //    while (rdrSettlements.Read())
            //    {
            //        DataGridViewRow row = new DataGridViewRow();
            //        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
            //        if (!rdrSettlements.IsDBNull(0)) row.Cells.Add(new CalendarCell { Value = rdrSettlements.GetDateTime(0).ToString("MM/dd/yyyy") });
            //        if (!rdrSettlements.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetString(1) });
            //        if (!rdrSettlements.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(2) });
            //        if (!rdrSettlements.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(3) });
            //        if (!rdrSettlements.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(4) });
            //        if (!rdrSettlements.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(5) });
            //        if (!rdrSettlements.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(6) });
            //        if (!rdrSettlements.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(7) });
            //        if (!rdrSettlements.IsDBNull(8)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(8) });
            //        DataGridViewComboBoxCell cellEligibility = new DataGridViewComboBoxCell();
            //        cellEligibility.Items.Add("Yes");
            //        cellEligibility.Items.Add("No");
            //        if (!rdrSettlements.IsDBNull(9))
            //        {
            //            if (rdrSettlements.GetBoolean(9)) cellEligibility.Value = "Yes";
            //            else cellEligibility.Value = "No";
            //        }
            //        row.Cells.Add(cellEligibility);


            //        if (!rdrSettlements.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(10) });
            //        if (!rdrSettlements.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(11) });
            //        if (!rdrSettlements.IsDBNull(12)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(12) });
            //        DataGridViewComboBoxCell cellPaymentMethod = new DataGridViewComboBoxCell();
            //        cellPaymentMethod.Items.Add("Check");
            //        cellPaymentMethod.Items.Add("Credit Card");
            //        cellPaymentMethod.Items.Add("ACH");
            //        if (!rdrSettlements.IsDBNull(13))
            //        {
            //            switch (rdrSettlements.GetInt16(13))
            //            {
            //                case 0:
            //                    cellPaymentMethod.Value = "Check";
            //                    break;
            //                case 1:
            //                    cellPaymentMethod.Value = "Credit Card";
            //                    break;
            //                case 2:
            //                    cellPaymentMethod.Value = "ACH";
            //                    break;
            //            }
            //        }
            //        row.Cells.Add(cellPaymentMethod);

            //        if (!rdrSettlements.IsDBNull(14)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(14) });
            //        if (!rdrSettlements.IsDBNull(15)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetString(15) });
            //        if (!rdrSettlements.IsDBNull(16)) row.Cells.Add(new CalendarCell { Value = rdrSettlements.GetDateTime(16).ToString("MM/dd/yyyy") });
            //        if (!rdrSettlements.IsDBNull(17)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetString(17) });
            //        DataGridViewComboBoxCell cellCreditCard = new DataGridViewComboBoxCell();
            //        cellCreditCard.Items.Add("2383");
            //        cellCreditCard.Items.Add("5482");
            //        cellCreditCard.Items.Add("2959");
            //        if (!rdrSettlements.IsDBNull(18))
            //        {
            //            switch (rdrSettlements.GetInt16(18))
            //            {
            //                case 0:
            //                    cellCreditCard.Value = "2383";
            //                    break;
            //                case 1:
            //                    cellCreditCard.Value = "5482";
            //                    break;
            //                case 2:
            //                    cellCreditCard.Value = "2959";
            //                    break;
            //            }
            //            row.Cells.Add(cellCreditCard);
            //        }

            //        if (!rdrSettlements.IsDBNull(19)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetString(19) });
            //        if (!rdrSettlements.IsDBNull(20)) row.Cells.Add(new CalendarCell { Value = rdrSettlements.GetDateTime(20).ToString("MM/dd/yyyy") });
            //        if (!rdrSettlements.IsDBNull(21)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetString(21) });
            //        if (!rdrSettlements.IsDBNull(22)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetString(22) });
            //        if (!rdrSettlements.IsDBNull(23)) row.Cells.Add(new CalendarCell { Value = rdrSettlements.GetDateTime(23).ToString("MM/dd/yyyy") });
            //        if (!rdrSettlements.IsDBNull(24)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetString(24) });
            //        if (!rdrSettlements.IsDBNull(25)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetString(25) });
            //        if (!rdrSettlements.IsDBNull(26)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetString(26) });
            //        if (!rdrSettlements.IsDBNull(27)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(27) });
            //        if (!rdrSettlements.IsDBNull(28)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(28) });
            //        if (!rdrSettlements.IsDBNull(29)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(29) });
            //        if (!rdrSettlements.IsDBNull(30)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(30) });
            //        if (!rdrSettlements.IsDBNull(31)) row.Cells.Add(new CalendarCell { Value = rdrSettlements.GetDateTime(31).ToString("MM/dd/yyyy") });
            //        if (!rdrSettlements.IsDBNull(32)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlements.GetDecimal(32) });
            //        if (!rdrSettlements.IsDBNull(33)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlements.GetBoolean(33) });
            //        if (!rdrSettlements.IsDBNull(34)) row.Cells.Add(new CalendarCell { Value = rdrSettlements.GetDateTime(34).ToString("MM/dd/yyyy") });

            //        gvSettlementsInMedBill.Rows.Add(row);
            //    }

            //    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
            //    {
            //        if (gvSettlementsInMedBill[10, i].Value.ToString() == "No") gvSettlementsInMedBill.Rows[i].DefaultCellStyle.BackColor = Color.Red;
            //    }
            //}

            //connRN.Close();
        }

        private void gvSettlementsInMedBill_CurrentCellDirtyStateChanged(object sender, EventArgs e)
        {
            if (gvSettlementsInMedBill.IsCurrentCellDirty)
            {
                gvSettlementsInMedBill.CommitEdit(DataGridViewDataErrorContexts.Commit);
            }
        }

        private void gvSettlementsInMedBill_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (gvSettlementsInMedBill.Rows.Count > 0)
            {
                if (e.ColumnIndex == 2)     // if the settlement is ineligible, change background color to red
                {
                    if (gvSettlementsInMedBill[2, e.RowIndex]?.Value?.ToString() == "Ineligible")
                    {
                        if (dicIneligibleReason.Count > 0)
                        {
                            DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                            for (int i = 0; i < dicIneligibleReason.Count; i++)
                            {
                                comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                            }
                            comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[0];
                            gvSettlementsInMedBill["IneligibleReason", e.RowIndex].ReadOnly = false;
                            gvSettlementsInMedBill["IneligibleReason", e.RowIndex] = comboCellIneligibleReason;
                        }
                        gvSettlementsInMedBill.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.Salmon;
                        return;
                    }
                    else
                    {
                        gvSettlementsInMedBill["IneligibleReason", e.RowIndex].Value = null;
                        gvSettlementsInMedBill["IneligibleReason", e.RowIndex].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.White;
                        return;
                    }
                }
                if (e.ColumnIndex == 3)     // show alert if the settlement amount total exceed med bill amount
                {

                    Decimal MedBillAmount = Decimal.Parse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"));
                    Decimal Balance = 0;
                    Decimal SettlementTotal = 0;
                    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    {
                        Decimal settlementAmount = 0;
                        Decimal result = 0;
                        if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "PR Reimbursement" &&
                            gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "Medical Provider Refund")
                        {
                            if (gvSettlementsInMedBill["SettlementAmount", i]?.Value != null)
                            {
                                if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                                {
                                    settlementAmount = result;
                                    SettlementTotal += settlementAmount;
                                    Balance = MedBillAmount - SettlementTotal;
                                    txtBalance.Text = Balance.ToString("C");
                                }
                                else MessageBox.Show("Invalid Settlement Total format.", "Alert");
                            }
                        }
                    }
                    Decimal TotalSharedAmount = 0;
                    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    {
                        Decimal SharedAmount = 0;
                        Decimal MedicalProviderRefund = 0;
                        Decimal result = 0;
                        if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Reimbursement" ||
                            gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Provider Payment" ||
                            gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "PR Reimbursement")
                        {
                            if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                            {
                                SharedAmount = result;
                                TotalSharedAmount += SharedAmount;
                                txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");
                            }
                        }
                        else if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Medical Provider Refund")
                        {
                            if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                            {
                                MedicalProviderRefund = result;
                                TotalSharedAmount -= MedicalProviderRefund;
                                txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");
                            }
                        }
                    }
                    if (SettlementTotal > MedBillAmount)
                    {
                        MessageBox.Show("The total settlement amount exceeds Med Bill Amount.", "Alert");
                        gvSettlementsInMedBill.CurrentCell = gvSettlementsInMedBill.Rows[e.RowIndex].Cells[3];
                        return;
                    }
                }

                if (e.ColumnIndex == 4)
                {

                    Decimal PersonalResponsibility = PersonalResponsibilityAmountInMedBill;
                    Decimal SumPersonalResponsibility = 0;

                    Decimal result = 0;
                    if ((gvSettlementsInMedBill["SettlementTypeValue", e.RowIndex]?.Value?.ToString() == "Self Pay Discount") ||
                        (gvSettlementsInMedBill["SettlementTypeValue", e.RowIndex]?.Value?.ToString() == "3rd Party Discount") ||
                        (gvSettlementsInMedBill["SettlementTypeValue", e.RowIndex]?.Value?.ToString() == "Member Discount") ||
                        (gvSettlementsInMedBill["SettlementTypeValue", e.RowIndex]?.Value?.ToString() == "Member Payment"))
                    {
                        result = 0;
                        for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                        {
                            if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                            {
                                SumPersonalResponsibility = result;
                                PersonalResponsibility -= SumPersonalResponsibility;
                                txtPersonalResponsibility.Text = PersonalResponsibility.ToString("C");
                            }
                            else if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value == null)
                            {
                                txtPersonalResponsibility.Text = PersonalResponsibility.ToString("C");
                            }
                            else if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString() != String.Empty)
                            {
                                MessageBox.Show("Invalid Personal Responsibility Amount", "Error");
                                return;
                            }
                        }

                        // Update txtPersonalResponsibility textbox
                        //PersonalResponsibility -= SumPersonalResponsibility;
                        //if (PersonalResponsibility < 0) txtPersonalResponsibility.BackColor = Color.Yellow;
                        //else if (PersonalResponsibility >= 0) txtPersonalResponsibility.BackColor = Color.White;
                        //txtPersonalResponsibility.Text = PersonalResponsibility.ToString("C");
                    }
                    else
                    {
                        MessageBox.Show("You have to select Self Pay Discount, 3rd Party Discount, or Member Payment to enter Personal Responsibility", "Alert");
                        return;
                    }
                }

                if (e.ColumnIndex == 5)     // when one payment method is selected, clear other payment info
                {
                    if (gvSettlementsInMedBill["PaymentMethod", e.RowIndex]?.Value?.ToString() == "Check")
                    {

                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["CheckNo"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["Reconciled"].ReadOnly = false;

                        gvSettlementsInMedBill["ACHNo", e.RowIndex].Value = String.Empty;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["ACHNo"].ReadOnly = true;

                        gvSettlementsInMedBill["CreditCard", e.RowIndex].Value = String.Empty;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["CreditCard"].ReadOnly = true;

                        gvSettlementsInMedBill.CurrentCell = gvSettlementsInMedBill.Rows[e.RowIndex].Cells["CheckNo"];
                    }
                    if (gvSettlementsInMedBill["PaymentMethod", e.RowIndex]?.Value?.ToString() == "ACH/Banking")
                    {

                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["ACHNo"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["Reconciled"].ReadOnly = false;

                        gvSettlementsInMedBill["CheckNo", e.RowIndex].Value = String.Empty;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["CheckNo"].ReadOnly = true;

                        gvSettlementsInMedBill["CreditCard", e.RowIndex].Value = String.Empty;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["CreditCard"].ReadOnly = true;

                        gvSettlementsInMedBill.CurrentCell = gvSettlementsInMedBill.Rows[e.RowIndex].Cells["ACHNo"];
                    }
                    if (gvSettlementsInMedBill["PaymentMethod", e.RowIndex]?.Value?.ToString() == "Credit Card")
                    {
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["CreditCard"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["Reconciled"].ReadOnly = false;

                        gvSettlementsInMedBill["CheckNo", e.RowIndex].Value = String.Empty;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["CheckNo"].ReadOnly = true;

                        gvSettlementsInMedBill["ACHNo", e.RowIndex].Value = String.Empty;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["ACHNo"].ReadOnly = true;

                        gvSettlementsInMedBill.CurrentCell = gvSettlementsInMedBill.Rows[e.RowIndex].Cells["CreditCard"];
                    }

                    if (gvSettlementsInMedBill[6, e.RowIndex]?.Value?.ToString() == "None")
                    {
                        gvSettlementsInMedBill["CheckNo", e.RowIndex].Value = String.Empty;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["CheckNo"].ReadOnly = true;

                        gvSettlementsInMedBill["ACHDate", e.RowIndex].Value = String.Empty;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["ACHDate"].ReadOnly = true;

                        gvSettlementsInMedBill["CreditCard", e.RowIndex].Value = String.Empty;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["CreditCard"].ReadOnly = true;

                        gvSettlementsInMedBill["PaymentDate", e.RowIndex].Value = String.Empty;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["PaymentDate"].ReadOnly = true;
                        gvSettlementsInMedBill["Reconciled", e.RowIndex].Value = 0;
                        gvSettlementsInMedBill.Rows[e.RowIndex].Cells["Reconciled"].ReadOnly = true;

                        gvSettlementsInMedBill.CurrentCell = gvSettlementsInMedBill.Rows[e.RowIndex].Cells["Note"];
                    }
                }

                if (e.ColumnIndex == 6)
                {
                    if ((Boolean)gvSettlementsInMedBill["Approved", e.RowIndex]?.Value == true)
                    {
                        CalendarCell approvedDateCell = new CalendarCell();
                        approvedDateCell.Value = DateTime.Today.ToString("MM/dd/yyyy");
                        gvSettlementsInMedBill["ApprovedDate", e.RowIndex] = approvedDateCell;
                    }
                    else
                    {
                        CalendarCell approvedDateCell = new CalendarCell();
                        approvedDateCell.Value = null;
                        gvSettlementsInMedBill["ApprovedDate", e.RowIndex] = approvedDateCell;
                    }
                }
            }
        }

        private void gvProcessingCaseNo_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {

            if (e.RowIndex > -1)
            {
                DataGridView gvCaseUnderProgress = (DataGridView)sender;
                String IndividualId = String.Empty;
                //String CaseId = String.Empty;
                String IndividualName = String.Empty;

                int nRowSelected = 0;

                if (gvCaseUnderProgress.Rows.Count > 0)
                {

                    //tbCMMManager.TabPages.Insert(3, tbpgCaseView);
                    //tbCMMManager.TabPages.Insert(4, tbpgCreateCase);
                    //tbCMMManager.SelectedTab = tbpgCreateCase;


                    //nRowSelected = gvCaseUnderProgress.CurrentCell.RowIndex;
                    nRowSelected = e.RowIndex;

                    IndividualId = txtIndividualID.Text.Trim();
                    CaseIdForCasePageMedBill = gvCaseUnderProgress["CaseIdForIndividual", nRowSelected].Value.ToString().Trim();

                    String strSqlQueryForCaseInUse = "select [dbo].[tbl_CaseInUse].[Case_Name], [dbo].[tbl_CaseInUse].[EditingStaff] from [dbo].[tbl_CaseInUse] " +
                                                     "where [dbo].[tbl_CaseInUse].[Case_Name] = @CaseInUse";

                    SqlCommand cmdCaseInUse = new SqlCommand(strSqlQueryForCaseInUse, connRN2);
                    cmdCaseInUse.CommandType = CommandType.Text;

                    cmdCaseInUse.Parameters.AddWithValue("@CaseInUse", CaseIdForCasePageMedBill);

                    if (connRN2.State != ConnectionState.Closed)
                    {
                        connRN2.Close();
                        connRN2.Open();
                    }
                    else if (connRN2.State == ConnectionState.Closed) connRN2.Open();
                    SqlDataReader rdrCaseInUse = cmdCaseInUse.ExecuteReader();
                    if (rdrCaseInUse.HasRows)
                    {
                        rdrCaseInUse.Read();
                        if (CaseIdForCasePageMedBill == rdrCaseInUse.GetString(0).Trim() &&
                            nLoggedUserId != rdrCaseInUse.GetInt16(1))
                        {
                            MessageBox.Show("The Case: " + CaseIdForCasePageMedBill + " is in use.", "Error");
                            rdrCaseInUse.Close();
                            if (connRN2.State != ConnectionState.Closed) connRN2.Close();
                            return;
                        }
                    }
                    else
                    {
                        rdrCaseInUse.Close();
                        if (connRN2.State != ConnectionState.Closed) connRN2.Close();

                        String strSqlInsertCaseInUse = "insert into [dbo].[tbl_CaseInUse] (Case_Name, EditingStaff) values (@CaseNO, @EditingStaff)";

                        SqlCommand cmdInsertCaseInUse = new SqlCommand(strSqlInsertCaseInUse, connRN2);
                        cmdInsertCaseInUse.CommandType = CommandType.Text;

                        cmdInsertCaseInUse.Parameters.AddWithValue("@CaseNo", CaseIdForCasePageMedBill);
                        cmdInsertCaseInUse.Parameters.AddWithValue("@EditingStaff", nLoggedUserId);

                        if (connRN2.State != ConnectionState.Closed)
                        {
                            connRN2.Close();
                            connRN2.Open();
                        }
                        else if (connRN2.State == ConnectionState.Closed) connRN2.Open();
                        int nCaseInUserInserted = cmdInsertCaseInUse.ExecuteNonQuery();
                        if (nCaseInUserInserted != 1)
                        {
                            MessageBox.Show("Case in use: " + CaseIdForCasePageMedBill + " has not been inserted.", "Error");
                            if (connRN2.State != ConnectionState.Closed) connRN2.Close();
                            return;
                        }
                        if (connRN2.State != ConnectionState.Closed) connRN2.Close();
                    }

                    IndividualName = txtLastName.Text.Trim() + ", " + txtFirstName.Text.Trim() + " " + txtMiddleName.Text.Trim();

                    txtCreateCaseIndividualName.Text = IndividualName;

                    String strSqlQueryForCaseStatus = "select [dbo].[tbl_case_status_code].[CaseStatusValue] from [dbo].[tbl_case_status_code]";
                    SqlCommand cmdQueryForCaseStatus = new SqlCommand(strSqlQueryForCaseStatus, connRN2);
                    cmdQueryForCaseStatus.CommandType = CommandType.Text;

                    if (connRN2.State != ConnectionState.Closed)
                    {
                        connRN2.Close();
                        connRN2.Open();
                    }
                    else if (connRN2.State == ConnectionState.Closed) connRN2.Open();

                    SqlDataReader rdrCaseStatus = cmdQueryForCaseStatus.ExecuteReader();
                    cbCaseStatus.Items.Clear();
                    if (rdrCaseStatus.HasRows)
                    {
                        while (rdrCaseStatus.Read())
                        {
                            cbCaseStatus.Items.Add(rdrCaseStatus.GetString(0));
                        }
                    }
                    rdrCaseStatus.Close();
                    if (connRN2.State != ConnectionState.Closed) connRN2.Close();


                    String strSqlQueryForCase = "select [dbo].[tbl_case].[Case_Name], [dbo].[tbl_case].[Contact_ID], [dbo].[tbl_case].[CreateDate], [dbo].[tbl_case].[ModifiDate], " +
                                                "[dbo].[tbl_case].[CreateStaff], [dbo].[tbl_case].[ModifiStaff], [dbo].[tbl_case].[Case_status], " +
                                                "[dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Form_File_Name], [dbo].[tbl_case].[NPF_Form_Destination_File_Name], [dbo].[tbl_case].[NPF_Receiv_Date], " +
                                                "[dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Form_File_Name], [dbo].[tbl_case].[IB_Form_Destination_File_Name], [dbo].[tbl_case].[IB_Receiv_Date], " +
                                                "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Form_File_Name], [dbo].[tbl_case].[POP_Form_Destination_File_Name], [dbo].[tbl_case].[POP_Receiv_Date], " +
                                                "[dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Form_File_Name], [dbo].[tbl_case].[MedRec_Form_Destination_File_Name], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
                                                "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Form_File_Name], [dbo].[tbl_case].[Unknown_Form_Destination_File_Name], [dbo].[tbl_case].[Unknown_Receiv_Date], " +
                                                "[dbo].[tbl_case].[Case_status], [dbo].[tbl_case].[Note] " +
                                                "from [dbo].[tbl_case] where [dbo].[tbl_case].[Case_Name] = @CaseName and [dbo].[tbl_case].[Contact_ID] = @IndividualID";

                    SqlCommand cmdQueryForCase = new SqlCommand(strSqlQueryForCase, connRN2);
                    cmdQueryForCase.CommandType = CommandType.Text;

                    cmdQueryForCase.Parameters.AddWithValue("@CaseName", CaseIdForCasePageMedBill);
                    cmdQueryForCase.Parameters.AddWithValue("@IndividualID", IndividualId);

                    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                    if (connRN2.State != ConnectionState.Closed)
                    {
                        connRN2.Close();
                        connRN2.Open();
                    }
                    else if (connRN2.State == ConnectionState.Closed) connRN2.Open();

                    SqlDataReader rdrCaseForIndividual = cmdQueryForCase.ExecuteReader();
                    if (rdrCaseForIndividual.HasRows)
                    {
                        rdrCaseForIndividual.Read();

                        txtCaseName.Text = rdrCaseForIndividual.GetString(0);
                        txtCaseIndividualID.Text = rdrCaseForIndividual.GetString(1);

                        // NPF Form
                        if (rdrCaseForIndividual.GetBoolean(7) == true) chkNPF_CaseCreationPage.Checked = true;
                        if (!rdrCaseForIndividual.IsDBNull(8)) txtNPFFormFilePath.Text = rdrCaseForIndividual.GetString(8);
                        if (!rdrCaseForIndividual.IsDBNull(9))
                        {
                            strNPFormFilePathDestination = rdrCaseForIndividual.GetString(9);
                            if (strNPFormFilePathDestination != String.Empty)
                            {
                                btnNPFFormView.Enabled = true;
                                btnNPFFormDelete.Enabled = true;
                            }
                        }
                        if (!rdrCaseForIndividual.IsDBNull(10))
                        {
                            dtpNPFReceivedDate.Checked = true;
                            dtpNPFReceivedDate.Value = rdrCaseForIndividual.GetDateTime(10);
                            dtpNPFReceivedDate.Text = rdrCaseForIndividual.GetDateTime(10).ToString("MM/dd/yyyy");
                        }
                            //txtNPFUploadDate.Text = rdrCaseForIndividual.GetDateTime(10).ToString("MM/dd/yyyy");

                        // IB Form
                        if (rdrCaseForIndividual.GetBoolean(11) == true) chkIB_CaseCreationPage.Checked = true;
                        if (!rdrCaseForIndividual.IsDBNull(12)) txtIBFilePath.Text = rdrCaseForIndividual.GetString(12);
                        if (!rdrCaseForIndividual.IsDBNull(13))
                        {
                            strIBFilePathDestination = rdrCaseForIndividual.GetString(13);
                            if (strIBFilePathDestination != String.Empty)
                            {
                                btnIBView.Enabled = true;
                                btnDeleteIB.Enabled = true;
                            }
                        }
                        if (!rdrCaseForIndividual.IsDBNull(14))
                        {
                            dtpIBReceivedDate.Checked = true;
                            dtpIBReceivedDate.Value = rdrCaseForIndividual.GetDateTime(14);
                            dtpIBReceivedDate.Text = rdrCaseForIndividual.GetDateTime(14).ToString("MM/dd/yyyy");
                        }
                            //txtIBUploadDate.Text = rdrCaseForIndividual.GetDateTime(14).ToString("MM/dd/yyyy");

                        // POP Form
                        if (rdrCaseForIndividual.GetBoolean(15) == true) chkPoP_CaseCreationPage.Checked = true;
                        if (!rdrCaseForIndividual.IsDBNull(16)) txtPopFilePath.Text = rdrCaseForIndividual.GetString(16);
                        if (!rdrCaseForIndividual.IsDBNull(17))
                        {
                            strPopFilePathDestination = rdrCaseForIndividual.GetString(17);
                            if (strPopFilePathDestination != String.Empty)
                            {
                                btnPoPView.Enabled = true;
                                btnDeletePoP.Enabled = true;
                            }
                        }
                        if (!rdrCaseForIndividual.IsDBNull(18))
                        {
                            dtpPoPReceivedDate.Checked = true;
                            dtpPoPReceivedDate.Value = rdrCaseForIndividual.GetDateTime(18);
                            dtpPoPReceivedDate.Text = rdrCaseForIndividual.GetDateTime(18).ToString("MM/dd/yyyy");
                        }
                            //txtPoPUploadDate.Text = rdrCaseForIndividual.GetDateTime(18).ToString("MM/dd/yyyy");

                        // Med Rec Form
                        if (rdrCaseForIndividual.GetBoolean(19) == true) chkMedicalRecordCaseCreationPage.Checked = true;
                        if (!rdrCaseForIndividual.IsDBNull(20)) txtMedicalRecordFilePath.Text = rdrCaseForIndividual.GetString(20);
                        if (!rdrCaseForIndividual.IsDBNull(21))
                        {
                            strMedRecordFilePathDestination = rdrCaseForIndividual.GetString(21);
                            if (strMedRecordFilePathDestination != String.Empty)
                            {
                                btnMedicalRecordView.Enabled = true;
                                btnDeleteMedicalRecord.Enabled = true;
                            }
                        }
                        if (!rdrCaseForIndividual.IsDBNull(22))
                        {
                            dtpMRReceivedDate.Checked = true;
                            dtpMRReceivedDate.Value = rdrCaseForIndividual.GetDateTime(22);
                            dtpMRReceivedDate.Text = rdrCaseForIndividual.GetDateTime(22).ToString("MM/dd/yyyy");
                        }
                            //txtMRUploadDate.Text = rdrCaseForIndividual.GetDateTime(22).ToString("MM/dd/yyyy");

                        // Unknown Doc Form
                        if (rdrCaseForIndividual.GetBoolean(23) == true) chkOtherDocCaseCreationPage.Checked = true;
                        if (!rdrCaseForIndividual.IsDBNull(24)) txtOtherDocumentFilePath.Text = rdrCaseForIndividual.GetString(24);
                        if (!rdrCaseForIndividual.IsDBNull(25))
                        {
                            strUnknownDocFilePathDestination = rdrCaseForIndividual.GetString(25);
                            if (strUnknownDocFilePathDestination != String.Empty)
                            {
                                btnOtherDocView.Enabled = true;
                                btnDeleteMedicalRecord.Enabled = true;
                            }
                        }
                        if (!rdrCaseForIndividual.IsDBNull(26))
                        {
                            dtpOtherDocReceivedDate.Checked = true;
                            dtpOtherDocReceivedDate.Value = rdrCaseForIndividual.GetDateTime(26);
                            dtpOtherDocReceivedDate.Text = rdrCaseForIndividual.GetDateTime(26).ToString("MM/dd/yyyy");
                        }
                            //txtOtherDocUploadDate.Text = rdrCaseForIndividual.GetDateTime(26).ToString("MM/dd/yyyy");

                        // Case status
                        //if (rdrCaseForIndividual.GetBoolean(27) == true) txtCaseStatus.Text = "Complete and Ready";
                        //else txtCaseStatus.Text = "Pending - Additional Documents required";
                        if (!rdrCaseForIndividual.IsDBNull(27))
                        {
                            switch (rdrCaseForIndividual.GetInt16(27))
                            {
                                case (int)CaseStatus.OnGoing:
                                    cbCaseStatus.SelectedIndex = (int)CaseStatus.OnGoing;
                                    break;
                                case (int)CaseStatus.Processing:
                                    cbCaseStatus.SelectedIndex = (int)CaseStatus.Processing;
                                    break;
                                case (int)CaseStatus.Closed:
                                    cbCaseStatus.SelectedIndex = (int)CaseStatus.Closed;
                                    break;
                            }
                        }

                        // Note
                        if (!rdrCaseForIndividual.IsDBNull(28)) txtNoteOnCase.Text = rdrCaseForIndividual.GetString(28);


                        // Individual Name

                        //tbCMMManager.TabPages.Insert(3, tbpgCaseView);
                        //tbCMMManager.TabPages.Insert(4, tbpgCreateCase);
                        //tbCMMManager.SelectedIndex = 4;
                    }
                    rdrCaseForIndividual.Close();
                    if (connRN2.State != ConnectionState.Closed) connRN2.Close();

                    //String strSqlQueryForMedBillInCase = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], " +
                    //                                     "[dbo].[tbl_medbill].[CreatedDate], [dbo].[tbl_medbill].[CreatedById], " +
                    //                                     "[dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_medbill].[LastModifiedById], " +
                    //                                     "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], [dbo].[tbl_medbill].[Balance] " +
                    //                                     "from [dbo].[tbl_medbill] " +
                    //                                     "inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId] " +
                    //                                     "where [dbo].[tbl_medbill].[Case_Id] = @CaseName and [dbo].[tbl_medbill].[Contact_Id] = @IndividualId";

                    String strSqlQueryForMedBillInCase = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], " +
                                        "[dbo].[tbl_medbill].[CreatedDate], [dbo].[tbl_CreateStaff].[Staff_Name], " +
                                        "[dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                        "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], [dbo].[tbl_medbill].[Balance] " +
                                        "from [dbo].[tbl_medbill] " +
                                        "inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId] " +
                                        "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                        "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                        "where [dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                                        "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and " +
                                        "[dbo].[tbl_medbill].[IsDeleted] = 0";



                    SqlCommand cmdQueryForMedBillsInCase = new SqlCommand(strSqlQueryForMedBillInCase, connRN2);
                    cmdQueryForMedBillsInCase.CommandType = CommandType.Text;

                    cmdQueryForMedBillsInCase.Parameters.AddWithValue("@CaseName", CaseIdForCasePageMedBill);
                    cmdQueryForMedBillsInCase.Parameters.AddWithValue("@IndividualId", IndividualId);

                    SqlDependency dependencyMedBillInCase = new SqlDependency(cmdQueryForMedBillsInCase);
                    dependencyMedBillInCase.OnChange += new OnChangeEventHandler(OnMedBillsInCaseChange);



                    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                    if (connRN2.State != ConnectionState.Closed)
                    {
                        connRN2.Close();
                        connRN2.Open();
                    }
                    else if (connRN2.State == ConnectionState.Closed) connRN2.Open();

                    SqlDataReader rdrMedBillInCase = cmdQueryForMedBillsInCase.ExecuteReader();

                    gvCasePageMedBills.Rows.Clear();
                    if (rdrMedBillInCase.HasRows)
                    {
                        while (rdrMedBillInCase.Read())
                        {
                            DataGridViewRow row = new DataGridViewRow();

                            row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(0) });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(1) });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(2).ToString("MM/dd/yyyy") });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(3) });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(4).ToString("MM/dd/yyyy") });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(5) });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(6).ToString("C") });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(7).ToString("C") });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(8).ToString("C") });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(9).ToString("C") });

                            gvCasePageMedBills.Rows.Add(row);
                        }
                        btnEditMedBill.Enabled = true;
                        btnDeleteMedBill.Enabled = true;
                    }
                    rdrMedBillInCase.Close();
                    if (connRN2.State != ConnectionState.Closed) connRN2.Close();

                    EnableCaseForm();

                    btnCaseCreationSaveUpper.Enabled = true;
                    //btnCaseCreationLowerSave.Enabled = true;

                    btnNewMedBill_Case.Enabled = true;

                    tbCMMManager.SelectedTab = tbpgCreateCase;
                    
                }
            }
        }

        private void OnMedBillsInCaseChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnMedBillsInCaseChange;

                UpdateGridViewMedBillsInCase();
            }
        }

        private void UpdateGridViewMedBillsInCase()
        {
            String IndividualId = txtIndividualID.Text.Trim();
            //String CaseId = gvProcessingCaseNo["CaseIdForIndividual", nRowSelected].Value.ToString().Trim();

            String strSqlQueryForMedBillInCase = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], " +
                 "[dbo].[tbl_medbill].[CreatedDate], [dbo].[tbl_CreateStaff].[Staff_Name], " +
                 "[dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                 "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], [dbo].[tbl_medbill].[Balance] " +
                 "from [dbo].[tbl_medbill] " +
                 "inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId] " +
                 "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                 "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                 "where [dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                 "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and " +
                 "[dbo].[tbl_medbill].[IsDeleted] = 0";

            SqlCommand cmdQueryForMedBillsInCase = new SqlCommand(strSqlQueryForMedBillInCase, connRN2);
            cmdQueryForMedBillsInCase.CommandType = CommandType.Text;

            cmdQueryForMedBillsInCase.Parameters.AddWithValue("@CaseName", CaseIdForCasePageMedBill);
            cmdQueryForMedBillsInCase.Parameters.AddWithValue("@IndividualId", IndividualId);

            SqlDependency dependencyMedBillInCase = new SqlDependency(cmdQueryForMedBillsInCase);
            dependencyMedBillInCase.OnChange += new OnChangeEventHandler(OnMedBillsInCaseChange);

            //if (connRN.State == ConnectionState.Closed) connRN.Open();
            if (connRN2.State != ConnectionState.Closed)
            {
                connRN2.Close();
                connRN2.Open();
            }
            else if (connRN2.State == ConnectionState.Closed) connRN2.Open();
            SqlDataReader rdrMedBillInCase = cmdQueryForMedBillsInCase.ExecuteReader();

            //gvCasePageMedBills.Rows.Clear();
            if (IsHandleCreated) ClearMedBillInCaseSafely();
            else gvCasePageMedBills.Rows.Clear();

            if (rdrMedBillInCase.HasRows)
            {
                while (rdrMedBillInCase.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();

                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(0) });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(1) });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(2).ToString("MM/dd/yyyy") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(3) });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(4).ToString("MM/dd/yyyy") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(5) });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(6).ToString("C") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(7).ToString("C") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(8).ToString("C") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(9).ToString("C") });

                    //gvCasePageMedBills.Rows.Add(row);
                    if (IsHandleCreated) AddNewRowToMedBillInCaseSafely(row);
                    else gvCasePageMedBills.Rows.Add(row);
                }
                btnEditMedBill.Enabled = true;
                btnDeleteMedBill.Enabled = true;
            }
            rdrMedBillInCase.Close();
            if (connRN2.State != ConnectionState.Closed) connRN2.Close();
        }

        private void gvCasePageMedBills_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {

            if (e.RowIndex <= -1)
            {
                return;
            }

            DataGridView gvMedBill = (DataGridView)sender;
            String IndividualId = String.Empty;
            String CaseNo = String.Empty;

            if (gvMedBill.Rows.Count > 0)
            {
                InitializeMedBillTabOnNewMedBill();

                String IndividualName = String.Empty;
                String CaseNameInMedBill = txtCaseName.Text.Trim();
                String IndividualIdInMedBill = txtCaseIndividualID.Text.Trim();

                String MedBillNoForCase = gvCasePageMedBills["MedBillNo", e.RowIndex].Value.ToString();
                MedBillNoForTask = MedBillNoForCase;

                String strSqlQueryForMedBillInUse = "select [dbo].[tbl_MedBillInUse].[BillNo], [dbo].[tbl_MedBillInUse].[EditingStaff] from [dbo].[tbl_MedBillInUse] " +
                                                    "where [dbo].[tbl_MedBillInUse].[BillNo] = @MedBillInUse";

                SqlCommand cmdQueryForMedBillInUse = new SqlCommand(strSqlQueryForMedBillInUse, connRN4);
                cmdQueryForMedBillInUse.CommandType = CommandType.Text;

                cmdQueryForMedBillInUse.Parameters.AddWithValue("@MedBillInUse", MedBillNoForCase);

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrMedBillInUse = cmdQueryForMedBillInUse.ExecuteReader();
                if (rdrMedBillInUse.HasRows)
                {
                    rdrMedBillInUse.Read();
                    if (MedBillNoForCase == rdrMedBillInUse.GetString(0).Trim() &&
                        nLoggedUserId != rdrMedBillInUse.GetInt16(1))
                    {
                        MessageBox.Show("The Medical Bill: " + MedBillNoForCase + " is in use.", "Error");
                        rdrMedBillInUse.Close();
                        if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                        return;
                    }
                }
                else
                {
                    rdrMedBillInUse.Close();
                    if (connRN4.State != ConnectionState.Closed) connRN.Close();

                    String strSqlInsertMedBillInUse = "insert into [dbo].[tbl_MedBillInUse] (BillNo, EditingStaff) values (@MedBillNo, @ModifyingStaff)";

                    SqlCommand cmdInsertMedBillInUse = new SqlCommand(strSqlInsertMedBillInUse, connRN4);
                    cmdInsertMedBillInUse.CommandType = CommandType.Text;

                    cmdInsertMedBillInUse.Parameters.AddWithValue("@MedBillNo", MedBillNoForCase);
                    cmdInsertMedBillInUse.Parameters.AddWithValue("@ModifyingStaff", nLoggedUserId);

                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    int nMedBillInUseInserted = cmdInsertMedBillInUse.ExecuteNonQuery();
                    if (nMedBillInUseInserted != 1)
                    {
                        MessageBox.Show("Medical Bill in use: " + MedBillNoForCase + " has not been inserted.", "Error");
                        if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                        return;
                    }
                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                }


                //if (connRN4.State != ConnectionState.Closed) connRN4.Close();


                //////////////////////////////////////////////////////////////////////////////////
                String strPatientLastName = txtLastName.Text.Trim();
                String strPatientFirstName = txtFirstName.Text.Trim();
                String strPatientMiddleName = txtMiddleName.Text.Trim();
                String strDateOfBirth = dtpBirthDate.Value.ToString("MM/dd/yyyy");
                String strSSN = txtIndividualSSN.Text.Trim();
                String strStreetAddr = txtStreetAddress1.Text.Trim();
                String strCity = txtCity1.Text.Trim();
                String strState = txtState1.Text.Trim();
                String strZip = txtZip1.Text.Trim();

                switch (IndividualSearched.IndividualPlan)
                {
                    case Plan.GoldPlus:
                        txtMemberProgram.Text = "Gold Plus";
                        break;
                    case Plan.Gold:
                        txtMemberProgram.Text = "Gold";
                        break;
                    case Plan.Silver:
                        txtMemberProgram.Text = "Silver";
                        break;
                    case Plan.Bronze:
                        txtMemberProgram.Text = "Bronze";
                        break;
                    case Plan.GoldMedi_I:
                        txtMemberProgram.Text = "Gold Medi-I";
                        break;
                    case Plan.GoldMedi_II:
                        txtMemberProgram.Text = "Gold Medi-II";
                        break;
                }

                txtIndividualIDMedBill.Text = IndividualIdInMedBill;
                if (strPatientMiddleName.Trim() == String.Empty) txtPatientNameMedBill.Text = strPatientLastName + ", " + strPatientFirstName;
                else if (strPatientMiddleName.Trim() != String.Empty) txtPatientNameMedBill.Text = strPatientLastName + ", " + strPatientFirstName + " " + strPatientMiddleName;

                txtMedBillDOB.Text = strDateOfBirth;
                txtMedBillSSN.Text = strSSN;
                txtMedBillAddress.Text = strStreetAddr + ", " + strCity + ", " + strState + " " + strZip;

                // populate Medical Bill types
                String strSqlQueryForMedBillTypes = "select [dbo].[tbl_medbill_type].[MedBillTypeId], [dbo].[tbl_medbill_type].[MedBillTypeName] from [dbo].[tbl_medbill_type]";

                SqlCommand cmdQueryForMedBillTypes = new SqlCommand(strSqlQueryForMedBillTypes, connRN4);
                cmdQueryForMedBillTypes.CommandType = CommandType.Text;

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrMedBillTypes = cmdQueryForMedBillTypes.ExecuteReader();
                dicMedBillTypes.Clear();

                if (rdrMedBillTypes.HasRows)
                {
                    while (rdrMedBillTypes.Read())
                    {
                        if (!rdrMedBillTypes.IsDBNull(0) && !rdrMedBillTypes.IsDBNull(1))
                        {
                            dicMedBillTypes.Add(rdrMedBillTypes.GetInt16(0), rdrMedBillTypes.GetString(1));
                        }
                    }
                }
                rdrMedBillTypes.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();



                // Get the Medical Bill Note Type info
                //List<MedBillNoteTypeInfo> lstMedBillNoteTypeInfo = new List<MedBillNoteTypeInfo>();
                //String strSqlQueryForMedBillNoteTypeInfo = "select [dbo].[tbl_MedBillNoteType].[MedBillNoteTypeId], [dbo].[tbl_MedBillNoteType].[MedBillNoteTypeValue] from [dbo].[tbl_MedBillNoteType]";

                //SqlCommand cmdQueryForMedBillNoteTypeInfo = new SqlCommand(strSqlQueryForMedBillNoteTypeInfo, connRN);
                //cmdQueryForMedBillNoteTypeInfo.CommandType = CommandType.Text;

                //if (connRN.State != ConnectionState.Closed)
                //{
                //    connRN.Close();
                //    connRN.Open();
                //}
                //else if (connRN.State == ConnectionState.Closed) connRN.Open();
                //SqlDataReader rdrMedBillNoteType = cmdQueryForMedBillNoteTypeInfo.ExecuteReader();
                //if (rdrMedBillNoteType.HasRows)
                //{
                //    while (rdrMedBillNoteType.Read())
                //    {
                //        if (!rdrMedBillNoteType.IsDBNull(0) && !rdrMedBillNoteType.IsDBNull(1))
                //        {
                //            lstMedBillNoteTypeInfo.Add(new MedBillNoteTypeInfo { MedBillNoteTypeId = rdrMedBillNoteType.GetInt16(0), MedBillNoteTypeValue = rdrMedBillNoteType.GetString(1) });
                //        }
                //    }
                //}
                //if (connRN.State != ConnectionState.Closed) connRN.Close();

                // Populate Pending Reason
                comboPendingReason.Items.Clear();

                if (dicPendingReason.Count > 0)
                {
                    for (int i = 0; i < dicPendingReason.Count; i++)
                    {
                        comboPendingReason.Items.Add(dicPendingReason[i]);
                    }
                    comboPendingReason.SelectedIndex = 0;
                }

                // Populate Ineligible Reason
                comboIneligibleReason.Items.Clear();

                if (dicIneligibleReason.Count > 0)
                {
                    for (int i = 0; i < dicIneligibleReason.Count; i++)
                    {
                        comboIneligibleReason.Items.Add(dicIneligibleReason[i]);
                    }
                    comboIneligibleReason.SelectedIndex = 0;
                }

                //tbCMMManager.TabPages.Insert(5, tbpgMedicalBill);
                //tbCMMManager.SelectedTab = tbpgMedicalBill;

                // Get medical bill info

                String ICD10Code = String.Empty;


                //String strSqlQueryForMedBillEdit = "select [dbo].[tbl_medbill].[Case_Id], [dbo].[tbl_medbill].[Illness_Id], [dbo].[tbl_medbill].[Incident_Id], " +
                //                                   "[dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill].[MedBillType_Id], [dbo].[tbl_medbill].[BillStatus], [dbo].[tbl_medbill].[BillClosed], " +
                //                                   "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_MedicalProvider].[Name], " +
                //                                   "[dbo].[tbl_medbill].[PrescriptionDrugName], [dbo].[tbl_medbill].[PrescriptionNo], [dbo].[tbl_medbill].[PrescriptionDescription], " +
                //                                   "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy], [dbo].[tbl_medbill].[PatientTypeId], " +
                //                                   "[dbo].[tbl_medbill].[BillDate], [dbo].[tbl_medbill].[DueDate], " +
                //                                   "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_MedicalProvider].[PHONE], [dbo].[tbl_medbill].[ProviderContactPerson], " +
                //                                   "[dbo].[tbl_medbill].[Note], " +
                //                                   "[dbo].[tbl_illness].[ICD_10_Id], " +
                //                                   "[dbo].[tbl_medbill].[PendingReason], [dbo].[tbl_medbill].[IneligibleReason], " +
                //                                   "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_medbill].[ProviderPhoneNumber], [dbo].[tbl_medbill].[ProviderContactPerson], " +
                //                                   "[dbo].[tbl_medbill].[ProposalLetterSentDate], [dbo].[tbl_medbill].[HIPPASentDate], [dbo].[tbl_medbill].[MedicalRecordDate] " +
                //                                   "from (([dbo].[tbl_medbill] inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id]) " +
                //                                   "inner join [dbo].[tbl_MedicalProvider] on [dbo].[tbl_medbill].[MedicalProvider_Id] = [dbo].[tbl_MedicalProvider].[ID]) " +
                //                                   "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                //                                   "[dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                //                                   "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and" +
                //                                   "[dbo].[tbl_medbill].[IsDeleted] = 0";

                //String strSqlQueryForMedicalProviderId = 


                //String strSqlQueryForMedBillEdit = "select [dbo].[tbl_medbill].[Case_Id], [dbo].[tbl_illness].[IllnessNo], [dbo].[tbl_incident].[IncidentNo], " +
                //                "[dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill].[MedBillType_Id], [dbo].[tbl_medbill].[BillStatus], [dbo].[tbl_medbill].[BillClosed], " +
                //                "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_MedicalProvider].[Name], " +
                //                "[dbo].[tbl_medbill].[PrescriptionDrugName], [dbo].[tbl_medbill].[PrescriptionNo], [dbo].[tbl_medbill].[PrescriptionDescription], " +
                //                "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy], [dbo].[tbl_medbill].[PatientTypeId], " +
                //                "[dbo].[tbl_medbill].[BillDate], [dbo].[tbl_medbill].[DueDate], " +
                //                "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_medbill].[ProviderContactPerson], " +
                //                "[dbo].[tbl_medbill].[Note], " +
                //                "[dbo].[tbl_illness].[ICD_10_Id], " +
                //                "[dbo].[tbl_medbill].[PendingReason], [dbo].[tbl_medbill].[IneligibleReason], " +
                //                "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_medbill].[ProviderPhoneNumber], [dbo].[tbl_medbill].[ProviderContactPerson], " +
                //                "[dbo].[tbl_medbill].[ProposalLetterSentDate], [dbo].[tbl_medbill].[HIPPASentDate], [dbo].[tbl_medbill].[MedicalRecordDate], " +
                //                "[dbo].[tbl_medbill].[Illness_Id], [dbo].[tbl_medbill].[Incident_Id] " +
                //                "from [dbo].[tbl_medbill] " +
                //                "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                //                "inner join [dbo].[tbl_incident] on [dbo].[tbl_medbill].[Incident_Id] = [dbo].[tbl_incident].[Incident_id] " +
                //                "inner join [dbo].[tbl_MedicalProvider] on [dbo].[tbl_medbill].[MedicalProvider_Id] = [dbo].[tbl_MedicalProvider].[ID] " +
                //                "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                //                "[dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                //                "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and" +
                //                "[dbo].[tbl_medbill].[IsDeleted] = 0";

                String MedicalProviderId = String.Empty;

                String strSqlQueryForMedBillEdit = "select [dbo].[tbl_medbill].[Case_Id], [dbo].[tbl_illness].[IllnessNo], [dbo].[tbl_incident].[IncidentNo], " +
                                "[dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill].[MedBillType_Id], [dbo].[tbl_medbill].[BillStatus], [dbo].[tbl_medbill].[BillClosed], " +
                                "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[MedicalProvider_Id], " +
                                "[dbo].[tbl_medbill].[PrescriptionDrugName], [dbo].[tbl_medbill].[PrescriptionNo], [dbo].[tbl_medbill].[PrescriptionDescription], " +
                                "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy], [dbo].[tbl_medbill].[PatientTypeId], " +
                                "[dbo].[tbl_medbill].[BillDate], [dbo].[tbl_medbill].[DueDate], " +
                                "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_medbill].[ProviderContactPerson], " +
                                "[dbo].[tbl_medbill].[Note], " +
                                "[dbo].[tbl_illness].[ICD_10_Id], " +
                                "[dbo].[tbl_medbill].[PendingReason], [dbo].[tbl_medbill].[IneligibleReason], " +
                                "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_medbill].[ProviderPhoneNumber], [dbo].[tbl_medbill].[ProviderContactPerson], " +
                                "[dbo].[tbl_medbill].[ProposalLetterSentDate], [dbo].[tbl_medbill].[HIPPASentDate], [dbo].[tbl_medbill].[MedicalRecordDate], " +
                                "[dbo].[tbl_medbill].[Illness_Id], [dbo].[tbl_medbill].[Incident_Id] " +
                                "from [dbo].[tbl_medbill] " +
                                "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                                "inner join [dbo].[tbl_incident] on [dbo].[tbl_medbill].[Incident_Id] = [dbo].[tbl_incident].[Incident_id] " +
                                "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                                "[dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                                "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and" +
                                "[dbo].[tbl_medbill].[IsDeleted] = 0";

                SqlCommand cmdQueryForMedBillEdit = new SqlCommand(strSqlQueryForMedBillEdit, connRN4);
                cmdQueryForMedBillEdit.CommandType = CommandType.Text;

                cmdQueryForMedBillEdit.Parameters.AddWithValue("@MedBillNo", MedBillNoForCase);
                cmdQueryForMedBillEdit.Parameters.AddWithValue("@CaseName", CaseNameInMedBill);
                cmdQueryForMedBillEdit.Parameters.AddWithValue("@IndividualId", IndividualIdInMedBill);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrMedBillEdit = cmdQueryForMedBillEdit.ExecuteReader();
                if (rdrMedBillEdit.HasRows)
                {
                    rdrMedBillEdit.Read();

                    if (!rdrMedBillEdit.IsDBNull(0)) txtMedBill_CaseNo.Text = rdrMedBillEdit.GetString(0).Trim();
                    if (!rdrMedBillEdit.IsDBNull(1))
                    {
                        Illness.IllnessNo = rdrMedBillEdit.GetString(1).Trim();
                        txtMedBill_Illness.Text = rdrMedBillEdit.GetString(1).Trim();
                    }
                    if (!rdrMedBillEdit.IsDBNull(2))
                    {
                        Incident.IncidentNo = rdrMedBillEdit.GetString(2).Trim();
                        txtMedBill_Incident.Text = rdrMedBillEdit.GetString(2).Trim();
                    }

                    if (!rdrMedBillEdit.IsDBNull(3)) txtMedBillNo.Text = rdrMedBillEdit.GetString(3).Trim();

                    if (!rdrMedBillEdit.IsDBNull(4))
                    {
                        comboMedBillType.Items.Clear();
                        for (int i = 1; i <= dicMedBillTypes.Count; i++)
                        {
                            comboMedBillType.Items.Add(dicMedBillTypes[i]);
                        }
                        comboMedBillType.SelectedIndex = rdrMedBillEdit.GetInt16(4) - 1;
                    }

                    if (!rdrMedBillEdit.IsDBNull(5))
                    {
                        if (dicMedBillStatus.Count > 0)
                        {
                            comboMedBillStatus.Items.Clear();
                            for (int i = 0; i < dicMedBillStatus.Count; i++)
                            {
                                comboMedBillStatus.Items.Add(dicMedBillStatus[i]);
                            }
                            comboMedBillStatus.SelectedIndex = rdrMedBillEdit.GetInt16(5);
                        }
                    }
                    if (!rdrMedBillEdit.IsDBNull(6))
                    {
                        if (rdrMedBillEdit.GetBoolean(6) == true) cbMedBillClosed.SelectedIndex = 1;
                        else cbMedBillClosed.SelectedIndex = 0;
                    }
                    else cbMedBillClosed.SelectedIndex = 0;

                    if (!rdrMedBillEdit.IsDBNull(7))
                    {
                        txtMedBillAmount.Text = rdrMedBillEdit.GetDecimal(7).ToString("C");
                        txtBalance.Text = rdrMedBillEdit.GetDecimal(7).ToString("C");
                    }
                    //if (!rdrMedBillEdit.IsDBNull(8)) txtMedicalProvider.Text = rdrMedBillEdit.GetString(8).Trim();
                    if (!rdrMedBillEdit.IsDBNull(8)) MedicalProviderId = rdrMedBillEdit.GetString(8).Trim();
                    if (!rdrMedBillEdit.IsDBNull(9)) txtPrescriptionName.Text = rdrMedBillEdit.GetString(9).Trim();
                    if (!rdrMedBillEdit.IsDBNull(10)) txtNumberOfMedication.Text = rdrMedBillEdit.GetString(10).Trim();
                    if (!rdrMedBillEdit.IsDBNull(11)) txtPrescriptionDescription.Text = rdrMedBillEdit.GetString(11).Trim();
                    if (!rdrMedBillEdit.IsDBNull(12)) txtNumPhysicalTherapy.Text = rdrMedBillEdit.GetInt16(12).ToString();
                    if (!rdrMedBillEdit.IsDBNull(13))
                    {
                        int nPatientType = rdrMedBillEdit.GetInt16(13);

                        if (nPatientType == 0) rbOutpatient.Checked = true;
                        else if (nPatientType == 1) rbInpatient.Checked = true;
                    }
                    // Bill date
                    if (!rdrMedBillEdit.IsDBNull(14))
                    {
                        dtpBillDate.Checked = true;
                        dtpBillDate.Text = rdrMedBillEdit.GetDateTime(14).ToString("MM/dd/yyyy");
                    }
                    else
                    {
                        dtpBillDate.Format = DateTimePickerFormat.Custom;
                        dtpBillDate.CustomFormat = " ";
                    }

                    // Due date
                    if (!rdrMedBillEdit.IsDBNull(15))
                    {
                        dtpDueDate.Checked = true;
                        dtpDueDate.Text = rdrMedBillEdit.GetDateTime(15).ToString("MM/dd/yyyy");
                    }
                    else
                    {
                        dtpDueDate.Format = DateTimePickerFormat.Custom;
                        dtpDueDate.CustomFormat = " ";
                    }

                    if (!rdrMedBillEdit.IsDBNull(16)) txtMedBillAccountNoAtProvider.Text = rdrMedBillEdit.GetString(16);
                    //if (!rdrMedBillEdit.IsDBNull(17)) txtMedProviderPhoneNo.Text = rdrMedBillEdit.GetString(17);
                    if (!rdrMedBillEdit.IsDBNull(17)) txtProviderContactPerson.Text = rdrMedBillEdit.GetString(17);

                    if (!rdrMedBillEdit.IsDBNull(18))
                    {
                        if (comboMedBillType.SelectedIndex == 0) txtMedBillNote.Text = rdrMedBillEdit.GetString(18);
                        if (comboMedBillType.SelectedIndex == 1) txtPrescriptionNote.Text = rdrMedBillEdit.GetString(18);
                        if (comboMedBillType.SelectedIndex == 2) txtPhysicalTherapyRxNote.Text = rdrMedBillEdit.GetString(18);
                    }

                    if (!rdrMedBillEdit.IsDBNull(19))
                    {
                        ICD10Code = rdrMedBillEdit.GetString(19).Trim();
                        Illness.ICD10Code = ICD10Code;
                        //txtMedBill_Illness.Text = ICD10Code;
                    }

                    if ((comboMedBillType.SelectedIndex == 0) && (!rdrMedBillEdit.IsDBNull(20)))
                    {
                        comboPendingReason.SelectedIndex = rdrMedBillEdit.GetInt32(20);
                    }

                    if ((comboMedBillType.SelectedIndex == 0) && (!rdrMedBillEdit.IsDBNull(21)))
                    {
                        comboIneligibleReason.SelectedIndex = rdrMedBillEdit.GetInt32(21);
                    }

                    // Reset fields

                    if (comboMedBillType.SelectedIndex == 0)       // Medical Bill Type - Medical Bill
                    {
                        txtPrescriptionName.Text = String.Empty;
                        txtPrescriptionDescription.Text = String.Empty;
                        txtPrescriptionNote.Text = String.Empty;
                        txtNumberOfMedication.Text = String.Empty;

                        txtNumPhysicalTherapy.Text = String.Empty;
                        txtPhysicalTherapyRxNote.Text = String.Empty;
                    }
                    else if (comboMedBillType.SelectedIndex == 1)       // Medical Bill Type - Prescription
                    {
                        txtNumPhysicalTherapy.Text = String.Empty;
                        txtPhysicalTherapyRxNote.Text = String.Empty;

                        rbInpatient.Checked = false;
                        rbOutpatient.Checked = false;

                        comboPendingReason.SelectedIndex = 0;
                        comboIneligibleReason.SelectedIndex = 0;

                        txtMedBillNote.Text = String.Empty;
                    }
                    else if (comboMedBillType.SelectedIndex == 2)       // Medical Bill Type - Physical Therapy
                    {
                        txtPrescriptionName.Text = String.Empty;
                        txtPrescriptionDescription.Text = String.Empty;
                        txtPrescriptionNote.Text = String.Empty;
                        txtNumberOfMedication.Text = String.Empty;

                        rbInpatient.Checked = false;
                        rbOutpatient.Checked = false;

                        comboPendingReason.SelectedIndex = 0;
                        comboIneligibleReason.SelectedIndex = 0;

                        txtMedBillNote.Text = String.Empty;
                    }

                    if (!rdrMedBillEdit.IsDBNull(22)) txtMedBillAccountNoAtProvider.Text = rdrMedBillEdit.GetString(22);
                    if (!rdrMedBillEdit.IsDBNull(23)) txtMedProviderPhoneNo.Text = rdrMedBillEdit.GetString(23);
                    if (!rdrMedBillEdit.IsDBNull(24)) txtProviderContactPerson.Text = rdrMedBillEdit.GetString(24);

                    if (!rdrMedBillEdit.IsDBNull(25))
                    {
                        dtpProposalLetterSentDate.Checked = true;
                        dtpProposalLetterSentDate.Value = rdrMedBillEdit.GetDateTime(25);
                        dtpProposalLetterSentDate.Format = DateTimePickerFormat.Short;
                    }
                    if (!rdrMedBillEdit.IsDBNull(26))
                    {
                        dtpHippaSentDate.Checked = true;
                        dtpHippaSentDate.Value = rdrMedBillEdit.GetDateTime(26);
                        dtpHippaSentDate.Format = DateTimePickerFormat.Short;
                    }
                    if (!rdrMedBillEdit.IsDBNull(27))
                    {
                        dtpMedicalRecordDate.Checked = true;
                        dtpMedicalRecordDate.Value = rdrMedBillEdit.GetDateTime(27);
                        dtpMedicalRecordDate.Format = DateTimePickerFormat.Short;
                    }

                    if (!rdrMedBillEdit.IsDBNull(28)) Illness.IllnessId = rdrMedBillEdit.GetString(28);
                    else Illness.IllnessId = String.Empty;

                    if (!rdrMedBillEdit.IsDBNull(29)) Incident.IncidentId = rdrMedBillEdit.GetString(29);
                    else Incident.IncidentId = String.Empty;

                }
                rdrMedBillEdit.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                ///

                String strSqlQueryForMedicalProviderName = "select [dbo].[Account].[Name] from [dbo].[account] where [dbo].[account].[Id] = @MedicalProviderId";

                SqlCommand cmdQueryForMedicalProviderName = new SqlCommand(strSqlQueryForMedicalProviderName, connSalesforce4);
                cmdQueryForMedicalProviderName.CommandType = CommandType.Text;

                cmdQueryForMedicalProviderName.Parameters.AddWithValue("@MedicalProviderId", MedicalProviderId);

                if (connSalesforce4.State != ConnectionState.Closed)
                {
                    connSalesforce4.Close();
                    connSalesforce4.Open();
                }
                else if (connSalesforce4.State == ConnectionState.Closed) connSalesforce4.Open();
                Object objMedicalProviderName = cmdQueryForMedicalProviderName.ExecuteScalar();
                if (connSalesforce4.State != ConnectionState.Closed) connSalesforce4.Close();

                String MedicalProviderName = String.Empty;
                if (objMedicalProviderName != null) MedicalProviderName = objMedicalProviderName.ToString();

                txtMedicalProvider.Text = MedicalProviderName;

                String IncidentNo = txtMedBill_Incident.Text.Trim();
                String IndividualIdMedBill = txtCaseIndividualID.Text.Trim();

                String strSqlQueryForIncident = "select [dbo].[tbl_incident].[Program_id], [dbo].[tbl_program].[ProgramName], [dbo].[tbl_incident].[IsDeleted] " +
                                                "from [dbo].[tbl_incident] " +
                                                "inner join [dbo].[tbl_program] on [dbo].[tbl_incident].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                                                "where [dbo].[tbl_incident].[Individual_id] = @IndividualId and " +
                                                "[dbo].[tbl_incident].[IncidentNo] = @IncidentNo " +
                                                "order by [dbo].[tbl_incident].[Program_id]";

                SqlCommand cmdQueryForIncident = new SqlCommand(strSqlQueryForIncident, connRN4);
                cmdQueryForIncident.CommandType = CommandType.Text;

                cmdQueryForIncident.Parameters.AddWithValue("@IndividualId", IndividualIdMedBill);
                cmdQueryForIncident.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrIncident = cmdQueryForIncident.ExecuteReader();
                lstIncidentProgramInfo.Clear();
                if (rdrIncident.HasRows)
                {
                    while (rdrIncident.Read())
                    {
                        if (!rdrIncident.IsDBNull(0) && !rdrIncident.IsDBNull(1))
                        {
                            IncidentProgramInfo incidentProgram = new IncidentProgramInfo(rdrIncident.GetBoolean(2), rdrIncident.GetInt16(0), rdrIncident.GetString(1).Trim());
                            lstIncidentProgramInfo.Add(incidentProgram);
                        }
                    }
                }
                rdrIncident.Close();
                if (connRN4.State == ConnectionState.Open) connRN4.Close();



                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// PR calculation old version
                /// 

                //String strSqlQueryForIncidentChange = "select [dbo].[tbl_incident_history].[Program_id], [dbo].[tbl_program].[ProgramName], [dbo].[tbl_incident_history].[IsDeleted] " +
                //                                        "from [dbo].[tbl_incident_history] " +
                //                                        "inner join [dbo].[tbl_program] on [dbo].[tbl_incident_history].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                //                                        "where ([dbo].[tbl_incident_history].[Operation] = 2 or " +
                //                                        "[dbo].[tbl_incident_history].[Operation] = 3 or " +
                //                                        "[dbo].[tbl_incident_history].[Operation] = 4) and " +
                //                                        "[dbo].[tbl_incident_history].[Individual_id] = @IndividualId and" +
                //                                        "[dbo].[tbl_incident_history].[IncidentNo] = @IncidentNo " +
                //                                        "order by [dbo].[tbl_incident_history].[Program_id]";

                //SqlCommand cmdQueryForIncidentChange = new SqlCommand(strSqlQueryForIncidentChange, connRN4);
                //cmdQueryForIncidentChange.CommandType = CommandType.Text;

                //cmdQueryForIncidentChange.Parameters.AddWithValue("@IndividualId", IndividualIdMedBill);
                //cmdQueryForIncidentChange.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                //if (connRN4.State != ConnectionState.Closed)
                //{
                //    connRN4.Close();
                //    connRN4.Open();
                //}
                //else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                //SqlDataReader rdrIncidentChange = cmdQueryForIncidentChange.ExecuteReader();
                ////lstIncidentProgramInfo.Clear();
                //if (rdrIncidentChange.HasRows)
                //{
                //    while (rdrIncidentChange.Read())
                //    {
                //        if (!rdrIncidentChange.IsDBNull(0) && !rdrIncidentChange.IsDBNull(1))
                //        {
                //            IncidentProgramInfo incidentProgram = new IncidentProgramInfo(rdrIncidentChange.GetBoolean(2), rdrIncidentChange.GetInt16(0), rdrIncidentChange.GetString(1).Trim());
                //            lstIncidentProgramInfo.Add(incidentProgram);
                //        }
                //    }
                //}
                //rdrIncidentChange.Close();
                //if (connRN4.State == ConnectionState.Open) connRN4.Close();

                //foreach (IncidentProgramInfo incdInfo in lstIncidentProgramInfo)
                //{
                //    if (incdInfo.bIsDeleted == true)
                //    {
                //        MessageBox.Show("The Incident has been deleted. Personal Responsibility cannot be calculated.", "Error");
                //        lstIncidentProgramInfo.Clear();
                //    }
                //}

                //Boolean bBronze = false;
                //Boolean bSilver = false;
                //Boolean bGold = false;
                //Boolean bGoldPlus = false;
                //Boolean bGoldMed1 = false;
                //Boolean bGoldMed2 = false;

                //if (lstIncidentProgramInfo.Count > 0)
                //{
                //    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //    {
                //        if ((incidentInfo.IncidentProgramId == 3) &&
                //            (incidentInfo.bIsDeleted == false))
                //        {
                //            incidentInfo.bPersonalResponsibilityProgram = true;
                //            bBronze = true;
                //            break;
                //        }
                //    }

                //    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //    {
                //        if ((incidentInfo.IncidentProgramId == 2) &&
                //            (bBronze == false) &&
                //            (incidentInfo.bIsDeleted == false))
                //        {
                //            incidentInfo.bPersonalResponsibilityProgram = true;
                //            bSilver = true;
                //            break;
                //        }
                //    }

                //    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //    {
                //        if ((incidentInfo.IncidentProgramId == 1) &&
                //            (bBronze == false) &&
                //            (bSilver == false) &&
                //            (incidentInfo.bIsDeleted == false))
                //        {
                //            incidentInfo.bPersonalResponsibilityProgram = true;
                //            break;
                //        }
                //    }

                //    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //    {
                //        if ((incidentInfo.IncidentProgramId == 0) &&
                //            (bBronze == false) &&
                //            (bSilver == false) &&
                //            (bGold == false) &&
                //            (incidentInfo.bIsDeleted == false))
                //        {
                //            incidentInfo.bPersonalResponsibilityProgram = true;
                //            break;
                //        }
                //    }

                //    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //    {
                //        if ((incidentInfo.IncidentProgramId == 4) &&
                //            (bBronze == false) &&
                //            (bSilver == false) &&
                //            (bGold == false) &&
                //            (bGoldPlus == false) &&
                //            (incidentInfo.bIsDeleted == false))
                //        {
                //            incidentInfo.bPersonalResponsibilityProgram = true;
                //            break;
                //        }
                //    }

                //    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //    {
                //        if ((incidentInfo.IncidentProgramId == 5) &&
                //            (bBronze == false) &&
                //            (bSilver == false) &&
                //            (bGold == false) &&
                //            (bGoldPlus == false) &&
                //            (bGoldMed1 == false) &&
                //            (incidentInfo.bIsDeleted == false))
                //        {
                //            incidentInfo.bPersonalResponsibilityProgram = true;
                //            break;
                //        }
                //    }
                //}


                //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //{
                //    if (incidentInfo.bPersonalResponsibilityProgram == true)
                //        PersonalResponsibilityAmountInMedBill = incidentInfo.PersonalResponsibilityAmount;
                //}
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                // PR calculation


                //String strSqlQueryForIncidentProgram = "select [dbo].[tbl_incident].[Program_id] from [dbo].[tbl_incident] " +
                //                                       "where [dbo].[tbl_incident].[Individual_id] = @IndividualId and" +
                //                                       "[dbo].[tbl_incidend].[Case_id] = @CaseId and " +
                //                                       "[dbo].[tbl_incident].[Illness_id] = @IllnessId and " +
                //                                       "[dbo].[tbl_incident].[IncidentNo] = @IncidentNo";
                

                //String strSqlQueryForIncidentChange = "select [dbo].[tbl_incident_history].[Program_id], [dbo].[tbl_program].[ProgramName], [dbo].[tbl_incident_history].[IsDeleted] " +
                //                                        "from [dbo].[tbl_incident_history] " +
                //                                        "inner join [dbo].[tbl_program] on [dbo].[tbl_incident_history].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                //                                        "where ([dbo].[tbl_incident_history].[Operation] = 2 or " +
                //                                        "[dbo].[tbl_incident_history].[Operation] = 3 or " +
                //                                        "[dbo].[tbl_incident_history].[Operation] = 4) and " +
                //                                        "[dbo].[tbl_incident_history].[Individual_id] = @IndividualId and" +
                //                                        "[dbo].[tbl_incident_history].[IncidentNo] = @IncidentNo " +
                //                                        "order by [dbo].[tbl_incident_history].[Program_id]";

                //SqlCommand cmdQueryForIncidentChange = new SqlCommand(strSqlQueryForIncidentChange, connRN4);
                //cmdQueryForIncidentChange.CommandType = CommandType.Text;

                //cmdQueryForIncidentChange.Parameters.AddWithValue("@IndividualId", IndividualIdMedBill);
                //cmdQueryForIncidentChange.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                //if (connRN4.State != ConnectionState.Closed)
                //{
                //    connRN4.Close();
                //    connRN4.Open();
                //}
                //else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                //SqlDataReader rdrIncidentChange = cmdQueryForIncidentChange.ExecuteReader();
                ////lstIncidentProgramInfo.Clear();
                //if (rdrIncidentChange.HasRows)
                //{
                //    while (rdrIncidentChange.Read())
                //    {
                //        if (!rdrIncidentChange.IsDBNull(0) && !rdrIncidentChange.IsDBNull(1))
                //        {
                //            IncidentProgramInfo incidentProgram = new IncidentProgramInfo(rdrIncidentChange.GetBoolean(2), rdrIncidentChange.GetInt16(0), rdrIncidentChange.GetString(1).Trim());
                //            lstIncidentProgramInfo.Add(incidentProgram);
                //        }
                //    }
                //}
                //rdrIncidentChange.Close();
                //if (connRN4.State == ConnectionState.Open) connRN4.Close();

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                // Get disease name

                if (ICD10Code != String.Empty)
                {
                    String strSqlQueryForDiseaseName = "select [dbo].[ICD10 Code].[Name] from [dbo].[ICD10 Code] where [dbo].[ICD10 Code].[ICD10_CODE__C] = @ICD10Code";

                    SqlCommand cmdQueryForDiseaseName = new SqlCommand(strSqlQueryForDiseaseName, connSalesforce4);
                    cmdQueryForDiseaseName.CommandType = CommandType.Text;

                    cmdQueryForDiseaseName.Parameters.AddWithValue("@ICD10Code", ICD10Code);

                    if (connSalesforce4.State == ConnectionState.Open)
                    {
                        connSalesforce4.Close();
                        connSalesforce4.Open();
                    }
                    else if (connSalesforce4.State == ConnectionState.Closed) connSalesforce4.Open();
                    String DiseaseName = String.Empty;
                    Object objDiseaseName = cmdQueryForDiseaseName.ExecuteScalar();

                    if (objDiseaseName != null) DiseaseName = objDiseaseName.ToString();
                    else
                    {
                        MessageBox.Show("No Disease Name for ICD 10 Code: " + ICD10Code, "Error", MessageBoxButtons.OK);
                        return;
                    }

                    if (connSalesforce4.State != ConnectionState.Closed) connSalesforce4.Close();

                    txtMedBill_ICD10Code.Text = ICD10Code;
                    txtMedBillDiseaseName.Text = DiseaseName;
                }
                else
                {
                    txtMedBill_ICD10Code.Text = String.Empty;
                    txtMedBillDiseaseName.Text = String.Empty;
                }
                // Get documents info
                String strSqlQueryForDocumentsInfo = "select [dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Receiv_Date] " +
                                                        "from [dbo].[tbl_case] where [dbo].[tbl_case].[Case_Name] = @CaseId and " +
                                                        "[dbo].[tbl_case].[Contact_ID] = @IndividualId and " +
                                                        "[dbo].[tbl_case].[IsDeleted] = 0";

                SqlCommand cmdQueryForDocInfo = new SqlCommand(strSqlQueryForDocumentsInfo, connRN4);
                cmdQueryForDocInfo.CommandType = CommandType.Text;

                cmdQueryForDocInfo.Parameters.AddWithValue("@CaseId", CaseNameInMedBill);
                cmdQueryForDocInfo.Parameters.AddWithValue("@IndividualId", IndividualIdInMedBill);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrDocInfo = cmdQueryForDocInfo.ExecuteReader();
                if (rdrDocInfo.HasRows)
                {
                    rdrDocInfo.Read();

                    if (!rdrDocInfo.IsDBNull(0))
                    {
                        if (rdrDocInfo.GetBoolean(0))
                        {
                            chkMedBillNPFReceived.Checked = true;
                            chkMedBillNPFReceived.Enabled = false;
                            dtpMedBillNPF.Checked = true;
                            dtpMedBillNPF.Text = rdrDocInfo.GetDateTime(1).ToString("MM/dd/yyyy");
                            dtpMedBillNPF.Enabled = false;
                            btnViewNPF.Enabled = true;
                        }
                        else
                        {
                            chkMedBillNPFReceived.Checked = false;
                            chkMedBillNPFReceived.Enabled = false;
                            dtpMedBillNPF.Format = DateTimePickerFormat.Custom;
                            dtpMedBillNPF.CustomFormat = " ";
                            dtpMedBillNPF.Enabled = false;
                            btnViewNPF.Enabled = false;
                        }
                    }
                    if (!rdrDocInfo.IsDBNull(2))
                    {
                        if (rdrDocInfo.GetBoolean(2))
                        {
                            chkMedBill_IBReceived.Checked = true;
                            chkMedBill_IBReceived.Enabled = false;
                            dtpMedBill_IB.Checked = true;
                            dtpMedBill_IB.Text = rdrDocInfo.GetDateTime(3).ToString("MM/dd/yyyy");
                            dtpMedBill_IB.Enabled = false;
                            btnViewIB.Enabled = true;
                        }
                        else
                        {
                            chkMedBill_IBReceived.Checked = false;
                            chkMedBill_IBReceived.Enabled = false;
                            dtpMedBill_IB.Format = DateTimePickerFormat.Custom;
                            dtpMedBill_IB.CustomFormat = " ";
                            dtpMedBill_IB.Enabled = false;
                            btnViewIB.Enabled = false;
                        }
                    }
                    if (!rdrDocInfo.IsDBNull(4))
                    {
                        if (rdrDocInfo.GetBoolean(4))
                        {
                            chkMedBillPOPReceived.Checked = true;
                            chkMedBillPOPReceived.Enabled = false;
                            dtpMedBillPOP.Checked = true;
                            dtpMedBillPOP.Text = rdrDocInfo.GetDateTime(5).ToString("MM/dd/yyyy");
                            dtpMedBillPOP.Enabled = false;
                            btnViewPoP.Enabled = true;
                        }
                        else
                        {
                            chkMedBillPOPReceived.Checked = false;
                            chkMedBillPOPReceived.Enabled = false;
                            dtpMedBillPOP.Format = DateTimePickerFormat.Custom;
                            dtpMedBillPOP.CustomFormat = " ";
                            dtpMedBillPOP.Enabled = false;
                            btnViewPoP.Enabled = false;
                        }
                    }
                    if (!rdrDocInfo.IsDBNull(6))
                    {
                        if (rdrDocInfo.GetBoolean(6))
                        {
                            chkMedRecordReceived.Checked = true;
                            chkMedRecordReceived.Enabled = false;
                            dtpMedBillMedRecord.Checked = true;
                            dtpMedBillMedRecord.Text = rdrDocInfo.GetDateTime(7).ToString("MM/dd/yyyy");
                            dtpMedBillMedRecord.Enabled = false;
                            btnViewMedRecord.Enabled = true;
                        }
                        else
                        {
                            chkMedRecordReceived.Checked = false;
                            chkMedRecordReceived.Enabled = false;
                            dtpMedBillMedRecord.Format = DateTimePickerFormat.Custom;
                            dtpMedBillMedRecord.CustomFormat = " ";
                            dtpMedBillMedRecord.Enabled = false;
                            btnViewMedRecord.Enabled = false;
                        }
                    }

                    if (!rdrDocInfo.IsDBNull(8))
                    {
                        if (rdrDocInfo.GetBoolean(8))
                        {
                            chkOtherDocReceived.Checked = true;
                            chkOtherDocReceived.Enabled = false;
                            dtpMedBillOtherDoc.Checked = true;
                            dtpMedBillOtherDoc.Text = rdrDocInfo.GetDateTime(9).ToString("MM/dd/yyyy");
                            dtpMedBillOtherDoc.Enabled = false;
                            btnViewOtherDoc.Enabled = true;
                        }
                        else
                        {
                            chkOtherDocReceived.Checked = false;
                            chkOtherDocReceived.Enabled = false;
                            dtpMedBillOtherDoc.Format = DateTimePickerFormat.Custom;
                            dtpMedBillOtherDoc.CustomFormat = " ";
                            dtpMedBillOtherDoc.Enabled = false;
                            btnViewOtherDoc.Enabled = false;
                        }
                    }

                    strCaseIdSelected = CaseNameInMedBill;
                    strContactIdSelected = IndividualIdInMedBill;
                }
                rdrDocInfo.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                String strSqlQueryForIncidentProgram = "select [dbo].[tbl_program].[ProgramName] from [dbo].[tbl_program] " +
                                                        "inner join [dbo].[tbl_incident] on [dbo].[tbl_program].[Program_id] = [dbo].[tbl_incident].[Program_id] " +
                                                        "where [dbo].[tbl_incident].[Individual_id] = @IndividualId and [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

                SqlCommand cmdQueryForIncidentProgram = new SqlCommand(strSqlQueryForIncidentProgram, connRN4);
                cmdQueryForIncidentProgram.CommandType = CommandType.Text;

                cmdQueryForIncidentProgram.Parameters.AddWithValue("@IndividualId", IndividualIdInMedBill);
                cmdQueryForIncidentProgram.Parameters.AddWithValue("@IncidentNo", txtMedBill_Incident.Text.Trim());
                //cmdQueryForIncidentProgram.Parameters.AddWithValue("@IncidentId", txtMedBill_Incident.Text.Trim());

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                //String IncidentProgramName = cmdQueryForIncidentProgram.ExecuteScalar()?.ToString();
                Object objIncidentProgramName = cmdQueryForIncidentProgram.ExecuteScalar();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                String IncidentProgramName = String.Empty;
                if (objIncidentProgramName != null) IncidentProgramName = objIncidentProgramName.ToString();
                else
                {
                    MessageBox.Show("No Program Name for Incident No: " + txtMedBill_Incident.Text.Trim(), "Error", MessageBoxButtons.OK);
                    return;
                }

                if (IncidentProgramName != String.Empty) txtIncdProgram.Text = IncidentProgramName;

                if (txtIncdProgram.Text.Trim() != txtMemberProgram.Text.Trim())
                {
                    txtIncdProgram.BackColor = Color.Red;
                    txtMemberProgram.BackColor = Color.Red;
                }
                else if (txtIncdProgram.Text.Trim() == txtMemberProgram.Text.Trim())
                {
                    txtIncdProgram.BackColor = Color.White;
                    txtMemberProgram.BackColor = Color.FromKnownColor(KnownColor.Control);
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //String strSqlQueryForMedicalProvider = "select dbo.tbl_MedicalProvider.ID, dbo.tbl_MedicalProvider.Name, dbo.tbl_MedicalProvider.Type from dbo.tbl_MedicalProvider";

                //SqlCommand cmdQueryForMedicalProvider = new SqlCommand(strSqlQueryForMedicalProvider, connRN4);
                //cmdQueryForMedicalProvider.CommandType = CommandType.Text;

                ////if (connRN.State == ConnectionState.Closed) connRN.Open();

                //if (connRN4.State != ConnectionState.Closed)
                //{
                //    connRN4.Close();
                //    connRN4.Open();
                //}
                //else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                //SqlDataReader rdrMedicalProvider = cmdQueryForMedicalProvider.ExecuteReader();

                //lstMedicalProvider.Clear();
                //if (rdrMedicalProvider.HasRows)
                //{
                //    while (rdrMedicalProvider.Read())
                //    {
                //        MedicalProviderInfo info = new MedicalProviderInfo();

                //        if (!rdrMedicalProvider.IsDBNull(0)) info.ID = rdrMedicalProvider.GetString(0);
                //        if (!rdrMedicalProvider.IsDBNull(1)) info.Name = rdrMedicalProvider.GetString(1);
                //        if (!rdrMedicalProvider.IsDBNull(2)) info.Type = rdrMedicalProvider.GetString(2);

                //        lstMedicalProvider.Add(info);
                //    }
                //}

                //if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                var srcMedicalProvider = new AutoCompleteStringCollection();

                for (int i = 0; i < lstMedicalProvider.Count; i++)
                {
                    srcMedicalProvider.Add(lstMedicalProvider[i].Name);
                }

                txtMedicalProvider.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                txtMedicalProvider.AutoCompleteSource = AutoCompleteSource.CustomSource;
                txtMedicalProvider.AutoCompleteCustomSource = srcMedicalProvider;

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                int nRowSelected = gvMedBill.CurrentCell.RowIndex;

                IndividualId = txtCaseIndividualID.Text.Trim();
                CaseNo = txtCaseName.Text.Trim();
                MedicalBillNo = gvMedBill[1, nRowSelected].Value.ToString();


                lstPaymentMethod.Clear();
                String strSqlQueryForPaymentMethod = "select [dbo].[tbl_payment_method].[PaymentMethod_Id], [dbo].[tbl_payment_method].[PaymentMethod_Value] from [dbo].[tbl_payment_method] " +
                                                        "order by [dbo].[tbl_payment_method].[PaymentMethod_Value]";

                SqlCommand cmdQueryForPaymentMethod = new SqlCommand(strSqlQueryForPaymentMethod, connRN4);
                cmdQueryForPaymentMethod.CommandType = CommandType.Text;

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrPaymentMethod = cmdQueryForPaymentMethod.ExecuteReader();
                if (rdrPaymentMethod.HasRows)
                {
                    while (rdrPaymentMethod.Read())
                    {
                        if (!rdrPaymentMethod.IsDBNull(1)) lstPaymentMethod.Add(new PaymentMethod { PaymentMethodId = rdrPaymentMethod.GetInt16(0), PaymentMethodValue = rdrPaymentMethod.GetString(1) });
                        else lstPaymentMethod.Add(new PaymentMethod { PaymentMethodId = rdrPaymentMethod.GetInt16(0), PaymentMethodValue = null });
                    }
                }
                rdrPaymentMethod.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                // Retrieve credit card info
                lstCreditCardInfo.Clear();
                String strSqlQueryForCreditCardInfo = "select [dbo].[tbl_Credit_Card__c].[CreditCard_Id], [dbo].[tbl_Credit_Card__c].[Name] from [dbo].[tbl_Credit_Card__c]";

                SqlCommand cmdQueryForCreditCardInfo = new SqlCommand(strSqlQueryForCreditCardInfo, connRN4);
                cmdQueryForCreditCardInfo.CommandType = CommandType.Text;

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrCreditCardInfo = cmdQueryForCreditCardInfo.ExecuteReader();
                if (rdrCreditCardInfo.HasRows)
                {
                    while (rdrCreditCardInfo.Read())
                    {
                        if (!rdrCreditCardInfo.IsDBNull(1))
                            lstCreditCardInfo.Add(new CreditCardInfo { CreditCardId = rdrCreditCardInfo.GetInt16(0), CreditCardNo = rdrCreditCardInfo.GetString(1) });
                        else
                            lstCreditCardInfo.Add(new CreditCardInfo { CreditCardId = rdrCreditCardInfo.GetInt16(0), CreditCardNo = null });
                    }
                }
                rdrCreditCardInfo.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                String strSqlQueryForSettlement = "select [dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement_type_code].[SettlementTypeValue], [dbo].[tbl_settlement].[Amount], " +
                                                    "[dbo].[tbl_settlement].[PersonalResponsibilityCredit], [dbo].[tbl_payment_method].[PaymentMethod_Value], " +
                                                    "[dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate], " +
                                                    "[dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
                                                    "[dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], [dbo].[tbl_settlement].[ACH_Reconciled], " +
                                                    "[dbo].[tbl_Credit_Card__c].[Name], [dbo].[tbl_settlement].[CMMCreditCardPaidDate], [dbo].[tbl_settlement].[CC_Reconciled], " +
                                                    "[dbo].[tbl_settlement].[AllowedAmount], [dbo].[tbl_settlement].[IneligibleReason], " +
                                                    "[dbo].[tbl_settlement].[Notes] " +
                                                    "from [dbo].[tbl_settlement] inner join [dbo].[tbl_settlement_type_code] " +
                                                    "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                    "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
                                                    "inner join [dbo].[tbl_Credit_Card__c] on [dbo].[tbl_settlement].[CMMCreditCard] = [dbo].[tbl_Credit_Card__c].[CreditCard_Id]" +
                                                    "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and " +
                                                    "[dbo].[tbl_settlement].[IsDeleted] = 0 " +
                                                    "order by [dbo].[tbl_settlement].[Name]";

                SqlCommand cmdQueryForSettlement = new SqlCommand(strSqlQueryForSettlement, connRN4);
                cmdQueryForSettlement.CommandType = CommandType.Text;

                cmdQueryForSettlement.Parameters.AddWithValue("@MedBillNo", MedBillNoForCase);

                SqlDependency dependencySettlementInMedBill = new SqlDependency(cmdQueryForSettlement);
                dependencySettlementInMedBill.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillEditChange);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrSettlement = cmdQueryForSettlement.ExecuteReader();
                gvSettlementsInMedBill.Rows.Clear();
                if (rdrSettlement.HasRows)
                {
                    while (rdrSettlement.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();
                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                        if (!rdrSettlement.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(0) });
                        if (!rdrSettlement.IsDBNull(1))
                        {
                            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();

                            for (int i = 0; i < lstSettlementType.Count; i++)
                            {
                                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                            }
                            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                            {
                                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                            }

                            row.Cells.Add(comboCellSettlementType);
                        }
                        else
                        {
                            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
                            for (int i = 0; i < lstSettlementType.Count; i++)
                            {
                                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                            }

                            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                            {
                                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                            }

                            row.Cells.Add(comboCellSettlementType);
                        }

                        if (!rdrSettlement.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(2).ToString("C") });
                        else
                        {
                            Decimal Zero = 0;
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                        }


                        if (!rdrSettlement.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(3).ToString("C") });
                        else
                        {
                            Decimal Zero = 0;
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                        }

                        /////////////////////////////////////////////////////////////////////
                        if (!rdrSettlement.IsDBNull(4))
                        {
                            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                            for (int i = 0; i < lstPaymentMethod.Count; i++)
                            {
                                if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                else comboCellPaymentMethod.Items.Add(String.Empty);
                            }

                            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                            {
                                if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                    comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                            }

                            row.Cells.Add(comboCellPaymentMethod);
                        }
                        else
                        {
                            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                            for (int i = 0; i < lstPaymentMethod.Count; i++)
                            {
                                if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                else comboCellPaymentMethod.Items.Add(String.Empty);
                                //comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                            }

                            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                            {
                                if ((!rdrSettlement.IsDBNull(4)) && comboCellPaymentMethod.Items[i] != null)
                                {
                                    if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                        comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                                }
                                else comboCellPaymentMethod.Value = null;
                            }

                            row.Cells.Add(comboCellPaymentMethod);

                        }

                        /////////////////////////////////////////////////////////////////////
                        if (!rdrSettlement.IsDBNull(5))
                        {

                            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                            approvedCell.Value = rdrSettlement.GetBoolean(5);
                            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                            row.Cells.Add(approvedCell);
                            if (LoggedInUserRole == UserRole.RNStaff ||
                                LoggedInUserRole == UserRole.NPStaff ||
                                LoggedInUserRole == UserRole.FDStaff)
                                approvedCell.ReadOnly = true;
                            else if (LoggedInUserRole == UserRole.RNManager)
                                approvedCell.ReadOnly = false;
                        }
                        else
                        {
                            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                            approvedCell.Value = false;
                            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                            row.Cells.Add(approvedCell);
                            if (LoggedInUserRole == UserRole.RNStaff ||
                                LoggedInUserRole == UserRole.NPStaff ||
                                LoggedInUserRole == UserRole.FDStaff)
                                approvedCell.ReadOnly = true;
                            else if (LoggedInUserRole == UserRole.RNManager)
                                approvedCell.ReadOnly = false;
                        }

                        if (!rdrSettlement.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(6).ToString("MM/dd/yyyy")) });
                        else row.Cells.Add(new CalendarCell { Value = null });

                        // Payment information
                        if (!rdrSettlement.IsDBNull(4))
                        {
                            String strPaymentMethod = rdrSettlement.GetString(4);

                            switch (strPaymentMethod)
                            {
                                case "Check":
                                    if (!rdrSettlement.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(7) });
                                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    DataGridViewComboBoxCell comboCellCreditCardNoneForCheck = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNoneForCheck.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCellCreditCardNoneForCheck.Items.Add(String.Empty);
                                    }
                                    row.Cells.Add(comboCellCreditCardNoneForCheck);
                                    if (!rdrSettlement.IsDBNull(8))
                                    {
                                        row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(8).ToString("MM/dd/yyyy")) });
                                    }
                                    else
                                    {
                                        row.Cells.Add(new CalendarCell { Value = String.Empty });
                                    }
                                    if (!rdrSettlement.IsDBNull(9))
                                    {
                                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(9) });
                                    }
                                    else
                                    {
                                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                    }
                                    break;
                                case "ACH/Banking":
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    if (!rdrSettlement.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(10) });
                                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    DataGridViewComboBoxCell comboCellCreditCardNoneForACH = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null)
                                            comboCellCreditCardNoneForACH.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCellCreditCardNoneForACH.Items.Add(String.Empty);
                                    }
                                    row.Cells.Add(comboCellCreditCardNoneForACH);
                                    if (!rdrSettlement.IsDBNull(11))
                                    {
                                        row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(11).ToString("MM/dd/yyyy")) });
                                    }
                                    else
                                    {
                                        row.Cells.Add(new CalendarCell { Value = String.Empty });
                                    }
                                    if (!rdrSettlement.IsDBNull(12))
                                    {
                                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(12) });
                                    }
                                    else
                                    {
                                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                    }
                                    break;
                                case "Credit Card":
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                                    if (!rdrSettlement.IsDBNull(13))
                                    {
                                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                        {
                                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                            else comboCellCreditCard.Items.Add(String.Empty);
                                        }
                                        for (int i = 0; i < comboCellCreditCard.Items.Count; i++)
                                        {
                                            if (rdrSettlement.GetString(13) == comboCellCreditCard.Items[i].ToString())
                                                comboCellCreditCard.Value = comboCellCreditCard.Items[i];
                                        }
                                    }
                                    else
                                    {
                                        //DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                        {
                                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                            else comboCellCreditCard.Items.Add(String.Empty);
                                        }
                                        comboCellCreditCard.Value = String.Empty;
                                        //row.Cells.Add(comboCellCreditCard);
                                    }
                                    row.Cells.Add(comboCellCreditCard);
                                    if (!rdrSettlement.IsDBNull(14)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(14).ToString("MM/dd/yyyy")) });
                                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                    if (!rdrSettlement.IsDBNull(15)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(15) });
                                    else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                    break;
                                default:
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    DataGridViewComboBoxCell comboCellCreditCardNone = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNone.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCellCreditCardNone.Items.Add(String.Empty);
                                    }
                                    row.Cells.Add(comboCellCreditCardNone);
                                    row.Cells.Add(new CalendarCell { Value = null });
                                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                    break;
                            }
                        }
                        else
                        {

                            DataGridViewTextBoxCell txtCheckNoCell = new DataGridViewTextBoxCell();
                            txtCheckNoCell.Value = null;
                            row.Cells.Add(txtCheckNoCell);
                            DataGridViewTextBoxCell txtACHNoCell = new DataGridViewTextBoxCell();
                            txtACHNoCell.Value = null;
                            row.Cells.Add(txtACHNoCell);
                            DataGridViewComboBoxCell comboCreditCardCell = new DataGridViewComboBoxCell();
                            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                            {
                                if (lstCreditCardInfo[i].CreditCardNo != null) comboCreditCardCell.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                else comboCreditCardCell.Items.Add(String.Empty);
                            }
                            row.Cells.Add(comboCreditCardCell);
                            comboCreditCardCell.ReadOnly = true;
                            CalendarCell calPaymentDate = new CalendarCell();
                            calPaymentDate.Value = null;
                            row.Cells.Add(calPaymentDate);
                            DataGridViewCheckBoxCell chkReconciledCell = new DataGridViewCheckBoxCell();
                            chkReconciledCell.Value = false;
                            row.Cells.Add(chkReconciledCell);

                        }


                        if (!rdrSettlement.IsDBNull(16)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(16).ToString("C") });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                        if (!rdrSettlement.IsDBNull(17))
                        {
                            if (dicIneligibleReason.Count > 0)
                            {
                                DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                                for (int i = 0; i < dicIneligibleReason.Count; i++)
                                {
                                    comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                                }
                                comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[rdrSettlement.GetInt32(17)];
                                row.Cells.Add(comboCellIneligibleReason);
                            }
                        }
                        else
                        {
                            if (dicIneligibleReason.Count > 0)
                            {
                                DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                                for (int i = 0; i < dicIneligibleReason.Count; i++)
                                {
                                    comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                                }
                                comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[0];
                                row.Cells.Add(comboCellIneligibleReason);
                            }
                        }

                        if (!rdrSettlement.IsDBNull(18)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(18) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                        gvSettlementsInMedBill.Rows.Add(row);
                        //AddNewRowToGVSettlementSafely(row);
                    }
                }
                rdrSettlement.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                ///
                //Decimal PersonalResponsibilityAmount = 0;

                //foreach (IncidentProgramInfo incdProgram in lstIncidentProgramInfo)
                //{
                //    if (incdProgram.bPersonalResponsibilityProgram == true) PersonalResponsibilityAmount = incdProgram.PersonalResponsibilityAmount;
                //}

                //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                //{
                //    if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value != null)
                //    {
                //        Decimal result = 0;
                //        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                //        {
                //            PersonalResponsibilityAmount -= result;
                //        }
                //    }
                //}

                //txtPersonalResponsibility.Text = PersonalResponsibilityAmount.ToString("C");

                //if (PersonalResponsibilityAmount < 0) txtPersonalResponsibility.BackColor = Color.Yellow;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
                    {
                        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                    }

                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
                    {
                        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                    }

                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
                    {
                        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                    }
                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value == null)
                    {
                        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = true;
                    }
                }

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    if (gvSettlementsInMedBill[2, i]?.Value?.ToString() == "Ineligible") gvSettlementsInMedBill.Rows[i].DefaultCellStyle.BackColor = Color.Salmon;
                    else
                    {
                        gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                        gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                    }
                }

                if (txtMedBillAmount.Text.Trim() != String.Empty)
                {
                    Decimal SettlementTotal = 0;
                    Decimal Balance = 0;
                    Decimal Result = 0;
                    Decimal BillAmount = 0;
                    if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out Result))
                    {
                        BillAmount = Result;

                        for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                        {
                            if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "PR Reimbursement" &&
                                gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "Medical Provider Refund")
                            {
                                Decimal Settlement = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                                SettlementTotal += Settlement;
                            }
                        }
                        if (SettlementTotal > BillAmount) MessageBox.Show("Settlement Total exceeds the Medical Bill Amount.", "Alert");
                        else
                        {
                            Balance = BillAmount - SettlementTotal;
                            txtBalance.Text = Balance.ToString("C");
                        }
                    }
                }

                Decimal TotalSharedAmount = 0;
                //if (gvSettlementsInMedBill.Rows.Count == 0) txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");
                txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    Decimal SharedAmount = 0;
                    Decimal MedicalProviderRefund = 0;
                    Decimal result = 0;

                    if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Provider Payment" ||
                        gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Reimbursement" ||
                        gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "PR Reimbursement")
                    {
                        if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                        {
                            SharedAmount = result;
                            TotalSharedAmount += SharedAmount;
                            txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");
                        }
                    }
                    else if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Medical Provider Refund")
                    {
                        if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                        {
                            MedicalProviderRefund = result;
                            TotalSharedAmount -= MedicalProviderRefund;
                            txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");
                        }
                    }
                }

                //PersonalResponsibilityAmountInMedBill

                Decimal PersonResponsibilityAmt = PersonalResponsibilityAmountInMedBill;
                Decimal PersonalResponsibilityBalance = PersonalResponsibilityAmountInMedBill;
                Decimal TotalPersonalResponsibilityShared = 0;

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    Decimal PersonalResponsibilityShared = 0;
                    Decimal result = 0;

                    if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount" ||
                        gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount" ||
                        gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment")
                    {
                        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                        {
                            PersonalResponsibilityShared = result;
                            TotalPersonalResponsibilityShared += PersonalResponsibilityShared;
                            PersonalResponsibilityBalance -= TotalPersonalResponsibilityShared;
                        }
                    }
                }

                txtPersonalResponsibility.Text = PersonalResponsibilityBalance.ToString("C");

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                String strSqlQueryForTaskInMedBill = "select [dbo].[tbl_task].[Subject], [dbo].[tbl_task].[DueDate], [dbo].[tbl_user].[User_Name], " +
                                                     "[dbo].[tbl_task_status_code].[TaskStatusValue], [dbo].[tbl_task].[id] " +
                                                     "from [dbo].[tbl_task] " +
                                                     "inner join [dbo].[tbl_user] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_user].[User_Id] " +
                                                     "inner join [dbo].[tbl_task_status_code] on [dbo].[tbl_task].[Status] = [dbo].[tbl_task_status_code].[TaskStatusCode] " +
                                                     "where [dbo].[tbl_task].[whatid] = @MedBillNo " +
                                                     "order by [dbo].[tbl_task].[CreateDate] desc";

                SqlCommand cmdQueryForTask = new SqlCommand(strSqlQueryForTaskInMedBill, connRN4);
                cmdQueryForTask.CommandType = CommandType.Text;

                cmdQueryForTask.Parameters.AddWithValue("@MedBillNo", MedBillNoForTask);

                SqlDependency dependencyTask = new SqlDependency(cmdQueryForTask);
                dependencyTask.OnChange += new OnChangeEventHandler(OnTaskInMedBillChange);

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrTaskForMedBill = cmdQueryForTask.ExecuteReader();
                gvMostRecentTasks.Rows.Clear();
                if (rdrTaskForMedBill.HasRows)
                {
                    while (rdrTaskForMedBill.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();
                        if (!rdrTaskForMedBill.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetString(0) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrTaskForMedBill.IsDBNull(1)) row.Cells.Add(new CalendarCell { Value = rdrTaskForMedBill.GetDateTime(1).ToString("MM/dd/yyyy") });
                        else row.Cells.Add(new CalendarCell { Value = String.Empty });
                        if (!rdrTaskForMedBill.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetString(2) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrTaskForMedBill.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetString(3) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrTaskForMedBill.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetInt32(4).ToString() });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        gvMostRecentTasks.Rows.Add(row);
                    }
                }
                rdrTaskForMedBill.Close();

                if (connRN4.State == ConnectionState.Open) connRN4.Close();
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                ///

                EnableMedicalBillForm();

                btnMedBillCreatePgUpperSave.Enabled = true;
                //btnMedBillCreationPgLowerSave.Enabled = true;

                tbCMMManager.SelectedTab = tbpgMedicalBill;


            }
            //}
            //else
            //{
            //    MessageBox.Show("Medical Bill page already open");
            //}
        }

        private void OnTaskInMedBillChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnTaskInMedBillChange;

                UpdateGridViewTaskInMedBill();
            }
        }

        private void UpdateGridViewTaskInMedBill()
        {
            String strSqlQueryForTaskInMedBill = "select [dbo].[tbl_task].[Subject], [dbo].[tbl_task].[DueDate], [dbo].[tbl_user].[User_Name], " +
                                                 "[dbo].[tbl_task_status_code].[TaskStatusValue], [dbo].[tbl_task].[id] " +
                                                 "from [dbo].[tbl_task] " +
                                                 "inner join [dbo].[tbl_user] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_user].[User_Id] " +
                                                 "inner join [dbo].[tbl_task_status_code] on [dbo].[tbl_task].[Status] = [dbo].[tbl_task_status_code].[TaskStatusCode] " +
                                                 "where [dbo].[tbl_task].[whatid] = @MedBillNo " +
                                                 "order by [dbo].[tbl_task].[CreateDate] desc";

            SqlCommand cmdQueryForTask = new SqlCommand(strSqlQueryForTaskInMedBill, connRN4);
            cmdQueryForTask.CommandType = CommandType.Text;

            cmdQueryForTask.Parameters.AddWithValue("@MedBillNo", MedBillNoForTask);

            SqlDependency dependencyTask = new SqlDependency(cmdQueryForTask);
            dependencyTask.OnChange += new OnChangeEventHandler(OnTaskInMedBillChange);

            if (connRN4.State != ConnectionState.Closed)
            {
                connRN4.Close();
                connRN4.Open();
            }
            else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

            // 12/20/18 begin here
            SqlDataReader rdrTaskForMedBill = cmdQueryForTask.ExecuteReader();
            if (IsHandleCreated) ClearTaskInMedBillSafely();
            else gvMostRecentTasks.Rows.Clear();

            if (rdrTaskForMedBill.HasRows)
            {
                while (rdrTaskForMedBill.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();
                    if (!rdrTaskForMedBill.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetString(0) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrTaskForMedBill.IsDBNull(1)) row.Cells.Add(new CalendarCell { Value = rdrTaskForMedBill.GetDateTime(1).ToString("MM/dd/yyyy") });
                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                    if (!rdrTaskForMedBill.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetString(2) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrTaskForMedBill.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetString(3) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                    if (!rdrTaskForMedBill.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetInt32(4).ToString() });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                    if (IsHandleCreated) AddRowToTaskInMedBillSafely(row);
                    else gvMostRecentTasks.Rows.Add(row);
                }
            }
            rdrTaskForMedBill.Close();

            if (connRN4.State == ConnectionState.Open) connRN4.Close();
        }

        //private void AttachControlEventHandlers()
        //{
        //txtMedBillGuarantor.TextChanged += new EventHandler(txtMedBillGuarantor_TextChanged);
        //txtMedBill_Illness.TextChanged += new EventHandler(txtMedBill_Illness_TextChanged);
        //txtMedBill_Incident.TextChanged += new EventHandler(txtMedBill_Incident_TextChanged);
        //txtMedBillAmount.TextChanged += new EventHandler(txtMedBillAmount_TextChanged);
        //txtBalance.TextChanged += new EventHandler(txtBalance_TextChanged);
        //txtPrescriptionName.TextChanged += new EventHandler(txtPrescriptionName_TextChanged);
        //txtPrescriptionNo.TextChanged += new EventHandler(txtPrescriptionNo_TextChanged);
        //txtPrescriptionDescription.TextChanged += new EventHandler(txtPrescriptionDescription_TextChanged);
        //txtNumPhysicalTherapy.TextChanged += new EventHandler(txtNumPhysicalTherapy_TextChanged);
        //cbMedicalBillNote1.SelectedIndexChanged += new EventHandler(cbMedicalBillNote1_SelectedIndexChanged);
        //cbMedicalBillNote2.SelectedIndexChanged += new EventHandler(cbMedicalBillNote2_SelectedIndexChanged);
        //cbMedicalBillNote3.SelectedIndexChanged += new EventHandler(cbMedicalBillNote3_SelectedIndexChanged);
        //cbMedicalBillNote4.SelectedIndexChanged += new EventHandler(cbMedicalBillNote4_SelectedIndexChanged);
        //txtMedicalBillNote1.TextChanged += new EventHandler(txtMedicalBillNote1_TextChanged);
        //txtMedicalBillNote2.TextChanged += new EventHandler(txtMedicalBillNote2_TextChanged);
        //txtMedicalBillNote3.TextChanged += new EventHandler(txtMedicalBillNote3_TextChanged);
        //txtMedicalBillNote4.TextChanged += new EventHandler(txtMedicalBillNote4_TextChanged);


        //dtpBillDate.ValueChanged += new EventHandler(dtpBillDate_ValueChanged);
        //dtpDueDate.ValueChanged += new EventHandler(dtpDueDate_ValueChanged);
        //}

        //private void DetachControlEventHandlers()
        //{
        //txtMedBillGuarantor.TextChanged -= txtMedBillGuarantor_TextChanged;
        //txtMedBill_Illness.TextChanged -= txtMedBill_Illness_TextChanged;
        //txtMedBill_Incident.TextChanged -= txtMedBill_Incident_TextChanged;
        //txtMedBillAmount.TextChanged -= txtMedBillAmount_TextChanged;
        //txtBalance.TextChanged -= txtBalance_TextChanged;
        //txtPrescriptionName.TextChanged -= txtPrescriptionName_TextChanged;
        //txtPrescriptionNo.TextChanged -= txtPrescriptionNo_TextChanged;
        //txtPrescriptionDescription.TextChanged -= txtPrescriptionDescription_TextChanged;
        //txtNumPhysicalTherapy.TextChanged -= txtNumPhysicalTherapy_TextChanged;
        //cbMedicalBillNote1.SelectedIndexChanged -= cbMedicalBillNote1_SelectedIndexChanged;
        //cbMedicalBillNote2.SelectedIndexChanged -= cbMedicalBillNote2_SelectedIndexChanged;
        //cbMedicalBillNote3.SelectedIndexChanged -= cbMedicalBillNote3_SelectedIndexChanged;
        //cbMedicalBillNote4.SelectedIndexChanged -= cbMedicalBillNote4_SelectedIndexChanged;
        //txtMedicalBillNote1.TextChanged -= txtMedicalBillNote1_TextChanged;
        //txtMedicalBillNote2.TextChanged -= txtMedicalBillNote2_TextChanged;
        //txtMedicalBillNote3.TextChanged -= txtMedicalBillNote3_TextChanged;
        //txtMedicalBillNote4.TextChanged -= txtMedicalBillNote4_TextChanged;


        //dtpBillDate.ValueChanged -= dtpBillDate_ValueChanged;
        //dtpDueDate.ValueChanged -= dtpDueDate_ValueChanged;
        //}



        private void gvCaseViewCaseHistory_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            DataGridView gvCaseHistory = (DataGridView)sender;

            //DataGridViewCheckBoxColumn chkSelected = gvCaseHistory[0, 0] as DataGridViewCheckBoxColumn;
            for (int i = 0; i < gvCaseHistory.Rows.Count; i++)
            {

            }
        }

        private void btnEditCase_Click(object sender, EventArgs e)
        {
            //if (!tbCMMManager.TabPages.Contains(tbpgCreateCase))
            //{
            caseMode = CaseMode.Edit;

            IndividualIdSelected = txtCaseHistoryIndividualID.Text.Trim();
            String IndividualName = txtCaseHistoryIndividualName.Text.Trim();
            int nRowSelected = 0;

            int nNumberOfRowSelected = 0;
            //Boolean bSelected = false;

            for (int i = 0; i < gvCaseViewCaseHistory.Rows.Count; i++)
            {
                if ((Boolean)gvCaseViewCaseHistory[0, i].Value)
                {
                    nNumberOfRowSelected++;
                    nRowSelected = i;
                }
            }

            if (nNumberOfRowSelected == 0)
            {
                MessageBox.Show("Please select a case.");
            }
            else if (nNumberOfRowSelected >= 2)
            {
                MessageBox.Show("More than one row selected");
            }
            else if (nNumberOfRowSelected == 1)
            {

                String strSqlQueryForCaseStatus = "select [dbo].[tbl_case_status_code].[CaseStatusValue] from [dbo].[tbl_case_status_code]";
                SqlCommand cmdQueryForCaseStatus = new SqlCommand(strSqlQueryForCaseStatus, connRN3);
                cmdQueryForCaseStatus.CommandType = CommandType.Text;

                if (connRN3.State != ConnectionState.Closed)
                {
                    connRN3.Close();
                    connRN3.Open();
                }
                else if (connRN3.State == ConnectionState.Closed) connRN3.Open();

                SqlDataReader rdrCaseStatus = cmdQueryForCaseStatus.ExecuteReader();
                cbCaseStatus.Items.Clear();
                if (rdrCaseStatus.HasRows)
                {
                    while (rdrCaseStatus.Read())
                    {
                        cbCaseStatus.Items.Add(rdrCaseStatus.GetString(0));
                    }
                }
                rdrCaseStatus.Close();
                if (connRN3.State != ConnectionState.Closed) connRN3.Close();

                //tbCMMManager.TabPages.Insert(4, tbpgCreateCase);
                //tbCMMManager.SelectedTab = tbpgCreateCase;

                CaseIdSelected = gvCaseViewCaseHistory[1, nRowSelected].Value.ToString();
                strCaseIdForIllness = CaseIdSelected;

                //String strSqlQueryForCaseInfoSelected = "select [dbo].[tbl_case].[Case_Name], [dbo].[tbl_case].[Contact_ID], " +
                //                                        "[dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Form_File_Name], [dbo].[tbl_case].[NPF_Form_Destination_File_Name], [dbo].[tbl_case].[NPF_Receiv_Date], " +
                //                                        "[dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Form_File_Name], [dbo].[tbl_case].[IB_Form_Destination_File_Name], [dbo].[tbl_case].[IB_Receiv_Date], " +
                //                                        "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Form_File_Name], [dbo].[tbl_case].[POP_Form_Destination_File_Name], [dbo].[tbl_case].[POP_Receiv_Date], " +
                //                                        "[dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Form_File_Name], " +
                //                                        "[dbo].[tbl_case].[MedRec_Form_Destination_File_Name], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
                //                                        "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Form_File_Name], " +
                //                                        "[dbo].[tbl_case].[Unknown_Form_Destination_File_Name], [dbo].[tbl_case].[Unknown_Receiv_Date], " +
                //                                        "[dbo].[tbl_case].[Case_status], [dbo].[tbl_case].[Note] " +
                //                                        "from [dbo].[tbl_case] " +
                //                                        "where [dbo].[tbl_case].[Case_Name] = @CaseId and [dbo].[tbl_case].[Contact_ID] = @IndividualID";

                String strSqlQueryForCaseInfoSelected = "select [dbo].[tbl_case].[Case_Name], [dbo].[tbl_case].[Contact_ID], " +
                                                        "[dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Form_File_Name], [dbo].[tbl_case].[NPF_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Form_File_Name], [dbo].[tbl_case].[IB_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Form_File_Name], [dbo].[tbl_case].[POP_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Form_File_Name], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Form_File_Name], [dbo].[tbl_case].[Unknown_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[Case_status], [dbo].[tbl_case].[Note] " +
                                                        "from [dbo].[tbl_case] " +
                                                        "where [dbo].[tbl_case].[IsDeleted] = 0 and " +
                                                        "[dbo].[tbl_case].[Case_Name] = @CaseId and " +
                                                        "[dbo].[tbl_case].[Contact_ID] = @IndividualID";

                SqlCommand cmdQueryForCaseInfo = new SqlCommand(strSqlQueryForCaseInfoSelected, connRN3);
                cmdQueryForCaseInfo.CommandType = CommandType.Text;

                cmdQueryForCaseInfo.Parameters.AddWithValue("@CaseId", CaseIdSelected);
                cmdQueryForCaseInfo.Parameters.AddWithValue("@IndividualID", IndividualIdSelected);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN3.State != ConnectionState.Closed)
                {
                    connRN3.Close();
                    connRN3.Open();
                }
                else if (connRN3.State == ConnectionState.Closed) connRN3.Open();
                SqlDataReader rdrCaseInfo = cmdQueryForCaseInfo.ExecuteReader();

                if (rdrCaseInfo.HasRows)
                {
                    rdrCaseInfo.Read();

                    // Populate NPF Form Info
                    if (!rdrCaseInfo.IsDBNull(0)) txtCaseName.Text = rdrCaseInfo.GetString(0);
                    if (!rdrCaseInfo.IsDBNull(1)) txtCaseIndividualID.Text = rdrCaseInfo.GetString(1);

                    if (txtMiddleName.Text == String.Empty) txtCreateCaseIndividualName.Text = txtLastName.Text + ", " + txtFirstName.Text;
                    else txtCreateCaseIndividualName.Text = txtLastName.Text + ", " + txtFirstName.Text + " " + txtMiddleName.Text;

                    if (!rdrCaseInfo.IsDBNull(2))
                    {
                        chkNPF_CaseCreationPage.Checked = (Boolean)rdrCaseInfo.GetBoolean(2);
                    }
                    if (!rdrCaseInfo.IsDBNull(3)) txtNPFFormFilePath.Text = rdrCaseInfo.GetString(3);
                    if (!rdrCaseInfo.IsDBNull(4))
                    {
                        dtpNPFReceivedDate.Checked = true;
                        dtpNPFReceivedDate.Value = rdrCaseInfo.GetDateTime(4);
                        dtpNPFReceivedDate.Text = rdrCaseInfo.GetDateTime(4).ToString("MM/dd/yyyy");
                    }
                        //txtNPFUploadDate.Text = rdrCaseInfo.GetDateTime(4).ToString("MM/dd/yyyy");

                    // Populate IB Form Info
                    if (!rdrCaseInfo.IsDBNull(5))
                    {
                        chkIB_CaseCreationPage.Checked = (Boolean)rdrCaseInfo.GetBoolean(5);
                    }
                    if (!rdrCaseInfo.IsDBNull(6)) txtIBFilePath.Text = rdrCaseInfo.GetString(6);
                    if (!rdrCaseInfo.IsDBNull(7))
                    {
                        dtpIBReceivedDate.Checked = true;
                        dtpIBReceivedDate.Value = rdrCaseInfo.GetDateTime(7);
                        dtpIBReceivedDate.Text = rdrCaseInfo.GetDateTime(7).ToString("MM/dd/yyyy");
                    }
                        //txtIBUploadDate.Text = rdrCaseInfo.GetDateTime(7).ToString("MM/dd/yyyy");

                    // Populate POP Form Info
                    if (!rdrCaseInfo.IsDBNull(8))
                    {
                        chkPoP_CaseCreationPage.Checked = (Boolean)rdrCaseInfo.GetBoolean(8);
                    }
                    if (!rdrCaseInfo.IsDBNull(9)) txtPopFilePath.Text = rdrCaseInfo.GetString(9);
                    if (!rdrCaseInfo.IsDBNull(10))
                    {
                        dtpPoPReceivedDate.Checked = true;
                        dtpPoPReceivedDate.Value = rdrCaseInfo.GetDateTime(10);
                        dtpPoPReceivedDate.Text = rdrCaseInfo.GetDateTime(10).ToString("MM/dd/yyyy");
                    }
                        //txtPoPUploadDate.Text = rdrCaseInfo.GetDateTime(10).ToString("MM/dd/yyyy");

                    // Populate Med Rec Form Info
                    if (!rdrCaseInfo.IsDBNull(11))
                    {
                        chkMedicalRecordCaseCreationPage.Checked = (Boolean)rdrCaseInfo.GetBoolean(11);
                    }
                    if (!rdrCaseInfo.IsDBNull(12)) txtMedicalRecordFilePath.Text = rdrCaseInfo.GetString(12);
                    if (!rdrCaseInfo.IsDBNull(13))
                    {
                        dtpMRReceivedDate.Checked = true;
                        dtpMRReceivedDate.Value = rdrCaseInfo.GetDateTime(13);
                        dtpMRReceivedDate.Text = rdrCaseInfo.GetDateTime(13).ToString("MM/dd/yyyy");
                    }
                        //txtMRUploadDate.Text = rdrCaseInfo.GetDateTime(13).ToString("MM/dd/yyyy");

                    // Populate Unknown Doc Info
                    if (!rdrCaseInfo.IsDBNull(14))
                    {
                        chkOtherDocCaseCreationPage.Checked = (Boolean)rdrCaseInfo.GetBoolean(14);
                    }
                    if (!rdrCaseInfo.IsDBNull(15)) txtOtherDocumentFilePath.Text = rdrCaseInfo.GetString(15);
                    if (!rdrCaseInfo.IsDBNull(16))
                    {
                        dtpOtherDocReceivedDate.Checked = true;
                        dtpOtherDocReceivedDate.Value = rdrCaseInfo.GetDateTime(16);
                        dtpOtherDocReceivedDate.Text = rdrCaseInfo.GetDateTime(16).ToString("MM/dd/yyyy");
                    }
                        //txtOtherDocUploadDate.Text = rdrCaseInfo.GetDateTime(16).ToString("MM/dd/yyyy");

                    // Populate case status
                    if (!rdrCaseInfo.IsDBNull(17))
                    {
                        //if (rdrCaseInfo.GetBoolean(17))
                        //{
                        //    txtCaseStatus.Text = "Complete and Ready";
                        //}
                        //else
                        //{
                        //    txtCaseStatus.Text = "Pending - Additional Documents required";
                        //}
                        switch (rdrCaseInfo.GetInt16(17))
                        {
                            case (int)CaseStatus.OnGoing:
                                cbCaseStatus.SelectedIndex = (int)CaseStatus.OnGoing;
                                cbCaseStatus.Enabled = true;
                                break;
                            case (int)CaseStatus.Processing:
                                cbCaseStatus.SelectedIndex = (int)CaseStatus.Processing;
                                cbCaseStatus.Enabled = true;
                                break;
                            case (int)CaseStatus.Closed:
                                cbCaseStatus.SelectedIndex = (int)CaseStatus.Closed;
                                cbCaseStatus.Enabled = true;
                                break;
                        }
                    }

                    // Populate Note
                    if (!rdrCaseInfo.IsDBNull(18))
                    {
                        txtNoteOnCase.Text = rdrCaseInfo.GetString(18);
                    }

                    // Populate note
                    if (!rdrCaseInfo.IsDBNull(18)) txtNoteOnCase.Text = rdrCaseInfo.GetString(18);
                }
                rdrCaseInfo.Close();
                if (connRN3.State != ConnectionState.Closed) connRN3.Close();

                // Populate the gvCasePageMedBills with Med Bill in the case
                String strSqlQueryForMedBillsInCase = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], [dbo].[tbl_medbill].[CreatedDate], [dbo].[tbl_CreateStaff].[Staff_Name], " +
                                                        "[dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                        "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], [dbo].[tbl_medbill].[Balance] " +
                                                        "from ((([dbo].[tbl_medbill] inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId]) " +
                                                        "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id]) " +
                                                        "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id]) " +
                                                        "where [dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                                                        "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and " +
                                                        "[dbo].[tbl_medbill].[IsDeleted] = 0";

                SqlCommand cmdQueryForMedBillsInCase = new SqlCommand(strSqlQueryForMedBillsInCase, connRN3);
                cmdQueryForMedBillsInCase.CommandType = CommandType.Text;

                cmdQueryForMedBillsInCase.Parameters.AddWithValue("@CaseName", CaseIdSelected);
                cmdQueryForMedBillsInCase.Parameters.AddWithValue("@IndividualId", IndividualIdSelected);

                SqlDependency dependencyMedBillsInCaseEdit = new SqlDependency(cmdQueryForMedBillsInCase);
                dependencyMedBillsInCaseEdit.OnChange += new OnChangeEventHandler(OnMedBillsInCaseEditChange);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN3.State != ConnectionState.Closed)
                {
                    connRN3.Close();
                    connRN3.Open();
                }
                else if (connRN3.State == ConnectionState.Closed) connRN3.Open();
                SqlDataReader rdrMedBillsInCase = cmdQueryForMedBillsInCase.ExecuteReader();

                gvCasePageMedBills.Rows.Clear();
                if (rdrMedBillsInCase.HasRows)
                {
                    while (rdrMedBillsInCase.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();

                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                        if (!rdrMedBillsInCase.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetString(0) });
                        if (!rdrMedBillsInCase.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetString(1) });
                        if (!rdrMedBillsInCase.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetDateTime(2).ToString("MM/dd/yyyy") });
                        if (!rdrMedBillsInCase.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetString(3) });
                        if (!rdrMedBillsInCase.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetDateTime(4).ToString("MM/dd/yyyy") });
                        if (!rdrMedBillsInCase.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetString(5) });
                        if (!rdrMedBillsInCase.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetDecimal(6).ToString("C") });
                        if (!rdrMedBillsInCase.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetDecimal(7).ToString("C") });
                        if (!rdrMedBillsInCase.IsDBNull(8)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetDecimal(8).ToString("C") });
                        if (!rdrMedBillsInCase.IsDBNull(9)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetDecimal(9).ToString("C") });

                        gvCasePageMedBills.Rows.Add(row);
                    }
                }
                rdrMedBillsInCase.Close();
                if (connRN3.State != ConnectionState.Closed) connRN3.Close();

                EnableCaseForm();

                btnNewMedBill_Case.Enabled = true;
                btnEditMedBill.Enabled = true;
                btnDeleteMedBill.Enabled = true;

                btnCaseCreationSaveUpper.Enabled = true;
                //btnCaseCreationLowerSave.Enabled = true;

                tbCMMManager.SelectedTab = tbpgCreateCase;
            }
            //}
            //else
            //{
            //    MessageBox.Show("Case screen already open.");
            //}

        }

        private void ClearMedBillsInCaseEditSafely()
        {
            gvCasePageMedBills.BeginInvoke(new RemoveAllMedBillsInCaseEdit(ClearAllMedBillsInCaseEdit));
        }

        private void AddRowMedBillsInCaseEditSafely(DataGridViewRow row)
        {
            gvCasePageMedBills.BeginInvoke(new AddRowToMedBillsInCaseEdit(AddRowMedBillsInCaseEdit), row);
        }


        private void ClearAllMedBillsInCaseEdit()
        {
            gvCasePageMedBills.Rows.Clear();
        }

        private void AddRowMedBillsInCaseEdit(DataGridViewRow row)
        {
            gvCasePageMedBills.Rows.Add(row);
        }

        private void OnMedBillsInCaseEditChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnMedBillsInCaseEditChange;

                UpdateGridViewMedBillsInCaseEdit();

            }
        }

        private void UpdateGridViewMedBillsInCaseEdit()
        {
            String strSqlQueryForMedBillsInCase = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], [dbo].[tbl_medbill].[CreatedDate], [dbo].[tbl_CreateStaff].[Staff_Name], " +
                                                  "[dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                  "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], [dbo].[tbl_medbill].[Balance] " +
                                                  "from ((([dbo].[tbl_medbill] inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId]) " +
                                                  "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id]) " +
                                                  "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id]) " +
                                                  "where [dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                                                  "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and " +
                                                  "[dbo].[tbl_medbill].[IsDeleted] = 0";

            SqlCommand cmdQueryForMedBillsInCase = new SqlCommand(strSqlQueryForMedBillsInCase, connRN3);
            cmdQueryForMedBillsInCase.CommandType = CommandType.Text;

            cmdQueryForMedBillsInCase.Parameters.AddWithValue("@CaseName", CaseIdSelected);
            cmdQueryForMedBillsInCase.Parameters.AddWithValue("@IndividualId", IndividualIdSelected);

            SqlDependency dependencyMedBillsInCaseEdit = new SqlDependency(cmdQueryForMedBillsInCase);
            dependencyMedBillsInCaseEdit.OnChange += new OnChangeEventHandler(OnMedBillsInCaseEditChange);

            //if (connRN.State == ConnectionState.Closed) connRN.Open();
            if (connRN3.State != ConnectionState.Closed)
            {
                connRN3.Close();
                connRN3.Open();
            }
            else if (connRN3.State == ConnectionState.Closed) connRN3.Open();
            SqlDataReader rdrMedBillsInCase = cmdQueryForMedBillsInCase.ExecuteReader();

            //gvCasePageMedBills.Rows.Clear();
            if (IsHandleCreated) ClearMedBillsInCaseEditSafely();
            else gvCasePageMedBills.Rows.Clear();

            if (rdrMedBillsInCase.HasRows)
            {
                while (rdrMedBillsInCase.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();

                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                    if (!rdrMedBillsInCase.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetString(0) });
                    if (!rdrMedBillsInCase.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetString(1) });
                    if (!rdrMedBillsInCase.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetDateTime(2).ToString("MM/dd/yyyy") });
                    if (!rdrMedBillsInCase.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetString(3) });
                    if (!rdrMedBillsInCase.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetDateTime(4).ToString("MM/dd/yyyy") });
                    if (!rdrMedBillsInCase.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetString(5) });
                    if (!rdrMedBillsInCase.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetDecimal(6).ToString("C") });
                    if (!rdrMedBillsInCase.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetDecimal(7).ToString("C") });
                    if (!rdrMedBillsInCase.IsDBNull(8)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetDecimal(8).ToString("C") });
                    if (!rdrMedBillsInCase.IsDBNull(9)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillsInCase.GetDecimal(9).ToString("C") });

                    //gvCasePageMedBills.Rows.Add(row);
                    //if (IsHandleCreated) AddRowMedBillsInCaseEdit(row);
                    if (IsHandleCreated) AddRowMedBillsInCaseEditSafely(row);
                    else gvCasePageMedBills.Rows.Add(row);
                }
            }
            rdrMedBillsInCase.Close();
            if (connRN3.State != ConnectionState.Closed) connRN3.Close();
        }

        private void btnEditMedBill_Click(object sender, EventArgs e)
        {

            //if (!tbCMMManager.TabPages.Contains(tbpgMedicalBill))
            //{
            medbillMode = MedBillMode.Edit;

            String MedBillNo = String.Empty;
            int nNumberOfRowSelected = 0;

            for (int i = 0; i < gvCasePageMedBills.Rows.Count; i++)
            {
                if ((Boolean)gvCasePageMedBills[0, i].Value)
                {
                    MedBillNo = gvCasePageMedBills[1, i].Value.ToString();
                    nNumberOfRowSelected++;
                }
            }

            if (nNumberOfRowSelected == 0)
            {
                MessageBox.Show("Please select a medical bill.");
                return;
            }
            else if (nNumberOfRowSelected >= 2)
            {
                MessageBox.Show("More than one medical bill selected.");
                return;
            }
            else if (nNumberOfRowSelected == 1)
            {
                InitializeMedBillTabOnNewMedBill();
                //tbCMMManager.TabPages.Insert(5, tbpgMedicalBill);
                tbCMMManager.SelectedTab = tbpgMedicalBill;

                //String CaseNameInMedBillEdit = txtCaseName.Text.Trim();
                //String IndividualIdInMedBillEdit = txtCaseIndividualID.Text.Trim();
                String IndividualName = String.Empty;

                String CaseNameInMedBill = txtCaseName.Text.Trim();
                String IndividualIdInMedBill = txtCaseIndividualID.Text.Trim();
                //MedBillNo = gvCasePageMedBills[1, i].Value.ToString();

                switch (IndividualSearched.IndividualPlan)
                {
                    case Plan.GoldPlus:
                        txtMemberProgram.Text = "Gold Plus";
                        break;
                    case Plan.Gold:
                        txtMemberProgram.Text = "Gold";
                        break;
                    case Plan.Silver:
                        txtMemberProgram.Text = "Silver";
                        break;
                    case Plan.Bronze:
                        txtMemberProgram.Text = "Bronze";
                        break;
                    case Plan.GoldMedi_I:
                        txtMemberProgram.Text = "Gold Medi-I";
                        break;
                    case Plan.GoldMedi_II:
                        txtMemberProgram.Text = "Gold Medi-II";
                        break;
                }

                //////////////////////////////////////////////////////////////////////////////////

                //String strCaseNameSelected = String.Empty;
                String strPatientLastName = txtLastName.Text.Trim();
                String strPatientFirstName = txtFirstName.Text.Trim();
                String strPatientMiddleName = txtMiddleName.Text.Trim();
                String strDateOfBirth = dtpBirthDate.Value.ToString("MM/dd/yyyy");
                String strSSN = txtIndividualSSN.Text.Trim();
                String strStreetAddr = txtStreetAddress1.Text.Trim();
                String strCity = txtCity1.Text.Trim();
                String strState = txtState1.Text.Trim();
                String strZip = txtZip1.Text.Trim();

                txtIndividualIDMedBill.Text = IndividualIdInMedBill;
                if (strPatientMiddleName.Trim() == String.Empty) txtPatientNameMedBill.Text = strPatientLastName + ", " + strPatientFirstName;
                else if (strPatientMiddleName.Trim() != String.Empty) txtPatientNameMedBill.Text = strPatientLastName + ", " + strPatientFirstName + " " + strPatientMiddleName;

                txtMedBillDOB.Text = strDateOfBirth;
                txtMedBillSSN.Text = strSSN;
                txtMedBillAddress.Text = strStreetAddr + ", " + strCity + ", " + strState + " " + strZip;

                ///////////////////////////////////////////////////////////////////////////////////
                // MedBillNo, CaseNameInMedBill, IndividualIdInMedBill
                String strSqlQueryForMedBillTypes = "select [dbo].[tbl_medbill_type].[MedBillTypeId], [dbo].[tbl_medbill_type].[MedBillTypeName] from [dbo].[tbl_medbill_type]";

                SqlCommand cmdQueryForMedBillTypes = new SqlCommand(strSqlQueryForMedBillTypes, connRN4);
                cmdQueryForMedBillTypes.CommandType = CommandType.Text;

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrMedBillTypes = cmdQueryForMedBillTypes.ExecuteReader();
                dicMedBillTypes.Clear();

                if (rdrMedBillTypes.HasRows)
                {
                    while (rdrMedBillTypes.Read())
                    {
                        if (!rdrMedBillTypes.IsDBNull(0) && !rdrMedBillTypes.IsDBNull(1))
                        {
                            dicMedBillTypes.Add(rdrMedBillTypes.GetInt16(0), rdrMedBillTypes.GetString(1));
                        }
                    }
                }
                rdrMedBillTypes.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                /////////////////////////////////////////////////////////////////////////////////////////
                ///

                // Populate Pending Reason
                comboPendingReason.Items.Clear();
                if (dicPendingReason.Count > 0)
                {
                    for (int i = 0; i < dicPendingReason.Count; i++)
                    {
                        comboPendingReason.Items.Add(dicPendingReason[i]);
                    }
                    comboPendingReason.SelectedIndex = 0;
                }

                // Populate Ineligible Reason
                comboIneligibleReason.Items.Clear();
                if (dicIneligibleReason.Count > 0)
                {
                    for (int i = 0; i < dicIneligibleReason.Count; i++)
                    {
                        comboIneligibleReason.Items.Add(dicIneligibleReason[i]);
                    }
                    comboIneligibleReason.SelectedIndex = 0;
                }

                // Get the Medical Bill Note Type info
                //List<MedBillNoteTypeInfo> lstMedBillNoteTypeInfo = new List<MedBillNoteTypeInfo>();

                //String strSqlQueryForMedBillNoteTypeInfo = "select [dbo].[tbl_MedBillNoteType].[MedBillNoteTypeId], [dbo].[tbl_MedBillNoteType].[MedBillNoteTypeValue] from [dbo].[tbl_MedBillNoteType]";

                //SqlCommand cmdQueryForMedBillNoteTypeInfo = new SqlCommand(strSqlQueryForMedBillNoteTypeInfo, connRN);
                //cmdQueryForMedBillNoteTypeInfo.CommandType = CommandType.Text;

                //connRN.Open();
                //SqlDataReader rdrMedBillNoteType = cmdQueryForMedBillNoteTypeInfo.ExecuteReader();
                //if (rdrMedBillNoteType.HasRows)
                //{
                //    while (rdrMedBillNoteType.Read())
                //    {
                //        if (!rdrMedBillNoteType.IsDBNull(0) && !rdrMedBillNoteType.IsDBNull(1))
                //        {
                //            lstMedBillNoteTypeInfo.Add(new MedBillNoteTypeInfo { MedBillNoteTypeId = rdrMedBillNoteType.GetInt16(0), MedBillNoteTypeValue = rdrMedBillNoteType.GetString(1) });
                //        }
                //    }
                //}
                //connRN.Close();

                // Get medical bill info
                String ICD10Code = String.Empty;
                //String strSqlQueryForMedBillEdit = "select [dbo].[tbl_medbill].[Case_Id], [dbo].[tbl_medbill].[Illness_Id], [dbo].[tbl_medbill].[Incident_Id], " +
                //                                   "[dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill].[MedBillType_Id], [dbo].[tbl_medbill].[BillStatus], [dbo].[tbl_medbill].[BillClosed], " +
                //                                   "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_MedicalProvider].[Name], " +
                //                                   "[dbo].[tbl_medbill].[PrescriptionDrugName], [dbo].[tbl_medbill].[PrescriptionNo], [dbo].[tbl_medbill].[PrescriptionDescription], " +
                //                                   "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy], [dbo].[tbl_medbill].[PatientTypeId], " +
                //                                   "[dbo].[tbl_medbill].[BillDate], [dbo].[tbl_medbill].[DueDate], " +
                //                                   "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_MedicalProvider].[PHONE], [dbo].[tbl_medbill].[ProviderContactPerson], " +
                //                                   "[dbo].[tbl_medbill].[Note], " +
                //                                   "[dbo].[tbl_illness].[ICD_10_Id], " +
                //                                   "[dbo].[tbl_medbill].[PendingReason], [dbo].[tbl_medbill].[IneligibleReason], " +
                //                                   "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_medbill].[ProviderPhoneNumber], [dbo].[tbl_medbill].[ProviderContactPerson], " +
                //                                   "[dbo].[tbl_medbill].[ProposalLetterSentDate], [dbo].[tbl_medbill].[HIPPASentDate], [dbo].[tbl_medbill].[MedicalRecordDate] " +
                //                                   "from (([dbo].[tbl_medbill] inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id]) " +
                //                                   "inner join [dbo].[tbl_MedicalProvider] on [dbo].[tbl_medbill].[MedicalProvider_Id] = [dbo].[tbl_MedicalProvider].[ID]) " +
                //                                   "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                //                                   "[dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                //                                   "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and " +
                //                                   "[dbo].[tbl_medbill].[IsDeleted] = 0";


                String strSqlQueryForMedBillEdit = "select [RN_DB].[dbo].[tbl_medbill].[Case_Id], [RN_DB].[dbo].[tbl_illness].[IllnessNo], [RN_DB].[dbo].[tbl_incident].[IncidentNo], " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[BillNo], [RN_DB].[dbo].[tbl_medbill].[MedBillType_Id], [RN_DB].[dbo].[tbl_medbill].[BillStatus], " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[BillClosed], " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[BillAmount], [SalesForce].[dbo].[account].[Name], " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[PrescriptionDrugName], [RN_DB].[dbo].[tbl_medbill].[PrescriptionNo], [RN_DB].[dbo].[tbl_medbill].[PrescriptionDescription], " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy], [RN_DB].[dbo].[tbl_medbill].[PatientTypeId], " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[BillDate], [RN_DB].[dbo].[tbl_medbill].[DueDate], " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[Account_At_Provider], [SalesForce].[dbo].[account].[Phone], [RN_DB].[dbo].[tbl_medbill].[ProviderContactPerson], " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[Note], " +
                                                    "[RN_DB].[dbo].[tbl_illness].[ICD_10_Id], " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[PendingReason], [RN_DB].[dbo].[tbl_medbill].[IneligibleReason], " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[Account_At_Provider], [RN_DB].[dbo].[tbl_medbill].[ProviderPhoneNumber], [RN_DB].[dbo].[tbl_medbill].[ProviderContactPerson], " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[ProposalLetterSentDate], [RN_DB].[dbo].[tbl_medbill].[HIPPASentDate], [RN_DB].[dbo].[tbl_medbill].[MedicalRecordDate], " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[Illness_Id], [RN_DB].[dbo].[tbl_medbill].[Incident_Id] " +
                                                    "from [RN_DB].[dbo].[tbl_medbill] " +
                                                    "inner join [RN_DB].[dbo].[tbl_illness] on [RN_DB].[dbo].[tbl_medbill].[Illness_Id] = [RN_DB].[dbo].[tbl_illness].[Illness_Id] " +
                                                    "inner join [RN_DB].[dbo].[tbl_incident] on [RN_DB].[dbo].[tbl_medbill].[Incident_Id] = [RN_DB].[dbo].[tbl_incident].[Incident_id] " +
                                                    "inner join [SalesForce].[dbo].[account] on [RN_DB].[dbo].[tbl_medbill].[MedicalProvider_Id] = [SalesForce].[dbo].[account].[Id] " +
                                                    "where [RN_DB].[dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                                                    "[RN_DB].[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and" +
                                                    "[RN_DB].[dbo].[tbl_medbill].[IsDeleted] = 0";

                SqlCommand cmdQueryForMedBillEdit = new SqlCommand(strSqlQueryForMedBillEdit, connRN4);
                cmdQueryForMedBillEdit.CommandType = CommandType.Text;

                cmdQueryForMedBillEdit.Parameters.AddWithValue("@MedBillNo", MedBillNo);
                cmdQueryForMedBillEdit.Parameters.AddWithValue("@CaseName", CaseNameInMedBill);
                cmdQueryForMedBillEdit.Parameters.AddWithValue("@IndividualId", IndividualIdInMedBill);

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrMedBillEdit = cmdQueryForMedBillEdit.ExecuteReader();
                if (rdrMedBillEdit.HasRows)
                {
                    rdrMedBillEdit.Read();

                    if (!rdrMedBillEdit.IsDBNull(0)) txtMedBill_CaseNo.Text = rdrMedBillEdit.GetString(0).Trim();
                    if (!rdrMedBillEdit.IsDBNull(1))
                    {
                        Illness.IllnessNo = rdrMedBillEdit.GetString(1).Trim();
                        txtMedBill_Illness.Text = rdrMedBillEdit.GetString(1).Trim();
                    }
                    if (!rdrMedBillEdit.IsDBNull(2))
                    {
                        Incident.IncidentNo = rdrMedBillEdit.GetString(2).Trim();
                        txtMedBill_Incident.Text = rdrMedBillEdit.GetString(2).Trim();
                    }

                    if (!rdrMedBillEdit.IsDBNull(3)) txtMedBillNo.Text = rdrMedBillEdit.GetString(3).Trim();

                    if (!rdrMedBillEdit.IsDBNull(4))
                    {
                        comboMedBillType.Items.Clear();
                        for (int i = 1; i <= dicMedBillTypes.Count; i++)
                        {
                            comboMedBillType.Items.Add(dicMedBillTypes[i]);
                        }
                        comboMedBillType.SelectedIndex = rdrMedBillEdit.GetInt16(4) - 1;
                    }

                    if (!rdrMedBillEdit.IsDBNull(5))
                    {
                        if (dicMedBillStatus.Count > 0)
                        {
                            comboMedBillStatus.Items.Clear();
                            for (int i = 0; i < dicMedBillStatus.Count; i++)
                            {
                                comboMedBillStatus.Items.Add(dicMedBillStatus[i]);
                            }
                            comboMedBillStatus.SelectedIndex = rdrMedBillEdit.GetInt16(5);
                        }
                    }
                    if (!rdrMedBillEdit.IsDBNull(6))
                    {
                        if (rdrMedBillEdit.GetBoolean(6) == true) cbMedBillClosed.SelectedIndex = 1;
                        else cbMedBillClosed.SelectedIndex = 0;
                    }
                    else cbMedBillClosed.SelectedIndex = 0;

                    if (!rdrMedBillEdit.IsDBNull(7))
                    {
                        txtMedBillAmount.Text = rdrMedBillEdit.GetDecimal(7).ToString("C");
                        txtBalance.Text = rdrMedBillEdit.GetDecimal(7).ToString("C");
                    }
                    if (!rdrMedBillEdit.IsDBNull(8)) txtMedicalProvider.Text = rdrMedBillEdit.GetString(8).Trim();
                    if (!rdrMedBillEdit.IsDBNull(9)) txtPrescriptionName.Text = rdrMedBillEdit.GetString(9).Trim();
                    if (!rdrMedBillEdit.IsDBNull(10)) txtNumberOfMedication.Text = rdrMedBillEdit.GetString(10).Trim();
                    if (!rdrMedBillEdit.IsDBNull(11)) txtPrescriptionDescription.Text = rdrMedBillEdit.GetString(11).Trim();
                    if (!rdrMedBillEdit.IsDBNull(12)) txtNumPhysicalTherapy.Text = rdrMedBillEdit.GetInt16(12).ToString();
                    if (!rdrMedBillEdit.IsDBNull(13))
                    {
                        int nPatientType = rdrMedBillEdit.GetInt16(13);

                        if (nPatientType == 0) rbOutpatient.Checked = true;
                        else if (nPatientType == 1) rbInpatient.Checked = true;
                    }
                    // Bill date
                    if (!rdrMedBillEdit.IsDBNull(14))
                    {
                        dtpBillDate.Text = rdrMedBillEdit.GetDateTime(14).ToString("MM/dd/yyyy");
                    }
                    else
                    {
                        dtpBillDate.Format = DateTimePickerFormat.Custom;
                        dtpBillDate.CustomFormat = " ";
                    }

                    // Due date
                    if (!rdrMedBillEdit.IsDBNull(15))
                    {
                        dtpDueDate.Text = rdrMedBillEdit.GetDateTime(15).ToString("MM/dd/yyyy");
                    }
                    else
                    {
                        dtpDueDate.Format = DateTimePickerFormat.Custom;
                        dtpDueDate.CustomFormat = " ";
                    }

                    if (!rdrMedBillEdit.IsDBNull(16)) txtMedBillAccountNoAtProvider.Text = rdrMedBillEdit.GetString(16);
                    if (!rdrMedBillEdit.IsDBNull(17)) txtMedProviderPhoneNo.Text = rdrMedBillEdit.GetString(17);
                    if (!rdrMedBillEdit.IsDBNull(18)) txtProviderContactPerson.Text = rdrMedBillEdit.GetString(18);

                    if (!rdrMedBillEdit.IsDBNull(19))
                    {
                        if (comboMedBillType.SelectedIndex == 0) txtMedBillNote.Text = rdrMedBillEdit.GetString(19);
                        if (comboMedBillType.SelectedIndex == 1) txtPrescriptionNote.Text = rdrMedBillEdit.GetString(19);
                        if (comboMedBillType.SelectedIndex == 2) txtPhysicalTherapyRxNote.Text = rdrMedBillEdit.GetString(19);
                    }

                    if (!rdrMedBillEdit.IsDBNull(20))
                    {
                        ICD10Code = rdrMedBillEdit.GetString(20).Trim();
                        Illness.ICD10Code = ICD10Code;
                        //txtMedBill_Illness.Text = ICD10Code;
                    }

                    if ((comboMedBillType.SelectedIndex == 0) && (!rdrMedBillEdit.IsDBNull(21)))
                    {
                        comboPendingReason.SelectedIndex = rdrMedBillEdit.GetInt32(21);
                    }

                    if ((comboMedBillType.SelectedIndex == 0) && (!rdrMedBillEdit.IsDBNull(22)))
                    {
                        comboIneligibleReason.SelectedIndex = rdrMedBillEdit.GetInt32(22);
                    }

                    // Reset fields

                    if (comboMedBillType.SelectedIndex == 0)       // Medical Bill Type - Medical Bill
                    {
                        txtPrescriptionName.Text = String.Empty;
                        txtPrescriptionDescription.Text = String.Empty;
                        txtPrescriptionNote.Text = String.Empty;
                        txtNumberOfMedication.Text = String.Empty;

                        txtNumPhysicalTherapy.Text = String.Empty;
                        txtPhysicalTherapyRxNote.Text = String.Empty;
                    }
                    else if (comboMedBillType.SelectedIndex == 1)       // Medical Bill Type - Prescription
                    {
                        txtNumPhysicalTherapy.Text = String.Empty;
                        txtPhysicalTherapyRxNote.Text = String.Empty;

                        rbInpatient.Checked = false;
                        rbOutpatient.Checked = false;

                        comboPendingReason.SelectedIndex = 0;
                        comboIneligibleReason.SelectedIndex = 0;

                        txtMedBillNote.Text = String.Empty;
                    }
                    else if (comboMedBillType.SelectedIndex == 2)       // Medical Bill Type - Physical Therapy
                    {
                        txtPrescriptionName.Text = String.Empty;
                        txtPrescriptionDescription.Text = String.Empty;
                        txtPrescriptionNote.Text = String.Empty;
                        txtNumberOfMedication.Text = String.Empty;

                        rbInpatient.Checked = false;
                        rbOutpatient.Checked = false;

                        comboPendingReason.SelectedIndex = 0;
                        comboIneligibleReason.SelectedIndex = 0;

                        txtMedBillNote.Text = String.Empty;
                    }

                    if (!rdrMedBillEdit.IsDBNull(23)) txtMedBillAccountNoAtProvider.Text = rdrMedBillEdit.GetString(23);
                    if (!rdrMedBillEdit.IsDBNull(24)) txtMedProviderPhoneNo.Text = rdrMedBillEdit.GetString(24);
                    if (!rdrMedBillEdit.IsDBNull(25)) txtProviderContactPerson.Text = rdrMedBillEdit.GetString(25);

                    if (!rdrMedBillEdit.IsDBNull(26))
                    {
                        dtpProposalLetterSentDate.Value = rdrMedBillEdit.GetDateTime(26);
                        dtpProposalLetterSentDate.Format = DateTimePickerFormat.Short;
                    }
                    if (!rdrMedBillEdit.IsDBNull(27))
                    {
                        dtpHippaSentDate.Value = rdrMedBillEdit.GetDateTime(27);
                        dtpHippaSentDate.Format = DateTimePickerFormat.Short;
                    }
                    if (!rdrMedBillEdit.IsDBNull(28))
                    {
                        dtpMedicalRecordDate.Value = rdrMedBillEdit.GetDateTime(28);
                        dtpMedicalRecordDate.Format = DateTimePickerFormat.Short;
                    }

                    if (!rdrMedBillEdit.IsDBNull(29)) Illness.IllnessId = rdrMedBillEdit.GetString(29);
                    else Illness.IllnessId = String.Empty;

                    if (!rdrMedBillEdit.IsDBNull(30)) Incident.IncidentId = rdrMedBillEdit.GetString(30);
                    else Incident.IncidentId = String.Empty;

                }
                rdrMedBillEdit.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();





                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                //if (connRN.State != ConnectionState.Closed)
                //{
                //    connRN.Close();
                //    connRN.Open();
                //}
                //else if (connRN.State == ConnectionState.Closed) connRN.Open();
                //SqlDataReader rdrMedBillEdit = cmdQueryForMedBillEdit.ExecuteReader();
                //if (rdrMedBillEdit.HasRows)
                //{
                //    rdrMedBillEdit.Read();

                //    if (!rdrMedBillEdit.IsDBNull(0)) txtMedBill_CaseNo.Text = rdrMedBillEdit.GetString(0).Trim();
                //    if (!rdrMedBillEdit.IsDBNull(1)) Illness.IllnessId = rdrMedBillEdit.GetString(1).Trim();
                //    if (!rdrMedBillEdit.IsDBNull(2)) txtMedBill_Incident.Text = rdrMedBillEdit.GetString(2).Trim();

                //    if (!rdrMedBillEdit.IsDBNull(3)) txtMedBillNo.Text = rdrMedBillEdit.GetString(3).Trim();
                //    if (!rdrMedBillEdit.IsDBNull(4))
                //    {
                //        // populate medical bill types
                //        comboMedBillType.Items.Clear();
                //        for (int i = 1; i <= dicMedBillTypes.Count; i++)
                //        {
                //            comboMedBillType.Items.Add(dicMedBillTypes[i]);
                //        }
                //        comboMedBillType.SelectedIndex = rdrMedBillEdit.GetInt16(4) - 1;
                //    }

                //    if (!rdrMedBillEdit.IsDBNull(5))
                //    {
                //        comboMedBillStatus.Items.Clear();
                //        if (dicMedBillStatus.Count > 0)
                //        {
                //            for (int i = 0; i < dicMedBillStatus.Count; i++)
                //            {
                //                comboMedBillStatus.Items.Add(dicMedBillStatus[i]);
                //            }
                //            //comboMedBillStatus.SelectedIndex = 0;
                //            comboMedBillStatus.SelectedIndex = rdrMedBillEdit.GetInt16(5);
                //        }
                //    }

                //    if (!rdrMedBillEdit.IsDBNull(6))
                //    {
                //        if (rdrMedBillEdit.GetBoolean(6) == true) cbMedBillClosed.SelectedIndex = 1;
                //        else cbMedBillClosed.SelectedIndex = 0;
                //    }
                //    else cbMedBillClosed.SelectedIndex = 0;

                //    if (!rdrMedBillEdit.IsDBNull(7))
                //    {
                //        txtMedBillAmount.Text = rdrMedBillEdit.GetDecimal(7).ToString("C");
                //        txtBalance.Text = rdrMedBillEdit.GetDecimal(7).ToString("C");
                //    }
                //    if (!rdrMedBillEdit.IsDBNull(8)) txtMedicalProvider.Text = rdrMedBillEdit.GetString(8).Trim();
                //    if (!rdrMedBillEdit.IsDBNull(9)) txtPrescriptionName.Text = rdrMedBillEdit.GetString(9).Trim();
                //    if (!rdrMedBillEdit.IsDBNull(10)) txtNumberOfMedication.Text = rdrMedBillEdit.GetString(10).Trim();
                //    if (!rdrMedBillEdit.IsDBNull(11)) txtPrescriptionDescription.Text = rdrMedBillEdit.GetString(11).Trim();
                //    if (!rdrMedBillEdit.IsDBNull(12)) txtNumPhysicalTherapy.Text = rdrMedBillEdit.GetInt16(12).ToString();
                //    if (!rdrMedBillEdit.IsDBNull(13))
                //    {
                //        int nPatientType = rdrMedBillEdit.GetInt16(13);

                //        if (nPatientType == 0) rbOutpatient.Checked = true;
                //        else if (nPatientType == 1) rbInpatient.Checked = true;
                //    }
                //    // Bill date
                //    if (!rdrMedBillEdit.IsDBNull(14))
                //    {
                //        dtpBillDate.Text = rdrMedBillEdit.GetDateTime(14).ToString("MM/dd/yyyy");
                //    }
                //    else
                //    {
                //        dtpBillDate.Format = DateTimePickerFormat.Custom;
                //        dtpBillDate.CustomFormat = " ";
                //    }

                //    // Due date
                //    if (!rdrMedBillEdit.IsDBNull(15))
                //    {
                //        dtpDueDate.Text = rdrMedBillEdit.GetDateTime(15).ToString("MM/dd/yyyy");
                //    }
                //    else
                //    {
                //        dtpDueDate.Format = DateTimePickerFormat.Custom;
                //        dtpDueDate.CustomFormat = " ";
                //    }

                //    if (!rdrMedBillEdit.IsDBNull(16)) txtMedBillAccountNoAtProvider.Text = rdrMedBillEdit.GetString(16);
                //    if (!rdrMedBillEdit.IsDBNull(17)) txtMedProviderPhoneNo.Text = rdrMedBillEdit.GetString(17);
                //    if (!rdrMedBillEdit.IsDBNull(18)) txtProviderContactPerson.Text = rdrMedBillEdit.GetString(18);

                //    if (!rdrMedBillEdit.IsDBNull(19))
                //    {
                //        if (comboMedBillType.SelectedItem.ToString() == "Medical Bill") txtMedBillNote.Text = rdrMedBillEdit.GetString(19);
                //        if (comboMedBillType.SelectedItem.ToString() == "Prescription") txtPrescriptionNote.Text = rdrMedBillEdit.GetString(19);
                //        if (comboMedBillType.SelectedItem.ToString() == "Physical Therapy") txtPhysicalTherapyRxNote.Text = rdrMedBillEdit.GetString(19);
                //    }

                //    if (!rdrMedBillEdit.IsDBNull(20))
                //    {
                //        ICD10Code = rdrMedBillEdit.GetString(20).Trim();
                //        Illness.ICD10Code = ICD10Code;
                //        txtMedBill_Illness.Text = ICD10Code;
                //    }

                //    if ((comboMedBillType.SelectedIndex == 0)&&(!rdrMedBillEdit.IsDBNull(21)))
                //    {
                //        comboPendingReason.SelectedIndex = rdrMedBillEdit.GetInt32(21);
                //    }

                //    if ((comboMedBillType.SelectedIndex == 0)&&(!rdrMedBillEdit.IsDBNull(22)))
                //    {
                //        comboIneligibleReason.SelectedIndex = rdrMedBillEdit.GetInt32(22);
                //    }

                //    //comboMedBillType.SelectedIndex = rdrMedBillEdit.GetInt16(4) - 1;

                //    if (comboMedBillType.SelectedIndex == 0)       // Medical Bill Type - Medical Bill
                //    {
                //        txtPrescriptionName.Text = String.Empty;
                //        txtPrescriptionDescription.Text = String.Empty;
                //        txtPrescriptionNote.Text = String.Empty;
                //        txtNumberOfMedication.Text = String.Empty;

                //        txtNumPhysicalTherapy.Text = String.Empty;
                //        txtPhysicalTherapyRxNote.Text = String.Empty;
                //    }
                //    else if (comboMedBillType.SelectedIndex == 1)       // Medical Bill Type - Prescription
                //    {
                //        txtNumPhysicalTherapy.Text = String.Empty;
                //        txtPhysicalTherapyRxNote.Text = String.Empty;

                //        rbInpatient.Checked = false;
                //        rbOutpatient.Checked = false;

                //        comboPendingReason.SelectedIndex = 0;
                //        comboIneligibleReason.SelectedIndex = 0;

                //        txtMedBillNote.Text = String.Empty;
                //    }
                //    else if (comboMedBillType.SelectedIndex == 2)       // Medical Bill Type - Physical Therapy
                //    {
                //        txtPrescriptionName.Text = String.Empty;
                //        txtPrescriptionDescription.Text = String.Empty;
                //        txtPrescriptionNote.Text = String.Empty;
                //        txtNumberOfMedication.Text = String.Empty;

                //        rbInpatient.Checked = false;
                //        rbOutpatient.Checked = false;

                //        comboPendingReason.SelectedIndex = 0;
                //        comboIneligibleReason.SelectedIndex = 0;

                //        txtMedBillNote.Text = String.Empty;
                //    }

                //    if (!rdrMedBillEdit.IsDBNull(23)) txtMedBillAccountNoAtProvider.Text = rdrMedBillEdit.GetString(23);
                //    if (!rdrMedBillEdit.IsDBNull(24)) txtMedProviderPhoneNo.Text = rdrMedBillEdit.GetString(24);
                //    if (!rdrMedBillEdit.IsDBNull(25)) txtProviderContactPerson.Text = rdrMedBillEdit.GetString(25);

                //    if (!rdrMedBillEdit.IsDBNull(26))
                //    {
                //        dtpProposalLetterSentDate.Value = rdrMedBillEdit.GetDateTime(26);
                //        dtpProposalLetterSentDate.Format = DateTimePickerFormat.Short;
                //    }
                //    if (!rdrMedBillEdit.IsDBNull(27))
                //    {
                //        dtpHippaSentDate.Value = rdrMedBillEdit.GetDateTime(27);
                //        dtpHippaSentDate.Format = DateTimePickerFormat.Short;
                //    }
                //    if (!rdrMedBillEdit.IsDBNull(28))
                //    {
                //        dtpMedicalRecordDate.Value = rdrMedBillEdit.GetDateTime(28);
                //        dtpMedicalRecordDate.Format = DateTimePickerFormat.Short;
                //    }

                //}

                //if (connRN.State != ConnectionState.Closed) connRN.Close();



                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // Calculate the personal responsibility balance
                //String IncidentNo = txtMedBill_Incident.Text.Trim();
                //String IndividualId = txtCaseIndividualID.Text.Trim();

                //String strSqlQueryForIncidentChange = "select [cdc].[dbo_tbl_incident_CT].[Program_id], [dbo].[tbl_program].[ProgramName] from [cdc].[dbo_tbl_incident_CT] " +
                //                                      "inner join [dbo].[tbl_program] on [cdc].[dbo_tbl_incident_CT].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                //                                      "where [cdc].[dbo_tbl_incident_CT].[Incident_id] = @IncidentId and [cdc].[dbo_tbl_incident_CT].[Individual_id] = @IndividualId and " +
                //                                      "([cdc].[dbo_tbl_incident_CT].[__$operation] = 2 or [cdc].[dbo_tbl_incident_CT].[__$operation] = 3 or " +
                //                                      "[cdc].[dbo_tbl_incident_CT].[__$operation] = 4) " +      // capture incident program for insert, update
                //                                      "order by [cdc].[dbo_tbl_incident_CT].[Program_id]";

                //SqlCommand cmdQueryForIncidentChange = new SqlCommand(strSqlQueryForIncidentChange, connRN);
                //cmdQueryForIncidentChange.CommandType = CommandType.Text;

                //cmdQueryForIncidentChange.Parameters.AddWithValue("@IncidentId", IncidentNo);
                //cmdQueryForIncidentChange.Parameters.AddWithValue("@IndividualId", IndividualId);

                //connRN.Open();
                //SqlDataReader rdrIncidentChange = cmdQueryForIncidentChange.ExecuteReader();
                //if (rdrIncidentChange.HasRows)
                //{
                //    while (rdrIncidentChange.Read())
                //    {
                //        //lstIncidentProgramInfo.Add(new IncidentProgramInfo { IncidentProgramId = rdrIncidentChange.GetInt16(0), IncidentProgramName = rdrIncidentChange.GetString(1).Trim() });
                //        IncidentProgramInfo incidentProgram = new IncidentProgramInfo(rdrIncidentChange.GetInt16(0), rdrIncidentChange.GetString(1).Trim());
                //        lstIncidentProgramInfo.Add(incidentProgram);
                //    }
                //}
                //connRN.Close();

                //Boolean bBronze = false;
                //Boolean bSilver = false;
                //Boolean bGold = false;
                //Boolean bGoldPlus = false;
                //Boolean bGoldMed1 = false;
                //Boolean bGoldMed2 = false;

                //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //{
                //    if (incidentInfo.IncidentProgramId == 3)
                //    {
                //        incidentInfo.bPersonalResponsibilityProgram = true;
                //        bBronze = true;
                //        break;
                //    }
                //}

                //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //{
                //    if ((incidentInfo.IncidentProgramId == 2) && (bBronze == false))
                //    {
                //        incidentInfo.bPersonalResponsibilityProgram = true;
                //        bSilver = true;
                //        break;
                //    }
                //}

                //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //{
                //    if ((incidentInfo.IncidentProgramId == 1) && (bBronze == false) && (bSilver == false))
                //    {
                //        incidentInfo.bPersonalResponsibilityProgram = true;
                //        break;
                //    }
                //}

                //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //{
                //    if ((incidentInfo.IncidentProgramId == 0) && (bBronze == false) && (bSilver == false) && (bGold == false))
                //    {
                //        incidentInfo.bPersonalResponsibilityProgram = true;
                //        break;
                //    }
                //}

                //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //{
                //    if ((incidentInfo.IncidentProgramId == 4) && (bBronze == false) && (bSilver == false) && (bGold == false) && (bGoldPlus == false))
                //    {
                //        incidentInfo.bPersonalResponsibilityProgram = true;
                //        break;
                //    }
                //}

                //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //{
                //    if ((incidentInfo.IncidentProgramId == 5) && (bBronze == false) && (bSilver == false) && (bGold == false) && (bGoldPlus == false) && (bGoldMed1 == false))
                //    {
                //        incidentInfo.bPersonalResponsibilityProgram = true;
                //        break;
                //    }
                //}

                //foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                //{
                //    if (incidentInfo.bPersonalResponsibilityProgram == true)
                //        PersonalResponsibilityAmountInMedBill = incidentInfo.PersonalResponsibilityAmount;
                //}

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                String IncidentNo = txtMedBill_Incident.Text.Trim();
                String IndividualIdMedBill = txtCaseIndividualID.Text.Trim();

                String strSqlQueryForIncident = "select [dbo].[tbl_incident].[Program_id], [dbo].[tbl_program].[ProgramName], [dbo].[tbl_incident].[IsDeleted] " +
                                "from [dbo].[tbl_incident] " +
                                "inner join [dbo].[tbl_program] on [dbo].[tbl_incident].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                                "where [dbo].[tbl_incident].[Individual_id] = @IndividualId and " +
                                "[dbo].[tbl_incident].[IncidentNo] = @IncidentNo " +
                                "order by [dbo].[tbl_incident].[Program_id]";

                SqlCommand cmdQueryForIncident = new SqlCommand(strSqlQueryForIncident, connRN4);
                cmdQueryForIncident.CommandType = CommandType.Text;

                cmdQueryForIncident.Parameters.AddWithValue("@IndividualId", IndividualIdMedBill);
                cmdQueryForIncident.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrIncident = cmdQueryForIncident.ExecuteReader();
                lstIncidentProgramInfo.Clear();
                if (rdrIncident.HasRows)
                {
                    while (rdrIncident.Read())
                    {
                        if (!rdrIncident.IsDBNull(0) && !rdrIncident.IsDBNull(1))
                        {
                            IncidentProgramInfo incidentProgram = new IncidentProgramInfo(rdrIncident.GetBoolean(2), rdrIncident.GetInt16(0), rdrIncident.GetString(1).Trim());
                            lstIncidentProgramInfo.Add(incidentProgram);
                        }
                    }
                }
                rdrIncident.Close();
                if (connRN4.State == ConnectionState.Open) connRN4.Close();

                String strSqlQueryForIncidentChange = "select [dbo].[tbl_incident_history].[Program_id], [dbo].[tbl_program].[ProgramName], [dbo].[tbl_incident_history].[IsDeleted] " +
                                        "from [dbo].[tbl_incident_history] " +
                                        "inner join [dbo].[tbl_program] on [dbo].[tbl_incident_history].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                                        "where ([dbo].[tbl_incident_history].[Operation] = 2 or " +
                                        "[dbo].[tbl_incident_history].[Operation] = 3 or " +
                                        "[dbo].[tbl_incident_history].[Operation] = 4) and " +
                                        "[dbo].[tbl_incident_history].[Individual_id] = @IndividualId and" +
                                        "[dbo].[tbl_incident_history].[IncidentNo] = @IncidentNo " +
                                        "order by [dbo].[tbl_incident_history].[Program_id]";

                SqlCommand cmdQueryForIncidentChange = new SqlCommand(strSqlQueryForIncidentChange, connRN4);
                cmdQueryForIncidentChange.CommandType = CommandType.Text;

                cmdQueryForIncidentChange.Parameters.AddWithValue("@IndividualId", IndividualIdMedBill);
                cmdQueryForIncidentChange.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrIncidentChange = cmdQueryForIncidentChange.ExecuteReader();
                //lstIncidentProgramInfo.Clear();
                if (rdrIncidentChange.HasRows)
                {
                    while (rdrIncidentChange.Read())
                    {
                        if (!rdrIncidentChange.IsDBNull(0) && !rdrIncidentChange.IsDBNull(1))
                        {
                            IncidentProgramInfo incidentProgram = new IncidentProgramInfo(rdrIncidentChange.GetBoolean(2), rdrIncidentChange.GetInt16(0), rdrIncidentChange.GetString(1).Trim());
                            lstIncidentProgramInfo.Add(incidentProgram);
                        }
                    }
                }
                rdrIncidentChange.Close();
                if (connRN4.State == ConnectionState.Open) connRN4.Close();

                foreach (IncidentProgramInfo incdInfo in lstIncidentProgramInfo)
                {
                    if (incdInfo.bIsDeleted == true)
                    {
                        MessageBox.Show("The Incident has been deleted. Personal Responsibility cannot be calculated.", "Error");
                        lstIncidentProgramInfo.Clear();
                    }
                }

                Boolean bBronze = false;
                Boolean bSilver = false;
                Boolean bGold = false;
                Boolean bGoldPlus = false;
                Boolean bGoldMed1 = false;
                Boolean bGoldMed2 = false;

                if (lstIncidentProgramInfo.Count > 0)
                {
                    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    {
                        if ((incidentInfo.IncidentProgramId == 3) &&
                            (incidentInfo.bIsDeleted == false))
                        {
                            incidentInfo.bPersonalResponsibilityProgram = true;
                            bBronze = true;
                            break;
                        }
                    }

                    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    {
                        if ((incidentInfo.IncidentProgramId == 2) &&
                            (bBronze == false) &&
                            (incidentInfo.bIsDeleted == false))
                        {
                            incidentInfo.bPersonalResponsibilityProgram = true;
                            bSilver = true;
                            break;
                        }
                    }

                    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    {
                        if ((incidentInfo.IncidentProgramId == 1) &&
                            (bBronze == false) &&
                            (bSilver == false) &&
                            (incidentInfo.bIsDeleted == false))
                        {
                            incidentInfo.bPersonalResponsibilityProgram = true;
                            break;
                        }
                    }

                    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    {
                        if ((incidentInfo.IncidentProgramId == 0) &&
                            (bBronze == false) &&
                            (bSilver == false) &&
                            (bGold == false) &&
                            (incidentInfo.bIsDeleted == false))
                        {
                            incidentInfo.bPersonalResponsibilityProgram = true;
                            break;
                        }
                    }

                    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    {
                        if ((incidentInfo.IncidentProgramId == 4) &&
                            (bBronze == false) &&
                            (bSilver == false) &&
                            (bGold == false) &&
                            (bGoldPlus == false) &&
                            (incidentInfo.bIsDeleted == false))
                        {
                            incidentInfo.bPersonalResponsibilityProgram = true;
                            break;
                        }
                    }

                    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    {
                        if ((incidentInfo.IncidentProgramId == 5) &&
                            (bBronze == false) &&
                            (bSilver == false) &&
                            (bGold == false) &&
                            (bGoldPlus == false) &&
                            (bGoldMed1 == false) &&
                            (incidentInfo.bIsDeleted == false))
                        {
                            incidentInfo.bPersonalResponsibilityProgram = true;
                            break;
                        }
                    }
                }

                foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                {
                    if (incidentInfo.bPersonalResponsibilityProgram == true)
                        PersonalResponsibilityAmountInMedBill = incidentInfo.PersonalResponsibilityAmount;
                }

                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // Get disease name
                if (ICD10Code != String.Empty)
                {
                    String strSqlQueryForDiseaseName = "select [dbo].[ICD10 Code].[Name] from [dbo].[ICD10 Code] where [dbo].[ICD10 Code].[ICD10_CODE__C] = @ICD10Code";

                    SqlCommand cmdQueryForDiseaseName = new SqlCommand(strSqlQueryForDiseaseName, connSalesforce3);
                    cmdQueryForDiseaseName.CommandType = CommandType.Text;

                    cmdQueryForDiseaseName.Parameters.AddWithValue("@ICD10Code", ICD10Code);

                    if (connSalesforce3.State == ConnectionState.Open)
                    {
                        connSalesforce3.Close();
                        connSalesforce3.Open();
                    }
                    else if (connSalesforce3.State == ConnectionState.Closed) connSalesforce3.Open();
                    //String DiseaseName = cmdQueryForDiseaseName.ExecuteScalar().ToString();
                    Object objDiseaseName = cmdQueryForDiseaseName.ExecuteScalar();
                    if (connSalesforce3.State != ConnectionState.Closed) connSalesforce3.Close();

                    String DiseaseName = String.Empty;

                    if (objDiseaseName != null) DiseaseName = objDiseaseName.ToString();
                    else
                    {
                        MessageBox.Show("No Disease Name for the ICD 10 Code: " + ICD10Code, "Error", MessageBoxButtons.OK);
                        return;
                    }

                    txtMedBill_ICD10Code.Text = ICD10Code;
                    txtMedBillDiseaseName.Text = DiseaseName;
                }
                else
                {
                    txtMedBill_ICD10Code.Text = String.Empty;
                    txtMedBillDiseaseName.Text = String.Empty;
                }

                // Get documents info
                String strSqlQueryForDocumentsInfo = "select [dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
                                                        "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Receiv_Date] " +
                                                        "from [dbo].[tbl_case] where [dbo].[tbl_case].[Case_Name] = @CaseId and " +
                                                        "[dbo].[tbl_case].[Contact_ID] = @IndividualId and" +
                                                        "[dbo].[tbl_case].[IsDeleted] = 0";

                SqlCommand cmdQueryForDocInfo = new SqlCommand(strSqlQueryForDocumentsInfo, connRN4);
                cmdQueryForDocInfo.CommandType = CommandType.Text;

                cmdQueryForDocInfo.Parameters.AddWithValue("@CaseId", CaseNameInMedBill);
                cmdQueryForDocInfo.Parameters.AddWithValue("@IndividualId", IndividualIdInMedBill);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrDocInfo = cmdQueryForDocInfo.ExecuteReader();
                if (rdrDocInfo.HasRows)
                {
                    rdrDocInfo.Read();

                    if (!rdrDocInfo.IsDBNull(0))
                    {
                        if (rdrDocInfo.GetBoolean(0))
                        {
                            chkMedBillNPFReceived.Checked = true;
                            chkMedBillNPFReceived.Enabled = false;
                            dtpMedBillNPF.Text = rdrDocInfo.GetDateTime(1).ToString("MM/dd/yyyy");
                            dtpMedBillNPF.Enabled = false;
                            btnViewNPF.Enabled = true;
                        }
                        else
                        {
                            chkMedBillNPFReceived.Checked = false;
                            chkMedBillNPFReceived.Enabled = false;
                            dtpMedBillNPF.Format = DateTimePickerFormat.Custom;
                            dtpMedBillNPF.CustomFormat = " ";
                            dtpMedBillNPF.Enabled = false;
                            btnViewNPF.Enabled = false;
                        }
                    }
                    if (!rdrDocInfo.IsDBNull(2))
                    {
                        if (rdrDocInfo.GetBoolean(2))
                        {
                            chkMedBill_IBReceived.Checked = true;
                            chkMedBill_IBReceived.Enabled = false;
                            dtpMedBill_IB.Text = rdrDocInfo.GetDateTime(3).ToString("MM/dd/yyyy");
                            dtpMedBill_IB.Enabled = false;
                            btnViewIB.Enabled = true;
                        }
                        else
                        {
                            chkMedBill_IBReceived.Checked = false;
                            chkMedBill_IBReceived.Enabled = false;
                            dtpMedBill_IB.Format = DateTimePickerFormat.Custom;
                            dtpMedBill_IB.CustomFormat = " ";
                            dtpMedBill_IB.Enabled = false;
                            btnViewIB.Enabled = false;
                        }
                    }
                    if (!rdrDocInfo.IsDBNull(4))
                    {
                        if (rdrDocInfo.GetBoolean(4))
                        {
                            chkMedBillPOPReceived.Checked = true;
                            chkMedBillPOPReceived.Enabled = false;
                            dtpMedBillPOP.Text = rdrDocInfo.GetDateTime(5).ToString("MM/dd/yyyy");
                            dtpMedBillPOP.Enabled = false;
                            btnViewPoP.Enabled = true;
                        }
                        else
                        {
                            chkMedBillPOPReceived.Checked = false;
                            chkMedBillPOPReceived.Enabled = false;
                            dtpMedBillPOP.Format = DateTimePickerFormat.Custom;
                            dtpMedBillPOP.CustomFormat = " ";
                            dtpMedBillPOP.Enabled = false;
                            btnViewPoP.Enabled = false;
                        }
                    }
                    if (!rdrDocInfo.IsDBNull(6))
                    {
                        if (rdrDocInfo.GetBoolean(6))
                        {
                            chkMedRecordReceived.Checked = true;
                            chkMedRecordReceived.Enabled = false;
                            dtpMedBillMedRecord.Text = rdrDocInfo.GetDateTime(7).ToString("MM/dd/yyyy");
                            dtpMedBillMedRecord.Enabled = false;
                            btnViewMedRecord.Enabled = true;
                        }
                        else
                        {
                            chkMedRecordReceived.Checked = false;
                            chkMedRecordReceived.Enabled = false;
                            dtpMedBillMedRecord.Format = DateTimePickerFormat.Custom;
                            dtpMedBillMedRecord.CustomFormat = " ";
                            dtpMedBillMedRecord.Enabled = false;
                            btnViewMedRecord.Enabled = false;
                        }
                    }

                    if (!rdrDocInfo.IsDBNull(8))
                    {
                        if (rdrDocInfo.GetBoolean(8))
                        {
                            chkOtherDocReceived.Checked = true;
                            chkOtherDocReceived.Enabled = false;
                            dtpMedBillOtherDoc.Text = rdrDocInfo.GetDateTime(9).ToString("MM/dd/yyyy");
                            dtpMedBillOtherDoc.Enabled = false;
                            btnViewOtherDoc.Enabled = true;
                        }
                        else
                        {
                            chkOtherDocReceived.Checked = false;
                            chkOtherDocReceived.Enabled = false;
                            dtpMedBillOtherDoc.Format = DateTimePickerFormat.Custom;
                            dtpMedBillOtherDoc.CustomFormat = " ";
                            dtpMedBillOtherDoc.Enabled = false;
                            btnViewOtherDoc.Enabled = false;
                        }
                    }

                    strCaseIdSelected = CaseNameInMedBill;
                    strContactIdSelected = IndividualIdInMedBill;
                }
                rdrDocInfo.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                //String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[ICD_10_Id] = @ICD10Code";

                //SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN);
                //cmdQueryForIllnessId.CommandType = CommandType.Text;

                //cmdQueryForIllnessId.Parameters.AddWithValue("@ICD10Code", Illness.ICD10Code);

                //connRN.Open();
                //Illness.IllnessId = cmdQueryForIllnessId.ExecuteScalar().ToString();
                //connRN.Close();


                String strSqlQueryForIncidentProgram = "select [dbo].[tbl_program].[ProgramName] from [dbo].[tbl_program] inner join [dbo].[tbl_incident] " +
                                                        "on [dbo].[tbl_program].[Program_id] = [dbo].[tbl_incident].[Program_id] " +
                                                        "where [dbo].[tbl_incident].[Individual_id] = @IndividualId and [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

                SqlCommand cmdQueryForIncidentProgram = new SqlCommand(strSqlQueryForIncidentProgram, connRN4);
                cmdQueryForIncidentProgram.CommandType = CommandType.Text;

                cmdQueryForIncidentProgram.Parameters.AddWithValue("@IndividualId", IndividualIdInMedBill);
                cmdQueryForIncidentProgram.Parameters.AddWithValue("@IncidentNo", txtMedBill_Incident.Text.Trim());

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                //String IncidentProgramName = cmdQueryForIncidentProgram.ExecuteScalar().ToString();
                Object objIncidentProgramName = cmdQueryForIncidentProgram.ExecuteScalar();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                String IncidentProgramName = String.Empty;
                if (objIncidentProgramName != null) IncidentProgramName = objIncidentProgramName.ToString();
                else
                {
                    MessageBox.Show("No Program Name for the Incident No: " + txtMedBill_Incident.Text.Trim(), "Error", MessageBoxButtons.OK);
                    return;
                }

                if (IncidentProgramName != null) txtIncdProgram.Text = IncidentProgramName;

                if (txtIncdProgram.Text.Trim() != txtMemberProgram.Text.Trim())
                {
                    txtIncdProgram.BackColor = Color.Red;
                    txtMemberProgram.BackColor = Color.Red;
                }
                else if (txtIncdProgram.Text.Trim() == txtMemberProgram.Text.Trim())
                {
                    txtIncdProgram.BackColor = Color.White;
                    txtMemberProgram.BackColor = Color.FromKnownColor(KnownColor.Control);
                }


                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //String strSqlQueryForMedicalProvider = "select dbo.tbl_MedicalProvider.ID, dbo.tbl_MedicalProvider.Name, dbo.tbl_MedicalProvider.Type from dbo.tbl_MedicalProvider";

                //SqlCommand cmdQueryForMedicalProvider = new SqlCommand(strSqlQueryForMedicalProvider, connRN4);
                //cmdQueryForMedicalProvider.CommandType = CommandType.Text;

                ////if (connRN.State == ConnectionState.Closed) connRN.Open();
                //if (connRN4.State != ConnectionState.Closed)
                //{
                //    connRN4.Close();
                //    connRN4.Open();
                //}
                //else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                //SqlDataReader rdrMedicalProvider = cmdQueryForMedicalProvider.ExecuteReader();

                //lstMedicalProvider.Clear();
                //if (rdrMedicalProvider.HasRows)
                //{
                //    while (rdrMedicalProvider.Read())
                //    {
                //        MedicalProviderInfo info = new MedicalProviderInfo();

                //        if (!rdrMedicalProvider.IsDBNull(0)) info.ID = rdrMedicalProvider.GetString(0);
                //        if (!rdrMedicalProvider.IsDBNull(1)) info.Name = rdrMedicalProvider.GetString(1);
                //        if (!rdrMedicalProvider.IsDBNull(2)) info.Type = rdrMedicalProvider.GetString(2);

                //        lstMedicalProvider.Add(info);
                //    }
                //}

                //if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                var srcMedicalProvider = new AutoCompleteStringCollection();

                for (int i = 0; i < lstMedicalProvider.Count; i++)
                {
                    srcMedicalProvider.Add(lstMedicalProvider[i].Name);
                }

                txtMedicalProvider.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                txtMedicalProvider.AutoCompleteSource = AutoCompleteSource.CustomSource;
                txtMedicalProvider.AutoCompleteCustomSource = srcMedicalProvider;

                lstPaymentMethod.Clear();
                String strSqlQueryForPaymentMethod = "select [dbo].[tbl_payment_method].[PaymentMethod_Id], [dbo].[tbl_payment_method].[PaymentMethod_Value] from [dbo].[tbl_payment_method] " +
                                                        "order by [dbo].[tbl_payment_method].[PaymentMethod_Value]";

                SqlCommand cmdQueryForPaymentMethod = new SqlCommand(strSqlQueryForPaymentMethod, connRN4);
                cmdQueryForPaymentMethod.CommandType = CommandType.Text;

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrPaymentMethod = cmdQueryForPaymentMethod.ExecuteReader();
                if (rdrPaymentMethod.HasRows)
                {
                    while (rdrPaymentMethod.Read())
                    {
                        if (!rdrPaymentMethod.IsDBNull(1)) lstPaymentMethod.Add(new PaymentMethod { PaymentMethodId = rdrPaymentMethod.GetInt16(0), PaymentMethodValue = rdrPaymentMethod.GetString(1) });
                        else lstPaymentMethod.Add(new PaymentMethod { PaymentMethodId = rdrPaymentMethod.GetInt16(0), PaymentMethodValue = null });
                    }
                }
                rdrPaymentMethod.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                // Retrieve credit card info
                lstCreditCardInfo.Clear();
                String strSqlQueryForCreditCardInfo = "select [dbo].[tbl_Credit_Card__c].[CreditCard_Id], [dbo].[tbl_Credit_Card__c].[Name] from [dbo].[tbl_Credit_Card__c]";

                SqlCommand cmdQueryForCreditCardInfo = new SqlCommand(strSqlQueryForCreditCardInfo, connRN4);
                cmdQueryForCreditCardInfo.CommandType = CommandType.Text;

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrCreditCardInfo = cmdQueryForCreditCardInfo.ExecuteReader();
                if (rdrCreditCardInfo.HasRows)
                {
                    while (rdrCreditCardInfo.Read())
                    {
                        if (!rdrCreditCardInfo.IsDBNull(1))
                            lstCreditCardInfo.Add(new CreditCardInfo { CreditCardId = rdrCreditCardInfo.GetInt16(0), CreditCardNo = rdrCreditCardInfo.GetString(1) });
                        else
                            lstCreditCardInfo.Add(new CreditCardInfo { CreditCardId = rdrCreditCardInfo.GetInt16(0), CreditCardNo = null });
                    }
                }
                rdrCreditCardInfo.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                String strSqlQueryForSettlement = "select [dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement_type_code].[SettlementTypeValue], [dbo].[tbl_settlement].[Amount], " +
                                "[dbo].[tbl_settlement].[PersonalResponsibilityCredit], [dbo].[tbl_payment_method].[PaymentMethod_Value], " +
                                "[dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate], " +
                                "[dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
                                "[dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], [dbo].[tbl_settlement].[ACH_Reconciled], " +
                                "[dbo].[tbl_Credit_Card__c].[Name], [dbo].[tbl_settlement].[CMMCreditCardPaidDate], [dbo].[tbl_settlement].[CC_Reconciled], " +
                                "[dbo].[tbl_settlement].[AllowedAmount], [dbo].[tbl_settlement].[IneligibleReason], " +
                                "[dbo].[tbl_settlement].[Notes] " +
                                "from [dbo].[tbl_settlement] inner join [dbo].[tbl_settlement_type_code] " +
                                "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
                                "inner join [dbo].[tbl_Credit_Card__c] on [dbo].[tbl_settlement].[CMMCreditCard] = [dbo].[tbl_Credit_Card__c].[CreditCard_Id]" +
                                "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and " +
                                "[dbo].[tbl_settlement].[IsDeleted] = 0 " +
                                "order by [dbo].[tbl_settlement].[Name]";

                SqlCommand cmdQueryForSettlement = new SqlCommand(strSqlQueryForSettlement, connRN4);
                cmdQueryForSettlement.CommandType = CommandType.Text;

                cmdQueryForSettlement.Parameters.AddWithValue("@MedBillNo", MedBillNo);

                SqlDependency dependencySettlementInMedBill = new SqlDependency(cmdQueryForSettlement);
                dependencySettlementInMedBill.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillEditChange);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrSettlement = cmdQueryForSettlement.ExecuteReader();
                gvSettlementsInMedBill.Rows.Clear();

                if (rdrSettlement.HasRows)
                {
                    while (rdrSettlement.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();
                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                        if (!rdrSettlement.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(0) });
                        if (!rdrSettlement.IsDBNull(1))
                        {
                            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();

                            for (int i = 0; i < lstSettlementType.Count; i++)
                            {
                                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                            }
                            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                            {
                                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                            }

                            row.Cells.Add(comboCellSettlementType);
                        }
                        else
                        {
                            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
                            for (int i = 0; i < lstSettlementType.Count; i++)
                            {
                                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                            }

                            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                            {
                                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                            }

                            row.Cells.Add(comboCellSettlementType);
                        }

                        if (!rdrSettlement.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(2).ToString("C") });
                        else
                        {
                            Decimal Zero = 0;
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                        }


                        if (!rdrSettlement.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(3).ToString("C") });
                        else
                        {
                            Decimal Zero = 0;
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                        }

                        /////////////////////////////////////////////////////////////////////
                        if (!rdrSettlement.IsDBNull(4))
                        {
                            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                            for (int i = 0; i < lstPaymentMethod.Count; i++)
                            {
                                if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                else comboCellPaymentMethod.Items.Add(String.Empty);
                            }

                            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                            {
                                if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                    comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                            }

                            row.Cells.Add(comboCellPaymentMethod);
                        }
                        else
                        {
                            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                            for (int i = 0; i < lstPaymentMethod.Count; i++)
                            {
                                if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                else comboCellPaymentMethod.Items.Add(String.Empty);
                                //comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                            }

                            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                            {
                                if ((!rdrSettlement.IsDBNull(4)) && comboCellPaymentMethod.Items[i] != null)
                                {
                                    if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                        comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                                }
                                else comboCellPaymentMethod.Value = null;
                            }

                            row.Cells.Add(comboCellPaymentMethod);

                        }

                        /////////////////////////////////////////////////////////////////////
                        if (!rdrSettlement.IsDBNull(5))
                        {

                            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                            approvedCell.Value = rdrSettlement.GetBoolean(5);
                            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                            row.Cells.Add(approvedCell);

                            if (LoggedInUserRole == UserRole.RNStaff ||
                                LoggedInUserRole == UserRole.NPStaff ||
                                LoggedInUserRole == UserRole.FDStaff)
                                approvedCell.ReadOnly = true;
                            else if (LoggedInUserRole == UserRole.RNManager)
                                approvedCell.ReadOnly = false;
                        }
                        else
                        {
                            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                            approvedCell.Value = false;
                            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                            row.Cells.Add(approvedCell);
                            if (LoggedInUserRole == UserRole.RNStaff ||
                                LoggedInUserRole == UserRole.NPStaff ||
                                LoggedInUserRole == UserRole.FDStaff)
                                approvedCell.ReadOnly = true;
                            else if (LoggedInUserRole == UserRole.RNManager)
                                approvedCell.ReadOnly = false;
                        }

                        if (!rdrSettlement.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(6).ToString("MM/dd/yyyy")) });
                        else row.Cells.Add(new CalendarCell { Value = null });

                        // Payment information
                        if (!rdrSettlement.IsDBNull(4))
                        {
                            String strPaymentMethod = rdrSettlement.GetString(4);

                            switch (strPaymentMethod)
                            {
                                case "Check":
                                    if (!rdrSettlement.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(7) });
                                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    DataGridViewComboBoxCell comboCellCreditCardNoneForCheck = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNoneForCheck.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCellCreditCardNoneForCheck.Items.Add(String.Empty);
                                    }
                                    row.Cells.Add(comboCellCreditCardNoneForCheck);
                                    if (!rdrSettlement.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(8).ToString("MM/dd/yyyy")) });
                                    if (!rdrSettlement.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(9) });
                                    break;
                                case "ACH/Banking":
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    if (!rdrSettlement.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(10) });
                                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    DataGridViewComboBoxCell comboCellCreditCardNoneForACH = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null)
                                            comboCellCreditCardNoneForACH.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCellCreditCardNoneForACH.Items.Add(String.Empty);
                                    }
                                    row.Cells.Add(comboCellCreditCardNoneForACH);
                                    if (!rdrSettlement.IsDBNull(11)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(11).ToString("MM/dd/yyyy")) });
                                    if (!rdrSettlement.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(12) });
                                    break;
                                case "Credit Card":
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    if (!rdrSettlement.IsDBNull(13))
                                    {
                                        DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                        {
                                            comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        }
                                        for (int i = 0; i < comboCellCreditCard.Items.Count; i++)
                                        {
                                            if (rdrSettlement.GetString(13) == comboCellCreditCard.Items[i].ToString())
                                                comboCellCreditCard.Value = comboCellCreditCard.Items[i];
                                        }
                                        row.Cells.Add(comboCellCreditCard);
                                    }
                                    else
                                    {
                                        DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                        {
                                            comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        }
                                        row.Cells.Add(comboCellCreditCard);
                                    }
                                    if (!rdrSettlement.IsDBNull(14)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(14).ToString("MM/dd/yyyy")) });
                                    if (!rdrSettlement.IsDBNull(15)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(15) });
                                    break;
                                default:
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    DataGridViewComboBoxCell comboCellCreditCardNone = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNone.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCellCreditCardNone.Items.Add(String.Empty);
                                    }
                                    row.Cells.Add(comboCellCreditCardNone);
                                    row.Cells.Add(new CalendarCell { Value = null });
                                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                    break;
                            }
                        }
                        else
                        {

                            DataGridViewTextBoxCell txtCheckNoCell = new DataGridViewTextBoxCell();
                            txtCheckNoCell.Value = null;
                            row.Cells.Add(txtCheckNoCell);
                            DataGridViewTextBoxCell txtACHNoCell = new DataGridViewTextBoxCell();
                            txtACHNoCell.Value = null;
                            row.Cells.Add(txtACHNoCell);
                            DataGridViewComboBoxCell comboCreditCardCell = new DataGridViewComboBoxCell();
                            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                            {
                                if (lstCreditCardInfo[i].CreditCardNo != null) comboCreditCardCell.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                else comboCreditCardCell.Items.Add(String.Empty);
                            }
                            row.Cells.Add(comboCreditCardCell);
                            comboCreditCardCell.ReadOnly = true;
                            CalendarCell calPaymentDate = new CalendarCell();
                            calPaymentDate.Value = null;
                            row.Cells.Add(calPaymentDate);
                            DataGridViewCheckBoxCell chkReconciledCell = new DataGridViewCheckBoxCell();
                            chkReconciledCell.Value = false;
                            row.Cells.Add(chkReconciledCell);

                        }


                        if (!rdrSettlement.IsDBNull(16)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(16).ToString("C") });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                        if (!rdrSettlement.IsDBNull(17))
                        {
                            if (dicIneligibleReason.Count > 0)
                            {
                                DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                                for (int i = 0; i < dicIneligibleReason.Count; i++)
                                {
                                    comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                                }
                                comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[rdrSettlement.GetInt32(17)];
                                row.Cells.Add(comboCellIneligibleReason);
                            }
                        }
                        else
                        {
                            if (dicIneligibleReason.Count > 0)
                            {
                                DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                                for (int i = 0; i < dicIneligibleReason.Count; i++)
                                {
                                    comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                                }
                                comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[0];
                                row.Cells.Add(comboCellIneligibleReason);
                            }
                        }

                        if (!rdrSettlement.IsDBNull(18)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(18) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                        gvSettlementsInMedBill.Rows.Add(row);
                    }
                }
                rdrSettlement.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                //if (txtIncdProgram.Text.Trim() != String.Empty)
                //{

                //    String IncidentProgram = txtIncdProgram.Text.Trim();
                //    Decimal PersonalResponsibilityAmount = 0;

                //    String strSqlQueryForPersonalResponsibilityAmount = "select [dbo].[tbl_program].[PersonalResponsibilityAmount] from [dbo].[tbl_program] " +
                //                                                        "where [dbo].[tbl_program].[ProgramName] = @ProgramName";

                //    SqlCommand cmdQueryForPersonalResponsibilityAmount = new SqlCommand(strSqlQueryForPersonalResponsibilityAmount, connRN);
                //    cmdQueryForPersonalResponsibilityAmount.CommandType = CommandType.Text;

                //    cmdQueryForPersonalResponsibilityAmount.Parameters.AddWithValue("@ProgramName", IncidentProgram);

                //    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                //    if (connRN.State != ConnectionState.Closed)
                //    {
                //        connRN.Close();
                //        connRN.Open();
                //    }
                //    else if (connRN.State == ConnectionState.Closed) connRN.Open();
                //    SqlDataReader rdrPersonalResponsibilityAmount = cmdQueryForPersonalResponsibilityAmount.ExecuteReader();
                //    if (rdrPersonalResponsibilityAmount.HasRows)
                //    {

                //    }
                //    if (connRN.State != ConnectionState.Closed) connRN.Close();
                //}

                //foreach (IncidentProgramInfo incdProgram in lstIncidentProgramInfo)
                //{
                //    if (incdProgram.bPersonalResponsibilityProgram == true) PersonalResponsibilityAmount = incdProgram.PersonalResponsibilityAmount;
                //}

                //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                //{
                //    if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value != null)
                //    {
                //        Decimal result = 0;
                //        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                //        {
                //            PersonalResponsibilityAmount -= result;
                //        }
                //    }
                //}

                //txtPersonalResponsibility.Text = PersonalResponsibilityAmount.ToString("C");

                //if (PersonalResponsibilityAmount < 0) txtPersonalResponsibility.BackColor = Color.Yellow;

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
                    {
                        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                    }

                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
                    {
                        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                    }

                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
                    {
                        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                    }
                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "None")
                    {
                        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = true;
                    }
                }

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    if (gvSettlementsInMedBill[2, i]?.Value?.ToString() == "Ineligible") gvSettlementsInMedBill.Rows[i].DefaultCellStyle.BackColor = Color.Salmon;
                    else
                    {
                        gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                        gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                    }
                }

                //Decimal SettlementTotal = 0;
                //Decimal Balance = 0;
                //Decimal BillAmount = Decimal.Parse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"));
                //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                //{
                //    Decimal Settlement = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                //    SettlementTotal += Settlement;
                //}
                //if (SettlementTotal > BillAmount) MessageBox.Show("Settlement Total exceeds the Medical Bill Amount.", "Alert");
                //else
                //{
                //    Balance = BillAmount - SettlementTotal;
                //    txtBalance.Text = Balance.ToString("C");
                //}

                if (txtMedBillAmount.Text.Trim() != String.Empty)
                {
                    Decimal SettlementTotal = 0;
                    Decimal Balance = 0;
                    Decimal Result = 0;
                    Decimal BillAmount = 0;
                    if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out Result))
                    {
                        BillAmount = Result;

                        for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                        {
                            if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "PR Reimbursement" &&
                                gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "Medical Provider Refund")
                            {
                                Decimal Settlement = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                                SettlementTotal += Settlement;
                            }
                        }
                        if (SettlementTotal > BillAmount) MessageBox.Show("Settlement Total exceeds the Medical Bill Amount.", "Alert");
                        else
                        {
                            Balance = BillAmount - SettlementTotal;
                            txtBalance.Text = Balance.ToString("C");
                        }
                    }
                }

                Decimal TotalSharedAmount = 0;
                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    Decimal SharedAmount = 0;
                    Decimal MedicalProviderRefund = 0;
                    Decimal result = 0;

                    if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Provider Payment" ||
                        gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Reimbursement" ||
                        gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "PR Reimbursement")
                    {
                        if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                        {
                            SharedAmount = result;
                            TotalSharedAmount += SharedAmount;
                            txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");
                        }
                    }
                    else if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Medical Provider Refund")
                    {
                        if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                        {
                            MedicalProviderRefund = result;
                            TotalSharedAmount -= MedicalProviderRefund;
                            txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");
                        }
                    }
                }

                Decimal PersonResponsibilityAmt = PersonalResponsibilityAmountInMedBill;
                Decimal PersonalResponsibilityBalance = PersonalResponsibilityAmountInMedBill;
                Decimal TotalPersonalResponsibilityShared = 0;

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    Decimal PersonalResponsibilityShared = 0;
                    Decimal result = 0;

                    if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount" ||
                        gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount" ||
                        gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment")
                    {
                        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                        {
                            PersonalResponsibilityShared = result;
                            TotalPersonalResponsibilityShared += PersonalResponsibilityShared;
                            PersonalResponsibilityBalance -= TotalPersonalResponsibilityShared;
                        }
                    }
                }

                txtPersonalResponsibility.Text = PersonalResponsibilityBalance.ToString("C");


                // Populate Task GridView
                MedBillNoForTask = MedBillNo;

                String strSqlQueryForTaskInMedBill = "select [dbo].[tbl_task].[Subject], [dbo].[tbl_task].[DueDate], [dbo].[tbl_user].[User_Name], [dbo].[tbl_task_status_code].[TaskStatusValue], " +
                                                     "[dbo].[tbl_task].[id] " +
                                                     "from [dbo].[tbl_task] " +
                                                     "inner join [dbo].[tbl_user] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_user].[User_Id] " +
                                                     "inner join [dbo].[tbl_task_status_code] on [dbo].[tbl_task].[Status] = [dbo].[tbl_task_status_code].[TaskStatusCode] " +
                                                     "where [dbo].[tbl_task].[whatid] = @MedBillNo " +
                                                     "order by [dbo].[tbl_task].[CreateDate] desc";

                SqlCommand cmdQueryForTask = new SqlCommand(strSqlQueryForTaskInMedBill, connRN4);
                cmdQueryForTask.CommandType = CommandType.Text;

                cmdQueryForTask.Parameters.AddWithValue("@MedBillNo", MedBillNoForTask);

                SqlDependency dependencyTask = new SqlDependency(cmdQueryForTask);
                dependencyTask.OnChange += new OnChangeEventHandler(OnTaskInMedBillChange);

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrTaskForMedBill = cmdQueryForTask.ExecuteReader();
                gvMostRecentTasks.Rows.Clear();
                if (rdrTaskForMedBill.HasRows)
                {
                    while (rdrTaskForMedBill.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();
                        if (!rdrTaskForMedBill.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetString(0) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrTaskForMedBill.IsDBNull(1)) row.Cells.Add(new CalendarCell { Value = rdrTaskForMedBill.GetDateTime(1).ToString("MM/dd/yyyy") });
                        else row.Cells.Add(new CalendarCell { Value = String.Empty });
                        if (!rdrTaskForMedBill.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetString(2) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrTaskForMedBill.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetString(3) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrTaskForMedBill.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetInt32(4).ToString() });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        gvMostRecentTasks.Rows.Add(row);
                    }
                }
                rdrTaskForMedBill.Close();

                if (connRN4.State == ConnectionState.Open) connRN4.Close();


                EnableMedicalBillForm();


                //btnAddNewSettlement.Enabled = true;
                ////btnEditSettlement.Enabled = true;
                //btnSaveSettlement.Enabled = true;
                //btnDeleteSettlement.Enabled = true;


            }

            //}
            //else
            //{
            //    MessageBox.Show("Medical Bill screen already open.");
            //}
        }

        private void ClearGVSettlementSafely()
        {
            gvSettlementsInMedBill.BeginInvoke(new RemoveAllRowsInSettlement(RemoveAllRowSettlement));
        }

        private void AddNewRowToGVSettlementSafely(DataGridViewRow row)
        {
            gvSettlementsInMedBill.BeginInvoke(new AddRowToGVSettlement(AddRowToSettlement), row);
        }

        private void AddRowToSettlement(DataGridViewRow row)
        {
            gvSettlementsInMedBill.Rows.Add(row);
        }

        private void RemoveAllRowSettlement()
        {
            gvSettlementsInMedBill.Rows.Clear();
        }

        private void RemoveRowSettlement(int i)
        {
            gvSettlementsInMedBill.Rows.RemoveAt(i);
        }

        /// <summary>
        /// Modify this method
        /// </summary>
        private void ClearMedBillInCaseSafely()
        {
            gvCasePageMedBills.BeginInvoke(new RemoveAllMedBillInCase(RemoveAllMedBills));
        }

        private void AddNewRowToMedBillInCaseSafely(DataGridViewRow row)
        {
            gvCasePageMedBills.BeginInvoke(new AddRowToMedBillInCase(AddRowToMedBill), row);
        }

        private void SetMedBillBalanceSafely(Decimal balance)
        {
            txtBalance.BeginInvoke(new SetBalaceMedBill(SetMedBillBalance), balance);
        }

        private void SetTotalSharedAmountSafely(Decimal total_shared_amount)
        {
            txtTotalSharedAmtMedBill.BeginInvoke(new SetTotalSharedAmount(SetTotalSharedAmt), total_shared_amount);
        }

        private void AddRowToMedBill(DataGridViewRow row)
        {
            gvCasePageMedBills.Rows.Add(row);
        }

        private void RemoveRowMedBill(int i)
        {
            gvCasePageMedBills.Rows.RemoveAt(i);
        }

        private void RemoveAllMedBills()
        {
            gvCasePageMedBills.Rows.Clear();
        }



        private void SetTabPageCMMManagerSafely(int nIndex)
        {
            tbCMMManager.BeginInvoke(new SetTabPages(SetTabPage), nIndex);
        }

        private void SetTabPage(int nIndex)
        {
            tbCMMManager.SelectedIndex = nIndex;
        }

        private void SetMedBillBalance(Decimal Balance)
        {
            txtBalance.Text = Balance.ToString("C");
        }

        private void SetTotalSharedAmt(Decimal SharedAmount)
        {
            txtTotalSharedAmtMedBill.Text = SharedAmount.ToString("C");
        }

        private void OnSettlementsInMedBillEditChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                SqlDependency dependency = sender as SqlDependency;
                dependency.OnChange -= OnSettlementsInMedBillEditChange;

                UpdateGridViewSettlementsInMedBillEdit();
            }
        }

        private void UpdateGridViewSettlementsInMedBillEdit()
        {

            String MedBillNo = txtMedBillNo.Text.Trim();
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            String strSqlQueryForSettlement = "select [dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement_type_code].[SettlementTypeValue], [dbo].[tbl_settlement].[Amount], " +
                                  "[dbo].[tbl_settlement].[PersonalResponsibilityCredit], [dbo].[tbl_payment_method].[PaymentMethod_Value], " +
                                  "[dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate], " +
                                  "[dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
                                  "[dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], [dbo].[tbl_settlement].[ACH_Reconciled], " +
                                  "[dbo].[tbl_Credit_Card__c].[Name], [dbo].[tbl_settlement].[CMMCreditCardPaidDate], [dbo].[tbl_settlement].[CC_Reconciled], " +
                                  "[dbo].[tbl_settlement].[AllowedAmount], [dbo].[tbl_settlement].[IneligibleReason], [dbo].[tbl_settlement].[Notes] " +
                                  "from [dbo].[tbl_settlement] inner join [dbo].[tbl_settlement_type_code] " +
                                  "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                  "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
                                  "inner join [dbo].[tbl_Credit_Card__c] on [dbo].[tbl_settlement].[CMMCreditCard] = [dbo].[tbl_Credit_Card__c].[CreditCard_Id]" +
                                  "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and [dbo].[tbl_settlement].[IsDeleted] = 0 " +
                                  "order by [dbo].[tbl_settlement].[Name]";

            SqlCommand cmdQueryForSettlement = new SqlCommand(strSqlQueryForSettlement, connRN4);
            cmdQueryForSettlement.CommandType = CommandType.Text;

            cmdQueryForSettlement.Parameters.AddWithValue("@MedBillNo", MedBillNo);

            SqlDependency dependencySettlementInMedBill = new SqlDependency(cmdQueryForSettlement);
            dependencySettlementInMedBill.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillEditChange);

            if (connRN4.State != ConnectionState.Closed)
            {
                connRN4.Close();
                connRN4.Open();
            }
            else if (connRN4.State != ConnectionState.Open) connRN4.Open();
            SqlDataReader rdrSettlement = cmdQueryForSettlement.ExecuteReader();

            if (IsHandleCreated) ClearGVSettlementSafely();
            else gvSettlementsInMedBill.Rows.Clear();

            if (rdrSettlement.HasRows)
            {
                // has to put code to clear all rows in gvSettlementsInMedBill
                while (rdrSettlement.Read())
                {
                    DataGridViewRow row = new DataGridViewRow();
                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                    if (!rdrSettlement.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(0) });
                    if (!rdrSettlement.IsDBNull(1))
                    {
                        DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
                        for (int i = 0; i < lstSettlementType.Count; i++)
                        {
                            comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                        }
                        for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                        {
                            if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                        }
                        row.Cells.Add(comboCellSettlementType);
                    }
                    else
                    {
                        DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
                        for (int i = 0; i < lstSettlementType.Count; i++)
                        {
                            comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                        }

                        for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                        {
                            if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                        }

                        row.Cells.Add(comboCellSettlementType);
                    }

                    if (!rdrSettlement.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(2).ToString("C") });

                    else
                    {
                        Decimal Zero = 0;
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                    }


                    if (!rdrSettlement.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(3).ToString("C") });
                    else
                    {
                        Decimal Zero = 0;
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                    }

                    /////////////////////////////////////////////////////////////////////
                    if (!rdrSettlement.IsDBNull(4))
                    {
                        DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                        for (int i = 0; i < lstPaymentMethod.Count; i++)
                        {
                            if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                            else comboCellPaymentMethod.Items.Add(String.Empty);
                        }

                        for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                        {
                            if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                        }

                        row.Cells.Add(comboCellPaymentMethod);
                    }
                    else
                    {
                        DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                        for (int i = 0; i < lstPaymentMethod.Count; i++)
                        {
                            if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                            else comboCellPaymentMethod.Items.Add(String.Empty);
                        }

                        comboCellPaymentMethod.Value = null;

                        row.Cells.Add(comboCellPaymentMethod);

                    }


                    /////////////////////////////////////////////////////////////////////
                    if (!rdrSettlement.IsDBNull(5))
                    {

                        DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                        approvedCell.Value = rdrSettlement.GetBoolean(5);
                        approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                        row.Cells.Add(approvedCell);

                        if (LoggedInUserRole == UserRole.RNStaff ||
                            LoggedInUserRole == UserRole.NPStaff ||
                            LoggedInUserRole == UserRole.FDStaff)
                            approvedCell.ReadOnly = true;
                        else if (LoggedInUserRole == UserRole.RNManager)
                            approvedCell.ReadOnly = false;
                    }
                    else
                    {
                        DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                        approvedCell.Value = false;
                        approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                        row.Cells.Add(approvedCell);

                        if (LoggedInUserRole == UserRole.RNStaff ||
                            LoggedInUserRole == UserRole.NPStaff ||
                            LoggedInUserRole == UserRole.FDStaff)
                            approvedCell.ReadOnly = true;
                        else if (LoggedInUserRole == UserRole.RNManager)
                            approvedCell.ReadOnly = false;
                    }

                    if (!rdrSettlement.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(6).ToString("MM/dd/yyyy")) });
                    else row.Cells.Add(new CalendarCell { Value = null });

                    // Payment information
                    if (!rdrSettlement.IsDBNull(4))
                    {
                        String strPaymentMethod = rdrSettlement.GetString(4);

                        switch (strPaymentMethod)
                        {
                            case "Check":
                                if (!rdrSettlement.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(7) });
                                else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                //row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                DataGridViewComboBoxCell comboCellCreditCardNoneForCheck = new DataGridViewComboBoxCell();
                                for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                {
                                    if (lstCreditCardInfo[i].CreditCardNo != null)
                                        comboCellCreditCardNoneForCheck.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                    else comboCellCreditCardNoneForCheck.Items.Add(String.Empty);
                                }
                                row.Cells.Add(comboCellCreditCardNoneForCheck);

                                if (!rdrSettlement.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(8).ToString("MM/dd/yyyy")) });
                                else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                if (!rdrSettlement.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(9) });
                                else row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                break;
                            case "ACH/Banking":
                                row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                if (!rdrSettlement.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(10) });
                                else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                                DataGridViewComboBoxCell comboCellCreditCardNoneForACH = new DataGridViewComboBoxCell();
                                for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                {
                                    if (lstCreditCardInfo[i].CreditCardNo != null)
                                        comboCellCreditCardNoneForACH.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                    else comboCellCreditCardNoneForACH.Items.Add(String.Empty);
                                }
                                row.Cells.Add(comboCellCreditCardNoneForACH);

                                //row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                if (!rdrSettlement.IsDBNull(11)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(11).ToString("MM/dd/yyyy")) });
                                else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                if (!rdrSettlement.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(12) });
                                else row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                break;
                            case "Credit Card":
                                row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                if (!rdrSettlement.IsDBNull(13))
                                {
                                    DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCellCreditCard.Items.Add(String.Empty);
                                    }
                                    for (int i = 0; i < comboCellCreditCard.Items.Count; i++)
                                    {
                                        if (rdrSettlement.GetString(13) == comboCellCreditCard.Items[i].ToString())
                                            comboCellCreditCard.Value = comboCellCreditCard.Items[i];
                                    }
                                    row.Cells.Add(comboCellCreditCard);
                                }
                                else
                                {
                                    DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCellCreditCard.Items.Add(String.Empty);
                                    }
                                    row.Cells.Add(comboCellCreditCard);
                                }
                                if (!rdrSettlement.IsDBNull(14)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(14).ToString("MM/dd/yyyy")) });
                                else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                if (!rdrSettlement.IsDBNull(15)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(15) });
                                else row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                break;
                            default:
                                row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                DataGridViewComboBoxCell comboCellCreditCardNone = new DataGridViewComboBoxCell();
                                for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                {
                                    if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNone.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                    else comboCellCreditCardNone.Items.Add(String.Empty);
                                }
                                row.Cells.Add(comboCellCreditCardNone);
                                row.Cells.Add(new CalendarCell { Value = String.Empty });
                                row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                break;
                        }
                    }
                    else
                    {
                        DataGridViewTextBoxCell txtCheckNoCell = new DataGridViewTextBoxCell();
                        txtCheckNoCell.Value = null;
                        row.Cells.Add(txtCheckNoCell);
                        DataGridViewTextBoxCell txtACHNoCell = new DataGridViewTextBoxCell();
                        txtACHNoCell.Value = null;
                        row.Cells.Add(txtACHNoCell);
                        DataGridViewComboBoxCell comboCreditCardCell = new DataGridViewComboBoxCell();
                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                        {
                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCreditCardCell.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                            else comboCreditCardCell.Items.Add(String.Empty);
                        }
                        row.Cells.Add(comboCreditCardCell);
                        comboCreditCardCell.ReadOnly = true;
                        CalendarCell calPaymentDate = new CalendarCell();
                        calPaymentDate.Value = null;
                        row.Cells.Add(calPaymentDate);
                        DataGridViewCheckBoxCell chkReconciledCell = new DataGridViewCheckBoxCell();
                        chkReconciledCell.Value = false;
                        row.Cells.Add(chkReconciledCell);
                    }

                    if (!rdrSettlement.IsDBNull(16)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(16).ToString("C") });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                    if (!rdrSettlement.IsDBNull(17))
                    {
                        if (dicIneligibleReason.Count > 0)
                        {
                            DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                            for (int i = 0; i < dicIneligibleReason.Count; i++)
                            {
                                comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                            }
                            comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[rdrSettlement.GetInt32(17)];
                            row.Cells.Add(comboCellIneligibleReason);
                        }
                    }
                    else
                    {
                        if (dicIneligibleReason.Count > 0)
                        {
                            DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                            for (int i = 0; i < dicIneligibleReason.Count; i++)
                            {
                                comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                            }
                            comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[0];
                            row.Cells.Add(comboCellIneligibleReason);
                        }
                    }


                    if (!rdrSettlement.IsDBNull(18)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(18) });
                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                    if (IsHandleCreated) AddNewRowToGVSettlementSafely(row);
                    else gvSettlementsInMedBill.Rows.Add(row);
                }
            }
            rdrSettlement.Close();
            if (connRN4.State != ConnectionState.Closed) connRN4.Close();

            //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
            //{
            //    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
            //    {
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
            //    }

            //    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
            //    {
            //        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
            //    }

            //    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
            //    {
            //        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
            //    }
            //    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == String.Empty)
            //    {
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = true;
            //    }
            //}

            Decimal SettlementTotal = 0;
            Decimal Balance = 0;
            Decimal BillAmount = Decimal.Parse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"));
            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
            {
                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "PR Reimbursement" &&
                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "Medical Provider Refund")
                {
                    Decimal Settlement = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                    SettlementTotal += Settlement;
                }
            }
            if (SettlementTotal > BillAmount) MessageBox.Show("Settlement Total exceeds the Medical Bill Amount.", "Alert");
            else
            {
                Balance = BillAmount - SettlementTotal;
                SetMedBillBalanceSafely(Balance);

            }

            Decimal TotalSharedAmount = 0;
            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
            {
                Decimal SharedAmount = 0;
                Decimal MedicalProviderRefund = 0;
                Decimal result = 0;

                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Provider Payment" ||
                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Reimbursement" ||
                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "PR Reimbursement")
                {
                    if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                    {
                        SharedAmount = result;
                        TotalSharedAmount += SharedAmount;
                        //txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");
                        SetTotalSharedAmountSafely(TotalSharedAmount);
                    }
                }
                else if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Medical Provider Refund")
                {
                    if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                    {
                        MedicalProviderRefund = result;
                        TotalSharedAmount -= MedicalProviderRefund;
                        //txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");
                        SetTotalSharedAmountSafely(TotalSharedAmount);
                    }
                }
            }

            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
            {
                if (gvSettlementsInMedBill[2, i]?.Value?.ToString() == "Ineligible") gvSettlementsInMedBill.Rows[i].DefaultCellStyle.BackColor = Color.Salmon;
                else
                {
                    gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                    gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                }
            }

            //btnAddNewSettlement.Enabled = true;
            ////btnEditSettlement.Enabled = true;
            //btnSaveSettlement.Enabled = true;
            //btnDeleteSettlement.Enabled = true;

            //tbCMMManager.TabPages.Insert(4, tbpgMedicalBill);
            //tbCMMManager.SelectedIndex = 4;
            //SetTabPageCMMManagerSafely(5);




            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///
            //String strSqlQueryForSettlement = "select [dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement_type_code].[SettlementTypeValue], [dbo].[tbl_settlement].[Amount], " +
            //                      "[dbo].[tbl_settlement].[PersonalResponsibilityCredit], [dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate], " +
            //                      "[dbo].[tbl_payment_method].[PaymentMethod_Value], " +
            //                      "[dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
            //                      "[dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], [dbo].[tbl_settlement].[ACH_Reconciled], " +
            //                      "[dbo].[tbl_Credit_Card__c].[Name], [dbo].[tbl_settlement].[CMMCreditCardPaidDate], [dbo].[tbl_settlement].[CC_Reconciled], " +
            //                      "[dbo].[tbl_settlement].[AllowedAmount], [dbo].[tbl_settlement].[Notes] " +
            //                      "from [dbo].[tbl_settlement] inner join [dbo].[tbl_settlement_type_code] " +
            //                      "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
            //                      "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
            //                      "inner join [dbo].[tbl_Credit_Card__c] on [dbo].[tbl_settlement].[CMMCreditCard] = [dbo].[tbl_Credit_Card__c].[CreditCard_Id]" +
            //                      "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and [dbo].[tbl_settlement].[IsDeleted] = 0 " +
            //                      "order by [dbo].[tbl_settlement].[Name]";

            //SqlCommand cmdQueryForSettlement = new SqlCommand(strSqlQueryForSettlement, connRN);
            //cmdQueryForSettlement.CommandType = CommandType.Text;

            //cmdQueryForSettlement.Parameters.AddWithValue("@MedBillNo", MedBillNo);

            ////SqlDependency dependencySettlementInMedBill = new SqlDependency(cmdQueryForSettlement);
            ////dependencySettlementInMedBill.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillEditChange);

            //gvSettlementsInMedBill.Columns["SettlementAmount"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            //gvSettlementsInMedBill.Columns["PersonalResponsibility"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            //gvSettlementsInMedBill.Columns["AllowedAmount"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;

            //connRN.Open();
            //SqlDataReader rdrSettlement = cmdQueryForSettlement.ExecuteReader();

            ////while (gvSettlementsInMedBill.Rows.Count > 0)
            ////{
            ////    gvSettlementsInMedBill.Rows.RemoveAt(0);
            ////}

            //gvSettlementsInMedBill.Rows.Clear();
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /////
            //if (rdrSettlement.HasRows)
            //{
            //    while (rdrSettlement.Read())
            //    {

            //        DataGridViewRow row = new DataGridViewRow();
            //        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
            //        if (!rdrSettlement.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(0) });
            //        if (!rdrSettlement.IsDBNull(1))
            //        {
            //            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();

            //            for (int i = 0; i < lstSettlementType.Count; i++)
            //            {
            //                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
            //            }
            //            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
            //            {
            //                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
            //                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
            //            }

            //            row.Cells.Add(comboCellSettlementType);
            //        }
            //        else
            //        {
            //            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
            //            for (int i = 0; i < lstSettlementType.Count; i++)
            //            {
            //                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
            //            }

            //            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
            //            {
            //                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
            //                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
            //            }

            //            row.Cells.Add(comboCellSettlementType);
            //        }

            //        if (!rdrSettlement.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(2).ToString("C") });
            //        else
            //        {
            //            Decimal Zero = 0;
            //            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
            //        }


            //        if (!rdrSettlement.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(3).ToString("C") });
            //        else
            //        {
            //            Decimal Zero = 0;
            //            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
            //        }

            //        if (!rdrSettlement.IsDBNull(4))
            //        {

            //            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
            //            approvedCell.Value = rdrSettlement.GetBoolean(4);
            //            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            //            row.Cells.Add(approvedCell);
            //        }
            //        else row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });

            //        if (!rdrSettlement.IsDBNull(5)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(5).ToString("MM/dd/yyyy")) });
            //        else row.Cells.Add(new CalendarCell { Value = null });


            //        /////////////////////////////

            //        if (!rdrSettlement.IsDBNull(6))
            //        {
            //            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

            //            for (int i = 0; i < lstPaymentMethod.Count; i++)
            //            {
            //                comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
            //            }

            //            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
            //            {
            //                if (rdrSettlement.GetString(6) == comboCellPaymentMethod.Items[i].ToString())
            //                    comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
            //            }

            //            row.Cells.Add(comboCellPaymentMethod);
            //        }
            //        else
            //        {
            //            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

            //            for (int i = 0; i < lstPaymentMethod.Count; i++)
            //            {
            //                comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
            //            }

            //            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
            //            {
            //                if (rdrSettlement.GetString(6) == comboCellPaymentMethod.Items[i].ToString())
            //                    comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
            //            }

            //            row.Cells.Add(comboCellPaymentMethod);

            //        }

            //        if (!rdrSettlement.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(7) });
            //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
            //        if (!rdrSettlement.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(8).ToString("MM/dd/yyyy")) });
            //        else row.Cells.Add(new CalendarCell { Value = null });
            //        if (!rdrSettlement.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(9) });
            //        else row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
            //        if (!rdrSettlement.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(10) });
            //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
            //        if (!rdrSettlement.IsDBNull(11)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(11).ToString("MM/dd/yyyy")) });
            //        else row.Cells.Add(new CalendarCell { Value = null });
            //        if (!rdrSettlement.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(12) });
            //        else row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });

            //        if (!rdrSettlement.IsDBNull(13))
            //        {
            //            DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();

            //            for (int i = 0; i < lstCreditCardInfo.Count; i++)
            //            {
            //                comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
            //            }

            //            for (int i = 0; i < comboCellCreditCard.Items.Count; i++)
            //            {
            //                if (rdrSettlement.GetString(13) == comboCellCreditCard.Items[i].ToString())
            //                    comboCellCreditCard.Value = comboCellCreditCard.Items[i];
            //            }

            //            row.Cells.Add(comboCellCreditCard);
            //        }
            //        else
            //        {
            //            DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();

            //            for (int i = 0; i < lstCreditCardInfo.Count; i++)
            //            {
            //                comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
            //            }

            //            row.Cells.Add(comboCellCreditCard);
            //        }

            //        if (!rdrSettlement.IsDBNull(14)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(14).ToString("MM/dd/yyyy")) });
            //        else row.Cells.Add(new CalendarCell { Value = null });
            //        if (!rdrSettlement.IsDBNull(15))
            //        {
            //            DataGridViewCheckBoxCell ccReconciledCell = new DataGridViewCheckBoxCell();
            //            ccReconciledCell.Value = rdrSettlement.GetBoolean(15);
            //            ccReconciledCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;

            //            row.Cells.Add(ccReconciledCell);
            //        }
            //        else row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
            //        if (!rdrSettlement.IsDBNull(16)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(16).ToString("C") });
            //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
            //        if (!rdrSettlement.IsDBNull(17)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(17) });
            //        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });


            //        gvSettlementsInMedBill.Rows.Add(row);
            //    }
            //}
            //connRN.Close();

            //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
            //{
            //    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
            //    {
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckDate"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckReconciled"].ReadOnly = false;

            //        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["ACH_Date"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["ACH_Reconciled"].ReadOnly = true;

            //        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CMMCreditCardPaidDate"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CC_Reconciled"].ReadOnly = true;
            //    }

            //    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
            //    {
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckDate"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckReconciled"].ReadOnly = true;

            //        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["ACH_Date"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["ACH_Reconciled"].ReadOnly = false;

            //        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CMMCreditCardPaidDate"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CC_Reconciled"].ReadOnly = true;

            //    }

            //    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
            //    {
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckDate"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckReconciled"].ReadOnly = true;

            //        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["ACH_Date"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["ACH_Reconciled"].ReadOnly = true;

            //        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["CMMCreditCardPaidDate"].ReadOnly = false;
            //        gvSettlementsInMedBill.Rows[i].Cells["CC_Reconciled"].ReadOnly = false;
            //    }
            //    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "None")
            //    {
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckDate"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CheckReconciled"].ReadOnly = true;

            //        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["ACH_Date"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["ACH_Reconciled"].ReadOnly = true;

            //        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CMMCreditCardPaidDate"].ReadOnly = true;
            //        gvSettlementsInMedBill.Rows[i].Cells["CC_Reconciled"].ReadOnly = true;
            //    }
            //}

            //for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
            //{
            //    if (gvSettlementsInMedBill[2, i]?.Value?.ToString() == "Ineligible") gvSettlementsInMedBill.Rows[i].DefaultCellStyle.BackColor = Color.Red;
            //}

            //btnAddNewSettlement.Enabled = true;
            //btnEditSettlement.Enabled = true;
            //btnSaveSettlement.Enabled = true;
            //btnDeleteSettlement.Enabled = true;

            //tbCMMManager.SelectedIndex = 4;
        }

        private void btnDeleteCase_Click(object sender, EventArgs e)
        {
            Boolean bSelected = false;

            for (int i = 0; i < gvCaseViewCaseHistory.Rows.Count; i++)
            {
                if ((Boolean)gvCaseViewCaseHistory[0, i]?.Value == true) bSelected = true;
            }

            if (!bSelected)
            {
                MessageBox.Show("You have to select at least one Case to delete.", "Alert");
                return;
            }


            DialogResult dlgResult = MessageBox.Show("Are you sure to delete these cases?", "Alert", MessageBoxButtons.YesNo);

            if (dlgResult == DialogResult.Yes)
            {
                List<CaseInfo> lstCaseInfoToDelete = new List<CaseInfo>();

                for (int i = 0; i < gvCaseViewCaseHistory.Rows.Count; i++)
                {
                    if ((Boolean)gvCaseViewCaseHistory[0, i].Value == true)
                    {
                        lstCaseInfoToDelete.Add(new CaseInfo { CaseName = gvCaseViewCaseHistory[1, i].Value.ToString(), IndividualId = txtCaseHistoryIndividualID.Text.Trim() });
                    }
                }

                Boolean bMedBillExist = false;
                if (lstCaseInfoToDelete.Count > 0)
                {
                    for (int i = 0; i < lstCaseInfoToDelete.Count; i++)
                    {
                        String strSqlQueryForMedBillForCase = "select [dbo].[tbl_medbill].[BillNo] from [dbo].[tbl_medbill] where [dbo].[tbl_medbill].[Case_Id] = @CaseName";

                        SqlCommand cmdQueryForMedBillForCase = new SqlCommand(strSqlQueryForMedBillForCase, connRN3);
                        cmdQueryForMedBillForCase.CommandType = CommandType.Text;

                        cmdQueryForMedBillForCase.Parameters.AddWithValue("@CaseName", lstCaseInfoToDelete[i].CaseName);

                        if (connRN3.State != ConnectionState.Closed)
                        {
                            connRN3.Close();
                            connRN3.Open();
                        }
                        else if (connRN3.State == ConnectionState.Closed) connRN3.Open();
                        Object objMedBillNo = cmdQueryForMedBillForCase.ExecuteScalar();
                        if (connRN3.State != ConnectionState.Closed) connRN3.Close();

                        if (objMedBillNo != null)
                        {
                            bMedBillExist = true;
                        }
                    }
                    if (bMedBillExist)
                    {
                        MessageBox.Show("Cannot delete the Case. Delete Medical Bills in the Case first.", "Alert");
                        return;
                    }
                }

                if (lstCaseInfoToDelete.Count > 0)
                {
                    try
                    {
                        Boolean bError = false;
                        if (connRN3.State != ConnectionState.Closed)
                        {
                            connRN3.Close();
                            connRN3.Open();
                        }
                        else if (connRN3.State == ConnectionState.Closed) connRN3.Open();

                        SqlTransaction transDelete = connRN3.BeginTransaction();

                        for (int i = 0; i < lstCaseInfoToDelete.Count; i++)
                        {
                            String strSqlDeleteCaseSelected = "update [dbo].[tbl_case] set [dbo].[tbl_case].[IsDeleted] = 1 " +
                                                              "where [dbo].[tbl_case].[Case_Name] = @CaseName and [dbo].[tbl_case].[Contact_ID] = @IndividualId";

                            SqlCommand cmdDeleteCaseSelected = new SqlCommand(strSqlDeleteCaseSelected, connRN3, transDelete);
                            cmdDeleteCaseSelected.CommandType = CommandType.Text;

                            cmdDeleteCaseSelected.Parameters.AddWithValue("@CaseName", lstCaseInfoToDelete[i].CaseName);
                            cmdDeleteCaseSelected.Parameters.AddWithValue("@IndividualId", lstCaseInfoToDelete[i].IndividualId);

                            //if (connRN.State == ConnectionState.Closed) connRN.Open();

                            int nRowDeleted = cmdDeleteCaseSelected.ExecuteNonQuery();
                            if (nRowDeleted == 0) bError = true;

                        }
                        transDelete.Commit();
                        //if (bError == true) MessageBox.Show("Some of cases have not been deleted.", "Error");
                    }
                    catch (SqlException ex)
                    {
                        MessageBox.Show(ex.Message, "Error");
                    }
                    finally
                    {
                        if (connRN3.State != ConnectionState.Closed) connRN3.Close();
                    }
                }
                //else MessageBox.Show("No case is selected");
            }
            else return;
        }

        private void btnDeleteSettlement_Click(object sender, EventArgs e)
        {

            List<String> lstSettlements = new List<String>();
            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
            {
                if ((Boolean)gvSettlementsInMedBill[0, i]?.Value == true) lstSettlements.Add(gvSettlementsInMedBill[1, i]?.Value?.ToString());
            }

            if (lstSettlements.Count == 0)
            {
                MessageBox.Show("You have not selected settlement to delete");
                return;
            }

            DialogResult dr = MessageBox.Show("Are you sure to delete selected settlements?", "Alert", MessageBoxButtons.YesNo);

            if (dr == DialogResult.Yes)     // delete settlement
            {
                String MedBillNo = txtMedBillNo.Text.Trim();
                int nSettlementToDelete = lstSettlements.Count;
                int nDeletedSettlements = 0;

                foreach (String settlement in lstSettlements)
                {

                    String strSqlQueryForSettlement = "select [dbo].[tbl_settlement].[Name] from [dbo].[tbl_settlement] where [dbo].[tbl_settlement].[Name] = @SettlementNo";

                    SqlCommand cmdQueryForSettlement = new SqlCommand(strSqlQueryForSettlement, connRN5);
                    cmdQueryForSettlement.CommandType = CommandType.Text;

                    cmdQueryForSettlement.Parameters.AddWithValue("@SettlementNo", settlement);

                    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                    if (connRN5.State != ConnectionState.Closed)
                    {
                        connRN5.Close();
                        connRN5.Open();
                    }
                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //String Settlement = cmdQueryForSettlement.ExecuteScalar()?.ToString();
                    Object objSettlement = cmdQueryForSettlement.ExecuteScalar();

                    String Settlement = String.Empty;
                    if (objSettlement != null) Settlement = objSettlement.ToString();

                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();
                    if (Settlement == String.Empty)
                    {
                        for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                        {
                            if (settlement == gvSettlementsInMedBill[1, i]?.Value?.ToString())
                            {
                                gvSettlementsInMedBill.Rows.RemoveAt(i);
                                nDeletedSettlements++;
                            }
                        }
                    }
                    else
                    {
                        String strSqlQuerySettlementForApproved = "select [dbo].[tbl_settlement].[Approved] from [dbo].[tbl_settlement] where [dbo].[tbl_settlement].[Name] = @SettlementName";

                        SqlCommand cmdQuerySettlementForApproved = new SqlCommand(strSqlQuerySettlementForApproved, connRN5);
                        cmdQuerySettlementForApproved.CommandType = CommandType.Text;

                        cmdQuerySettlementForApproved.Parameters.AddWithValue("@SettlementName", Settlement);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                        Boolean bApproved = false;
                        SqlDataReader rdrSettlementApproved = cmdQuerySettlementForApproved.ExecuteReader();
                        if (rdrSettlementApproved.HasRows)
                        {
                            rdrSettlementApproved.Read();

                            if (!rdrSettlementApproved.IsDBNull(0)) bApproved = rdrSettlementApproved.GetBoolean(0);
                        }
                        rdrSettlementApproved.Close();
                        if (connRN5.State != ConnectionState.Closed) connRN.Close();

                        if (bApproved == true &&
                            (LoggedInUserRole == UserRole.FDStaff || LoggedInUserRole == UserRole.NPStaff || LoggedInUserRole == UserRole.RNStaff))
                        {
                            MessageBox.Show("The Settlement is approved and cannot be deleted.", "Alert");
                            return;
                        }

                        if (bApproved == true &&
                            (LoggedInUserRole == UserRole.FDManager || LoggedInUserRole == UserRole.NPManager || LoggedInUserRole == UserRole.RNManager))
                        {
                            MessageBox.Show("The Settlement is approved and cannot be deleted.", "Alert");
                            return;
                        }

                        if (bApproved == false ||
                            (bApproved == true && LoggedInUserRole == UserRole.SuperAdmin))
                        {
                            String strSqlUpdateSettlement = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[IsDeleted] = 1 " +
                                                            "where [dbo].[tbl_settlement].[Name] = @SettlementNo and " +
                                                            "[dbo].[tbl_settlement].[MedicalBillID] = @MedicalBillNo";

                            SqlCommand cmdUpdateSettlement = new SqlCommand(strSqlUpdateSettlement, connRN5);
                            cmdUpdateSettlement.CommandType = CommandType.Text;

                            cmdUpdateSettlement.Parameters.AddWithValue("@SettlementNo", settlement);
                            cmdUpdateSettlement.Parameters.AddWithValue("@MedicalBillNo", MedBillNo);

                            //if (connRN.State == ConnectionState.Closed) connRN.Open();
                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            int nRowAffected = cmdUpdateSettlement.ExecuteNonQuery();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (nRowAffected == 1) nDeletedSettlements++;
                        }
                    }
                }

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "Ineligible")
                    {
                        gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                        gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                    }
                }

                if (nDeletedSettlements == nSettlementToDelete)
                {
                    MessageBox.Show("The settlements have been deleted.");
                }
                else MessageBox.Show("Some of settlements have not been deleted.");
            }
            else if (dr == DialogResult.No)     // do not delete settlement
            {
                return;
            }
        }

        private void btnEditCaseUnderProcess_Click(object sender, EventArgs e)
        {
            //if (tbCMMManager.TabPages.Contains(tbpgCreateCase))
            //{
            //    MessageBox.Show("The Case page is already opened.", "Alert", MessageBoxButtons.OK);
            //    return;
            //}
            //else
            //{
            if (gvProcessingCaseNo.Rows.Count > 0)
            {
                int nSelected = 0;
                int nRowSelected = 0;
                for (int i = 0; i < gvProcessingCaseNo.Rows.Count; i++)
                {
                    if ((Boolean)gvProcessingCaseNo["CaseSelected", i].Value == true)
                    {
                        nRowSelected = i;
                        nSelected++;
                    }
                }

                if (nSelected == 0)
                {
                    MessageBox.Show("No Case selected", "Alert", MessageBoxButtons.OK);
                    return;
                }
                else if (nSelected > 1)
                {
                    MessageBox.Show("More than one case selected", "Alert", MessageBoxButtons.OK);
                    return;
                }
                else if (nSelected == 1)
                {
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    String strSqlQueryForCaseStatus = "select [dbo].[tbl_case_status_code].[CaseStatusValue] from [dbo].[tbl_case_status_code]";
                    SqlCommand cmdQueryForCaseStatus = new SqlCommand(strSqlQueryForCaseStatus, connRN2);
                    cmdQueryForCaseStatus.CommandType = CommandType.Text;

                    if (connRN2.State != ConnectionState.Closed)
                    {
                        connRN2.Close();
                        connRN2.Open();
                    }
                    else if (connRN2.State == ConnectionState.Closed) connRN2.Open();

                    SqlDataReader rdrCaseStatus = cmdQueryForCaseStatus.ExecuteReader();
                    cbCaseStatus.Items.Clear();
                    if (rdrCaseStatus.HasRows)
                    {
                        while (rdrCaseStatus.Read())
                        {
                            cbCaseStatus.Items.Add(rdrCaseStatus.GetString(0));
                        }
                    }
                    rdrCaseStatus.Close();
                    if (connRN2.State != ConnectionState.Closed) connRN2.Close();



                    String CaseIdForIndividual = gvProcessingCaseNo["CaseIdForIndividual", nRowSelected]?.Value?.ToString();
                    String IndividualIdForCase = txtIndividualID.Text.Trim();

                    String strSqlQueryForCase = "select [dbo].[tbl_case].[Case_Name], [dbo].[tbl_case].[Contact_ID], [dbo].[tbl_case].[CreateDate], [dbo].[tbl_case].[ModifiDate], " +
                                                "[dbo].[tbl_case].[CreateStaff], [dbo].[tbl_case].[ModifiStaff], [dbo].[tbl_case].[Case_status], " +
                                                "[dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Form_File_Name], [dbo].[tbl_case].[NPF_Form_Destination_File_Name], [dbo].[tbl_case].[NPF_Receiv_Date], " +
                                                "[dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Form_File_Name], [dbo].[tbl_case].[IB_Form_Destination_File_Name], [dbo].[tbl_case].[IB_Receiv_Date], " +
                                                "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Form_File_Name], [dbo].[tbl_case].[POP_Form_Destination_File_Name], [dbo].[tbl_case].[POP_Receiv_Date], " +
                                                "[dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Form_File_Name], [dbo].[tbl_case].[MedRec_Form_Destination_File_Name], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
                                                "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Form_File_Name], [dbo].[tbl_case].[Unknown_Form_Destination_File_Name], [dbo].[tbl_case].[Unknown_Receiv_Date], " +
                                                "[dbo].[tbl_case].[Case_status], [dbo].[tbl_case].[Note] " +
                                                "from [dbo].[tbl_case] where [dbo].[tbl_case].[Case_Name] = @CaseName and [dbo].[tbl_case].[Contact_ID] = @IndividualID";

                    SqlCommand cmdQueryForCase = new SqlCommand(strSqlQueryForCase, connRN2);
                    cmdQueryForCase.CommandType = CommandType.Text;

                    cmdQueryForCase.Parameters.AddWithValue("@CaseName", CaseIdForIndividual);
                    cmdQueryForCase.Parameters.AddWithValue("@IndividualID", IndividualIdForCase);

                    if (connRN2.State != ConnectionState.Closed)
                    {
                        connRN2.Close();
                        connRN2.Open();
                    }
                    else if (connRN2.State == ConnectionState.Closed) connRN2.Open();

                    SqlDataReader rdrCaseForIndividual = cmdQueryForCase.ExecuteReader();
                    if (rdrCaseForIndividual.HasRows)
                    {
                        //tbCMMManager.TabPages.Insert(3, tbpgCaseView);
                        //tbCMMManager.TabPages.Insert(4, tbpgCreateCase);

                        rdrCaseForIndividual.Read();

                        txtCaseName.Text = rdrCaseForIndividual.GetString(0);
                        txtCaseIndividualID.Text = rdrCaseForIndividual.GetString(1);

                        // NPF Form
                        if (rdrCaseForIndividual.GetBoolean(7) == true) chkNPF_CaseCreationPage.Checked = true;
                        if (!rdrCaseForIndividual.IsDBNull(8)) txtNPFFormFilePath.Text = rdrCaseForIndividual.GetString(8);
                        if (!rdrCaseForIndividual.IsDBNull(9)) strNPFormFilePathDestination = rdrCaseForIndividual.GetString(9);
                        if (!rdrCaseForIndividual.IsDBNull(10))
                        {
                            dtpNPFReceivedDate.Checked = true;
                            dtpNPFReceivedDate.Value = rdrCaseForIndividual.GetDateTime(10);
                            dtpNPFReceivedDate.Text = rdrCaseForIndividual.GetDateTime(10).ToString("MM/dd/yyyy");
                        }
                            //txtNPFUploadDate.Text = rdrCaseForIndividual.GetDateTime(10).ToString("MM/dd/yyyy");

                        // IB Form
                        if (rdrCaseForIndividual.GetBoolean(11) == true) chkIB_CaseCreationPage.Checked = true;
                        if (!rdrCaseForIndividual.IsDBNull(12)) txtIBFilePath.Text = rdrCaseForIndividual.GetString(12);
                        if (!rdrCaseForIndividual.IsDBNull(13)) strIBFilePathDestination = rdrCaseForIndividual.GetString(13);
                        if (!rdrCaseForIndividual.IsDBNull(14))
                        {
                            dtpIBReceivedDate.Checked = true;
                            dtpIBReceivedDate.Value = rdrCaseForIndividual.GetDateTime(14);
                            dtpIBReceivedDate.Text = rdrCaseForIndividual.GetDateTime(14).ToString("MM/dd/yyyy");
                        }
                            //txtIBUploadDate.Text = rdrCaseForIndividual.GetDateTime(14).ToString("MM/dd/yyyy");

                        // POP Form
                        if (rdrCaseForIndividual.GetBoolean(15) == true) chkPoP_CaseCreationPage.Checked = true;
                        if (!rdrCaseForIndividual.IsDBNull(16)) txtPopFilePath.Text = rdrCaseForIndividual.GetString(16);
                        if (!rdrCaseForIndividual.IsDBNull(17)) strPopFilePathDestination = rdrCaseForIndividual.GetString(17);
                        if (!rdrCaseForIndividual.IsDBNull(18))
                        {
                            dtpPoPReceivedDate.Checked = true;
                            dtpPoPReceivedDate.Value = rdrCaseForIndividual.GetDateTime(18);
                            dtpPoPReceivedDate.Text = rdrCaseForIndividual.GetDateTime(18).ToString("MM/dd/yyyy");
                        }
                            //txtPoPUploadDate.Text = rdrCaseForIndividual.GetDateTime(18).ToString("MM/dd/yyyy");

                        // Med Rec Form
                        if (rdrCaseForIndividual.GetBoolean(19) == true) chkMedicalRecordCaseCreationPage.Checked = true;
                        if (!rdrCaseForIndividual.IsDBNull(20)) txtMedicalRecordFilePath.Text = rdrCaseForIndividual.GetString(20);
                        if (!rdrCaseForIndividual.IsDBNull(21)) strMedRecordFilePathDestination = rdrCaseForIndividual.GetString(21);
                        if (!rdrCaseForIndividual.IsDBNull(22))
                        {
                            dtpMRReceivedDate.Checked = true;
                            dtpMRReceivedDate.Value = rdrCaseForIndividual.GetDateTime(22);
                            dtpMRReceivedDate.Text = rdrCaseForIndividual.GetDateTime(22).ToString("MM/dd/yyyy");
                        }
                            //txtMRUploadDate.Text = rdrCaseForIndividual.GetDateTime(22).ToString("MM/dd/yyyy");

                        // Unknown Doc Form
                        if (rdrCaseForIndividual.GetBoolean(23) == true) chkOtherDocCaseCreationPage.Checked = true;
                        if (!rdrCaseForIndividual.IsDBNull(24)) txtOtherDocumentFilePath.Text = rdrCaseForIndividual.GetString(24);
                        if (!rdrCaseForIndividual.IsDBNull(25)) strUnknownDocFilePathDestination = rdrCaseForIndividual.GetString(25);
                        if (!rdrCaseForIndividual.IsDBNull(26))
                        {
                            dtpOtherDocReceivedDate.Checked = true;
                            dtpOtherDocReceivedDate.Value = rdrCaseForIndividual.GetDateTime(26);
                            dtpOtherDocReceivedDate.Text = rdrCaseForIndividual.GetDateTime(26).ToString("MM/dd/yyyy");
                        }
                            //txtOtherDocUploadDate.Text = rdrCaseForIndividual.GetDateTime(26).ToString("MM/dd/yyyy");

                        // Case status
                        //if (rdrCaseForIndividual.GetBoolean(27) == true) txtCaseStatus.Text = "Complete and Ready";
                        //else txtCaseStatus.Text = "Pending - Additional Documents required";

                        if (!rdrCaseForIndividual.IsDBNull(27))
                        {
                            switch (rdrCaseForIndividual.GetInt16(27))
                            {
                                case (int)CaseStatus.OnGoing:
                                    cbCaseStatus.SelectedIndex = (int)CaseStatus.OnGoing;
                                    break;
                                case (int)CaseStatus.Processing:
                                    cbCaseStatus.SelectedIndex = (int)CaseStatus.Processing;
                                    break;
                                case (int)CaseStatus.Closed:
                                    cbCaseStatus.SelectedIndex = (int)CaseStatus.Closed;
                                    break;
                            }
                        }

                        // Note
                        if (!rdrCaseForIndividual.IsDBNull(28)) txtNoteOnCase.Text = rdrCaseForIndividual.GetString(28);

                        // Individual Name
                        //tbCMMManager.TabPages.Insert(3, tbpgCaseView);
                        //tbCMMManager.TabPages.Insert(4, tbpgCreateCase);
                        //tbCMMManager.SelectedIndex = 4;
                    }
                    rdrCaseForIndividual.Close();
                    if (connRN2.State != ConnectionState.Closed) connRN2.Close();

                    String strSqlQueryForMedBillInCase = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], " +
                                        "[dbo].[tbl_medbill].[CreatedDate], [dbo].[tbl_CreateStaff].[Staff_Name], " +
                                        "[dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                        "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], [dbo].[tbl_medbill].[Balance] " +
                                        "from [dbo].[tbl_medbill] " +
                                        "inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId] " +
                                        "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                        "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                        "where [dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                                        "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and " +
                                        "[dbo].[tbl_medbill].[IsDeleted] = 0";



                    SqlCommand cmdQueryForMedBillsInCase = new SqlCommand(strSqlQueryForMedBillInCase, connRN2);
                    cmdQueryForMedBillsInCase.CommandType = CommandType.Text;

                    cmdQueryForMedBillsInCase.Parameters.AddWithValue("@CaseName", CaseIdForIndividual);
                    cmdQueryForMedBillsInCase.Parameters.AddWithValue("@IndividualId", IndividualIdForCase);

                    SqlDependency dependencyMedBillInCase = new SqlDependency(cmdQueryForMedBillsInCase);
                    dependencyMedBillInCase.OnChange += new OnChangeEventHandler(OnMedBillsInCaseChange);

                    if (connRN2.State != ConnectionState.Closed)
                    {
                        connRN2.Close();
                        connRN2.Open();
                    }
                    else if (connRN2.State == ConnectionState.Closed) connRN2.Open();

                    SqlDataReader rdrMedBillInCase = cmdQueryForMedBillsInCase.ExecuteReader();

                    gvCasePageMedBills.Rows.Clear();
                    if (rdrMedBillInCase.HasRows)
                    {
                        while (rdrMedBillInCase.Read())
                        {
                            DataGridViewRow row = new DataGridViewRow();

                            row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(0) });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(1) });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(2).ToString("MM/dd/yyyy") });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(3) });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDateTime(4).ToString("MM/dd/yyyy") });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetString(5) });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(6).ToString("C") });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(7).ToString("C") });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(8).ToString("C") });
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrMedBillInCase.GetDecimal(9).ToString("C") });

                            gvCasePageMedBills.Rows.Add(row);
                        }
                    }
                    rdrMedBillInCase.Close();
                    if (connRN2.State != ConnectionState.Closed) connRN2.Close();

                    btnCaseCreationSaveUpper.Enabled = true;
                    //btnCaseCreationLowerSave.Enabled = true;

                    tbCMMManager.SelectedTab = tbpgCreateCase;
                }
            }
            //}
        }

        private void btnMedicalProviderInfo_Click(object sender, EventArgs e)
        {
            frmMedicalProviderInfo frmMedProviderInfo = new frmMedicalProviderInfo();

            frmMedProviderInfo.StartPosition = FormStartPosition.CenterParent;
            frmMedProviderInfo.ShowDialog();
        }

        private void frmCMMManager_Shown(object sender, EventArgs e)
        {
            //txtMedBillGuarantor.TextChanged += new EventHandler(txtMedBillGuarantor_TextChanged);
            //txtMedBill_Illness.TextChanged += new EventHandler(txtMedBill_Illness_TextChanged);
            //txtMedBill_Incident.TextChanged += new EventHandler(txtMedBill_Incident_TextChanged);
            //txtMedBillAmount.TextChanged += new EventHandler(txtMedBillAmount_TextChanged);
            //txtBalance.TextChanged += new EventHandler(txtBalance_TextChanged);
            //txtPrescriptionName.TextChanged += new EventHandler(txtPrescriptionName_TextChanged);
            //txtPrescriptionNo.TextChanged += new EventHandler(txtPrescriptionNo_TextChanged);
            //txtPrescriptionDescription.TextChanged += new EventHandler(txtPrescriptionDescription_TextChanged);
            //txtNumPhysicalTherapy.TextChanged += new EventHandler(txtNumPhysicalTherapy_TextChanged);
            //cbMedicalBillNote1.SelectedIndexChanged += new EventHandler(cbMedicalBillNote1_SelectedIndexChanged);
            //cbMedicalBillNote2.SelectedIndexChanged += new EventHandler(cbMedicalBillNote2_SelectedIndexChanged);
            //cbMedicalBillNote3.SelectedIndexChanged += new EventHandler(cbMedicalBillNote3_SelectedIndexChanged);
            //cbMedicalBillNote4.SelectedIndexChanged += new EventHandler(cbMedicalBillNote4_SelectedIndexChanged);
            //txtMedicalBillNote1.TextChanged += new EventHandler(txtMedicalBillNote1_TextChanged);
            //txtMedicalBillNote2.TextChanged += new EventHandler(txtMedicalBillNote2_TextChanged);
            //txtMedicalBillNote3.TextChanged += new EventHandler(txtMedicalBillNote3_TextChanged);
            //txtMedicalBillNote4.TextChanged += new EventHandler(txtMedicalBillNote4_TextChanged);


            //dtpBillDate.ValueChanged += new EventHandler(dtpBillDate_ValueChanged);
            //dtpDueDate.ValueChanged += new EventHandler(dtpDueDate_ValueChanged);
        }

        private void txtMedBillAmount_TextChanged(object sender, EventArgs e)
        {
            TextBox txtAmount = (TextBox)sender;

            txtBalance.Text = txtAmount.Text;
        }

        private void comboMedBillType_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;

            if (comboBox.SelectedItem.ToString() == "Medical Bill")
            {
                lblPrescriptionName.Visible = false;
                lblPrescriptionDescription.Visible = false;
                lblPrescriptionNote.Visible = false;
                lblNumberOfMedication.Visible = false;

                txtPrescriptionName.Visible = false;
                txtPrescriptionDescription.Visible = false;
                txtPrescriptionNote.Visible = false;
                txtNumberOfMedication.Visible = false;

                lblNumberOfPhysicalTheraph.Visible = false;
                txtNumPhysicalTherapy.Visible = false;
                lblPhysicalTherapyRxNote.Visible = false;
                txtPhysicalTherapyRxNote.Visible = false;

                rbInpatient.Visible = true;
                rbOutpatient.Visible = true;

                lblMedBillNote.Visible = true;
                txtMedBillNote.Visible = true;

                lblPendingReason.Visible = true;
                comboPendingReason.Visible = true;

                lblIneligibleReason.Visible = true;
                comboIneligibleReason.Visible = true;

            }

            if (comboBox.SelectedItem.ToString() == "Prescription")
            {
                lblMedBillNote.Visible = false;
                txtMedBillNote.Visible = false;

                lblNumberOfPhysicalTheraph.Visible = false;
                txtNumPhysicalTherapy.Visible = false;

                lblPhysicalTherapyRxNote.Visible = false;
                txtPhysicalTherapyRxNote.Visible = false;

                lblPendingReason.Visible = false;
                comboPendingReason.Visible = false;

                lblIneligibleReason.Visible = false;
                comboIneligibleReason.Visible = false;

                rbInpatient.Visible = false;
                rbOutpatient.Visible = false;

                lblPrescriptionName.Visible = true;
                lblPrescriptionDescription.Visible = true;
                lblPrescriptionNote.Visible = true;
                lblNumberOfMedication.Visible = true;

                txtPrescriptionName.Visible = true;
                txtPrescriptionDescription.Visible = true;
                txtPrescriptionNote.Visible = true;
                txtNumberOfMedication.Visible = true;

            }

            if (comboBox.SelectedItem.ToString() == "Physical Therapy")
            {
                lblMedBillNote.Visible = false;
                txtMedBillNote.Visible = false;

                lblPrescriptionName.Visible = false;
                lblPrescriptionDescription.Visible = false;
                lblPrescriptionNote.Visible = false;
                lblNumberOfMedication.Visible = false;

                txtPrescriptionName.Visible = false;
                txtPrescriptionDescription.Visible = false;
                txtPrescriptionNote.Visible = false;
                txtNumberOfMedication.Visible = false;

                lblPendingReason.Visible = false;
                comboPendingReason.Visible = false;

                lblIneligibleReason.Visible = false;
                comboIneligibleReason.Visible = false;

                rbInpatient.Visible = false;
                rbOutpatient.Visible = false;

                lblNumberOfPhysicalTheraph.Visible = true;

                txtNumPhysicalTherapy.Visible = true;
                lblPhysicalTherapyRxNote.Visible = true;
                txtPhysicalTherapyRxNote.Visible = true;

            }

            if (comboBox.SelectedItem.ToString() == "Medical Record")
            {
                lblPrescriptionName.Visible = false;
                lblPrescriptionDescription.Visible = false;
                lblPrescriptionNote.Visible = false;
                lblNumberOfMedication.Visible = false;

                txtPrescriptionName.Visible = false;
                txtPrescriptionDescription.Visible = false;
                txtPrescriptionNote.Visible = false;
                txtNumberOfMedication.Visible = false;

                lblNumberOfPhysicalTheraph.Visible = false;
                txtNumPhysicalTherapy.Visible = false;
                lblPhysicalTherapyRxNote.Visible = false;
                txtPhysicalTherapyRxNote.Visible = false;

                rbInpatient.Visible = true;
                rbOutpatient.Visible = true;

                lblMedBillNote.Visible = true;
                txtMedBillNote.Visible = true;

                lblPendingReason.Visible = true;
                comboPendingReason.Visible = true;

                lblIneligibleReason.Visible = true;
                comboIneligibleReason.Visible = true;
            }
            
        }

        private void btnSearch_Click(object sender, EventArgs e)
        {
            if (gvIndividualSearched.Rows.Count > 0) gvIndividualSearched.DataSource = null;

            tbCMMManager.SelectedTab = tbpgSearchResult;

            String strTextSearched = txtSearch.Text.Trim();

            String strSqlSearchContact = "select [dbo].[contact].[Individual_ID__C] as [Individual No.], " +
                             "concat([dbo].[contact].[LastName], ', ', [dbo].[contact].[FirstName], ' ', [dbo].[contact].[MiddleName]) as Name, " +
                             "[dbo].[membership].[Name] as Membership, [dbo].[contact].[Social_Security_Number__c] as [SSN], " +
                             "[dbo].[contact].[Legacy_Database_Individual_ID__C] as [CRM No.], " +
                             "[dbo].[contact].[c4g_Membership_Status__C] as [Membership Status], " +
                             "[dbo].[contact].[Membership_Ind_Start_Date__C] As [Membership Start Date], " +
                             "[dbo].[contact].[Membership_Cancelled_Date__C] As [Membership Cancel Date], " +
                             "[dbo].[contact].[BirthDate], [dbo].[contact].[cmm_Gender__C] as [Gender], " +
                             "[dbo].[contact].[Household_Role__C] as [House Type], " +
                             "[dbo].[program].[Name] as [Program Name], " +
                             "[dbo].[contact].[MailingStreet], [dbo].[contact].[MailingCity], [dbo].[contact].[MailingState], [dbo].[contact].[MailingPostalCode], " +
                             "[dbo].[contact].[OtherStreet], [dbo].[contact].[OtherCity], [dbo].[contact].[OtherState], [dbo].[contact].[OtherPostalCode], " +
                             "[dbo].[Church].[Name] as [Church Name], " +
                             "[dbo].[contact].[Email] " +
                             "from contact " +
                             "left join membership on contact.c4g_Membership__C = membership.ID " +
                             "left join account on contact.AccountID = account.ID " +
                             "left join program on contact.c4g_plan__c = program.ID " +
                             "left join Church on contact.c4g_Church__C = Church.ID " +
                             "where contact.LastName like '%' + @LastName + '%' or " +
                             "contact.FirstName like '%' + @FirstName + '%' or " +
                             "contact.MailingStreet like '%' + @MailingStreet + '%' or " +
                             "contact.Birthdate like '%' + @Birthdate + '%' or " +
                             "contact.Household_Role__C like '%' + @HouseholdRole + '%' or " +
                             "contact.Membership_Number__c like '%' + @MembershipID + '%' or " +
                             "contact.c4g_Membership_Status__C like '%' + @MembershipStatus + '%' or " +
                             "contact.Social_Security_Number__C like '%' + @SSN + '%' or " +
                             "contact.Individual_ID__C like '%' + @IndividualID + '%' or " +
                             "contact.Legacy_Database_Individual_ID__C like '%' + @LagacyIndividualID + '%'";

            SqlCommand cmdQueryForIndividual = new SqlCommand(strSqlSearchContact, connSalesforce);
            cmdQueryForIndividual.CommandType = CommandType.Text;

            cmdQueryForIndividual.Parameters.AddWithValue("@LastName", strTextSearched);
            cmdQueryForIndividual.Parameters.AddWithValue("@FirstName", strTextSearched);
            cmdQueryForIndividual.Parameters.AddWithValue("@MailingStreet", strTextSearched);
            cmdQueryForIndividual.Parameters.AddWithValue("@Birthdate", strTextSearched);
            cmdQueryForIndividual.Parameters.AddWithValue("@HouseholdRole", strTextSearched);
            cmdQueryForIndividual.Parameters.AddWithValue("@MembershipID", strTextSearched);
            cmdQueryForIndividual.Parameters.AddWithValue("@MembershipStatus", strTextSearched);
            cmdQueryForIndividual.Parameters.AddWithValue("@SSN", strTextSearched);
            cmdQueryForIndividual.Parameters.AddWithValue("@IndividualID", strTextSearched);
            cmdQueryForIndividual.Parameters.AddWithValue("@LagacyIndividualID", strTextSearched);

            DataTable dtIndividual = new DataTable();
            SqlDataAdapter daIndividual = new SqlDataAdapter(cmdQueryForIndividual);
            daIndividual.Fill(dtIndividual);

            gvIndividualSearched.DataSource = dtIndividual;

            //String strTextSearched = txtSearch.Text.Trim();

            //String strSqlSearchCase = "select [dbo].[tbl_case].[Case_Name], [dbo].[tbl_case].[Contact_ID], [dbo].[tbl_case].[Case_status], " +
            //                          "[dbo].[tbl_case].[CreateDate], [dbo].[tbl_case].[CreateStaff], " +
            //                          "[dbo].[tbl_case].[ModifiDate], [dbo].[tbl_case].[ModifiStaff], " +
            //                          "[dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Form_File_Name], [dbo].[tbl_case].[NPF_Receiv_Date], " +
            //                          "[dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Form_File_Name], [dbo].[tbl_case].[IB_Receiv_Date], " +
            //                          "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Form_File_Name], [dbo].[tbl_case].[POP_Receiv_Date], " +
            //                          "[dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Form_File_Name], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
            //                          "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Form_File_Name], [dbo].[tbl_case].[Unknown_Receiv_Date], " +
            //                          "[dbo].[tbl_case].[AddBill_Form], [dbo].[tbl_case].[AddBill_Receiv_Date] " +
            //                          "from  [dbo].[tbl_case] " +
            //                          "where [dbo].[tbl_case].[ID] like '%' + @Id + '%' or " +
            //                          "[dbo].[tbl_case].[Case_Name] like '%' + @CaseName + '%' or " +
            //                          "[dbo].[tbl_case].[Contact_ID] like '%' + @ContactId + '%' or " +
            //                          "[dbp].[tbl_case].[Log_ID] like '%' + @LogID + '%'";

            //SqlCommand cmdQueryForCase = new SqlCommand(strSqlSearchCase, connRN);
            //cmdQueryForCase.CommandType = CommandType.Text;

            btnIndViewUpdateUpperRight.Enabled = false;
            //btnIndViewUpdateLowerRight.Enabled = false;
            btnCaseCreationSaveUpper.Enabled = false;
            //btnCaseCreationLowerSave.Enabled = false;
            btnMedBillCreatePgUpperSave.Enabled = false;
            //btnMedBillCreationPgLowerSave.Enabled = false;

        }

        private void gvIndividualSearched_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            int nRowSelected = e.RowIndex;

            if (nRowSelected > -1)
            {

                InitializedIndividualBankInfo();
                InitializeIndividualInfo();
                InitializeCaseForm();
                InitializeMedBillForm();

                DisableCaseForm();
                DisableMedicalBillForm();
                // also clear case form and med bill form

                EnableIndividualView();
                EnableCaseView();
                EnableIllnessView();
                EnableIncidentView();
                EnableMedBillView();

                //InitializeMedBillTabOnNewMedBill();
                //if (tbCMMManager.TabPages.Contains(tbpgIndividual))
                //{
                //    MessageBox.Show("Individual Page is open. Close Individual page first.", "Alert");
                //    return;
                //}

                //int nRowSelected = gvIndividual.CurrentCell.RowIndex;

                //IndividualSearched.strID = gvIndividualSearched["ID", nRowSelected].Value.ToString();
                //IndividualSearched.strAccountID = gvIndividualSearched["AccountID", nRowSelected].Value.ToString();
                //IndividualSearched.strLastName = gvIndividualSearched["LASTNAME", nRowSelected].Value.ToString();
                //IndividualSearched.strFirstName = gvIndividualSearched["FIRSTNAME", nRowSelected].Value.ToString();
                //IndividualSearched.strSalutation = gvIndividualSearched["SALUTATION", nRowSelected].Value.ToString();

                IndividualSearched.strIndividualID = gvIndividualSearched["Individual No.", nRowSelected]?.Value?.ToString();
                IndividualForMedBill.strIndividualID = gvIndividualSearched["Individual No.", nRowSelected]?.Value?.ToString();


                String IndividualName = gvIndividualSearched["Name", nRowSelected]?.Value?.ToString().Trim();
                IndividualSearched.strLastName = IndividualName.Substring(0, IndividualName.IndexOf(','));
                IndividualSearched.strFirstName = IndividualName.Substring(IndividualName.IndexOf(',') + 2);
                if (IndividualSearched.strFirstName.IndexOf(' ') > 0) IndividualSearched.strFirstName = IndividualSearched.strFirstName.Substring(0, IndividualSearched.strFirstName.IndexOf(' '));
                String TempIndividualName = IndividualName.Substring(IndividualName.IndexOf(' ') + 1);
                IndividualSearched.strMiddleName = String.Empty;
                if (TempIndividualName.IndexOf(' ') > 0)
                {
                    IndividualSearched.strMiddleName = TempIndividualName.Substring(TempIndividualName.IndexOf(' ') + 1);
                }

                String IndividualNameForMedBill = gvIndividualSearched["Name", nRowSelected]?.Value?.ToString().Trim();
                IndividualForMedBill.strLastName = IndividualNameForMedBill.Substring(0, IndividualName.IndexOf(','));
                IndividualForMedBill.strFirstName = IndividualNameForMedBill.Substring(IndividualName.IndexOf(',') + 2);
                if (IndividualForMedBill.strFirstName.IndexOf(' ') > 0) IndividualForMedBill.strFirstName = IndividualForMedBill.strFirstName.Substring(0, IndividualForMedBill.strFirstName.IndexOf(' '));
                String TempIndividualNameForMedBill = IndividualNameForMedBill.Substring(IndividualNameForMedBill.IndexOf(' ') + 1);
                IndividualForMedBill.strMiddleName = String.Empty;
                if (TempIndividualName.IndexOf(' ') > 0)
                {
                    IndividualForMedBill.strMiddleName = TempIndividualNameForMedBill.Substring(TempIndividualNameForMedBill.IndexOf(' ') + 1);
                }


                IndividualSearched.strMembershipID = gvIndividualSearched["Membership", nRowSelected]?.Value?.ToString();
                IndividualSearched.strSSN = gvIndividualSearched["SSN", nRowSelected]?.Value?.ToString();
                IndividualSearched.strLegacyIndividualID = gvIndividualSearched["CRM No.", nRowSelected]?.Value?.ToString();

                IndividualForMedBill.strMembershipID = gvIndividualSearched["Membership", nRowSelected]?.Value?.ToString();
                IndividualForMedBill.strSSN = gvIndividualSearched["SSN", nRowSelected]?.Value?.ToString();
                IndividualForMedBill.strLegacyIndividualID = gvIndividualSearched["CRM No.", nRowSelected]?.Value?.ToString();

                switch (gvIndividualSearched["Membership Status", nRowSelected].Value.ToString())
                {
                    case "Pending":
                        IndividualSearched.membershipStatus = MembershipStatus.Pending;
                        IndividualForMedBill.membershipStatus = MembershipStatus.Pending;
                        break;
                    case "Applied":
                        IndividualSearched.membershipStatus = MembershipStatus.Applied;
                        IndividualForMedBill.membershipStatus = MembershipStatus.Applied;
                        break;
                    case "Active":
                        IndividualSearched.membershipStatus = MembershipStatus.Active;
                        IndividualForMedBill.membershipStatus = MembershipStatus.Active;
                        break;
                    case "Past Due":
                        IndividualSearched.membershipStatus = MembershipStatus.PastDue;
                        IndividualForMedBill.membershipStatus = MembershipStatus.PastDue;
                        break;
                    case "Inactive":
                        IndividualSearched.membershipStatus = MembershipStatus.Inactive;
                        IndividualForMedBill.membershipStatus = MembershipStatus.Inactive;
                        break;
                    case "Cancelled Req.":
                        IndividualSearched.membershipStatus = MembershipStatus.CancelledReq;
                        IndividualForMedBill.membershipStatus = MembershipStatus.CancelledReq;
                        break;
                    case "Cancelled by Member":
                        IndividualSearched.membershipStatus = MembershipStatus.CancelledByMember;
                        IndividualForMedBill.membershipStatus = MembershipStatus.CancelledByMember;
                        break;
                    case "Terminated by CMM":
                        IndividualSearched.membershipStatus = MembershipStatus.TerminatedByCMM;
                        IndividualForMedBill.membershipStatus = MembershipStatus.TerminatedByCMM;
                        break;
                    case "Hold":
                        IndividualSearched.membershipStatus = MembershipStatus.Hold;
                        IndividualForMedBill.membershipStatus = MembershipStatus.Hold;
                        break;
                    case "Incomplete":
                        IndividualSearched.membershipStatus = MembershipStatus.Incomplete;
                        IndividualForMedBill.membershipStatus = MembershipStatus.Incomplete;
                        break;
                    default:
                        break;
                }

                if (gvIndividualSearched["Membership Start Date", nRowSelected]?.Value?.ToString() != String.Empty)
                {
                    IndividualSearched.dtMembershipIndStartDate = DateTime.Parse(gvIndividualSearched["Membership Start Date", nRowSelected]?.Value?.ToString());
                    IndividualForMedBill.dtMembershipIndStartDate = DateTime.Parse(gvIndividualSearched["Membership Start Date", nRowSelected]?.Value?.ToString());
                }

                if (gvIndividualSearched["Membership Cancel Date", nRowSelected]?.Value?.ToString() != String.Empty)
                {
                    IndividualSearched.dtMembershipCancelledDate = DateTime.Parse(gvIndividualSearched["Membership Cancel Date", nRowSelected]?.Value?.ToString());
                    IndividualForMedBill.dtMembershipCancelledDate = DateTime.Parse(gvIndividualSearched["Membership Cancel Date", nRowSelected]?.Value?.ToString());
                }

                IndividualSearched.dtBirthDate = DateTime.Parse(gvIndividualSearched["BirthDate", nRowSelected]?.Value?.ToString());
                IndividualForMedBill.dtBirthDate = DateTime.Parse(gvIndividualSearched["BirthDate", nRowSelected]?.Value?.ToString());

                switch (gvIndividualSearched["Gender", nRowSelected]?.Value?.ToString())
                {
                    case "Male":
                        IndividualSearched.IndividualGender = Gender.Male;
                        IndividualForMedBill.IndividualGender = Gender.Male;
                        break;
                    case "Female":
                        IndividualSearched.IndividualGender = Gender.Female;
                        IndividualForMedBill.IndividualGender = Gender.Female;
                        break;
                }


                switch (gvIndividualSearched["House Type", nRowSelected]?.Value?.ToString())
                {
                    case "Head of Household":
                        IndividualSearched.IndividualHouseholdRole = HouseholdRole.HeadOfHousehold;
                        IndividualForMedBill.IndividualHouseholdRole = HouseholdRole.HeadOfHousehold;
                        break;
                    case "Spouse":
                        IndividualSearched.IndividualHouseholdRole = HouseholdRole.Spouse;
                        IndividualForMedBill.IndividualHouseholdRole = HouseholdRole.Spouse;
                        break;
                    case "Child":
                        IndividualSearched.IndividualHouseholdRole = HouseholdRole.Child;
                        IndividualForMedBill.IndividualHouseholdRole = HouseholdRole.Child;
                        break;
                }

                switch (gvIndividualSearched["Program Name", nRowSelected]?.Value?.ToString())
                {
                    case "Gold Plus":
                        IndividualSearched.IndividualPlan = Plan.GoldPlus;
                        IndividualForMedBill.IndividualPlan = Plan.GoldPlus;
                        break;
                    case "Gold":
                        IndividualSearched.IndividualPlan = Plan.Gold;
                        IndividualForMedBill.IndividualPlan = Plan.Gold;
                        break;
                    case "Silver":
                        IndividualSearched.IndividualPlan = Plan.Silver;
                        IndividualForMedBill.IndividualPlan = Plan.Silver;
                        break;
                    case "Bronze":
                        IndividualSearched.IndividualPlan = Plan.Bronze;
                        IndividualForMedBill.IndividualPlan = Plan.Bronze;
                        break;
                    case "Gold Medi-I":
                        IndividualSearched.IndividualPlan = Plan.GoldMedi_I;
                        IndividualForMedBill.IndividualPlan = Plan.GoldMedi_I;
                        break;
                    case "Gold Medi-II":
                        IndividualSearched.IndividualPlan = Plan.GoldMedi_II;
                        IndividualForMedBill.IndividualPlan = Plan.GoldMedi_II;
                        break;
                }


                //IndividualSearched.strShippingStreetAddress = gvIndividualSearched["ShippingStreet", nRowSelected]?.Value?.ToString();
                //IndividualSearched.strShippingCity = gvIndividualSearched["ShippingCity", nRowSelected]?.Value?.ToString();
                //IndividualSearched.strShippingState = gvIndividualSearched["ShippingState", nRowSelected]?.Value?.ToString();
                //IndividualSearched.strShippingZip = gvIndividualSearched["ShippingPostalCode", nRowSelected]?.Value?.ToString();

                IndividualSearched.strShippingStreetAddress = gvIndividualSearched["MailingStreet", nRowSelected]?.Value?.ToString();
                IndividualSearched.strShippingCity = gvIndividualSearched["MailingCity", nRowSelected]?.Value?.ToString();
                IndividualSearched.strShippingState = gvIndividualSearched["MailingState", nRowSelected]?.Value?.ToString();
                IndividualSearched.strShippingZip = gvIndividualSearched["MailingPostalCode", nRowSelected]?.Value?.ToString();

                IndividualForMedBill.strShippingStreetAddress = gvIndividualSearched["MailingStreet", nRowSelected]?.Value?.ToString();
                IndividualForMedBill.strShippingCity = gvIndividualSearched["MailingCity", nRowSelected]?.Value?.ToString();
                IndividualForMedBill.strShippingState = gvIndividualSearched["MailingState", nRowSelected]?.Value?.ToString();
                IndividualForMedBill.strShippingZip = gvIndividualSearched["MailingPostalCode", nRowSelected]?.Value?.ToString();


                //IndividualSearched.strBillingStreetAddress = gvIndividualSearched["BillingStreet", nRowSelected]?.Value?.ToString();
                //IndividualSearched.strBillingCity = gvIndividualSearched["BillingCity", nRowSelected]?.Value?.ToString();
                //IndividualSearched.strBillingState = gvIndividualSearched["BillingState", nRowSelected]?.Value?.ToString();
                //IndividualSearched.strBillingZip = gvIndividualSearched["BillingPostalCode", nRowSelected]?.Value?.ToString();

                IndividualSearched.strBillingStreetAddress = gvIndividualSearched["OtherStreet", nRowSelected]?.Value?.ToString();
                IndividualSearched.strBillingCity = gvIndividualSearched["OtherCity", nRowSelected]?.Value?.ToString();
                IndividualSearched.strBillingState = gvIndividualSearched["OtherState", nRowSelected]?.Value?.ToString();
                IndividualSearched.strBillingZip = gvIndividualSearched["OtherPostalCode", nRowSelected]?.Value?.ToString();

                IndividualForMedBill.strBillingStreetAddress = gvIndividualSearched["OtherStreet", nRowSelected]?.Value?.ToString();
                IndividualForMedBill.strBillingCity = gvIndividualSearched["OtherCity", nRowSelected]?.Value?.ToString();
                IndividualForMedBill.strBillingState = gvIndividualSearched["OtherState", nRowSelected]?.Value?.ToString();
                IndividualForMedBill.strBillingZip = gvIndividualSearched["OtherPostalCode", nRowSelected]?.Value?.ToString();

                IndividualSearched.strChurch = gvIndividualSearched["Church Name", nRowSelected]?.Value?.ToString();
                IndividualSearched.strEmail = gvIndividualSearched["Email", nRowSelected]?.Value?.ToString();

                IndividualForMedBill.strChurch = gvIndividualSearched["Church Name", nRowSelected]?.Value?.ToString();
                IndividualForMedBill.strEmail = gvIndividualSearched["Email", nRowSelected]?.Value?.ToString();


                //IndividualSearched.dtBirthDate = DateTime.Parse(gvIndividualSearched["BIRTHDATE", nRowSelected].Value.ToString());
                //if (gvIndividualSearched["cmm_GENDER__C", nRowSelected].Value.ToString() == "Male") IndividualSearched.IndividualGender = Gender.Male;
                //else if (gvIndividualSearched["cmm_GENDER__C", nRowSelected].Value.ToString() == "Female") IndividualSearched.IndividualGender = Gender.Female;
                //if (gvIndividualSearched["HOUSEHOLD_ROLE__C", nRowSelected].Value.ToString() == "Head of Household")
                //    IndividualSearched.IndividualHouseholdRole = HouseholdRole.HeadOfHousehold;
                //else if (gvIndividualSearched["HOUSEHOLD_ROLE__C", nRowSelected].Value.ToString() == "Spouse") IndividualSearched.IndividualHouseholdRole = HouseholdRole.Spouse;
                //else if (gvIndividualSearched["HOUSEHOLD_ROLE__C", nRowSelected].Value.ToString() == "Child") IndividualSearched.IndividualHouseholdRole = HouseholdRole.Child;

                //IndividualSearched.strSSN = gvIndividualSearched["SOCIAL_SECURITY_NUMBER__C", nRowSelected].Value.ToString();

                //IndividualSearched.strBillingStreetAddress = gvIndividualSearched["BillingStreet", nRowSelected].Value.ToString();
                //IndividualSearched.strBillingCity = gvIndividualSearched["BillingCity", nRowSelected].Value.ToString();
                //IndividualSearched.strBillingState = gvIndividualSearched["BillingState", nRowSelected].Value.ToString();
                //IndividualSearched.strBillingZip = gvIndividualSearched["BillingPostalCode", nRowSelected].Value.ToString();
                //IndividualSearched.strShippingStreetAddress = gvIndividualSearched["ShippingStreet", nRowSelected].Value.ToString();
                //IndividualSearched.strShippingCity = gvIndividualSearched["ShippingCity", nRowSelected].Value.ToString();
                //IndividualSearched.strShippingState = gvIndividualSearched["ShippingState", nRowSelected].Value.ToString();
                //IndividualSearched.strShippingZip = gvIndividualSearched["ShippingPostalCode", nRowSelected].Value.ToString();

                //IndividualSearched.strEmail = gvIndividualSearched["Email", nRowSelected].Value.ToString();

                //if (gvIndividualSearched["ProgramName", nRowSelected].Value.ToString() == "Gold Medi-I") IndividualSearched.IndividualPlan = Plan.GoldMedi_I;
                //else if (gvIndividualSearched["ProgramName", nRowSelected].Value.ToString() == "Gold Medi-II") IndividualSearched.IndividualPlan = Plan.GoldMedi_II;
                //else if (gvIndividualSearched["ProgramName", nRowSelected].Value.ToString() == "Gold Plus") IndividualSearched.IndividualPlan = Plan.GoldPlus;
                //else if (gvIndividualSearched["ProgramName", nRowSelected].Value.ToString() == "Gold") IndividualSearched.IndividualPlan = Plan.Gold;
                //else if (gvIndividualSearched["ProgramName", nRowSelected].Value.ToString() == "Silver") IndividualSearched.IndividualPlan = Plan.Silver;
                //else if (gvIndividualSearched["ProgramName", nRowSelected].Value.ToString() == "Bronze") IndividualSearched.IndividualPlan = Plan.Bronze;

                //IndividualSearched.dtMembershipIndStartDate = DateTime.Parse(gvIndividualSearched["MembershipStartDate", nRowSelected].Value.ToString());
                //if (gvIndividualSearched["MembershipCancelDate", nRowSelected].Value.ToString() != String.Empty)
                //{
                //    IndividualSearched.dtMembershipCancelledDate = DateTime.Parse(gvIndividualSearched["MembershipCancelDate", nRowSelected].Value.ToString());
                //}
                //else IndividualSearched.dtMembershipCancelledDate = null;

                //IndividualSearched.strChurch = gvIndividualSearched["ChurchName", nRowSelected].Value.ToString();



                //DialogResult = DialogResult.OK;
                //return;

                //tbCMMManager.TabPages.Insert(2, tbpgIndividual);
                //tbCMMManager.SelectedIndex = 2;

                txtMembershipID.Text = IndividualSearched.strMembershipID;
                txtIndividualID.Text = IndividualSearched.strIndividualID;
                txtCRM_ID.Text = IndividualSearched.strLegacyIndividualID;

                txtFirstName.Text = IndividualSearched.strFirstName;
                txtMiddleName.Text = IndividualSearched.strMiddleName;
                txtLastName.Text = IndividualSearched.strLastName;
                dtpBirthDate.Text = IndividualSearched.dtBirthDate.Value.ToString("MM/dd/yyyy");

                if (IndividualSearched.IndividualGender == Gender.Male) cbGender.SelectedIndex = 0;
                else if (IndividualSearched.IndividualGender == Gender.Female) cbGender.SelectedIndex = 1;

                txtStreetAddress1.Text = IndividualSearched.strShippingStreetAddress;
                txtZip1.Text = IndividualSearched.strShippingZip;
                txtCity1.Text = IndividualSearched.strShippingCity;
                txtState1.Text = IndividualSearched.strShippingState;

                txtStreetAddress2.Text = IndividualSearched.strBillingStreetAddress;
                txtZip2.Text = IndividualSearched.strBillingZip;
                txtCity2.Text = IndividualSearched.strBillingCity;
                txtState2.Text = IndividualSearched.strBillingState;
                txtEmail.Text = IndividualSearched.strEmail;

                List<String> lstCommunicationMethod = new List<String>();

                String strSqlQueryForCommunicationMethods = "select [dbo].[CommunicationMethod].[CommunicationMethod] from [dbo].[CommunicationMethod]";

                SqlCommand cmdQueryForCommunicationMethod = new SqlCommand(strSqlQueryForCommunicationMethods, connSalesforce);
                cmdQueryForCommunicationMethod.CommandType = CommandType.Text;

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                SqlDataReader rdrCommunicationMethods = cmdQueryForCommunicationMethod.ExecuteReader();

                if (rdrCommunicationMethods.HasRows)
                {
                    while (rdrCommunicationMethods.Read())
                    {
                        lstCommunicationMethod.Add(rdrCommunicationMethods.GetString(0));
                    }
                }
                rdrCommunicationMethods.Close();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                cbPreferredCommunication.Items.Clear();

                foreach (String commMethod in lstCommunicationMethod)
                {
                    cbPreferredCommunication.Items.Add(commMethod);
                }

                List<String> lstReimbursementMethod = new List<string>();

                String strSqlQueryForReimbursementMethod = "select [dbo].[ReimbursementMethod].[ReimbursementMethodValue] from [dbo].[ReimbursementMethod]";

                SqlCommand cmdQueryForReimbursementMethod = new SqlCommand(strSqlQueryForReimbursementMethod, connSalesforce);
                cmdQueryForReimbursementMethod.CommandType = CommandType.Text;

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                SqlDataReader rdrReimbursementMethod = cmdQueryForReimbursementMethod.ExecuteReader();

                if (rdrReimbursementMethod.HasRows)
                {
                    while (rdrReimbursementMethod.Read())
                    {
                        lstReimbursementMethod.Add(rdrReimbursementMethod.GetString(0));
                    }
                }
                rdrReimbursementMethod.Close();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                cbReimbursementMethod.Items.Clear();

                foreach (String reimbursementMethod in lstReimbursementMethod)
                {
                    cbReimbursementMethod.Items.Add(reimbursementMethod);
                }


                String strSqlQueryForIndividualInfo = "select [dbo].[contact].[PreferredLanguage__c], [dbo].[contact].[PreferredCommunicationMethod__c], " +
                                                      "[dbo].[contact].[Phone], [dbo].[contact].[HomePhone], " +
                                                      "[dbo].[contact].[PowerOfAttorney__c], [dbo].[contact].[Relationship_POA__c], " +
                                                      "[dbo].[contact].[ReimbursementMethod__c], " +
                                                      "[dbo].[contact].[BankName__c], [dbo].[contact].[RoutingNumber__c], [dbo].[contact].[AccountNumber__c], [dbo].[contact].[AccountHolder__c], " +
                                                      "[dbo].[contact].[Social_Security_Number__c] " +
                                                      "from [dbo].[contact] " +
                                                      "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                SqlCommand cmdQueryForIndividualInfo = new SqlCommand(strSqlQueryForIndividualInfo, connSalesforce);
                cmdQueryForIndividualInfo.CommandType = CommandType.Text;

                cmdQueryForIndividualInfo.Parameters.AddWithValue("@IndividualId", IndividualSearched.strIndividualID);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                SqlDataReader rdrIndividualInfo = cmdQueryForIndividualInfo.ExecuteReader();
                if (rdrIndividualInfo.HasRows)
                {
                    if (rdrIndividualInfo.Read())
                    {
                        if (!rdrIndividualInfo.IsDBNull(0))
                        {
                            String PreferredLanguage = rdrIndividualInfo.GetString(0).Trim().ToUpper();
                            if (PreferredLanguage == "KOREAN") rbKorean.Checked = true;
                            else if (PreferredLanguage == "ENGLISH") rbEnglish.Checked = true;
                        }
                        //{
                        //    if (rdrIndividualInfo.GetInt16(0) == 0)  // Preferred language is Korean
                        //    {
                        //        rbKorean.Checked = true;
                        //    }
                        //    else if (rdrIndividualInfo.GetInt16(0) == 1) // Preferred language is English
                        //    {
                        //        rbEnglish.Checked = true;
                        //    }
                        //}

                        if (!rdrIndividualInfo.IsDBNull(1))
                        {
                            //cbPreferredCommunication.SelectedIndex = rdrIndividualInfo.GetInt16(1);
                            cbPreferredCommunication.SelectedItem = rdrIndividualInfo.GetString(1).Trim();
                        }

                        if (!rdrIndividualInfo.IsDBNull(2)) txtCellPhone1.Text = rdrIndividualInfo.GetString(2).Trim();
                        if (!rdrIndividualInfo.IsDBNull(3)) txtBusinessPhone.Text = rdrIndividualInfo.GetString(3).Trim();

                        if (!rdrIndividualInfo.IsDBNull(4)) txtPowerOfAttorney.Text = rdrIndividualInfo.GetString(4).Trim();
                        if (!rdrIndividualInfo.IsDBNull(5)) txtRelationship.Text = rdrIndividualInfo.GetString(5).Trim();

                        if (!rdrIndividualInfo.IsDBNull(6)) cbReimbursementMethod.SelectedItem = rdrIndividualInfo.GetString(6);

                        if (!rdrIndividualInfo.IsDBNull(7)) IndividualBankInfo.BankName = rdrIndividualInfo.GetString(7);
                        if (!rdrIndividualInfo.IsDBNull(8)) IndividualBankInfo.BankRoutingNumber = rdrIndividualInfo.GetString(8);
                        if (!rdrIndividualInfo.IsDBNull(9)) IndividualBankInfo.AccountNumber = rdrIndividualInfo.GetString(9);
                        if (!rdrIndividualInfo.IsDBNull(10)) IndividualBankInfo.AccountHolder = rdrIndividualInfo.GetString(10);

                        if (cbReimbursementMethod.SelectedItem != null)
                        {
                            if (cbReimbursementMethod.SelectedItem.ToString() == "ACH/Banking")
                            {
                                //if (!rdrIndividualInfo.IsDBNull(7)) txtBankName.Text = rdrIndividualInfo.GetString(7);
                                //if (!rdrIndividualInfo.IsDBNull(8)) txtBankRoutingNo.Text = rdrIndividualInfo.GetString(8);
                                //if (!rdrIndividualInfo.IsDBNull(9)) txtAccountNo.Text = rdrIndividualInfo.GetString(9);
                                //if (!rdrIndividualInfo.IsDBNull(10)) txtAccountHolder.Text = rdrIndividualInfo.GetString(10);
                                txtBankName.ReadOnly = false;
                                if (!rdrIndividualInfo.IsDBNull(7)) txtBankName.Text = IndividualBankInfo.BankName;
                                txtBankRoutingNo.ReadOnly = false;
                                if (!rdrIndividualInfo.IsDBNull(8)) txtBankRoutingNo.Text = IndividualBankInfo.BankRoutingNumber;
                                txtAccountNo.ReadOnly = false;
                                if (!rdrIndividualInfo.IsDBNull(9)) txtAccountNo.Text = IndividualBankInfo.AccountNumber;
                                txtAccountHolder.ReadOnly = false;
                                if (!rdrIndividualInfo.IsDBNull(10)) txtAccountHolder.Text = IndividualBankInfo.AccountHolder;
                            }
                        }
                        else
                        {
                            txtBankName.ReadOnly = true;
                            txtBankRoutingNo.ReadOnly = true;
                            txtAccountNo.ReadOnly = true;
                            txtAccountHolder.ReadOnly = true;

                            txtBankName.Text = String.Empty;
                            txtBankRoutingNo.Text = String.Empty;
                            txtAccountNo.Text = String.Empty;
                            txtAccountHolder.Text = String.Empty;
                        }

                        if (!rdrIndividualInfo.IsDBNull(11))
                        {
                            txtIndividualSSN.Text = rdrIndividualInfo.GetString(11).Trim();
                            IndividualSearched.strSSN = txtIndividualSSN.Text;
                        }
                    }
                }
                rdrIndividualInfo.Close();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                txtIndChurchName.Text = IndividualSearched.strChurch;

                var srcChurch = new AutoCompleteStringCollection();

                foreach (ChurchInfo info in lstChurchInfo)
                {
                    srcChurch.Add(info.Name);
                }

                txtIndChurchName.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                txtIndChurchName.AutoCompleteSource = AutoCompleteSource.CustomSource;
                txtIndChurchName.AutoCompleteCustomSource = srcChurch;

                if (IndividualSearched.IndividualPlan == Plan.GoldPlus) txtProgram.Text = "Gold Plus";
                else if (IndividualSearched.IndividualPlan == Plan.GoldMedi_I) txtProgram.Text = "Gold Medi-I";
                else if (IndividualSearched.IndividualPlan == Plan.GoldMedi_II) txtProgram.Text = "Gold Medi-II";
                else txtProgram.Text = IndividualSearched.IndividualPlan.ToString();

                //switch (IndividualSearched.IndividualPlan)
                //{
                //    case Plan.GoldPlus:
                //        txtMemberProgram.Text = "Gold Plus";
                //        break;
                //    case Plan.Gold:
                //        txtMemberProgram.Text = "Gold";
                //        break;
                //    case Plan.Silver:
                //        txtMemberProgram.Text = "Silver";
                //        break;
                //    case Plan.Bronze:
                //        txtMemberProgram.Text = "Bronze";
                //        break;
                //    case Plan.GoldMedi_I:
                //        txtMemberProgram.Text = "Gold Medi-I";
                //        break;
                //    case Plan.GoldMedi_II:
                //        txtMemberProgram.Text = "Gold Medi-II";
                //        break;
                //}


                txtMembershipStartDate.Text = IndividualSearched.dtMembershipIndStartDate.Value.ToString("MM/dd/yyyy");

                // Calculate Aniv Date
                String IndividualIdForAnivDate = IndividualSearched.strIndividualID;
                String strSqlQueryForLatestProgramChangeDate = "select max([dbo].[ContactHistory].[CreatedDate]) from [dbo].[ContactHistory] " +
                                                               "inner join [dbo].[contact] on [dbo].[ContactHistory].[ContactId] = [dbo].[contact].[Id] " +
                                                               "where [dbo].[ContactHistory].[Field] = 'c4g_Plan__c' and " +
                                                               "[dbo].[contact].[Individual_ID__c] = @IndividualId";

                SqlCommand cmdQueryForLatestProgramChangeDate = new SqlCommand(strSqlQueryForLatestProgramChangeDate, connSalesforce);
                cmdQueryForLatestProgramChangeDate.CommandType = CommandType.Text;

                cmdQueryForLatestProgramChangeDate.Parameters.AddWithValue("@IndividualId", IndividualIdForAnivDate);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                Object objLatestProgramChangeDate = cmdQueryForLatestProgramChangeDate.ExecuteScalar();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                DateTime? LatestProgramChangeDate = null;
                if (objLatestProgramChangeDate.ToString() != String.Empty) LatestProgramChangeDate = DateTime.Parse(objLatestProgramChangeDate.ToString());

                DateTime? MembershipStartDate = null;
                if (LatestProgramChangeDate == null)
                {
                    String strSqlQueryForMembershipStartDate = "select [dbo].[contact].[Membership_IND_Start_date__c] from [dbo].[contact] where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                    SqlCommand cmdQueryForMembershipStartDate = new SqlCommand(strSqlQueryForMembershipStartDate, connSalesforce);
                    cmdQueryForMembershipStartDate.CommandType = CommandType.Text;

                    cmdQueryForMembershipStartDate.Parameters.AddWithValue("@IndividualId", IndividualIdForAnivDate);

                    if (connSalesforce.State != ConnectionState.Closed)
                    {
                        connSalesforce.Close();
                        connSalesforce.Open();
                    }
                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                    Object objMembershipStartDate = cmdQueryForMembershipStartDate.ExecuteScalar();
                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                    if (objMembershipStartDate != null) MembershipStartDate = DateTime.Parse(objMembershipStartDate.ToString());

                    txtAnivDate.Text = MembershipStartDate.Value.ToString("MM/dd/yyyy");
                }
                else
                {
                    if (MembershipStartDate >= LatestProgramChangeDate) txtAnivDate.Text = MembershipStartDate.Value.ToString("MM/dd/yyyy");
                    else txtAnivDate.Text = LatestProgramChangeDate.Value.ToString("MM/dd/yyyy");
                }


                if (IndividualSearched.dtMembershipCancelledDate != null)
                {
                    txtMembershipCancelledDate.Text = IndividualSearched.dtMembershipCancelledDate.Value.ToString("MM/dd/yyyy");
                }
                else txtMembershipCancelledDate.Text = String.Empty;
                txtIndMemberShipStatus.Text = IndividualSearched.membershipStatus.ToString();

                IndividualIdIndividualPage = txtIndividualID.Text.Trim();

                String strSqlQueryForCaseInfo = "select distinct([dbo].[tbl_medbill].[Case_Id]), [dbo].[tbl_medbill].[Contact_Id], [dbo].[tbl_medbill].[BillStatus] " +
                                                "from [dbo].[tbl_medbill] " +
                                                "where [dbo].[tbl_medbill].[Contact_Id] = @IndividualId and " +
                                                "[dbo].[tbl_medbill].[IsDeleted] = 0 and " +
                                                "([dbo].[tbl_medbill].[BillStatus] = @BillStatusCode0 or " +
                                                "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode1 or " +
                                                "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode2 or " +
                                                "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode3 or " +
                                                "[dbo].[tbl_medbill].[BillStatus] = @BillStatusCode4)";

                SqlCommand cmdQueryForCaseInfo = new SqlCommand(strSqlQueryForCaseInfo, connRN);
                cmdQueryForCaseInfo.CommandType = CommandType.Text;

                cmdQueryForCaseInfo.Parameters.AddWithValue("@IndividualId", IndividualIdIndividualPage);
                cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode0", 0);     // Pending
                cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode1", 1);     // CMM Pending Payment  
                cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode2", 2);     // Closed
                cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode3", 3);     // Ineligible
                cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode4", 4);     // Partially Ineligible
                                                                                        //cmdQueryForCaseInfo.Parameters.AddWithValue("@BillStatusCode5", 5);    

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                SqlDataReader rdrCaseInfo = cmdQueryForCaseInfo.ExecuteReader();

                lstCaseInfo.Clear();
                if (rdrCaseInfo.HasRows)
                {
                    while (rdrCaseInfo.Read())
                    {
                        lstCaseInfo.Add(new CaseInfo { CaseName = rdrCaseInfo.GetString(0), IndividualId = rdrCaseInfo.GetString(1) });
                    }
                }
                rdrCaseInfo.Close();
                if (connRN.State != ConnectionState.Closed) connRN.Close();
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                ///
                //IndividualSearched.strIndividualID = gvIndividualSearched["Individual No.", nRowSelected]?.Value?.ToString();
                String IndividualIdSelected = IndividualSearched.strIndividualID;

                String strSqlQueryForIndividualTotalSharedAmount = "select [dbo].[contact].[c4g_Total_Shared_Amount__c] from [dbo].[contact] where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                SqlCommand cmdQueryForIndividualTotalSharedAmount = new SqlCommand(strSqlQueryForIndividualTotalSharedAmount, connSalesforce);
                cmdQueryForIndividualTotalSharedAmount.CommandType = CommandType.Text;

                cmdQueryForIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualId", IndividualIdSelected);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                Object objIndividualTotalSharedAmount = cmdQueryForIndividualTotalSharedAmount.ExecuteScalar();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                Decimal IndividualTotalSharedAmount = 0;
                txtTotalSharedAmount.Text = String.Empty;
                if (objIndividualTotalSharedAmount != null)
                {
                    if (objIndividualTotalSharedAmount.ToString() != String.Empty)
                    {
                        IndividualTotalSharedAmount = Decimal.Parse(objIndividualTotalSharedAmount.ToString());
                        txtTotalSharedAmount.Text = IndividualTotalSharedAmount.ToString("C");
                    }
                }

                String strSqlQueryForIndividualMedBillTotalAmount = "select [dbo].[contact].[c4g_Incidents_Total_Amount__c] from [dbo].[contact] where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                SqlCommand cmdQueryForIndividualMedBillTotalAmount = new SqlCommand(strSqlQueryForIndividualMedBillTotalAmount, connSalesforce);
                cmdQueryForIndividualMedBillTotalAmount.CommandType = CommandType.Text;

                cmdQueryForIndividualMedBillTotalAmount.Parameters.AddWithValue("@IndividualId", IndividualIdSelected);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                Object objIndividualMedBillTotalAmount = cmdQueryForIndividualMedBillTotalAmount.ExecuteScalar();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                Decimal IndividualMedBillTotalAmount = 0;
                txtTotalMedBillAmount.Text = String.Empty;
                if (objIndividualMedBillTotalAmount != null)
                {
                    if (objIndividualMedBillTotalAmount.ToString() != String.Empty)
                    {
                        IndividualMedBillTotalAmount = Decimal.Parse(objIndividualMedBillTotalAmount.ToString());
                        txtTotalMedBillAmount.Text = IndividualMedBillTotalAmount.ToString("C");
                    }
                }

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                //if (lstCaseInfo.Count > 0)
                //{

                //String strSqlQueryForCasesForIndividualID = "select distinct([dbo].[tbl_case].[Case_Name]), [dbo].[tbl_case].[CreateDate], [dbo].[tbl_CreateStaff].[Staff_Name], " +
                //                                            "[dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Receiv_Date], [dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Receiv_Date], " +
                //                                            "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Receiv_Date], [dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
                //                                            "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Receiv_Date] " +
                //                                            "from [dbo].[tbl_case] " +
                //                                            "inner join [dbo].[tbl_medbill] on [dbo].[tbl_case].[Case_Name] = [dbo].[tbl_medbill].[Case_Id] " +
                //                                            "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_case].[CreateStaff] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                //                                            "where [dbo].[tbl_case].[Contact_ID] = @IndividualID and " +
                //                                            "[dbo].[tbl_case].[IsDeleted] = 0 and " +
                //                                            "([dbo].[tbl_medbill].[BillStatus] = 0 or [dbo].[tbl_medbill].[BillStatus] = 1 or [dbo].[tbl_medbill].[BillStatus] = 4) " +
                //                                            "order by [dbo].[tbl_case].[Case_Name]";

                String strSqlQueryForCasesForIndividualID = "select [dbo].[tbl_case].[Case_Name], [dbo].[tbl_case_status_code].[CaseStatusValue], [dbo].[tbl_case].[CreateDate], " +
                                                            "[dbo].[tbl_CreateStaff].[Staff_Name], " +
                                                            "[dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Receiv_Date], [dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Receiv_Date], " +
                                                            "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Receiv_Date], [dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
                                                            "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Receiv_Date] " +
                                                            "from [dbo].[tbl_case] " +
                                                            "inner join [dbo].[tbl_case_status_code] on [dbo].[tbl_case].[Case_status] = [dbo].[tbl_case_status_code].[CaseStatusCode] " +
                                                            "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_case].[CreateStaff] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                                            "where [dbo].[tbl_case].[Contact_ID] = @IndividualID and " +
                                                            "[dbo].[tbl_case].[IsDeleted] = 0 and " +
                                                            "([dbo].[tbl_case].[Case_Status] = 0 or [dbo].[tbl_case].[Case_Status] = 1) " +
                                                            "order by [dbo].[tbl_case].[ID]";


                SqlCommand cmdQueryForCasesIndividualPage = new SqlCommand(strSqlQueryForCasesForIndividualID, connRN);
                cmdQueryForCasesIndividualPage.CommandType = CommandType.Text;
                cmdQueryForCasesIndividualPage.Parameters.AddWithValue("@IndividualID", IndividualIdIndividualPage);
                //cmdQueryForCasesIndividualPage.Parameters.AddWithValue("@IndividualID", lstCaseInfo[0].IndividualId);

                cmdQueryForCasesIndividualPage.Notification = null;

                SqlDependency dependencyCaseForIndividual = new SqlDependency(cmdQueryForCasesIndividualPage);
                dependencyCaseForIndividual.OnChange += new OnChangeEventHandler(OnCaseForIndividualChange);

                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                SqlDataReader rdrCasesForIndividual = cmdQueryForCasesIndividualPage.ExecuteReader();

                //gvProcessingCaseNo.Rows.Clear();
                gvProcessingCaseNo.Rows.Clear();

                if (rdrCasesForIndividual.HasRows)
                {
                    while (rdrCasesForIndividual.Read())
                    {
                        //for (int i = 0; i < lstCaseInfo.Count; i++)
                        //{
                        //if ((!rdrCasesForIndividual.IsDBNull(0)) &&
                        //    (rdrCasesForIndividual.GetString(0) == lstCaseInfo[i].CaseName))
                        //{

                        DataGridViewRow row = new DataGridViewRow();

                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });

                        if (!rdrCasesForIndividual.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetString(0) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        if (!rdrCasesForIndividual.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetString(1) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        if (!rdrCasesForIndividual.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(2).ToString("MM/dd/yyyy") });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        if (!rdrCasesForIndividual.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetString(3) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        if (!rdrCasesForIndividual.IsDBNull(4)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(4) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = false });

                        if (!rdrCasesForIndividual.IsDBNull(5)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(5).ToString("MM/dd/yyyy") });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        if (!rdrCasesForIndividual.IsDBNull(6)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(6) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = false });

                        if (!rdrCasesForIndividual.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(7).ToString("MM/dd/yyyy") });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        if (!rdrCasesForIndividual.IsDBNull(8)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(8) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = false });

                        if (!rdrCasesForIndividual.IsDBNull(9)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(9).ToString("MM/dd/yyyy") });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        if (!rdrCasesForIndividual.IsDBNull(10)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(10) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        if (!rdrCasesForIndividual.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(11).ToString("MM/dd/yyyy") });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        if (!rdrCasesForIndividual.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrCasesForIndividual.GetBoolean(12) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        if (!rdrCasesForIndividual.IsDBNull(13)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrCasesForIndividual.GetDateTime(13).ToString("MM/dd/yyyy") });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        gvProcessingCaseNo.Rows.Add(row);
                        //}
                        //}
                    }
                }
                rdrCasesForIndividual.Close();
                if (connRN.State != ConnectionState.Closed) connRN.Close();
                //}

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // Case History Page

                strIndividualId = IndividualSearched.strIndividualID.Trim();

                txtCaseHistoryIndividualID.Text = strIndividualId;

                txtCaseHistoryIndividualName.Text = txtLastName.Text + ", " + txtFirstName.Text + " " + txtMiddleName.Text;

                String strSqlQueryForCreateStaff = "select dbo.tbl_CreateStaff.CreateStaff_Id, dbo.tbl_CreateStaff.Staff_Name from dbo.tbl_CreateStaff";

                SqlCommand cmdQueryForCreateStaff = new SqlCommand(strSqlQueryForCreateStaff, connRN);
                cmdQueryForCreateStaff.CommandType = CommandType.Text;

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                SqlDataReader rdrCreateStaff = cmdQueryForCreateStaff.ExecuteReader();

                lstCreateStaff.Clear();
                if (rdrCreateStaff.HasRows)
                {
                    while (rdrCreateStaff.Read())
                    {
                        lstCreateStaff.Add(new StaffInfo { StaffId = rdrCreateStaff.GetInt16(0), StaffName = rdrCreateStaff.GetString(1) });
                    }
                }
                rdrCreateStaff.Close();
                if (connRN.State != ConnectionState.Closed) connRN.Close();

                String strSqlQueryForModifiStaff = "select dbo.tbl_ModifiStaff.ModifiStaff_Id, dbo.tbl_ModifiStaff.Staff_Name from dbo.tbl_ModifiStaff";

                SqlCommand cmdQueryForModifiStaff = new SqlCommand(strSqlQueryForModifiStaff, connRN);
                cmdQueryForModifiStaff.CommandType = CommandType.Text;

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                SqlDataReader rdrModifiStaff = cmdQueryForModifiStaff.ExecuteReader();

                lstModifiStaff.Clear();
                if (rdrModifiStaff.HasRows)
                {
                    while (rdrModifiStaff.Read())
                    {
                        lstModifiStaff.Add(new StaffInfo { StaffId = rdrModifiStaff.GetInt16(0), StaffName = rdrModifiStaff.GetString(1) });
                    }
                }
                rdrModifiStaff.Close();
                if (connRN.State != ConnectionState.Closed) connRN.Close();

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                String strSqlQueryForCases = "select dbo.tbl_case.Case_Name, dbo.tbl_case.CreateDate, dbo.tbl_case.CreateStaff, " +
                                             "dbo.tbl_case.ModifiDate, dbo.tbl_case.ModifiStaff " +
                                             "from dbo.tbl_case where individual_id = @IndividualId and " +
                                             "[dbo].[tbl_case].[IsDeleted] = 0 " +
                                             "order by [dbo].[tbl_case].[ID]";

                SqlCommand cmdQueryForCases = new SqlCommand(strSqlQueryForCases, connRN);
                cmdQueryForCases.CommandType = CommandType.Text;

                cmdQueryForCases.Parameters.AddWithValue("@IndividualId", strIndividualId);

                SqlDependency dependencyCase = new SqlDependency(cmdQueryForCases);
                dependencyCase.OnChange += new OnChangeEventHandler(OnCaseChange);


                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();
                SqlDataReader reader = cmdQueryForCases.ExecuteReader();
                gvCaseViewCaseHistory.Rows.Clear();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();

                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                        row.Cells.Add(new DataGridViewTextBoxCell { Value = reader.GetString(0) });     // Case ID

                        // Create Date
                        if (!reader.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = reader.GetDateTime(1).ToString("MM/dd/yyyy") });

                        // Create Staff
                        if (!reader.IsDBNull(2))
                        {
                            for (int i = 0; i < lstCreateStaff.Count; i++)
                            {
                                if (reader.GetInt16(2) == lstCreateStaff[i].StaffId)
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = lstCreateStaff[i].StaffName });
                            }
                        }

                        // Modifi Date
                        if (!reader.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = reader.GetDateTime(3).ToString("MM/dd/yyyy") });

                        // Modifi Staff
                        if (!reader.IsDBNull(4))
                        {
                            for (int i = 0; i < lstModifiStaff.Count; i++)
                            {
                                if (reader.GetInt16(4) == lstModifiStaff[i].StaffId)
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = lstModifiStaff[i].StaffName });
                            }
                        }
                        gvCaseViewCaseHistory.Rows.Add(row);
                    }
                }
                if (connRN.State != ConnectionState.Closed) connRN.Close();

                txtIllnessViewMEMB.Text = IndividualSearched.strMembershipID;
                txtIllnessViewIndId.Text = IndividualSearched.strIndividualID;
                DateTime IndividualStartDate = IndividualSearched.dtMembershipIndStartDate.Value;
                String IndividualId = IndividualSearched.strIndividualID;

                //lstLimitedSharingId.Clear();

                //String strSqlQueryForLimitedSharingSelection = "select [dbo].[tbl_illness].[LimitedSharingId] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[Individual_Id] = @IndividualId";

                //SqlCommand cmdQueryForLimitedSharingSelection = new SqlCommand(strSqlQueryForLimitedSharingSelection, connRN);
                //cmdQueryForLimitedSharingSelection.CommandType = CommandType.Text;

                //cmdQueryForLimitedSharingSelection.Parameters.AddWithValue("@IndividualId", IndividualId);

                //if (connRN.State != ConnectionState.Closed)
                //{
                //    connRN.Close();
                //    connRN.Open();
                //}
                //else if (connRN.State == ConnectionState.Closed) connRN.Open();
                //SqlDataReader rdrLimitedSharingSelection = cmdQueryForLimitedSharingSelection.ExecuteReader();

                //if (rdrLimitedSharingSelection.HasRows)
                //{
                //    while(rdrLimitedSharingSelection.Read())
                //    {
                //        if (!rdrLimitedSharingSelection.IsDBNull(0)) lstLimitedSharingId.Add(rdrLimitedSharingSelection.GetInt16(0));
                //    }
                //}
                //if (connRN.State != ConnectionState.Closed) connRN.Close();


                //int nLimitedSharingSelection = 0;
                //if (objLimitedSharingSelection != null) nLimitedSharingSelection = Int16.Parse(objLimitedSharingSelection.ToString());

                //if (lstLimitedSharingId[0] == 0)

                String strSqlQueryForIndividualStartDate = "select [dbo].[contact].[Membership_IND_Start_date__c] from [dbo].[contact] " +
                                               "where [dbo].[contact].[individual_id__c] = @IndividualId";

                SqlCommand cmdQueryForIndividualStartDate = new SqlCommand(strSqlQueryForIndividualStartDate, connSalesforce);
                cmdQueryForIndividualStartDate.CommandType = CommandType.Text;

                cmdQueryForIndividualStartDate.Parameters.AddWithValue("@IndividualId", IndividualId);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                Object objIndividualStartDate = cmdQueryForIndividualStartDate.ExecuteScalar();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                DateTime dtResultIndividualStartDate;
                DateTime? dtIndividualStartDate = null;

                if (objIndividualStartDate != null)
                {
                    if (DateTime.TryParse(objIndividualStartDate.ToString(), out dtResultIndividualStartDate)) dtIndividualStartDate = dtResultIndividualStartDate;
                }
                else
                {
                    MessageBox.Show("Invalid datetime value", "Error", MessageBoxButtons.OK);
                    return;
                }

                int NumberOfYears = DateTime.Today.Year - dtIndividualStartDate.Value.Year;
                if (dtIndividualStartDate.Value.AddYears(NumberOfYears) > DateTime.Today) NumberOfYears--;

                LimitedSharingYear = NumberOfYears;
                if (LimitedSharingYear > 4) LimitedSharingYear = 4;

                gvIllnessList.Rows.Clear();

                //String strSqlQueryForIllnessForIndividualId = "select [dbo].[tbl_illness].[IllnessNo] as [Illness No], [dbo].[tbl_illness].[Case_Id] as [Case No], " +
                //                                              "[dbo].[tbl_illness].[ICD_10_Id] as [ICD 10 Code], " +
                //                                              "[dbo].[tbl_illness].[CreateDate] as [Create Date], [dbo].[tbl_CreateStaff].[Staff_Name] as [Created By]," +
                //                                              "[dbo].[tbl_illness].[ModifiDate] as [Last Modification Date], [dbo].[tbl_ModifiStaff].[Staff_Name] as [Last Modified By], " +
                //                                              "[dbo].[tbl_illness].[Date_of_Diagnosis] as [Diagnosis Date], " +
                //                                              "[dbo].[tbl_illness].[TotalSharedAmount] as [Total Shared Amount], " +
                //                                              "[dbo].[tbl_illness].[LimitedSharingId] as [Limited Sharing Amount], " +
                //                                              "[dbo].[tbl_illness].[Introduction], [dbo].[tbl_illness].[Body], [dbo].[tbl_illness].[Conclusion] " +
                //                                              "from [dbo].[tbl_illness] " +
                //                                              "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_illness].[CreateStaff] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                //                                              "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_illness].[ModifiStaff] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                //                                              "where [dbo].[tbl_illness].[Individual_Id] = @IndividualId and [dbo].[tbl_illness].[IsDeleted] = 0 " +
                //                                              "order by [dbo].[tbl_illness].[IllnessNo]";

                String strSqlQueryForIllnessForIndividualId = "select [dbo].[tbl_illness].[IllnessNo], [dbo].[tbl_illness].[Case_Id], " +
                                              "[dbo].[tbl_illness].[ICD_10_Id], " +
                                              "[dbo].[tbl_illness].[CreateDate], [dbo].[tbl_CreateStaff].[Staff_Name]," +
                                              "[dbo].[tbl_illness].[ModifiDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                              "[dbo].[tbl_illness].[Date_of_Diagnosis], " +
                                              "[dbo].[tbl_illness].[TotalSharedAmount], " +
                                              "[dbo].[tbl_illness].[LimitedSharingId], " +
                                              "[dbo].[tbl_illness].[Introduction], [dbo].[tbl_illness].[Body], [dbo].[tbl_illness].[Conclusion] " +
                                              "from [dbo].[tbl_illness] " +
                                              "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_illness].[CreateStaff] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                              "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_illness].[ModifiStaff] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                              "where [dbo].[tbl_illness].[Individual_Id] = @IndividualId and [dbo].[tbl_illness].[IsDeleted] = 0 " +
                                              "order by [dbo].[tbl_illness].[IllnessNo]";

                SqlCommand cmdQueryForIllnesForIndividualId = new SqlCommand(strSqlQueryForIllnessForIndividualId, connRN);
                cmdQueryForIllnesForIndividualId.CommandType = CommandType.Text;

                cmdQueryForIllnesForIndividualId.Parameters.AddWithValue("@IndividualId", IndividualId);

                SqlDependency dependencyIllness = new SqlDependency(cmdQueryForIllnesForIndividualId);
                dependencyIllness.OnChange += new OnChangeEventHandler(OnIllnessChange);

                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();

                gvIllnessList.Rows.Clear();

                SqlDataReader rdrIllnessForIndividual = cmdQueryForIllnesForIndividualId.ExecuteReader();
                if (rdrIllnessForIndividual.HasRows)
                {
                    while (rdrIllnessForIndividual.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();

                        if (!rdrIllnessForIndividual.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(0) });
                        if (!rdrIllnessForIndividual.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(1) });
                        if (!rdrIllnessForIndividual.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(2) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrIllnessForIndividual.IsDBNull(3)) row.Cells.Add(new CalendarCell { Value = rdrIllnessForIndividual.GetDateTime(3).ToString("MM/dd/yyyy") });
                        else row.Cells.Add(new CalendarCell { Value = String.Empty });
                        if (!rdrIllnessForIndividual.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(4) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrIllnessForIndividual.IsDBNull(5)) row.Cells.Add(new CalendarCell { Value = rdrIllnessForIndividual.GetDateTime(5).ToString("MM/dd/yyyy") });
                        else row.Cells.Add(new CalendarCell { Value = String.Empty });
                        if (!rdrIllnessForIndividual.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(6) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrIllnessForIndividual.IsDBNull(7)) row.Cells.Add(new CalendarCell { Value = rdrIllnessForIndividual.GetDateTime(7).ToString("MM/dd/yyyy") });
                        else row.Cells.Add(new CalendarCell { Value = String.Empty });
                        if (!rdrIllnessForIndividual.IsDBNull(8))
                        {
                            DataGridViewTextBoxCell cellTotalSharedAmount = new DataGridViewTextBoxCell();
                            cellTotalSharedAmount.Value = rdrIllnessForIndividual.GetDecimal(8).ToString("C");
                            cellTotalSharedAmount.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                            row.Cells.Add(cellTotalSharedAmount);
                        }
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrIllnessForIndividual.IsDBNull(9))
                        {
                            switch (rdrIllnessForIndividual.GetInt16(9))
                            {
                                case 0:
                                    DataGridViewTextBoxCell cellLimitedSharing = new DataGridViewTextBoxCell();
                                    cellLimitedSharing.Value = "N/A";
                                    cellLimitedSharing.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                                    row.Cells.Add(cellLimitedSharing);
                                    break;
                                case 1:
                                    DataGridViewTextBoxCell cellLimitedSharing1 = new DataGridViewTextBoxCell();
                                    cellLimitedSharing1.Value = dicLimitedSharing1[LimitedSharingYear].ToString("C");
                                    cellLimitedSharing1.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                                    row.Cells.Add(cellLimitedSharing1);
                                    break;
                                case 2:
                                    DataGridViewTextBoxCell cellLimitedSharing2 = new DataGridViewTextBoxCell();
                                    cellLimitedSharing2.Value = dicLimitedSharing2[LimitedSharingYear].ToString("C");
                                    cellLimitedSharing2.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                                    row.Cells.Add(cellLimitedSharing2);
                                    break;
                            }
                        }
                        if (!rdrIllnessForIndividual.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(10) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrIllnessForIndividual.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(11) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrIllnessForIndividual.IsDBNull(12)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIllnessForIndividual.GetString(12) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        gvIllnessList.Rows.Add(row);
                    }
                }
                rdrIllnessForIndividual.Close();
                if (connRN.State != ConnectionState.Closed) connRN.Close();


                //txtIllnessViewMEMB.Text = IndividualSearched.strMembershipID;
                //txtIllnessViewIndId.Text = IndividualSearched.strIndividualID;
                //DateTime IndividualStartDate = IndividualSearched.dtMembershipIndStartDate.Value;
                //String IndividualId = IndividualSearched.strIndividualID;

                txtIncidentViewMEMB.Text = IndividualSearched.strMembershipID;
                txtIncidentViewIndId.Text = IndividualSearched.strIndividualID;

                String strSqlQueryForIncidentForIndividual = "select [dbo].[tbl_incident].[IncidentNo], [dbo].[tbl_incident].[Case_id], [dbo].[tbl_illness].[IllnessNo], " +
                                                             "[dbo].[tbl_incident].[CreateDate], [dbo].[tbl_CreateStaff].[Staff_Name], " +
                                                             "[dbo].[tbl_incident].[ModifiDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                             "[dbo].[tbl_incident].[TotalSharedAmount], [dbo].[tbl_incident_status_code].[IncidentStatusValue], " +
                                                             "[dbo].[tbl_incident].[Review_Request], [dbo].[tbl_program].[ProgramName], " +
                                                             "[dbo].[tbl_incident].[IncidentNote], [dbo].[tbl_incident].[Eligibility] " +
                                                             "from [dbo].[tbl_incident] " +
                                                             "inner join [dbo].[tbl_illness] on [dbo].[tbl_incident].[Illness_id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                             "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_incident].[CreateStaff] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                                             "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_incident].[ModifiStaff] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                                             "inner join [dbo].[tbl_incident_status_code] on [dbo].[tbl_incident].[Incident_Status] = [dbo].[tbl_incident_status_code].[IncidentStatusCode] " +
                                                             "inner join [dbo].[tbl_program] on [dbo].[tbl_incident].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                                                             "where [dbo].[tbl_incident].[Individual_id] = @IndividualId and " +
                                                             "[dbo].[tbl_incident].[IsDeleted] = 0 " +
                                                             "order by [dbo].[tbl_incident].[IncidentNo]";

                SqlCommand cmdQueryForIncidentForIndividual = new SqlCommand(strSqlQueryForIncidentForIndividual, connRN);
                cmdQueryForIncidentForIndividual.CommandType = CommandType.Text;

                cmdQueryForIncidentForIndividual.Parameters.AddWithValue("@IndividualId", IndividualId);

                SqlDependency dependencyIncident = new SqlDependency(cmdQueryForIncidentForIndividual);
                dependencyIncident.OnChange += new OnChangeEventHandler(OnIncidentChange);

                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();

                gvIncidentList.Rows.Clear();
                SqlDataReader rdrIncidentForIndividual = cmdQueryForIncidentForIndividual.ExecuteReader();
                if (rdrIncidentForIndividual.HasRows)
                {
                    while (rdrIncidentForIndividual.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();

                        if (!rdrIncidentForIndividual.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(0) });
                        if (!rdrIncidentForIndividual.IsDBNull(1)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(1) });
                        if (!rdrIncidentForIndividual.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(2) });
                        if (!rdrIncidentForIndividual.IsDBNull(3)) row.Cells.Add(new CalendarCell { Value = rdrIncidentForIndividual.GetDateTime(3).ToString("MM/dd/yyyy") });
                        if (!rdrIncidentForIndividual.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(4) });
                        if (!rdrIncidentForIndividual.IsDBNull(5)) row.Cells.Add(new CalendarCell { Value = rdrIncidentForIndividual.GetDateTime(5).ToString("MM/dd/yyyy") });
                        if (!rdrIncidentForIndividual.IsDBNull(6)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(6) });
                        if (!rdrIncidentForIndividual.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetDecimal(7).ToString("C") });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrIncidentForIndividual.IsDBNull(8)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(8) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrIncidentForIndividual.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrIncidentForIndividual.GetBoolean(9) });
                        if (!rdrIncidentForIndividual.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(10) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrIncidentForIndividual.IsDBNull(11)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrIncidentForIndividual.GetString(11) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrIncidentForIndividual.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrIncidentForIndividual.GetBoolean(12) });

                        gvIncidentList.Rows.Add(row);
                    }
                }
                rdrIncidentForIndividual.Close();
                if (connRN.State != ConnectionState.Closed) connRN.Close();

                txtMedBillViewMEMB.Text = IndividualSearched.strMembershipID;
                txtMedBillViewIndId.Text = IndividualSearched.strIndividualID;

                List<MedicalBillInfoForList> lstMedicalBillInfoForList = new List<MedicalBillInfoForList>();

                String strSqlQueryForMedBillsForIndividual = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill_type].[MedBillTypeName], " +
                                                             "[dbo].[tbl_medbill_status_code].[BillStatusValue], [dbo].[tbl_medbill].[BillClosed], " +
                                                             "[dbo].[tbl_medbill].[CreatedDate], [dbo].[tbl_CreateStaff].[Staff_Name], " +
                                                             "[dbo].[tbl_medbill].[LastModifiedDate], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                             "[dbo].[tbl_medbill].[Case_Id], [dbo].[tbl_illness].[IllnessNo], [dbo].[tbl_illness].[ICD_10_Id], [dbo].[tbl_incident].[IncidentNo], " +
                                                             "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[Balance], " +
                                                             "[dbo].[tbl_medbill].[SettlementTotal], [dbo].[tbl_medbill].[TotalSharedAmount], " +
                                                             "[dbo].[tbl_medbill].[BillDate], [dbo].[tbl_medbill].[DueDate], " +
                                                             "[dbo].[tbl_medbill].[Guarantor], [dbo].[tbl_medbill].[MedicalProvider_Id], " +
                                                             "[dbo].[tbl_patient_type].[PatientTypeName], [dbo].[tbl_pending_reason].[name], [dbo].[tbl_ineligible_reason].[name], " +
                                                             "[dbo].[tbl_medbill].[PrescriptionDrugName], [dbo].[tbl_medbill].[PrescriptionNo], [dbo].[tbl_medbill].[PrescriptionDescription], " +
                                                             "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy], [dbo].[tbl_medbill].[Note], " +
                                                             "[dbo].[tbl_medbill].[PersonalResponsibilityCredit], " +
                                                             "[dbo].[tbl_medbill].[WellBeingCare], [dbo].[tbl_medbill].[WellBeingCareTotal], " +
                                                             "[dbo].[tbl_medbill].[ProviderPhoneNumber], [dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_medbill].[ProviderContactPerson], " +
                                                             "[dbo].[tbl_medbill].[ProposalLetterSentDate], [dbo].[tbl_medbill].[HIPPASentDate], [dbo].[tbl_medbill].[MedicalRecordDate] " +
                                                             "from [dbo].[tbl_medbill] " +
                                                             "inner join [dbo].[tbl_medbill_type] on [dbo].[tbl_medbill].[MedBillType_Id] = [dbo].[tbl_medbill_type].[MedBillTypeId] " +
                                                             "inner join [dbo].[tbl_medbill_status_code] on [dbo].[tbl_medbill].[BillStatus] = [dbo].[tbl_medbill_status_code].[BillStatusCode] " +
                                                             "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_medbill].[CreatedById] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                                             "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_medbill].[LastModifiedById] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                                             "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                             "inner join [dbo].[tbl_incident] on [dbo].[tbl_medbill].[Incident_Id] = [dbo].[tbl_incident].[Incident_id] " +
                                                             "inner join [dbo].[tbl_patient_type] on [dbo].[tbl_medbill].[PatientTypeId] = [dbo].[tbl_patient_type].[PatientTypeNo] " +
                                                             "inner join [dbo].[tbl_pending_reason] on [dbo].[tbl_medbill].[PendingReason] = [dbo].[tbl_pending_reason].[ID] " +
                                                             "inner join [dbo].[tbl_ineligible_reason] on [dbo].[tbl_medbill].[IneligibleReason] = [dbo].[tbl_ineligible_reason].[id] " +
                                                             "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                             "[dbo].[tbl_medbill].[IsDeleted] = 0";

                SqlCommand cmdQueryForMedBillsForIndividual = new SqlCommand(strSqlQueryForMedBillsForIndividual, connRN);
                cmdQueryForMedBillsForIndividual.CommandType = CommandType.Text;

                cmdQueryForMedBillsForIndividual.Parameters.AddWithValue("@IndividualId", IndividualId);

                SqlDependency dependencyMedicalBill = new SqlDependency(cmdQueryForMedBillsForIndividual);
                dependencyMedicalBill.OnChange += new OnChangeEventHandler(OnMedicalBillListChange);

                if (connRN.State != ConnectionState.Closed)
                {
                    connRN.Close();
                    connRN.Open();
                }
                else if (connRN.State == ConnectionState.Closed) connRN.Open();

                SqlDataReader rdrMedBillsForIndividual = cmdQueryForMedBillsForIndividual.ExecuteReader();

                if (rdrMedBillsForIndividual.HasRows)
                {
                    while (rdrMedBillsForIndividual.Read())
                    {
                        MedicalBillInfoForList medbill_info = new MedicalBillInfoForList();

                        if (!rdrMedBillsForIndividual.IsDBNull(0)) medbill_info.MedBillNo = rdrMedBillsForIndividual.GetString(0);
                        if (!rdrMedBillsForIndividual.IsDBNull(1)) medbill_info.MedBillTypeName = rdrMedBillsForIndividual.GetString(1);
                        if (!rdrMedBillsForIndividual.IsDBNull(2)) medbill_info.MedBillStatus = rdrMedBillsForIndividual.GetString(2);
                        if (!rdrMedBillsForIndividual.IsDBNull(3)) medbill_info.bBillClosed = rdrMedBillsForIndividual.GetBoolean(3);
                        if (!rdrMedBillsForIndividual.IsDBNull(4)) medbill_info.CreateDate = rdrMedBillsForIndividual.GetDateTime(4);
                        if (!rdrMedBillsForIndividual.IsDBNull(5)) medbill_info.CreateStaffName = rdrMedBillsForIndividual.GetString(5);
                        if (!rdrMedBillsForIndividual.IsDBNull(6)) medbill_info.LastModifiDate = rdrMedBillsForIndividual.GetDateTime(6);
                        if (!rdrMedBillsForIndividual.IsDBNull(7)) medbill_info.ModifiStaffName = rdrMedBillsForIndividual.GetString(7);
                        if (!rdrMedBillsForIndividual.IsDBNull(8)) medbill_info.CaseId = rdrMedBillsForIndividual.GetString(8);
                        if (!rdrMedBillsForIndividual.IsDBNull(9)) medbill_info.IllnessNo = rdrMedBillsForIndividual.GetString(9);
                        if (!rdrMedBillsForIndividual.IsDBNull(10)) medbill_info.ICD_10_Id = rdrMedBillsForIndividual.GetString(10);
                        if (!rdrMedBillsForIndividual.IsDBNull(11)) medbill_info.IncidentNo = rdrMedBillsForIndividual.GetString(11);
                        if (!rdrMedBillsForIndividual.IsDBNull(12)) medbill_info.BillAmount = rdrMedBillsForIndividual.GetDecimal(12);
                        if (!rdrMedBillsForIndividual.IsDBNull(13)) medbill_info.Balance = rdrMedBillsForIndividual.GetDecimal(13);
                        if (!rdrMedBillsForIndividual.IsDBNull(14)) medbill_info.SettlementTotal = rdrMedBillsForIndividual.GetDecimal(14);
                        if (!rdrMedBillsForIndividual.IsDBNull(15)) medbill_info.TotalSharedAmount = rdrMedBillsForIndividual.GetDecimal(15);
                        if (!rdrMedBillsForIndividual.IsDBNull(16)) medbill_info.BillDate = rdrMedBillsForIndividual.GetDateTime(16);
                        if (!rdrMedBillsForIndividual.IsDBNull(17)) medbill_info.ReceivedDate = rdrMedBillsForIndividual.GetDateTime(17);
                        if (!rdrMedBillsForIndividual.IsDBNull(18)) medbill_info.Guarantor = rdrMedBillsForIndividual.GetString(18);
                        if (!rdrMedBillsForIndividual.IsDBNull(19)) medbill_info.MedicalProviderId = rdrMedBillsForIndividual.GetString(19);
                        if (!rdrMedBillsForIndividual.IsDBNull(20)) medbill_info.PatientTypeName = rdrMedBillsForIndividual.GetString(20);
                        if (!rdrMedBillsForIndividual.IsDBNull(21)) medbill_info.PendingReason = rdrMedBillsForIndividual.GetString(21);
                        if (!rdrMedBillsForIndividual.IsDBNull(22)) medbill_info.IneligibleReason = rdrMedBillsForIndividual.GetString(22);
                        if (!rdrMedBillsForIndividual.IsDBNull(23)) medbill_info.PrescriptionDrugName = rdrMedBillsForIndividual.GetString(23);
                        if (!rdrMedBillsForIndividual.IsDBNull(24)) medbill_info.PrescriptionNo = rdrMedBillsForIndividual.GetString(24);
                        if (!rdrMedBillsForIndividual.IsDBNull(25)) medbill_info.PrescriptionDescription = rdrMedBillsForIndividual.GetString(25);
                        if (!rdrMedBillsForIndividual.IsDBNull(26)) medbill_info.TotalNumberOfPhysicalTherapy = rdrMedBillsForIndividual.GetInt16(26);
                        if (!rdrMedBillsForIndividual.IsDBNull(27)) medbill_info.Note = rdrMedBillsForIndividual.GetString(27);
                        if (!rdrMedBillsForIndividual.IsDBNull(28)) medbill_info.PersonalResponsibilityCredit = rdrMedBillsForIndividual.GetDecimal(28);
                        if (!rdrMedBillsForIndividual.IsDBNull(29)) medbill_info.WellBeingCare = rdrMedBillsForIndividual.GetBoolean(29);
                        if (!rdrMedBillsForIndividual.IsDBNull(30)) medbill_info.WellBeingCareTotal = rdrMedBillsForIndividual.GetDecimal(30);
                        if (!rdrMedBillsForIndividual.IsDBNull(31)) medbill_info.ProviderPhoneNumber = rdrMedBillsForIndividual.GetString(31);
                        if (!rdrMedBillsForIndividual.IsDBNull(32)) medbill_info.AccountNoAtProvider = rdrMedBillsForIndividual.GetString(32);
                        if (!rdrMedBillsForIndividual.IsDBNull(33)) medbill_info.ProviderContactPerson = rdrMedBillsForIndividual.GetString(33);
                        if (!rdrMedBillsForIndividual.IsDBNull(34)) medbill_info.ProposalLetterSentDate = rdrMedBillsForIndividual.GetDateTime(34);
                        if (!rdrMedBillsForIndividual.IsDBNull(35)) medbill_info.HIPPASentDate = rdrMedBillsForIndividual.GetDateTime(35);
                        if (!rdrMedBillsForIndividual.IsDBNull(36)) medbill_info.MedicalRecordDate = rdrMedBillsForIndividual.GetDateTime(36);

                        lstMedicalBillInfoForList.Add(medbill_info);
                    }
                }

                rdrMedBillsForIndividual.Close();
                if (connRN.State != ConnectionState.Closed) connRN.Close();

                foreach (MedicalBillInfoForList MedBillInfo in lstMedicalBillInfoForList)
                {
                    String strSqlQueryForMedicalProviderName = "select [dbo].[account].[Name] from [dbo].[account] where [dbo].[account].[Id] = @MedicalProviderId";

                    SqlCommand cmdQueryForMedicalProviderName = new SqlCommand(strSqlQueryForMedicalProviderName, connSalesforce2);
                    cmdQueryForMedicalProviderName.CommandType = CommandType.Text;

                    cmdQueryForMedicalProviderName.Parameters.AddWithValue("@MedicalProviderId", MedBillInfo.MedicalProviderId);

                    if (connSalesforce2.State != ConnectionState.Closed)
                    {
                        connSalesforce2.Close();
                        connSalesforce2.Open();
                    }
                    else if (connSalesforce2.State == ConnectionState.Closed) connSalesforce2.Open();
                    Object objMedicalProviderName = cmdQueryForMedicalProviderName.ExecuteScalar();
                    if (connSalesforce2.State == ConnectionState.Open) connSalesforce2.Close();

                    if (objMedicalProviderName != null) MedBillInfo.MedicalProviderName = objMedicalProviderName.ToString();
                }

                gvMedBillList.Rows.Clear();
                foreach (MedicalBillInfoForList medbill_info in lstMedicalBillInfoForList)
                {
                    DataGridViewRow row = new DataGridViewRow();
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.MedBillNo });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.MedBillTypeName });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.MedBillStatus });
                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = medbill_info.bBillClosed });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.CreateDate.Value.ToString("MM/dd/yyyy") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.CreateStaffName });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.LastModifiDate.Value.ToString("MM/dd/yyyy") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.ModifiStaffName });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.CaseId });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.IllnessNo });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.ICD_10_Id });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.IncidentNo });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.BillAmount.ToString("C") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.Balance.ToString("C") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.SettlementTotal.ToString("C") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.TotalSharedAmount.ToString("C") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.BillDate.Value.ToString("MM/dd/yyyy") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.ReceivedDate.Value.ToString("MM/dd/yyyy") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.Guarantor });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.MedicalProviderName });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.PatientTypeName });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.PendingReason });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.IneligibleReason });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.PrescriptionDrugName });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.PrescriptionNo });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.PrescriptionDescription });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.TotalNumberOfPhysicalTherapy });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.Note });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.PersonalResponsibilityCredit.ToString("C") });
                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = medbill_info.WellBeingCare });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.WellBeingCareTotal.ToString("C") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.ProviderPhoneNumber });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.AccountNoAtProvider });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.ProviderContactPerson });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.ProposalLetterSentDate.Value.ToString("MM/dd/yyyy") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.HIPPASentDate.Value.ToString("MM/dd/yyyy") });
                    row.Cells.Add(new DataGridViewTextBoxCell { Value = medbill_info.MedicalRecordDate.Value.ToString("MM/dd/yyyy") });

                    gvMedBillList.Rows.Add(row);

                }

                btnIndViewUpdateUpperRight.Enabled = true;
                //btnIndViewUpdateLowerRight.Enabled = true;

                tbCMMManager.SelectedTab = tbpgIndividual;

                PrevTabPage = TabPage.None;
                CurrentTabPage = TabPage.DashBoard;
            }
        }

        private void btnDeleteMedBill_Click(object sender, EventArgs e)
        {

            // put code to check the med bill has settlement in it

            DialogResult dlgResult = MessageBox.Show("Are you sure to delete selected Med Bills.", "Warning", MessageBoxButtons.YesNo);

            if (dlgResult == DialogResult.Yes)
            {
                Boolean bError = false;
                int nRowSelected = 0;

                for (int i = 0; i < gvCasePageMedBills.Rows.Count; i++)
                {
                    DataGridViewCheckBoxCell chkMedBillCell = gvCasePageMedBills["MedBillSelected", i] as DataGridViewCheckBoxCell;

                    if ((Boolean)chkMedBillCell.Value == true)
                    {
                        nRowSelected++;
                        String MedBillToDelete = gvCasePageMedBills["MedBillNo", i].Value as String;

                        //String strSqlDeleteMedBill = "delete from [dbo].[tbl_medbill] where [dbo].[tbl_medbill].[BillNo] = @MedBillNo";
                        String strSqlDeleteMedBill = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[IsDeleted] = 1 where [dbo].[tbl_medbill].[BillNo] = @MedBillNo";

                        SqlCommand cmdDeleteMedBill = new SqlCommand(strSqlDeleteMedBill, connRN4);
                        cmdDeleteMedBill.CommandType = CommandType.Text;

                        cmdDeleteMedBill.Parameters.AddWithValue("@MedBillNo", MedBillToDelete);

                        //if (connRN.State == ConnectionState.Closed) connRN.Open();
                        if (connRN4.State != ConnectionState.Closed)
                        {
                            connRN4.Close();
                            connRN4.Open();
                        }
                        else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                        int nRowDeleted = cmdDeleteMedBill.ExecuteNonQuery();
                        if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                        if (nRowDeleted == 0)
                        {
                            bError = true;
                        }
                    }
                }

                if ((bError == true) && (nRowSelected > 0))
                {
                    MessageBox.Show("Some of selected Medical Bills have not deleted.", "Error");
                    return;
                }
                if ((bError == false) && (nRowSelected > 0))
                {
                    MessageBox.Show("Medical Bills have been deleted.", "Information");
                    return;
                }
            }
            else return;
        }

        private void btnCaseCreationLowerSave_Click(object sender, EventArgs e)
        {
            Cursor.Current = Cursors.WaitCursor;

            String CaseName = txtCaseName.Text.Trim();
            String IndividualId = txtCaseIndividualID.Text.Trim();

            String strSqlQueryForCaseName = "select [dbo].[tbl_case].[Case_Name] from [dbo].[tbl_case] " +
                                            "where [dbo].[tbl_case].[Case_Name] = @CaseName and [dbo].[tbl_case].[Contact_ID] = @IndividualId";

            SqlCommand cmdQueryForCaseName = new SqlCommand(strSqlQueryForCaseName, connRN4);
            cmdQueryForCaseName.CommandText = strSqlQueryForCaseName;
            cmdQueryForCaseName.CommandType = CommandType.Text;

            cmdQueryForCaseName.Parameters.AddWithValue("@CaseName", CaseName);
            cmdQueryForCaseName.Parameters.AddWithValue("@IndividualId", IndividualId);

            if (connRN4.State != ConnectionState.Closed)
            {
                connRN4.Close();
                connRN4.Open();
            }
            else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
            Object objCaseName = cmdQueryForCaseName.ExecuteScalar();
            if (connRN4.State != ConnectionState.Closed) connRN4.Close();

            if (objCaseName == null)
            {
                frmSaveNewCase frmSaveNewCase = new frmSaveNewCase();
                frmSaveNewCase.StartPosition = FormStartPosition.CenterParent;

                DialogResult dlgResult = frmSaveNewCase.ShowDialog();

                if (dlgResult == DialogResult.Yes)
                {

                    String strCaseId = String.Empty;
                    String strIndividualID = String.Empty;
                    String strNPFormFilePath = String.Empty;
                    String strNPFUploadDate = String.Empty;
                    String strIBFilePath = String.Empty;
                    String strIBUploadDate = String.Empty;
                    String strPopFilePath = String.Empty;
                    String strPopUploadDate = String.Empty;
                    String strMedicalRecordFilePath = String.Empty;
                    String strMedicalRecordUploadDate = String.Empty;
                    String strUnknownDocumentFilePath = String.Empty;
                    String strUnknownDocUploadDate = String.Empty;
                    String strLogID = String.Empty;

                    CasedInfoDetailed caseDetail = new CasedInfoDetailed();

                    caseDetail.CaseId = String.Empty;
                    caseDetail.ContactId = String.Empty;
                    caseDetail.Individual_Id = String.Empty;
                    caseDetail.CreateDate = DateTime.Today;
                    caseDetail.ModificationDate = DateTime.Today;
                    caseDetail.CreateStaff = nLoggedUserId;
                    caseDetail.ModifyingStaff = nLoggedUserId;
                    switch (cbCaseStatus.SelectedIndex)
                    {
                        case (int)CaseStatus.OnGoing:
                            caseDetail.Status = CaseStatus.OnGoing;
                            break;
                        case (int)CaseStatus.Processing:
                            caseDetail.Status = CaseStatus.Processing;
                            break;
                        case (int)CaseStatus.Closed:
                            caseDetail.Status = CaseStatus.Closed;
                            break;
                    }
                    caseDetail.Individual_Id = String.Empty;
                    caseDetail.NPF_Form = 0;
                    caseDetail.NPF_Form_File_Name = String.Empty;
                    caseDetail.NPF_Form_Destination_File_Name = String.Empty;

                    caseDetail.IB_Form = 0;
                    caseDetail.IB_Form_File_Name = String.Empty;
                    caseDetail.IB_Form_Destination_File_Name = String.Empty;

                    caseDetail.POP_Form = 0;
                    caseDetail.POP_Form_File_Name = String.Empty;
                    caseDetail.POP_Form_Destionation_File_Name = String.Empty;

                    caseDetail.MedicalRecord_Form = 0;
                    caseDetail.MedRec_Form_File_Name = String.Empty;
                    caseDetail.MedRec_Form_Destination_File_Name = String.Empty;

                    caseDetail.Unknown_Form = 0;
                    caseDetail.Unknown_Form_File_Name = String.Empty;
                    caseDetail.Unknown_Form_Destination_File_Name = String.Empty;

                    caseDetail.Note = String.Empty;
                    caseDetail.Log_Id = String.Empty;
                    caseDetail.AddBill_Form = false;

                    caseDetail.Remove_Log = String.Empty;

                    if (txtCaseName.Text.Trim() != String.Empty) caseDetail.CaseId = txtCaseName.Text.Trim();
                    if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.ContactId = txtCaseIndividualID.Text.Trim();
                    if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.Individual_Id = txtCaseIndividualID.Text.Trim();
                    if (chkNPF_CaseCreationPage.Checked)
                    {
                        caseDetail.NPF_Form = 1;
                        if (txtNPFFormFilePath.Text.Trim() != String.Empty) caseDetail.NPF_Form_File_Name = txtNPFFormFilePath.Text.Trim();
                        //if (txtNPFUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtNPFUploadDate.Text.Trim(), out result)) caseDetail.NPF_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.NPF_ReceivedDate = dtpNPFReceivedDate.Value;
                        caseDetail.NPF_Form_Destination_File_Name = strNPFormFilePathDestination;
                    }
                    if (chkIB_CaseCreationPage.Checked)
                    {
                        caseDetail.IB_Form = 1;
                        if (txtIBFilePath.Text.Trim() != String.Empty) caseDetail.IB_Form_File_Name = txtIBFilePath.Text.Trim();
                        //if (txtIBUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtIBUploadDate.Text.Trim(), out result)) caseDetail.IB_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.IB_ReceivedDate = dtpIBReceivedDate.Value;
                        caseDetail.IB_Form_Destination_File_Name = strIBFilePathDestination;
                    }
                    if (chkPoP_CaseCreationPage.Checked)
                    {
                        caseDetail.POP_Form = 1;
                        if (txtPopFilePath.Text.Trim() != String.Empty) caseDetail.POP_Form_File_Name = txtPopFilePath.Text.Trim();
                        //if (txtPoPUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtPoPUploadDate.Text.Trim(), out result)) caseDetail.POP_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.POP_ReceivedDate = dtpPoPReceivedDate.Value;
                        caseDetail.POP_Form_Destionation_File_Name = strPopFilePathDestination;
                    }
                    if (chkMedicalRecordCaseCreationPage.Checked)
                    {
                        caseDetail.MedicalRecord_Form = 1;
                        if (txtMedicalRecordFilePath.Text.Trim() != String.Empty) caseDetail.MedRec_Form_File_Name = txtMedicalRecordFilePath.Text.Trim();
                        //if (txtMRUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtMRUploadDate.Text.Trim(), out result)) caseDetail.MedRec_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.MedRec_ReceivedDate = dtpMRReceivedDate.Value;
                        caseDetail.MedRec_Form_Destination_File_Name = strMedRecordFilePathDestination;
                    }
                    if (chkOtherDocCaseCreationPage.Checked)
                    {
                        caseDetail.Unknown_Form = 1;
                        if (txtOtherDocumentFilePath.Text.Trim() != String.Empty) caseDetail.Unknown_Form_File_Name = txtOtherDocumentFilePath.Text.Trim();
                        //if (txtOtherDocUploadDate.Text.Trim() != String.Empty)      //caseDetail.Unknown_ReceivedDate = DateTime.Parse(txtOtherDocUploadDate.Text.Trim());
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtOtherDocUploadDate.Text.Trim(), out result)) caseDetail.Unknown_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.Unknown_ReceivedDate = dtpOtherDocReceivedDate.Value;
                        caseDetail.Unknown_Form_Destination_File_Name = strUnknownDocFilePathDestination;
                    }

                    caseDetail.Log_Id = "Log: " + txtCaseName.Text;
                    caseDetail.AddBill_Form = false;
                    caseDetail.AddBill_Received_Date = null;
                    caseDetail.Remove_Log = String.Empty;

                    String strSqlCreateCase = "insert into tbl_case (IsDeleted, Case_Name, Contact_ID, CreateDate, ModifiDate, CreateStaff, ModifiStaff, Case_status, " +
                                               "NPF_Form, NPF_Form_File_Name, NPF_Form_Destination_File_Name, NPF_Receiv_Date, " +
                                               "IB_Form, IB_Form_File_Name, IB_Form_Destination_File_Name, IB_Receiv_Date, " +
                                               "POP_Form, POP_Form_File_Name, POP_Form_Destination_File_Name, POP_Receiv_Date, " +
                                               "MedRec_Form, MedRec_Form_File_Name, MedRec_Form_Destination_File_Name, MedRec_Receiv_Date, " +
                                               "Unknown_Form, Unknown_Form_File_Name, Unknown_Form_Destination_File_Name, Unknown_Receiv_Date, " +
                                               "Note, Log_ID, AddBill_Form, AddBill_receiv_Date, Remove_log, individual_id) " +
                                               "Values (@IsDeleted, @CaseId, @ContactId, @CreateDate, @ModifiDate, @CreateStaff, @ModifiStaff, @CaseStatus, " +
                                               "@NPF_Form, @NPF_Form_File_Name, @NPF_Form_Destination_File_Name, @NPF_Receive_Date, " +
                                               "@IB_Form, @IB_Form_File_Name, @IB_Form_Destination_File_Name, @IB_Receive_Date, " +
                                               "@POP_Form, @POP_Form_File_Name, @POP_Form_Destination_File_Name, @POP_Receive_Date, " +
                                               "@MedRecord_Form, @MedRecord_Form_File_Name, @MedRecord_Form_Destination_File_name, @MedRecord_Receive_Date, " +
                                               "@Unknown_Form, @Unknown_Form_File_Name, @Unknown_Form_Destination_File_Name, @Unknown_Receive_Date, " +
                                               "@Note, @Log_Id, @AddBill_Form, @AddBill_ReceiveDate, @Remove_Log, @Individual_Id)";

                    SqlCommand cmdInsertNewCase = new SqlCommand(strSqlCreateCase, connRN4);
                    cmdInsertNewCase.CommandType = CommandType.Text;

                    cmdInsertNewCase.Parameters.AddWithValue("@IsDeleted", 0);
                    cmdInsertNewCase.Parameters.AddWithValue("@CaseId", caseDetail.CaseId);
                    cmdInsertNewCase.Parameters.AddWithValue("@ContactId", caseDetail.ContactId);
                    cmdInsertNewCase.Parameters.AddWithValue("@CreateDate", caseDetail.CreateDate);
                    cmdInsertNewCase.Parameters.AddWithValue("@ModifiDate", caseDetail.ModificationDate);
                    cmdInsertNewCase.Parameters.AddWithValue("@CreateStaff", caseDetail.CreateStaff);
                    cmdInsertNewCase.Parameters.AddWithValue("@ModifiStaff", caseDetail.ModifyingStaff);
                    cmdInsertNewCase.Parameters.AddWithValue("@CaseStatus", caseDetail.Status);

                    cmdInsertNewCase.Parameters.AddWithValue("@NPF_Form", caseDetail.NPF_Form);
                    cmdInsertNewCase.Parameters.AddWithValue("@NPF_Form_File_Name", caseDetail.NPF_Form_File_Name);
                    cmdInsertNewCase.Parameters.AddWithValue("@NPF_Form_Destination_File_Name", caseDetail.NPF_Form_Destination_File_Name);
                    if (caseDetail.NPF_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@NPF_Receive_Date", caseDetail.NPF_ReceivedDate);
                    else cmdInsertNewCase.Parameters.AddWithValue("@NPF_Receive_Date", DBNull.Value);

                    cmdInsertNewCase.Parameters.AddWithValue("@IB_Form", caseDetail.IB_Form);
                    cmdInsertNewCase.Parameters.AddWithValue("@IB_Form_File_Name", caseDetail.IB_Form_File_Name);
                    cmdInsertNewCase.Parameters.AddWithValue("@IB_Form_Destination_File_Name", caseDetail.IB_Form_Destination_File_Name);
                    if (caseDetail.IB_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@IB_Receive_Date", caseDetail.IB_ReceivedDate);
                    else cmdInsertNewCase.Parameters.AddWithValue("@IB_Receive_Date", DBNull.Value);

                    cmdInsertNewCase.Parameters.AddWithValue("@POP_Form", caseDetail.POP_Form);
                    cmdInsertNewCase.Parameters.AddWithValue("@POP_Form_File_Name", caseDetail.POP_Form_File_Name);
                    cmdInsertNewCase.Parameters.AddWithValue("@POP_Form_Destination_File_Name", caseDetail.POP_Form_Destionation_File_Name);
                    if (caseDetail.POP_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@POP_Receive_Date", caseDetail.POP_ReceivedDate);
                    else cmdInsertNewCase.Parameters.AddWithValue("@POP_Receive_Date", DBNull.Value);

                    cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Form", caseDetail.MedicalRecord_Form);
                    cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Form_File_Name", caseDetail.MedRec_Form_File_Name);
                    cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Form_Destination_File_Name", caseDetail.MedRec_Form_Destination_File_Name);
                    if (caseDetail.MedRec_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Receive_Date", caseDetail.MedRec_ReceivedDate);
                    else cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Receive_Date", DBNull.Value);

                    cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Form", caseDetail.Unknown_Form);
                    cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Form_File_Name", caseDetail.Unknown_Form_File_Name);
                    cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Form_Destination_File_Name", caseDetail.Unknown_Form_Destination_File_Name);
                    if (caseDetail.Unknown_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Receive_Date", caseDetail.Unknown_ReceivedDate);
                    else cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Receive_Date", DBNull.Value);

                    cmdInsertNewCase.Parameters.AddWithValue("@Note", caseDetail.Note);
                    cmdInsertNewCase.Parameters.AddWithValue("@Log_Id", caseDetail.Log_Id);
                    cmdInsertNewCase.Parameters.AddWithValue("@AddBill_Form", caseDetail.AddBill_Form);
                    if (caseDetail.AddBill_Received_Date != null) cmdInsertNewCase.Parameters.AddWithValue("@AddBill_ReceiveDate", caseDetail.AddBill_Received_Date);
                    else cmdInsertNewCase.Parameters.AddWithValue("@AddBill_ReceiveDate", DBNull.Value);
                    if (caseDetail.Remove_Log == String.Empty) cmdInsertNewCase.Parameters.AddWithValue("@Remove_Log", DBNull.Value);
                    cmdInsertNewCase.Parameters.AddWithValue("@Individual_Id", caseDetail.Individual_Id);

                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    int nResult = cmdInsertNewCase.ExecuteNonQuery();

                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    if (nResult == 1)
                    {
                        MessageBox.Show("The case has been saved.", "Information");

                        caseDetail.CaseId = txtCaseName.Text.Trim();
                        strCaseIdSelected = caseDetail.CaseId;
                        strContactIdSelected = caseDetail.ContactId;

                        btnNewMedBill_Case.Enabled = true;
                        btnEditMedBill.Enabled = true;
                        btnDeleteMedBill.Enabled = true;
                    }

                    return;
                }
                else if (dlgResult == DialogResult.Cancel)
                {
                    return;
                }
            }
            else if (objCaseName != null)    // Edit and update case
            {
                frmSaveChangeOnCase frmDlgSaveChange = new frmSaveChangeOnCase();

                frmDlgSaveChange.StartPosition = FormStartPosition.CenterParent;
                DialogResult dlgResult = frmDlgSaveChange.ShowDialog();

                if (dlgResult == DialogResult.Yes)
                {
                    CasedInfoDetailed caseDetail = new CasedInfoDetailed();

                    caseDetail.CaseId = txtCaseName.Text.Trim();
                    caseDetail.ContactId = String.Empty;
                    caseDetail.Individual_Id = String.Empty;
                    caseDetail.CreateDate = DateTime.Today;
                    caseDetail.ModifyingStaff = nLoggedUserId;
                    switch (cbCaseStatus.SelectedIndex)
                    {
                        case (int)CaseStatus.OnGoing:
                            caseDetail.Status = CaseStatus.OnGoing;
                            break;
                        case (int)CaseStatus.Processing:
                            caseDetail.Status = CaseStatus.Processing;
                            break;
                        case (int)CaseStatus.Closed:
                            caseDetail.Status = CaseStatus.Closed;
                            break;
                    }
                    caseDetail.Individual_Id = String.Empty;
                    caseDetail.NPF_Form = 0;
                    caseDetail.NPF_Form_File_Name = String.Empty;
                    caseDetail.NPF_Form_Destination_File_Name = String.Empty;
                    caseDetail.IB_Form = 0;
                    caseDetail.IB_Form_File_Name = String.Empty;
                    caseDetail.IB_Form_Destination_File_Name = String.Empty;
                    caseDetail.POP_Form = 0;
                    caseDetail.POP_Form_File_Name = String.Empty;
                    caseDetail.POP_Form_Destionation_File_Name = String.Empty;
                    caseDetail.MedicalRecord_Form = 0;
                    caseDetail.MedRec_Form_File_Name = String.Empty;
                    caseDetail.MedRec_Form_Destination_File_Name = String.Empty;
                    caseDetail.Unknown_Form = 0;
                    caseDetail.Unknown_Form_File_Name = String.Empty;
                    caseDetail.Unknown_Form_Destination_File_Name = String.Empty;
                    caseDetail.Note = String.Empty;
                    caseDetail.Log_Id = String.Empty;
                    caseDetail.AddBill_Form = false;
                    caseDetail.Remove_Log = String.Empty;

                    if (txtCaseName.Text.Trim() != String.Empty) caseDetail.CaseId = txtCaseName.Text.Trim();
                    if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.ContactId = txtCaseIndividualID.Text.Trim();
                    if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.Individual_Id = txtCaseIndividualID.Text.Trim();

                    if (chkNPF_CaseCreationPage.Checked)
                    {
                        caseDetail.NPF_Form = 1;
                        if (txtNPFFormFilePath.Text.Trim() != String.Empty) caseDetail.NPF_Form_File_Name = txtNPFFormFilePath.Text.Trim();
                        //if (txtNPFUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtNPFUploadDate.Text.Trim(), out result)) caseDetail.NPF_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.NPF_ReceivedDate = dtpNPFReceivedDate.Value;
                        caseDetail.NPF_Form_Destination_File_Name = strNPFormFilePathDestination;
                    }
                    if (chkIB_CaseCreationPage.Checked)
                    {
                        caseDetail.IB_Form = 1;
                        if (txtIBFilePath.Text.Trim() != String.Empty) caseDetail.IB_Form_File_Name = txtIBFilePath.Text.Trim();
                        //if (txtIBUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtIBUploadDate.Text.Trim(), out result)) caseDetail.IB_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.IB_ReceivedDate = dtpIBReceivedDate.Value;
                        caseDetail.IB_Form_Destination_File_Name = strIBFilePathDestination;
                    }
                    if (chkPoP_CaseCreationPage.Checked)
                    {
                        caseDetail.POP_Form = 1;
                        if (txtPopFilePath.Text.Trim() != String.Empty) caseDetail.POP_Form_File_Name = txtPopFilePath.Text.Trim();
                        //if (txtPoPUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtPoPUploadDate.Text.Trim(), out result)) caseDetail.POP_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.POP_ReceivedDate = dtpPoPReceivedDate.Value;
                        caseDetail.POP_Form_Destionation_File_Name = strPopFilePathDestination;
                    }
                    if (chkMedicalRecordCaseCreationPage.Checked)
                    {
                        caseDetail.MedicalRecord_Form = 1;
                        if (txtMedicalRecordFilePath.Text.Trim() != String.Empty) caseDetail.MedRec_Form_File_Name = txtMedicalRecordFilePath.Text.Trim();
                        //if (txtMRUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtMRUploadDate.Text.Trim(), out result)) caseDetail.MedRec_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.MedRec_ReceivedDate = dtpMRReceivedDate.Value;
                        caseDetail.MedRec_Form_Destination_File_Name = strMedRecordFilePathDestination;
                    }
                    if (chkOtherDocCaseCreationPage.Checked)
                    {
                        caseDetail.Unknown_Form = 1;
                        if (txtOtherDocumentFilePath.Text.Trim() != String.Empty) caseDetail.Unknown_Form_File_Name = txtOtherDocumentFilePath.Text.Trim();
                        //if (txtOtherDocUploadDate.Text.Trim() != String.Empty)
                        //{
                        //    DateTime result;
                        //    if (DateTime.TryParse(txtOtherDocUploadDate.Text.Trim(), out result)) caseDetail.Unknown_ReceivedDate = result;
                        //    else MessageBox.Show("Invalid DateTime value", "Error");
                        //}
                        caseDetail.Unknown_ReceivedDate = dtpOtherDocReceivedDate.Value;
                        caseDetail.Unknown_Form_Destination_File_Name = strUnknownDocFilePathDestination;
                    }

                    caseDetail.Note = txtNoteOnCase.Text.Trim();
                    caseDetail.Log_Id = "Log: " + txtCaseName.Text;
                    caseDetail.AddBill_Form = true;
                    caseDetail.AddBill_Received_Date = DateTime.Today;
                    caseDetail.Remove_Log = String.Empty;

                    String strSqlUpdateCase = "Update [dbo].[tbl_case] set [dbo].[tbl_case].[ModifiDate] = @ModifiDate, [dbo].[tbl_case].[ModifiStaff] = @ModifiStaff, " +
                                              "[dbo].[tbl_case].[NPF_Form] = @NPF_Form, [dbo].[tbl_case].[NPF_Form_File_Name] = @NPF_Form_File_Name, " +
                                              "[dbo].[tbl_case].[NPF_Form_Destination_File_Name] = @NPF_Form_Destination_File_Name, [dbo].[tbl_case].[NPF_Receiv_Date] = @NPF_Receiv_Date, " +
                                              "[dbo].[tbl_case].[IB_Form] = @IB_Form, [dbo].[tbl_case].[IB_Form_File_Name] = @IB_Form_File_Name, " +
                                              "[dbo].[tbl_case].[IB_Form_Destination_File_Name] = @IB_Form_Destination_File_Name, [dbo].[tbl_case].[IB_Receiv_Date] = @IB_Receiv_Date, " +
                                              "[dbo].[tbl_case].[POP_Form] = @POP_Form, [dbo].[tbl_case].[POP_Form_File_Name] = @POP_Form_File_Name, " +
                                              "[dbo].[tbl_case].[POP_Form_Destination_File_Name] = @POP_Form_Destination_File_Name, [dbo].[tbl_case].[POP_Receiv_Date] = @POP_Receiv_Date, " +
                                              "[dbo].[tbl_case].[MedRec_Form] = @MedRec_Form, [dbo].[tbl_case].[MedRec_Form_File_Name] = @MedRec_Form_File_Name, " +
                                              "[dbo].[tbl_case].[MedRec_Form_Destination_File_Name] = @MedRec_Form_Destination_File_Name, [dbo].[tbl_case].[MedRec_Receiv_Date] = @MedRec_Receiv_Date, " +
                                              "[dbo].[tbl_case].[Unknown_Form] = @Unknown_Form, [dbo].[tbl_case].[Unknown_Form_File_Name] = @Unknown_Form_File_Name, " +
                                              "[dbo].[tbl_case].[Unknown_Form_Destination_File_Name] = @Unknown_Form_Destination_File_Name, [dbo].[tbl_case].[Unknown_Receiv_Date] = @Unknown_Receiv_Date, " +
                                              "[dbo].[tbl_case].[Note] = @CaseNote, [dbo].[tbl_case].[Log_ID] = @Log_Id, [dbo].[tbl_case].[AddBill_Form] = @AddBill_Form, " +
                                              "[dbo].[tbl_case].[AddBill_Receiv_Date] = @AddBill_Receiv_Date, [dbo].[tbl_case].[Remove_Log] = @Remove_Log, " +
                                              "[dbo].[tbl_case].[Case_status] = @CaseStatus " +
                                              "where [dbo].[tbl_case].[Case_Name] = @Case_Id";

                    SqlCommand cmdUpdateCase = new SqlCommand(strSqlUpdateCase, connRN4);
                    cmdUpdateCase.CommandType = CommandType.Text;

                    cmdUpdateCase.Parameters.AddWithValue("@ModifiDate", caseDetail.ModificationDate);
                    cmdUpdateCase.Parameters.AddWithValue("@ModifiStaff", caseDetail.ModifyingStaff);
                    cmdUpdateCase.Parameters.AddWithValue("@NPF_Form", caseDetail.NPF_Form);
                    cmdUpdateCase.Parameters.AddWithValue("@NPF_Form_File_Name", caseDetail.NPF_Form_File_Name);
                    cmdUpdateCase.Parameters.AddWithValue("@NPF_Form_Destination_File_Name", caseDetail.NPF_Form_Destination_File_Name);
                    if (caseDetail.NPF_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@NPF_Receiv_Date", caseDetail.NPF_ReceivedDate);
                    else cmdUpdateCase.Parameters.AddWithValue("@NPF_Receiv_Date", DBNull.Value);

                    cmdUpdateCase.Parameters.AddWithValue("@IB_Form", caseDetail.IB_Form);
                    cmdUpdateCase.Parameters.AddWithValue("@IB_Form_File_Name", caseDetail.IB_Form_File_Name);
                    cmdUpdateCase.Parameters.AddWithValue("@IB_Form_Destination_File_Name", caseDetail.IB_Form_Destination_File_Name);
                    if (caseDetail.IB_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@IB_Receiv_Date", caseDetail.IB_ReceivedDate);
                    else cmdUpdateCase.Parameters.AddWithValue("@IB_Receiv_Date", DBNull.Value);

                    cmdUpdateCase.Parameters.AddWithValue("@POP_Form", caseDetail.POP_Form);
                    cmdUpdateCase.Parameters.AddWithValue("@POP_Form_File_Name", caseDetail.POP_Form_File_Name);
                    cmdUpdateCase.Parameters.AddWithValue("@POP_Form_Destination_File_Name", caseDetail.POP_Form_Destionation_File_Name);
                    if (caseDetail.POP_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@POP_Receiv_Date", caseDetail.POP_ReceivedDate);
                    else cmdUpdateCase.Parameters.AddWithValue("@POP_Receiv_Date", DBNull.Value);

                    cmdUpdateCase.Parameters.AddWithValue("@MedRec_Form", caseDetail.MedicalRecord_Form);
                    cmdUpdateCase.Parameters.AddWithValue("@MedRec_Form_File_Name", caseDetail.MedRec_Form_File_Name);
                    cmdUpdateCase.Parameters.AddWithValue("@MedRec_Form_Destination_File_Name", caseDetail.MedRec_Form_Destination_File_Name);
                    if (caseDetail.MedRec_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@MedRec_Receiv_Date", caseDetail.MedRec_ReceivedDate);
                    else cmdUpdateCase.Parameters.AddWithValue("@MedRec_Receiv_Date", DBNull.Value);

                    cmdUpdateCase.Parameters.AddWithValue("@Unknown_Form", caseDetail.Unknown_Form);
                    cmdUpdateCase.Parameters.AddWithValue("@Unknown_Form_File_Name", caseDetail.Unknown_Form_File_Name);
                    cmdUpdateCase.Parameters.AddWithValue("@Unknown_Form_Destination_File_Name", caseDetail.Unknown_Form_Destination_File_Name);
                    if (caseDetail.Unknown_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@Unknown_Receiv_Date", caseDetail.Unknown_ReceivedDate);
                    else cmdUpdateCase.Parameters.AddWithValue("@Unknown_Receiv_Date", DBNull.Value);

                    cmdUpdateCase.Parameters.AddWithValue("@CaseNote", caseDetail.Note);
                    cmdUpdateCase.Parameters.AddWithValue("@Log_Id", caseDetail.Log_Id);
                    cmdUpdateCase.Parameters.AddWithValue("@AddBill_Form", caseDetail.AddBill_Form);
                    if (caseDetail.AddBill_Received_Date != null) cmdUpdateCase.Parameters.AddWithValue("@AddBill_Receiv_Date", caseDetail.AddBill_Received_Date);
                    else cmdUpdateCase.Parameters.AddWithValue("@AddBill_Receiv_Date", DBNull.Value);

                    cmdUpdateCase.Parameters.AddWithValue("@Remove_Log", caseDetail.Remove_Log);
                    cmdUpdateCase.Parameters.AddWithValue("@CaseStatus", caseDetail.Status);

                    cmdUpdateCase.Parameters.AddWithValue("@Case_Id", caseDetail.CaseId);

                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    int nRowAffected = cmdUpdateCase.ExecuteNonQuery();
                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                    if (nRowAffected == 1)
                    {
                        MessageBox.Show("The change has been saved.", "Information");

                        btnNewMedBill_Case.Enabled = true;
                        btnEditMedBill.Enabled = true;
                        btnDeleteMedBill.Enabled = true;
                    }
                    else if (nRowAffected == 0) MessageBox.Show("Update failed", "Error");
                }
                else
                {
                    return;
                }
            }

            Cursor.Current = Cursors.Default;
        }

        private void btnCaseCreationLowerCancel_Click(object sender, EventArgs e)
        {
            DialogResult dlgClose = MessageBox.Show("Do you want to close Case page?", "Alert", MessageBoxButtons.YesNo);

            if (dlgClose == DialogResult.Yes)
            {
                DialogResult dlgResult = MessageBox.Show("Do you want save the change?", "Alert", MessageBoxButtons.YesNo);

                if (dlgResult == DialogResult.Yes)
                {
                    String CaseName = txtCaseName.Text.Trim();
                    String IndividualId = txtCaseIndividualID.Text.Trim();

                    String strSqlQueryForCaseName = "select [dbo].[tbl_case].[Case_Name] from [dbo].[tbl_case] " +
                                                    "where [dbo].[tbl_case].[Case_Name] = @CaseName and [dbo].[tbl_case].[Contact_ID] = @IndividualId";

                    SqlCommand cmdQueryForCaseName = new SqlCommand(strSqlQueryForCaseName, connRN);
                    cmdQueryForCaseName.CommandText = strSqlQueryForCaseName;
                    cmdQueryForCaseName.CommandType = CommandType.Text;

                    cmdQueryForCaseName.Parameters.AddWithValue("@CaseName", CaseName);
                    cmdQueryForCaseName.Parameters.AddWithValue("@IndividualId", IndividualId);

                    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                    if (connRN.State != ConnectionState.Closed)
                    {
                        connRN.Close();
                        connRN.Open();
                    }
                    else if (connRN.State == ConnectionState.Closed) connRN.Open();
                    Object objCaseName = cmdQueryForCaseName.ExecuteScalar();
                    if (connRN.State != ConnectionState.Closed) connRN.Close();

                    if (objCaseName == null)
                    {
                        //frmSaveNewCase frmSaveNewCase = new frmSaveNewCase();

                        //DialogResult dlgResult = frmSaveNewCase.ShowDialog();

                        //if (dlgResult == DialogResult.Yes)
                        //{

                        String strCaseId = String.Empty;
                        String strIndividualID = String.Empty;
                        String strNPFormFilePath = String.Empty;
                        String strNPFUploadDate = String.Empty;
                        String strIBFilePath = String.Empty;
                        String strIBUploadDate = String.Empty;
                        String strPopFilePath = String.Empty;
                        String strPopUploadDate = String.Empty;
                        String strMedicalRecordFilePath = String.Empty;
                        String strMedicalRecordUploadDate = String.Empty;
                        String strUnknownDocumentFilePath = String.Empty;
                        String strUnknownDocUploadDate = String.Empty;
                        String strLogID = String.Empty;

                        CasedInfoDetailed caseDetail = new CasedInfoDetailed();

                        caseDetail.CaseId = String.Empty;
                        caseDetail.ContactId = String.Empty;
                        caseDetail.Individual_Id = String.Empty;
                        caseDetail.CreateDate = DateTime.Today;
                        caseDetail.ModificationDate = DateTime.Today;
                        caseDetail.CreateStaff = nLoggedUserId;
                        caseDetail.ModifyingStaff = nLoggedUserId;
                        switch (cbCaseStatus.SelectedIndex)
                        {
                            case (int)CaseStatus.OnGoing:
                                caseDetail.Status = CaseStatus.OnGoing;
                                break;
                            case (int)CaseStatus.Processing:
                                caseDetail.Status = CaseStatus.Processing;
                                break;
                            case (int)CaseStatus.Closed:
                                caseDetail.Status = CaseStatus.Closed;
                                break;
                        }
                        caseDetail.Individual_Id = String.Empty;
                        caseDetail.NPF_Form = 0;
                        caseDetail.NPF_Form_File_Name = String.Empty;
                        caseDetail.NPF_Form_Destination_File_Name = String.Empty;

                        caseDetail.IB_Form = 0;
                        caseDetail.IB_Form_File_Name = String.Empty;
                        caseDetail.IB_Form_Destination_File_Name = String.Empty;

                        caseDetail.POP_Form = 0;
                        caseDetail.POP_Form_File_Name = String.Empty;
                        caseDetail.POP_Form_Destionation_File_Name = String.Empty;

                        caseDetail.MedicalRecord_Form = 0;
                        caseDetail.MedRec_Form_File_Name = String.Empty;
                        caseDetail.MedRec_Form_Destination_File_Name = String.Empty;

                        caseDetail.Unknown_Form = 0;
                        caseDetail.Unknown_Form_File_Name = String.Empty;
                        caseDetail.Unknown_Form_Destination_File_Name = String.Empty;

                        caseDetail.Note = String.Empty;
                        caseDetail.Log_Id = String.Empty;
                        caseDetail.AddBill_Form = false;

                        caseDetail.Remove_Log = String.Empty;

                        if (txtCaseName.Text.Trim() != String.Empty) caseDetail.CaseId = txtCaseName.Text.Trim();
                        if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.ContactId = txtCaseIndividualID.Text.Trim();
                        if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.Individual_Id = txtCaseIndividualID.Text.Trim();
                        if (chkNPF_CaseCreationPage.Checked)
                        {
                            caseDetail.NPF_Form = 1;
                            if (txtNPFFormFilePath.Text.Trim() != String.Empty) caseDetail.NPF_Form_File_Name = txtNPFFormFilePath.Text.Trim();
                            //if (txtNPFUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtNPFUploadDate.Text.Trim(), out result)) caseDetail.NPF_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.NPF_ReceivedDate = dtpNPFReceivedDate.Value;
                            caseDetail.NPF_Form_Destination_File_Name = strNPFormFilePathDestination;
                        }
                        if (chkIB_CaseCreationPage.Checked)
                        {
                            caseDetail.IB_Form = 1;
                            if (txtIBFilePath.Text.Trim() != String.Empty) caseDetail.IB_Form_File_Name = txtIBFilePath.Text.Trim();
                            //if (txtIBUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtIBUploadDate.Text.Trim(), out result)) caseDetail.IB_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.IB_ReceivedDate = dtpIBReceivedDate.Value;
                            caseDetail.IB_Form_Destination_File_Name = strIBFilePathDestination;
                        }
                        if (chkPoP_CaseCreationPage.Checked)
                        {
                            caseDetail.POP_Form = 1;
                            if (txtPopFilePath.Text.Trim() != String.Empty) caseDetail.POP_Form_File_Name = txtPopFilePath.Text.Trim();
                            //if (txtPoPUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtPoPUploadDate.Text.Trim(), out result)) caseDetail.POP_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.POP_ReceivedDate = dtpPoPReceivedDate.Value;
                            caseDetail.POP_Form_Destionation_File_Name = strPopFilePathDestination;
                        }
                        if (chkMedicalRecordCaseCreationPage.Checked)
                        {
                            caseDetail.MedicalRecord_Form = 1;
                            if (txtMedicalRecordFilePath.Text.Trim() != String.Empty) caseDetail.MedRec_Form_File_Name = txtMedicalRecordFilePath.Text.Trim();
                            //if (txtMRUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtMRUploadDate.Text.Trim(), out result)) caseDetail.MedRec_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.MedRec_ReceivedDate = dtpMRReceivedDate.Value;
                            caseDetail.MedRec_Form_Destination_File_Name = strMedRecordFilePathDestination;
                        }
                        if (chkOtherDocCaseCreationPage.Checked)
                        {
                            caseDetail.Unknown_Form = 1;
                            if (txtOtherDocumentFilePath.Text.Trim() != String.Empty) caseDetail.Unknown_Form_File_Name = txtOtherDocumentFilePath.Text.Trim();
                            //if (txtOtherDocUploadDate.Text.Trim() != String.Empty)      //caseDetail.Unknown_ReceivedDate = DateTime.Parse(txtOtherDocUploadDate.Text.Trim());
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtOtherDocUploadDate.Text.Trim(), out result)) caseDetail.Unknown_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.Unknown_ReceivedDate = dtpOtherDocReceivedDate.Value;
                            caseDetail.Unknown_Form_Destination_File_Name = strUnknownDocFilePathDestination;
                        }

                        caseDetail.Log_Id = "Log: " + txtCaseName.Text;
                        caseDetail.AddBill_Form = false;
                        caseDetail.AddBill_Received_Date = null;
                        caseDetail.Remove_Log = String.Empty;

                        String strSqlCreateCase = "insert into tbl_case (IsDeleted, Case_Name, Contact_ID, CreateDate, ModifiDate, CreateStaff, ModifiStaff, Case_status, " +
                                                    "NPF_Form, NPF_Form_File_Name, NPF_Form_Destination_File_Name, NPF_Receiv_Date, " +
                                                    "IB_Form, IB_Form_File_Name, IB_Form_Destination_File_Name, IB_Receiv_Date, " +
                                                    "POP_Form, POP_Form_File_Name, POP_Form_Destination_File_Name, POP_Receiv_Date, " +
                                                    "MedRec_Form, MedRec_Form_File_Name, MedRec_Form_Destination_File_Name, MedRec_Receiv_Date, " +
                                                    "Unknown_Form, Unknown_Form_File_Name, Unknown_Form_Destination_File_Name, Unknown_Receiv_Date, " +
                                                    "Note, Log_ID, AddBill_Form, AddBill_receiv_Date, Remove_log, individual_id) " +
                                                    "Values (@IsDeleted, @CaseId, @ContactId, @CreateDate, @ModifiDate, @CreateStaff, @ModifiStaff, @CaseStatus, " +
                                                    "@NPF_Form, @NPF_Form_File_Name, @NPF_Form_Destination_File_Name, @NPF_Receive_Date, " +
                                                    "@IB_Form, @IB_Form_File_Name, @IB_Form_Destination_File_Name, @IB_Receive_Date, " +
                                                    "@POP_Form, @POP_Form_File_Name, @POP_Form_Destination_File_Name, @POP_Receive_Date, " +
                                                    "@MedRecord_Form, @MedRecord_Form_File_Name, @MedRecord_Form_Destination_File_name, @MedRecord_Receive_Date, " +
                                                    "@Unknown_Form, @Unknown_Form_File_Name, @Unknown_Form_Destination_File_Name, @Unknown_Receive_Date, " +
                                                    "@Note, @Log_Id, @AddBill_Form, @AddBill_ReceiveDate, @Remove_Log, @Individual_Id)";

                        SqlCommand cmdInsertNewCase = new SqlCommand(strSqlCreateCase, connRN);
                        cmdInsertNewCase.CommandType = CommandType.Text;

                        cmdInsertNewCase.Parameters.AddWithValue("@IsDeleted", 0);
                        cmdInsertNewCase.Parameters.AddWithValue("@CaseId", caseDetail.CaseId);
                        cmdInsertNewCase.Parameters.AddWithValue("@ContactId", caseDetail.ContactId);
                        cmdInsertNewCase.Parameters.AddWithValue("@CreateDate", caseDetail.CreateDate);
                        cmdInsertNewCase.Parameters.AddWithValue("@ModifiDate", caseDetail.ModificationDate);
                        cmdInsertNewCase.Parameters.AddWithValue("@CreateStaff", caseDetail.CreateStaff);
                        cmdInsertNewCase.Parameters.AddWithValue("@ModifiStaff", caseDetail.ModifyingStaff);
                        cmdInsertNewCase.Parameters.AddWithValue("@CaseStatus", caseDetail.Status);

                        cmdInsertNewCase.Parameters.AddWithValue("@NPF_Form", caseDetail.NPF_Form);
                        cmdInsertNewCase.Parameters.AddWithValue("@NPF_Form_File_Name", caseDetail.NPF_Form_File_Name);
                        cmdInsertNewCase.Parameters.AddWithValue("@NPF_Form_Destination_File_Name", caseDetail.NPF_Form_Destination_File_Name);
                        if (caseDetail.NPF_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@NPF_Receive_Date", caseDetail.NPF_ReceivedDate);
                        else cmdInsertNewCase.Parameters.AddWithValue("@NPF_Receive_Date", DBNull.Value);

                        cmdInsertNewCase.Parameters.AddWithValue("@IB_Form", caseDetail.IB_Form);
                        cmdInsertNewCase.Parameters.AddWithValue("@IB_Form_File_Name", caseDetail.IB_Form_File_Name);
                        cmdInsertNewCase.Parameters.AddWithValue("@IB_Form_Destination_File_Name", caseDetail.IB_Form_Destination_File_Name);
                        if (caseDetail.IB_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@IB_Receive_Date", caseDetail.IB_ReceivedDate);
                        else cmdInsertNewCase.Parameters.AddWithValue("@IB_Receive_Date", DBNull.Value);

                        cmdInsertNewCase.Parameters.AddWithValue("@POP_Form", caseDetail.POP_Form);
                        cmdInsertNewCase.Parameters.AddWithValue("@POP_Form_File_Name", caseDetail.POP_Form_File_Name);
                        cmdInsertNewCase.Parameters.AddWithValue("@POP_Form_Destination_File_Name", caseDetail.POP_Form_Destionation_File_Name);
                        if (caseDetail.POP_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@POP_Receive_Date", caseDetail.POP_ReceivedDate);
                        else cmdInsertNewCase.Parameters.AddWithValue("@POP_Receive_Date", DBNull.Value);

                        cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Form", caseDetail.MedicalRecord_Form);
                        cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Form_File_Name", caseDetail.MedRec_Form_File_Name);
                        cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Form_Destination_File_Name", caseDetail.MedRec_Form_Destination_File_Name);
                        if (caseDetail.MedRec_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Receive_Date", caseDetail.MedRec_ReceivedDate);
                        else cmdInsertNewCase.Parameters.AddWithValue("@MedRecord_Receive_Date", DBNull.Value);

                        cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Form", caseDetail.Unknown_Form);
                        cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Form_File_Name", caseDetail.Unknown_Form_File_Name);
                        cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Form_Destination_File_Name", caseDetail.Unknown_Form_Destination_File_Name);
                        if (caseDetail.Unknown_ReceivedDate != null) cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Receive_Date", caseDetail.Unknown_ReceivedDate);
                        else cmdInsertNewCase.Parameters.AddWithValue("@Unknown_Receive_Date", DBNull.Value);

                        cmdInsertNewCase.Parameters.AddWithValue("@Note", caseDetail.Note);
                        cmdInsertNewCase.Parameters.AddWithValue("@Log_Id", caseDetail.Log_Id);
                        cmdInsertNewCase.Parameters.AddWithValue("@AddBill_Form", caseDetail.AddBill_Form);
                        if (caseDetail.AddBill_Received_Date != null) cmdInsertNewCase.Parameters.AddWithValue("@AddBill_ReceiveDate", caseDetail.AddBill_Received_Date);
                        else cmdInsertNewCase.Parameters.AddWithValue("@AddBill_ReceiveDate", DBNull.Value);
                        if (caseDetail.Remove_Log == String.Empty) cmdInsertNewCase.Parameters.AddWithValue("@Remove_Log", DBNull.Value);
                        cmdInsertNewCase.Parameters.AddWithValue("@Individual_Id", caseDetail.Individual_Id);

                        //if (connRN.State == ConnectionState.Closed) connRN.Open();
                        if (connRN.State != ConnectionState.Closed)
                        {
                            connRN.Close();
                            connRN.Open();
                        }
                        else if (connRN.State == ConnectionState.Closed) connRN.Open();
                        int nResult = cmdInsertNewCase.ExecuteNonQuery();
                        if (nResult == 1)
                        {
                            MessageBox.Show("The case has been saved.", "Information");

                            caseDetail.CaseId = txtCaseName.Text.Trim();
                            strCaseIdSelected = caseDetail.CaseId;
                            strContactIdSelected = caseDetail.ContactId;

                            btnNewMedBill_Case.Enabled = true;
                            btnEditMedBill.Enabled = true;
                            btnDeleteMedBill.Enabled = true;
                        }
                        if (connRN.State != ConnectionState.Closed) connRN.Close();
                    }
                    else if (objCaseName != null)    // Edit and update case
                    {
                        //frmSaveChangeOnCase frmDlgSaveChange = new frmSaveChangeOnCase();

                        //DialogResult dlgResult = frmDlgSaveChange.ShowDialog();

                        ////if (frmDlgSaveChange.DialogResult == DialogResult.Yes)
                        //if (dlgResult == DialogResult.Yes)
                        //{
                        CasedInfoDetailed caseDetail = new CasedInfoDetailed();

                        caseDetail.CaseId = txtCaseName.Text.Trim();
                        caseDetail.ContactId = String.Empty;
                        caseDetail.Individual_Id = String.Empty;
                        caseDetail.CreateDate = DateTime.Today;
                        //caseDetail.ModificationDate = DateTime.Today;
                        //caseDetail.CreateStaff = 8;     // WonJik
                        //caseDetail.ModifyingStaff = 8;  // WonJik
                        //caseDetail.CreateStaff = nLoggedUserId;
                        caseDetail.ModifyingStaff = nLoggedUserId;
                        switch (cbCaseStatus.SelectedIndex)
                        {
                            case (int)CaseStatus.OnGoing:
                                caseDetail.Status = CaseStatus.OnGoing;
                                break;
                            case (int)CaseStatus.Processing:
                                caseDetail.Status = CaseStatus.Processing;
                                break;
                            case (int)CaseStatus.Closed:
                                caseDetail.Status = CaseStatus.Closed;
                                break;
                        }
                        caseDetail.Individual_Id = String.Empty;
                        caseDetail.NPF_Form = 0;
                        caseDetail.NPF_Form_File_Name = String.Empty;
                        caseDetail.NPF_Form_Destination_File_Name = String.Empty;
                        //caseDetail.NPF_ReceivedDate = DateTime.Today;
                        caseDetail.IB_Form = 0;
                        caseDetail.IB_Form_File_Name = String.Empty;
                        caseDetail.IB_Form_Destination_File_Name = String.Empty;
                        //caseDetail.IB_ReceivedDate = DateTime.Today;
                        caseDetail.POP_Form = 0;
                        caseDetail.POP_Form_File_Name = String.Empty;
                        caseDetail.POP_Form_Destionation_File_Name = String.Empty;
                        //caseDetail.POP_ReceivedDate = DateTime.Today;
                        caseDetail.MedicalRecord_Form = 0;
                        caseDetail.MedRec_Form_File_Name = String.Empty;
                        caseDetail.MedRec_Form_Destination_File_Name = String.Empty;
                        //caseDetail.MedRec_ReceivedDate = DateTime.Today;
                        caseDetail.Unknown_Form = 0;
                        caseDetail.Unknown_Form_File_Name = String.Empty;
                        caseDetail.Unknown_Form_Destination_File_Name = String.Empty;
                        //caseDetail.Unknown_ReceivedDate = DateTime.Today;
                        caseDetail.Note = String.Empty;
                        caseDetail.Log_Id = String.Empty;
                        caseDetail.AddBill_Form = false;
                        //caseDetail.AddBill_Received_Date = DateTime.Today;
                        caseDetail.Remove_Log = String.Empty;

                        if (txtCaseName.Text.Trim() != String.Empty) caseDetail.CaseId = txtCaseName.Text.Trim();
                        if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.ContactId = txtCaseIndividualID.Text.Trim();
                        if (txtCaseIndividualID.Text.Trim() != String.Empty) caseDetail.Individual_Id = txtCaseIndividualID.Text.Trim();

                        if (chkNPF_CaseCreationPage.Checked)
                        {
                            caseDetail.NPF_Form = 1;
                            if (txtNPFFormFilePath.Text.Trim() != String.Empty) caseDetail.NPF_Form_File_Name = txtNPFFormFilePath.Text.Trim();
                            //if (txtNPFUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtNPFUploadDate.Text.Trim(), out result)) caseDetail.NPF_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.NPF_ReceivedDate = dtpNPFReceivedDate.Value;
                            caseDetail.NPF_Form_Destination_File_Name = strNPFormFilePathDestination;
                        }
                        if (chkIB_CaseCreationPage.Checked)
                        {
                            caseDetail.IB_Form = 1;
                            if (txtIBFilePath.Text.Trim() != String.Empty) caseDetail.IB_Form_File_Name = txtIBFilePath.Text.Trim();
                            //if (txtIBUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtIBUploadDate.Text.Trim(), out result)) caseDetail.IB_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.IB_ReceivedDate = dtpIBReceivedDate.Value;
                            caseDetail.IB_Form_Destination_File_Name = strIBFilePathDestination;
                        }
                        if (chkPoP_CaseCreationPage.Checked)
                        {
                            caseDetail.POP_Form = 1;
                            if (txtPopFilePath.Text.Trim() != String.Empty) caseDetail.POP_Form_File_Name = txtPopFilePath.Text.Trim();
                            //if (txtPoPUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtPoPUploadDate.Text.Trim(), out result)) caseDetail.POP_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.POP_ReceivedDate = dtpPoPReceivedDate.Value;
                            caseDetail.POP_Form_Destionation_File_Name = strPopFilePathDestination;
                        }
                        if (chkMedicalRecordCaseCreationPage.Checked)
                        {
                            caseDetail.MedicalRecord_Form = 1;
                            if (txtMedicalRecordFilePath.Text.Trim() != String.Empty) caseDetail.MedRec_Form_File_Name = txtMedicalRecordFilePath.Text.Trim();
                            //if (txtMRUploadDate.Text.Trim() != String.Empty)
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtMRUploadDate.Text.Trim(), out result)) caseDetail.MedRec_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.MedRec_ReceivedDate = dtpMRReceivedDate.Value;
                            caseDetail.MedRec_Form_Destination_File_Name = strMedRecordFilePathDestination;
                        }
                        if (chkOtherDocCaseCreationPage.Checked)
                        {
                            caseDetail.Unknown_Form = 1;
                            if (txtOtherDocumentFilePath.Text.Trim() != String.Empty) caseDetail.Unknown_Form_File_Name = txtOtherDocumentFilePath.Text.Trim();
                            //if (txtOtherDocUploadDate.Text.Trim() != String.Empty)      //caseDetail.Unknown_ReceivedDate = DateTime.Parse(txtOtherDocUploadDate.Text.Trim());
                            //{
                            //    DateTime result;
                            //    if (DateTime.TryParse(txtOtherDocUploadDate.Text.Trim(), out result)) caseDetail.Unknown_ReceivedDate = result;
                            //    else MessageBox.Show("Invalid DateTime value", "Error");
                            //}
                            caseDetail.Unknown_ReceivedDate = dtpOtherDocReceivedDate.Value;
                            caseDetail.Unknown_Form_Destination_File_Name = strUnknownDocFilePathDestination;
                        }

                        caseDetail.Note = txtNoteOnCase.Text.Trim();
                        caseDetail.Log_Id = "Log: " + txtCaseName.Text;
                        caseDetail.AddBill_Form = true;
                        caseDetail.AddBill_Received_Date = DateTime.Today;
                        caseDetail.Remove_Log = String.Empty;

                        String strSqlUpdateCase = "Update [dbo].[tbl_case] set [dbo].[tbl_case].[ModifiDate] = @ModifiDate, [dbo].[tbl_case].[ModifiStaff] = @ModifiStaff, " +
                                                    "[dbo].[tbl_case].[NPF_Form] = @NPF_Form, [dbo].[tbl_case].[NPF_Form_File_Name] = @NPF_Form_File_Name, " +
                                                    "[dbo].[tbl_case].[NPF_Form_Destination_File_Name] = @NPF_Form_Destination_File_Name, [dbo].[tbl_case].[NPF_Receiv_Date] = @NPF_Receiv_Date, " +
                                                    "[dbo].[tbl_case].[IB_Form] = @IB_Form, [dbo].[tbl_case].[IB_Form_File_Name] = @IB_Form_File_Name, " +
                                                    "[dbo].[tbl_case].[IB_Form_Destination_File_Name] = @IB_Form_Destination_File_Name, [dbo].[tbl_case].[IB_Receiv_Date] = @IB_Receiv_Date, " +
                                                    "[dbo].[tbl_case].[POP_Form] = @POP_Form, [dbo].[tbl_case].[POP_Form_File_Name] = @POP_Form_File_Name, " +
                                                    "[dbo].[tbl_case].[POP_Form_Destination_File_Name] = @POP_Form_Destination_File_Name, [dbo].[tbl_case].[POP_Receiv_Date] = @POP_Receiv_Date, " +
                                                    "[dbo].[tbl_case].[MedRec_Form] = @MedRec_Form, [dbo].[tbl_case].[MedRec_Form_File_Name] = @MedRec_Form_File_Name, " +
                                                    "[dbo].[tbl_case].[MedRec_Form_Destination_File_Name] = @MedRec_Form_Destination_File_Name, [dbo].[tbl_case].[MedRec_Receiv_Date] = @MedRec_Receiv_Date, " +
                                                    "[dbo].[tbl_case].[Unknown_Form] = @Unknown_Form, [dbo].[tbl_case].[Unknown_Form_File_Name] = @Unknown_Form_File_Name, " +
                                                    "[dbo].[tbl_case].[Unknown_Form_Destination_File_Name] = @Unknown_Form_Destination_File_Name, [dbo].[tbl_case].[Unknown_Receiv_Date] = @Unknown_Receiv_Date, " +
                                                    "[dbo].[tbl_case].[Note] = @CaseNote, [dbo].[tbl_case].[Log_ID] = @Log_Id, [dbo].[tbl_case].[AddBill_Form] = @AddBill_Form, " +
                                                    "[dbo].[tbl_case].[AddBill_Receiv_Date] = @AddBill_Receiv_Date, [dbo].[tbl_case].[Remove_Log] = @Remove_Log " +
                                                    "where [dbo].[tbl_case].[Case_Name] = @Case_Id";

                        SqlCommand cmdUpdateCase = new SqlCommand(strSqlUpdateCase, connRN);
                        cmdUpdateCase.CommandType = CommandType.Text;

                        cmdUpdateCase.Parameters.AddWithValue("@ModifiDate", caseDetail.ModificationDate);
                        cmdUpdateCase.Parameters.AddWithValue("@ModifiStaff", caseDetail.ModifyingStaff);
                        cmdUpdateCase.Parameters.AddWithValue("@NPF_Form", caseDetail.NPF_Form);
                        cmdUpdateCase.Parameters.AddWithValue("@NPF_Form_File_Name", caseDetail.NPF_Form_File_Name);
                        cmdUpdateCase.Parameters.AddWithValue("@NPF_Form_Destination_File_Name", caseDetail.NPF_Form_Destination_File_Name);
                        if (caseDetail.NPF_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@NPF_Receiv_Date", caseDetail.NPF_ReceivedDate);
                        else cmdUpdateCase.Parameters.AddWithValue("@NPF_Receiv_Date", DBNull.Value);

                        cmdUpdateCase.Parameters.AddWithValue("@IB_Form", caseDetail.IB_Form);
                        cmdUpdateCase.Parameters.AddWithValue("@IB_Form_File_Name", caseDetail.IB_Form_File_Name);
                        cmdUpdateCase.Parameters.AddWithValue("@IB_Form_Destination_File_Name", caseDetail.IB_Form_Destination_File_Name);
                        if (caseDetail.IB_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@IB_Receiv_Date", caseDetail.IB_ReceivedDate);
                        else cmdUpdateCase.Parameters.AddWithValue("@IB_Receiv_Date", DBNull.Value);

                        cmdUpdateCase.Parameters.AddWithValue("@POP_Form", caseDetail.POP_Form);
                        cmdUpdateCase.Parameters.AddWithValue("@POP_Form_File_Name", caseDetail.POP_Form_File_Name);
                        cmdUpdateCase.Parameters.AddWithValue("@POP_Form_Destination_File_Name", caseDetail.POP_Form_Destionation_File_Name);
                        if (caseDetail.POP_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@POP_Receiv_Date", caseDetail.POP_ReceivedDate);
                        else cmdUpdateCase.Parameters.AddWithValue("@POP_Receiv_Date", DBNull.Value);

                        cmdUpdateCase.Parameters.AddWithValue("@MedRec_Form", caseDetail.MedicalRecord_Form);
                        cmdUpdateCase.Parameters.AddWithValue("@MedRec_Form_File_Name", caseDetail.MedRec_Form_File_Name);
                        cmdUpdateCase.Parameters.AddWithValue("@MedRec_Form_Destination_File_Name", caseDetail.MedRec_Form_Destination_File_Name);
                        if (caseDetail.MedRec_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@MedRec_Receiv_Date", caseDetail.MedRec_ReceivedDate);
                        else cmdUpdateCase.Parameters.AddWithValue("@MedRec_Receiv_Date", DBNull.Value);

                        cmdUpdateCase.Parameters.AddWithValue("@Unknown_Form", caseDetail.Unknown_Form);
                        cmdUpdateCase.Parameters.AddWithValue("@Unknown_Form_File_Name", caseDetail.Unknown_Form_File_Name);
                        cmdUpdateCase.Parameters.AddWithValue("@Unknown_Form_Destination_File_Name", caseDetail.Unknown_Form_Destination_File_Name);
                        if (caseDetail.Unknown_ReceivedDate != null) cmdUpdateCase.Parameters.AddWithValue("@Unknown_Receiv_Date", caseDetail.Unknown_ReceivedDate);
                        else cmdUpdateCase.Parameters.AddWithValue("@Unknown_Receiv_Date", DBNull.Value);

                        cmdUpdateCase.Parameters.AddWithValue("@CaseNote", caseDetail.Note);
                        cmdUpdateCase.Parameters.AddWithValue("@Log_Id", caseDetail.Log_Id);
                        cmdUpdateCase.Parameters.AddWithValue("@AddBill_Form", caseDetail.AddBill_Form);
                        if (caseDetail.AddBill_Received_Date != null) cmdUpdateCase.Parameters.AddWithValue("@AddBill_Receiv_Date", caseDetail.AddBill_Received_Date);
                        else cmdUpdateCase.Parameters.AddWithValue("@AddBill_Receiv_Date", DBNull.Value);

                        cmdUpdateCase.Parameters.AddWithValue("@Remove_Log", caseDetail.Remove_Log);

                        cmdUpdateCase.Parameters.AddWithValue("@Case_Id", caseDetail.CaseId);

                        //if (connRN.State == ConnectionState.Closed) connRN.Open();
                        if (connRN.State != ConnectionState.Closed)
                        {
                            connRN.Close();
                            connRN.Open();
                        }
                        else if (connRN.State == ConnectionState.Closed) connRN.Open();
                        int nRowAffected = cmdUpdateCase.ExecuteNonQuery();
                        if (connRN.State != ConnectionState.Closed) connRN.Close();

                        if (nRowAffected == 1)
                        {
                            MessageBox.Show("The change has been saved.", "Information");

                            btnNewMedBill_Case.Enabled = true;
                            btnEditMedBill.Enabled = true;
                            btnDeleteMedBill.Enabled = true;
                        }
                        else if (nRowAffected == 0) MessageBox.Show("The change has not been saved.", "Error");

                    }

                    tbCMMManager.TabPages.Remove(tbpgCreateCase);
                    tbCMMManager.SelectedTab = tbCMMManager.TabPages["tbpgCaseView"];
                    return;
                }
                else if (dlgResult == DialogResult.No)
                {
                    tbCMMManager.TabPages.Remove(tbpgCreateCase);
                    tbCMMManager.SelectedTab = tbCMMManager.TabPages["tbpgCaseView"];
                    return;
                }
            }
            else return;
            //else if (dlgResult == DialogResult.Cancel)
            //{
            //    return;
            //}
        }

        private void btnMedBillCreationPgLowerSave_Click(object sender, EventArgs e)
        {


            Cursor.Current = Cursors.WaitCursor;

            if (txtMedBill_Illness.Text.Trim() == String.Empty)
            {
                MessageBox.Show("Please select an Illness.", "Alert", MessageBoxButtons.OK);
                return;
            }
            if (txtMedBill_Incident.Text.Trim() == String.Empty)
            {
                MessageBox.Show("Please select an Incident.", "Alert", MessageBoxButtons.OK);
                return;
            }
            if (txtMedBillAmount.Text.Trim() == String.Empty)
            {
                MessageBox.Show("Please enter Medical Bill Amount.", "Alert", MessageBoxButtons.OK);
                return;
            }
            if (txtMedicalProvider.Text.Trim() == String.Empty)
            {
                MessageBox.Show("Please select a Medical Provider.", "Alert", MessageBoxButtons.OK);
                return;
            }

            frmSaveNewMedBill frmSaveMedBill = new frmSaveNewMedBill();

            frmSaveMedBill.StartPosition = FormStartPosition.CenterParent;
            DialogResult dlgResult = frmSaveMedBill.ShowDialog();

            if (dlgResult == DialogResult.Yes)
            {
                String strMedBillNo = txtMedBillNo.Text.Trim();

                String strSqlQueryForMedBill = "select [dbo].[tbl_medbill].[BillNo] from [dbo].[tbl_medbill] where [dbo].[tbl_medbill].[BillNo] = @MedBillNo";

                SqlCommand cmdQueryForMedBill = new SqlCommand(strSqlQueryForMedBill, connRN5);
                cmdQueryForMedBill.Parameters.AddWithValue("@MedBillNo", strMedBillNo);

                if (connRN5.State != ConnectionState.Closed)
                {
                    connRN5.Close();
                    connRN5.Open();
                }
                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                Object ResultMedBillNo = cmdQueryForMedBill.ExecuteScalar();
                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                if (ResultMedBillNo == null)
                {
                    String strIndividualId = String.Empty;
                    String strCaseId = String.Empty;
                    String strBillStatus = String.Empty;
                    String strIllnessId = String.Empty;
                    String strIncidentId = String.Empty;

                    String strNewMedBillNo = String.Empty;
                    String strMedProvider = String.Empty;
                    String strPrescriptionName = String.Empty;
                    String strPrescriptionNo = String.Empty;
                    String strPrescriptionDescription = String.Empty;

                    if (txtIndividualIDMedBill.Text.Trim() != String.Empty) strIndividualId = txtIndividualIDMedBill.Text.Trim();
                    if (txtMedBill_CaseNo.Text.Trim() != String.Empty) strCaseId = txtMedBill_CaseNo.Text.Trim();

                    if (txtMedBill_Illness.Text.Trim() != String.Empty)
                    {
                        String IllnessNo = txtMedBill_Illness.Text.Trim();

                        String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

                        SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN5);
                        cmdQueryForIllnessId.CommandType = CommandType.Text;

                        cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", IllnessNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (objIllnessId != null) strIllnessId = objIllnessId.ToString();
                        else
                        {
                            MessageBox.Show("No Illness Id for given Illness No", "Error");
                            return;
                        }
                    }

                    if (txtMedBill_Incident.Text.Trim() != String.Empty)
                    {
                        String IncidentNo = txtMedBill_Incident.Text.Trim();

                        String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

                        SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN5);
                        cmdQueryForIncidentId.CommandType = CommandType.Text;

                        cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (objIncidentId != null) strIncidentId = objIncidentId.ToString();
                        else
                        {
                            MessageBox.Show("No Incident Id for given Incident No", "Error");
                            return;
                        }
                    }


                    if (txtMedBillNo.Text.Trim() != String.Empty) strNewMedBillNo = txtMedBillNo.Text.Trim();

                    String MedicalProvider = String.Empty;

                    if (txtMedicalProvider.Text.Trim() != String.Empty)
                    {
                        MedicalProvider = txtMedicalProvider.Text.Trim();
                    }
                    else
                    {
                        MessageBox.Show("Please enter the name of medical provider.", "Error");
                        return;
                    }

                    String PrescriptionName = String.Empty;

                    if (txtPrescriptionName.Text.Trim() != String.Empty)
                    {
                        PrescriptionName = txtPrescriptionName.Text.Trim();
                    }

                    String PrescriptionNo = String.Empty;

                    if (txtNumberOfMedication.Text.Trim() != String.Empty)
                    {
                        PrescriptionNo = txtNumberOfMedication.Text.Trim();
                    }

                    String PrescriptionDescription = String.Empty;

                    if (txtPrescriptionDescription.Text.Trim() != String.Empty)
                    {
                        PrescriptionDescription = txtPrescriptionDescription.Text.Trim();
                    }


                    int nPatientType = 0;   // default outpatient

                    if (rbOutpatient.Checked) nPatientType = 0;
                    else if (rbInpatient.Checked) nPatientType = 1;

                    String strNote = String.Empty;

                    if (comboMedBillType.SelectedItem.ToString() == "Medical Bill")
                    {
                        strNote = txtMedBillNote.Text.Trim();
                    }
                    else if (comboMedBillType.SelectedItem.ToString() == "Prescription")
                    {
                        strNote = txtPrescriptionNote.Text.Trim();
                    }
                    else if (comboMedBillType.SelectedItem.ToString() == "Physical Therapy")
                    {
                        strNote = txtPhysicalTherapyRxNote.Text.Trim();
                    }

                    String strSqlInsertNewMedBill = "insert into dbo.tbl_medbill (IsDeleted, BillNo, MedBillType_Id, BillStatus, BillClosed, CreatedDate, CreatedById, " +
                                                    "LastModifiedDate, LastModifiedById, " +
                                                    "LastActivityDate, LastViewedDate, LastReferencedDate, Case_Id, Incident_Id, Illness_Id, BillAmount, SettlementTotal, " +
                                                    "Balance, BillDate, TotalSharedAmount, Individual_Id, Contact_Id, MedicalProvider_Id, PendingReason, " +
                                                    "Account_At_Provider, ProviderPhoneNumber, ProviderContactPerson, " +
                                                    "ProposalLetterSentDate, HIPPASentDate, MedicalRecordDate, " +
                                                    "IneligibleReason, PersonalResponsibilityCredit, " +
                                                    "WellBeingCareTotal, WellBeingCare, DueDate, TotalNumberOfPhysicalTherapy, " +
                                                    "PrescriptionDrugName, PrescriptionNo, PrescriptionDescription, " +
                                                    "PatientTypeId, Note) " +
                                                    "values (@IsDeleted, @BillNo, @MedBillType_Id, @MedBillStatus, @MedBillClosed, @CreatedDate, @CreateById, " +
                                                    "@LastModifiedDate, @LastModifiedById, " +
                                                    "@LastActivityDate, @LastViewedDate, @LastReferencedDate, @Case_Id, @Incident_Id, @Illness_Id, @BillAmount, @SettlementTotal, " +
                                                    "@Balance, @BillDate, @TotalSharedAmount, @Individual_Id, @Contact_Id, @MedicalProvider_Id, @PendingReason, " +
                                                    "@Account_At_Provider, @ProviderPhoneNo, @ProviderContactPerson, " +
                                                    "@ProposalLetterSentDate, @HIPPASentDate, @MedicalRecordDate, " +
                                                    "@IneligibleReason, @PersonalResponsibilityCredit, " +
                                                    "@WellBeingCareTotal, @WellBeingCare, @DueDate, @TotalNumberOfPhysicalTherapy, " +
                                                    "@PrescriptionDrugName, @PrescriptionNo, @PrescriptionDescription, " +
                                                    "@PatientTypeId, @Note)";

                    SqlCommand cmdInsertNewMedBill = new SqlCommand(strSqlInsertNewMedBill, connRN5);
                    cmdInsertNewMedBill.CommandType = CommandType.Text;

                    cmdInsertNewMedBill.Parameters.AddWithValue("@IsDeleted", 0);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@BillNo", strNewMedBillNo);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@MedBillType_Id", comboMedBillType.SelectedIndex + 1);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@MedBillStatus", comboMedBillStatus.SelectedIndex);
                    if (cbMedBillClosed.SelectedIndex == 0) cmdInsertNewMedBill.Parameters.AddWithValue("@MedBillClosed", 0);
                    else if (cbMedBillClosed.SelectedIndex == 1) cmdInsertNewMedBill.Parameters.AddWithValue("@MedBillClosed", 1);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@CreatedDate", DateTime.Today);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@CreateById", nLoggedUserId);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@LastModifiedById", nLoggedUserId);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@LastViewedDate", DateTime.Today);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@LastReferencedDate", DateTime.Today);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@Case_Id", strCaseId);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@Incident_Id", strIncidentId);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@Illness_Id", strIllnessId);

                    Decimal BillAmountResult = 0;
                    Decimal BillAmount = 0;

                    if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out BillAmountResult))
                    {
                        BillAmount = BillAmountResult;
                        cmdInsertNewMedBill.Parameters.AddWithValue("@BillAmount", BillAmount);
                    }
                    else
                    {
                        MessageBox.Show("Bill Amount is invalid.", "Error");
                        return;
                    }

                    cmdInsertNewMedBill.Parameters.AddWithValue("@SettlementTotal", 0);

                    Decimal BalanceResult = 0;
                    Decimal Balance = 0;

                    if (Decimal.TryParse(txtBalance.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out BalanceResult))
                    {
                        Balance = BalanceResult;
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Balance", Balance);
                    }
                    else
                    {
                        MessageBox.Show("Balance is invalid.", "Error");
                        return;
                    }

                    cmdInsertNewMedBill.Parameters.AddWithValue("@BillDate", dtpBillDate.Value);

                    Decimal TotalSharedAmount = 0;
                    for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                    {
                        if ((gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString() == "CMM Provider Payment") ||
                            (gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString() == "Member Reimbursement") ||
                            (gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString() == "PR Reimbursement"))
                            TotalSharedAmount += Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                        if (gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString() == "Medical Provider Refund")
                            TotalSharedAmount -= Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                    }

                    cmdInsertNewMedBill.Parameters.AddWithValue("@TotalSharedAmount", TotalSharedAmount);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@Individual_Id", strIndividualId);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@Contact_Id", strIndividualId);

                    Boolean bMedicalProvider = false;
                    foreach (MedicalProviderInfo info in lstMedicalProvider)
                    {
                        if (info.Name.Trim() == txtMedicalProvider.Text.Trim())
                        {
                            cmdInsertNewMedBill.Parameters.AddWithValue("@MedicalProvider_Id", info.ID);
                            bMedicalProvider = true;
                            break;
                        }
                    }
                    if (!bMedicalProvider)
                    {
                        MessageBox.Show("Medical Provider name is invalid.", "Error");
                        return;
                    }

                    cmdInsertNewMedBill.Parameters.AddWithValue("@Account_At_Provider", txtMedBillAccountNoAtProvider.Text.Trim());
                    cmdInsertNewMedBill.Parameters.AddWithValue("@ProviderPhoneNo", txtMedProviderPhoneNo.Text.Trim());
                    cmdInsertNewMedBill.Parameters.AddWithValue("@ProviderContactPerson", txtProviderContactPerson.Text.Trim());
                    cmdInsertNewMedBill.Parameters.AddWithValue("@ProposalLetterSentDate", dtpProposalLetterSentDate.Value);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@HIPPASentDate", dtpHippaSentDate.Value);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@MedicalRecordDate", dtpMedicalRecordDate.Value);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@PersonalResponsibilityCredit", 500);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@WellBeingCareTotal", 0);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@WellBeingCare", 0);
                    cmdInsertNewMedBill.Parameters.AddWithValue("@DueDate", dtpDueDate.Value);

                    if (comboMedBillType.SelectedIndex == 0)        // Medical Bill Type : Medical Bill
                    {
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", DBNull.Value);

                        cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", DBNull.Value);

                        cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", nPatientType);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", comboPendingReason.SelectedIndex);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", comboIneligibleReason.SelectedIndex);

                        cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
                    }
                    else if (comboMedBillType.SelectedIndex == 1)   // Medical Bill Type : Prescription
                    {
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", DBNull.Value);

                        cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", DBNull.Value);

                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", txtPrescriptionName.Text.Trim());
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", txtNumberOfMedication.Text.Trim());
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", txtPrescriptionDescription.Text.Trim());
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
                    }
                    else if (comboMedBillType.SelectedIndex == 2)   // Medical Bill Type : Physical Therapy
                    {
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", DBNull.Value);

                        cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", DBNull.Value);

                        int nNumberOfPhysicalTherapy = 0;
                        short result = 0;
                        if (Int16.TryParse(txtNumPhysicalTherapy.Text.Trim(), out result))
                        {
                            nNumberOfPhysicalTherapy = result;
                            cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", nNumberOfPhysicalTherapy);
                        }
                        else
                        {
                            MessageBox.Show("Please enter a positive integer in the Number of Physical Therapy Text Box.", "Alert");
                            return;
                        }

                        cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
                    }

                    if (connRN5.State != ConnectionState.Closed)
                    {
                        connRN5.Close();
                        connRN5.Open();
                    }
                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    int nRowInserted = cmdInsertNewMedBill.ExecuteNonQuery();
                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                    if (nRowInserted == 1)
                    {

                        // handle Well Being Care case
                        Boolean bWellBeingCare = true;
                        Boolean bWellBeingCareEligible = true;

                        String strSqlQueryForICD10CodeForWellBeingCare = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_illness].[ICD_10_Id] from [dbo].[tbl_medbill] " +
                                                                         "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                                         "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                                                                         "[dbo].[tbl_medbill].[Individual_Id] = @IndividualId";

                        SqlCommand cmdQueryForICD10CodeForWellBeingCare = new SqlCommand(strSqlQueryForICD10CodeForWellBeingCare, connRN5);
                        cmdQueryForICD10CodeForWellBeingCare.CommandType = CommandType.Text;

                        cmdQueryForICD10CodeForWellBeingCare.Parameters.AddWithValue("@MedBillNo", strNewMedBillNo);
                        cmdQueryForICD10CodeForWellBeingCare.Parameters.AddWithValue("@IndividualId", strIndividualId);

                        String ICD10Code = String.Empty;

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                        SqlDataReader rdrICD10CodeForWellBeingCare = cmdQueryForICD10CodeForWellBeingCare.ExecuteReader();
                        if (rdrICD10CodeForWellBeingCare.HasRows)
                        {
                            rdrICD10CodeForWellBeingCare.Read();
                            if (!rdrICD10CodeForWellBeingCare.IsDBNull(1)) ICD10Code = rdrICD10CodeForWellBeingCare.GetString(1);
                        }
                        rdrICD10CodeForWellBeingCare.Close();
                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                        if (ICD10Code != "Z00.00" && ICD10Code != "Z00.012") bWellBeingCare = false;

                        if (ICD10Code == "Z00.00" || ICD10Code == "Z00.012")
                        {

                            String strSqlQueryForProgramForIndividual = "select [dbo].[contact].[Individual_ID__c], [dbo].[program].[Name] from [dbo].[contact] " +
                                                                        "inner join [dbo].[program] on [dbo].[contact].[c4g_Plan__c] = [dbo].[program].[ID] " +
                                                                        "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                            SqlCommand cmdQueryForProgramForIndividual = new SqlCommand(strSqlQueryForProgramForIndividual, connSalesforce);
                            cmdQueryForProgramForIndividual.CommandType = CommandType.Text;

                            cmdQueryForProgramForIndividual.Parameters.AddWithValue("@IndividualId", strIndividualId);

                            if (connSalesforce.State != ConnectionState.Closed)
                            {
                                connSalesforce.Close();
                                connSalesforce.Open();
                            }
                            else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                            String ProgramName = String.Empty;

                            SqlDataReader rdrProgramForIndividual = cmdQueryForProgramForIndividual.ExecuteReader();
                            if (rdrProgramForIndividual.HasRows)
                            {
                                rdrProgramForIndividual.Read();
                                if (!rdrProgramForIndividual.IsDBNull(1)) ProgramName = rdrProgramForIndividual.GetString(1);
                            }
                            rdrProgramForIndividual.Close();
                            if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                            if (ProgramName == "Gold Plus" || ProgramName == "Gold Medi-I" || ProgramName == "Gold Medi-II")
                            {
                                String strSqlQueryForIndividualStartDate = "select [dbo].[contact].[Membership_IND_Start_date__c] from [dbo].[contact] " +
                                                                           "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                                SqlCommand cmdQueryForIndividualStartDate = new SqlCommand(strSqlQueryForIndividualStartDate, connSalesforce);
                                cmdQueryForIndividualStartDate.CommandType = CommandType.Text;

                                cmdQueryForIndividualStartDate.Parameters.AddWithValue("@IndividualId", strIndividualId);

                                if (connSalesforce.State != ConnectionState.Closed)
                                {
                                    connSalesforce.Close();
                                    connSalesforce.Open();
                                }
                                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                                Object objMembershipIndStartDate = cmdQueryForIndividualStartDate.ExecuteScalar();

                                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                                DateTime MembershipIndStartDate = new DateTime();
                                if (objMembershipIndStartDate != null)
                                {
                                    MembershipIndStartDate = DateTime.Parse(objMembershipIndStartDate.ToString());
                                }

                                if (dtpBillDate.Value > MembershipIndStartDate.AddMonths(6))
                                {
                                    //String strSqlQueryForAnivDateForIndividualId = "select [dbo].[contact].[Aniv_Date], [dbo].[contact].[Membership_IND_Start_date__c] from [dbo].[contact] " +
                                    //                                               "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                                    //SqlCommand cmdQueryForAnivDateForIndividualId = new SqlCommand(strSqlQueryForAnivDateForIndividualId, connSalesforce);
                                    //cmdQueryForAnivDateForIndividualId.CommandType = CommandType.Text;

                                    //cmdQueryForAnivDateForIndividualId.Parameters.AddWithValue("@IndividualId", strIndividualId);

                                    //if (connSalesforce.State != ConnectionState.Closed)
                                    //{
                                    //    connSalesforce.Close();
                                    //    connSalesforce.Open();
                                    //}
                                    //else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                                    //DateTime? AnivDate = null;
                                    //DateTime? StartDate = null;

                                    //SqlDataReader rdrAnivDate = cmdQueryForAnivDateForIndividualId.ExecuteReader();
                                    //if (rdrAnivDate.HasRows)
                                    //{
                                    //    rdrAnivDate.Read();
                                    //    if (!rdrAnivDate.IsDBNull(0)) AnivDate = rdrAnivDate.GetDateTime(0);
                                    //    if (!rdrAnivDate.IsDBNull(1)) StartDate = rdrAnivDate.GetDateTime(1);
                                    //}
                                    //rdrAnivDate.Close();
                                    //if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                                    DateTime IndividualAnivDate = DateTime.Parse(txtAnivDate.Text);
                                    //if (AnivDate != null) IndividualAnivDate = AnivDate.Value;
                                    //else IndividualAnivDate = StartDate.Value;

                                    int nAnivYear = dtpBillDate.Value.Year;

                                    DateTime IndividualThisAnivDate = new DateTime(nAnivYear, IndividualAnivDate.Month, 1);
                                    DateTime IndividualLastAnivDate = new DateTime(nAnivYear - 1, IndividualAnivDate.Month, 1);

                                    String strSqlQueryForWellBeingIncidentsPerAnivYear = "select count([dbo].[tbl_incident].[IncidentNo]) from [dbo].[tbl_incident] " +
                                                                                         "inner join [dbo].[tbl_illness] on [dbo].[tbl_incident].[Illness_id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                                                         "inner join [dbo].[tbl_medbill] on [dbo].[tbl_incident].[Incident_id] = [dbo].[tbl_medbill].[Incident_Id] " +
                                                                                         "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                                                         "([dbo].[tbl_illness].[ICD_10_Id] = 'Z00.00' or [dbo].[tbl_illness].[ICD_10_Id] = 'Z00.012') and " +
                                                                                         "[dbo].[tbl_medbill].[BillDate] >= @LastAnivDate and " +
                                                                                         "[dbo].[tbl_medbill].[BillDate] < @ThisAnivDate";

                                    SqlCommand cmdQueryForWellBeingIncidentsPerAnivYear = new SqlCommand(strSqlQueryForWellBeingIncidentsPerAnivYear, connRN5);
                                    cmdQueryForWellBeingIncidentsPerAnivYear.CommandType = CommandType.Text;

                                    cmdQueryForWellBeingIncidentsPerAnivYear.Parameters.AddWithValue("@IndividualId", strIndividualId);
                                    cmdQueryForWellBeingIncidentsPerAnivYear.Parameters.AddWithValue("@LastAnivDate", IndividualLastAnivDate);
                                    cmdQueryForWellBeingIncidentsPerAnivYear.Parameters.AddWithValue("@ThisAnivDate", IndividualThisAnivDate);

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                    Object objIncidentCount = cmdQueryForWellBeingIncidentsPerAnivYear.ExecuteScalar();
                                    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                    int nIncidentCount = Int32.Parse(objIncidentCount.ToString());

                                    if (nIncidentCount == 1)
                                    {
                                        String strSqlQueryForWellBeingIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] " +
                                                                                   "inner join [dbo].[tbl_illness] on [dbo].[tbl_incident].[Illness_id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                                                   "inner join [dbo].[tbl_medbill] on [dbo].[tbl_incident].[Incident_id] = [dbo].[tbl_medbill].[Incident_Id] " +
                                                                                   "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                                                   "([dbo].[tbl_illness].[ICD_10_Id] = 'Z00.00' or [dbo].[tbl_illness].[ICD_10_Id] = 'Z00.012') and " +
                                                                                   "[dbo].[tbl_medbill].[BillDate] >= @LastAnivDate and " +
                                                                                   "[dbo].[tbl_medbill].[BillDate] < @ThisAnivDate";

                                        SqlCommand cmdQueryForWellBeingIncidentId = new SqlCommand(strSqlQueryForWellBeingIncidentId, connRN5);
                                        cmdQueryForWellBeingIncidentId.CommandType = CommandType.Text;

                                        cmdQueryForWellBeingIncidentId.Parameters.AddWithValue("@IndividualId", strIndividualId);
                                        cmdQueryForWellBeingIncidentId.Parameters.AddWithValue("@LastAnivDate", IndividualLastAnivDate);
                                        cmdQueryForWellBeingIncidentId.Parameters.AddWithValue("@ThisAnivDate", IndividualThisAnivDate);

                                        if (connRN5.State != ConnectionState.Closed)
                                        {
                                            connRN5.Close();
                                            connRN5.Open();
                                        }
                                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                        Object objWellBeingIncidentId = cmdQueryForWellBeingIncidentId.ExecuteScalar();
                                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                        if (objWellBeingIncidentId != null)
                                        {
                                            int nWellBeingIncidentId = Int32.Parse(objWellBeingIncidentId.ToString());

                                            String strSqlQueryForWellBeingTotalForIncident = "select sum([dbo].[tbl_medbill].[TotalSharedAmount]) from [dbo].[tbl_medbill] " +
                                                                                             "where [dbo].[tbl_medbill].[Incident_Id] = @IncidentId";

                                            SqlCommand cmdQueryForWellBeingTotalForIncident = new SqlCommand(strSqlQueryForWellBeingTotalForIncident, connRN5);
                                            cmdQueryForWellBeingTotalForIncident.CommandType = CommandType.Text;

                                            cmdQueryForWellBeingTotalForIncident.Parameters.AddWithValue("@IncidentId", nWellBeingIncidentId);

                                            if (connRN5.State != ConnectionState.Closed)
                                            {
                                                connRN5.Close();
                                                connRN5.Open();
                                            }
                                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                            Object objWellBeingTotalForIncident = cmdQueryForWellBeingTotalForIncident.ExecuteScalar();
                                            if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                            Decimal WellBeingTotalForIncident = Decimal.Parse(objWellBeingTotalForIncident.ToString());

                                            if (WellBeingTotalForIncident > 500)
                                            {
                                                // Set the well being care med bill ineligible strNewMedBillNo
                                                String strSqlUpdateMedBillWellBeingCareIneligible = "update [dbo].[tbl_medbill] set [dbo].[medbill].[BillStatus] = 3, " +
                                                                                                    "[dbo].[tbl_medbill].[WellBeingCare] = 0 " +
                                                                                                    "where [dbo].[tbl_medbill].[BillNo] = @WellBeingCareMedBill";

                                                SqlCommand cmdUpdateMedBillWellBeingCareIneligible = new SqlCommand(strSqlUpdateMedBillWellBeingCareIneligible, connRN5);
                                                cmdUpdateMedBillWellBeingCareIneligible.CommandType = CommandType.Text;

                                                cmdUpdateMedBillWellBeingCareIneligible.Parameters.AddWithValue("@WellBeingCareMedBill", strNewMedBillNo);

                                                if (connRN5.State != ConnectionState.Closed)
                                                {
                                                    connRN5.Close();
                                                    connRN5.Open();
                                                }
                                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                                int nWellBeingMedBillUpdated = cmdUpdateMedBillWellBeingCareIneligible.ExecuteNonQuery();

                                                if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                                if (nWellBeingMedBillUpdated == 0)
                                                {
                                                    MessageBox.Show("The well being med bill is not updated.", "Error");
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                // set the well being care med bill eligible
                                                String strSqlUpdateMedBillWellBeingCareEligible = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[BillStatus] = 2, " +
                                                                                                  "[dbo].[tbl_medbill].[WellBeingCare] = 1 " +
                                                                                                  "where [dbo].[tbl_medbill].[BillNo] = @WellBeingCareMedBill";

                                                SqlCommand cmdUpdateMedBillWellBeingCareEligible = new SqlCommand(strSqlUpdateMedBillWellBeingCareEligible, connRN5);
                                                cmdUpdateMedBillWellBeingCareEligible.CommandType = CommandType.Text;

                                                cmdUpdateMedBillWellBeingCareEligible.Parameters.AddWithValue("@WellBeingCareMedBill", strNewMedBillNo);

                                                if (connRN5.State != ConnectionState.Closed)
                                                {
                                                    connRN5.Close();
                                                    connRN5.Open();
                                                }
                                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                                int nWellBeingMedBillUpdated = cmdUpdateMedBillWellBeingCareEligible.ExecuteNonQuery();

                                                if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                                if (nWellBeingMedBillUpdated == 0)
                                                {
                                                    MessageBox.Show("The well being med bill is not updated.", "Error");
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                    else if (nIncidentCount > 1)
                                    {
                                        // Ineligible for Well Being Care
                                        String strSqlUpdateMedBillWellBeingCareIneligible = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[BillStatus] = 3, " +
                                                                                            "[dbo].[tbl_medbill].[WellBeingCare] = 0 " +
                                                                                            "where [dbo].[tbl_medbill].[BillNo] = @WellBeingCareMedBill";

                                        SqlCommand cmdUpdateMedBillWellBeingCareIneligible = new SqlCommand(strSqlUpdateMedBillWellBeingCareIneligible, connRN5);
                                        cmdUpdateMedBillWellBeingCareIneligible.CommandType = CommandType.Text;

                                        cmdUpdateMedBillWellBeingCareIneligible.Parameters.AddWithValue("@WellBeingCareMedBill", strNewMedBillNo);

                                        if (connRN5.State != ConnectionState.Closed)
                                        {
                                            connRN5.Close();
                                            connRN5.Open();
                                        }
                                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                        int nWellBeingMedBillUpdated = cmdUpdateMedBillWellBeingCareIneligible.ExecuteNonQuery();
                                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                        if (nWellBeingMedBillUpdated == 0)
                                        {
                                            MessageBox.Show("The well being med bill is not updated.", "Error");
                                            return;
                                        }
                                    }
                                }
                            }
                        }

                        if (gvSettlementsInMedBill.Rows.Count > 0)
                        {
                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {

                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value == null)
                                {
                                    MessageBox.Show("You have to select a Settlement Type.", "Alert");
                                    return;
                                }

                                Decimal result, SettlementAmount;
                                if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) SettlementAmount = result;
                                else
                                {
                                    MessageBox.Show("You have to enter decimal value in Settlement Amount field in Settlement " + gvSettlementsInMedBill[1, i]?.Value?.ToString(), "Alert");
                                    return;
                                }

                                result = 0;
                                Decimal PersonalResponsibilityAmount = 0;

                                if ((gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount") ||
                                    (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount") ||
                                    (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment"))
                                {
                                    //if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString() != String.Empty)
                                    if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value != null)
                                    {
                                        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) PersonalResponsibilityAmount = result;
                                        else
                                        {
                                            MessageBox.Show("Invalid Personal Responsibility.", "Error");
                                            return;
                                        }
                                    }
                                }

                                result = 0;
                                Decimal AllowedAmount = 0;
                                if (gvSettlementsInMedBill["AllowedAmount", i]?.Value?.ToString() != null)
                                {
                                    if (Decimal.TryParse(gvSettlementsInMedBill["AllowedAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) AllowedAmount = result;
                                    else
                                    {
                                        MessageBox.Show("You have to enter decimal value in Allowed Amount field in Settlement " + gvSettlementsInMedBill[1, i]?.Value?.ToString(), "Alert");
                                        return;
                                    }
                                }
                            }

                            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            Decimal MedBillAmount = Decimal.Parse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"));
                            Decimal SettlementAmountTotal = 0;

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                Decimal result = 0;
                                Decimal SettlementAmount = 0;
                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Provider Payment" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Reimbursement" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Ineligible")
                                {
                                    if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                                    {
                                        SettlementAmount = result;
                                        SettlementAmountTotal += SettlementAmount;
                                        if (SettlementAmountTotal > MedBillAmount)
                                        {
                                            MessageBox.Show("The total of settlement amount exceeds medical bill amount.");
                                            return;
                                        }
                                    }
                                }
                            }

                            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            Boolean bError = false;

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                String SettlementName = gvSettlementsInMedBill["SettlementName", i].Value.ToString();

                                // Check whether or not the settlement is already in data base
                                String strSqlQueryForSettlementName = "select [dbo].[tbl_settlement].[Name] from [dbo].[tbl_settlement] where [dbo].[tbl_settlement].[Name] = @Settlement";

                                SqlCommand cmdQueryForSettlementName = new SqlCommand(strSqlQueryForSettlementName, connRN5);
                                cmdQueryForSettlementName.CommandType = CommandType.Text;

                                cmdQueryForSettlementName.Parameters.AddWithValue("@Settlement", SettlementName);

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State != ConnectionState.Open) connRN5.Open();
                                /////////////////////////////////////////////////////////////////////

                                Object objResultSettlementName = cmdQueryForSettlementName.ExecuteScalar();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                if (objResultSettlementName == null)   // new settlement: save the settlement by using insert sql statement
                                {

                                    String strSqlCreateNewSettlement = "insert into [dbo].[tbl_settlement] (IsDeleted, Name, CreateDate, CreateByID, LastModifiedDate, LastModifiedByID, SystemModifiedStamp, " +
                                                                        "LastActivityDate, LastViewedDate, MedicalBillID, " +
                                                                        "SettlementType, Amount, PersonalResponsibilityCredit, CMMPaymentMethod, " +
                                                                        "CheckNo, CheckDate, CheckReconciled, ACH_Number, ACH_Date, ACH_Reconciled, CMMCreditCard, CMMCreditCardPaidDate, CC_Reconciled, " +
                                                                        "AllowedAmount, Notes, Approved, ApprovedDate, IneligibleReason) " +
                                                                        "values (0, @SettlementName, @CreateDate, @CreateByID, @LastModifiedDate, @LastModifiedByID, @SystemModifiedStamp, " +
                                                                        "@LastActivityDate, @LastViewedDate, @MedBillID, " +
                                                                        "@SettlementType, @SettlementAmount, @PersonalResponsibilityCredit, @CMMPaymentMethod, " +
                                                                        "@CheckNo, @CheckDate, @IsCheckReconciled, @ACH_Number, @ACH_Date, @IsACH_Reconciled, @CMMCreditCard, @CMMCreditCardPaidDate, @IsCC_Reconciled, " +
                                                                        "@AllowedAmount, @Notes, @IsApproved, @ApprovedDate, @IneligibleReason)";

                                    SqlCommand cmdInsertNewSettlement = new SqlCommand(strSqlCreateNewSettlement, connRN5);
                                    cmdInsertNewSettlement.CommandType = CommandType.Text;

                                    String NewSettlementName = gvSettlementsInMedBill["SettlementName", i].Value.ToString();
                                    String NewSettlementType = String.Empty;
                                    if (gvSettlementsInMedBill["SettlementTypeValue", i].Value != null) NewSettlementType = gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString();
                                    int nNewSettlementType = 0;
                                    for (int j = 0; j < lstSettlementType.Count; j++)
                                    {
                                        if (NewSettlementType == lstSettlementType[j].SettlementTypeValue) nNewSettlementType = lstSettlementType[j].SettlementTypeCode;
                                    }
                                    Decimal result = 0;
                                    Decimal SettlementAmount = 0;
                                    if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                                    {
                                        SettlementAmount = result;
                                        cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementAmount", SettlementAmount);
                                    }

                                    result = 0;
                                    Decimal PersonalResponsibilityAmount = 0;
                                    if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) PersonalResponsibilityAmount = result;
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@PersonalResponsibilityCredit", PersonalResponsibilityAmount);

                                    int NewIsApproved = 0;
                                    if (gvSettlementsInMedBill["Approved", i]?.Value != null)
                                    {
                                        if ((Boolean)gvSettlementsInMedBill["Approved", i]?.Value == true) NewIsApproved = 1;
                                    }
                                    DateTime? NewApprovedDate = null;
                                    if (gvSettlementsInMedBill["ApprovedDate", i]?.Value != null) NewApprovedDate = DateTime.Parse(gvSettlementsInMedBill["ApprovedDate", i].Value.ToString());

                                    String NewCMMPaymentMethod = String.Empty;
                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value != null) NewCMMPaymentMethod = gvSettlementsInMedBill["PaymentMethod", i].Value.ToString();
                                    int nNewCMMPaymentMethod = 0;
                                    for (int j = 0; j < lstPaymentMethod.Count; j++)
                                    {
                                        if (NewCMMPaymentMethod == lstPaymentMethod[j].PaymentMethodValue) nNewCMMPaymentMethod = lstPaymentMethod[j].PaymentMethodId;
                                    }

                                    String NewCheckNo = String.Empty;
                                    DateTime? NewCheckDate = null;
                                    int NewCheckReconciled = 0;
                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
                                    {
                                        if (gvSettlementsInMedBill["CheckNo", i].Value != null) NewCheckNo = gvSettlementsInMedBill["CheckNo", i].Value.ToString();
                                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null) NewCheckDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                        if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewCheckReconciled = 1;
                                    }

                                    String NewACH_Number = String.Empty;
                                    DateTime? NewACH_Date = null;
                                    int NewACH_Reconciled = 0;
                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
                                    {
                                        if (gvSettlementsInMedBill["ACHNo", i].Value != null) NewACH_Number = gvSettlementsInMedBill["ACHNo", i].Value.ToString();
                                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null) NewACH_Date = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                        if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewACH_Reconciled = 1;
                                    }

                                    int nCMMCreditCard = 0;
                                    DateTime? NewCreditCardPaidDate = null;
                                    int NewIsCCReconciled = 0;

                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
                                    {
                                        String CreditCard = gvSettlementsInMedBill[13, i]?.Value?.ToString();
                                        for (int j = 0; j < lstCreditCardInfo.Count; j++)
                                        {
                                            if (CreditCard == lstCreditCardInfo[j].CreditCardNo)
                                            {
                                                nCMMCreditCard = lstCreditCardInfo[j].CreditCardId;
                                            }
                                        }
                                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            NewCreditCardPaidDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                        if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewIsCCReconciled = 1;
                                    }

                                    Decimal NewAllowedAmount = 0;
                                    if (gvSettlementsInMedBill["AllowedAmount", i].Value != null) NewAllowedAmount = Decimal.Parse(gvSettlementsInMedBill["AllowedAmount", i].Value.ToString());
                                    String NewNote = String.Empty;
                                    if (gvSettlementsInMedBill["Note", i].Value != null) NewNote = gvSettlementsInMedBill["Note", i].Value.ToString();

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementName", NewSettlementName);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CreateDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CreateByID", nLoggedUserId);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastModifiedByID", nLoggedUserId);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@SystemModifiedStamp", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastViewedDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@MedBillID", txtMedBillNo.Text.Trim());
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementType", nNewSettlementType);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsApproved", NewIsApproved);

                                    if (NewApprovedDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ApprovedDate", NewApprovedDate);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@ApprovedDate", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CMMPaymentMethod", nNewCMMPaymentMethod);

                                    if (NewCheckNo != String.Empty) cmdInsertNewSettlement.Parameters.AddWithValue("@CheckNo", NewCheckNo);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@CheckNo", DBNull.Value);

                                    if (NewCheckDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@CheckDate", NewCheckDate);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@CheckDate", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsCheckReconciled", NewCheckReconciled);

                                    if (NewACH_Number != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Number", NewACH_Number);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Number", DBNull.Value);

                                    if (NewACH_Date != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Date", NewACH_Date);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Date", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsACH_Reconciled", NewACH_Reconciled);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCard", nCMMCreditCard);

                                    if (NewCreditCardPaidDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", NewCreditCardPaidDate);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsCC_Reconciled", NewIsCCReconciled);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@AllowedAmount", NewAllowedAmount);

                                    if (NewNote != null) cmdInsertNewSettlement.Parameters.AddWithValue("@Notes", NewNote);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@Notes", DBNull.Value);

                                    int nIneligibleReason = 0;
                                    for (int j = 0; j < dicIneligibleReason.Count; j++)
                                    {
                                        if (gvSettlementsInMedBill["IneligibleReason", i]?.Value?.ToString() == dicIneligibleReason[j]) nIneligibleReason = j;
                                    }
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IneligibleReason", nIneligibleReason);

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                    int nSettlementInserted = cmdInsertNewSettlement.ExecuteNonQuery();
                                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                    if (nSettlementInserted == 0) bError = true;

                                }
                                else  // the settlement with the name exist, update the settlement
                                {
                                    String UpdateSettlementName = objResultSettlementName.ToString();
                                    String UpdateMedBill = txtMedBillNo.Text.Trim();

                                    String strSqlUpdateSettlement = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[LastModifiedDate] = @LastModifiedDate, " +
                                                                    "[dbo].[tbl_settlement].[LastModifiedByID] = @LastModifiedByID, " +
                                                                    "[dbo].[tbl_settlement].[LastActivityDate] = @LastActivityDate, " +
                                                                    "[dbo].[tbl_settlement].[SettlementType] = @SettlementType, " +
                                                                    "[dbo].[tbl_settlement].[Amount] = @SettlementAmount, " +
                                                                    "[dbo].[tbl_settlement].[PersonalResponsibilityCredit] = @PersonalResponsibilityCredit, " +
                                                                    "[dbo].[tbl_settlement].[Approved] = @IsApproved, " +
                                                                    "[dbo].[tbl_settlement].[ApprovedDate] = @ApprovedDate, " +
                                                                    "[dbo].[tbl_settlement].[CMMPaymentMethod] = @CMMPaymentMethod, " +
                                                                    "[dbo].[tbl_settlement].[CheckNo] = @CheckNo, " +
                                                                    "[dbo].[tbl_settlement].[CheckDate] = @CheckDate, " +
                                                                    "[dbo].[tbl_settlement].[CheckReconciled] = @CheckReconciled, " +
                                                                    "[dbo].[tbl_settlement].[ACH_Number] = @ACH_Number, " +
                                                                    "[dbo].[tbl_settlement].[ACH_Date] = @ACH_Date, " +
                                                                    "[dbo].[tbl_settlement].[ACH_Reconciled] = @ACH_Reconciled, " +
                                                                    "[dbo].[tbl_settlement].[CMMCreditCard] = @CMMCreditCard, " +
                                                                    "[dbo].[tbl_settlement].[CMMCreditCardPaidDate] = @CMMCreditCardPaidDate, " +
                                                                    "[dbo].[tbl_settlement].[CC_Reconciled] = @CC_Reconciled, " +
                                                                    "[dbo].[tbl_settlement].[AllowedAmount] = @AllowedAmount, " +
                                                                    "[dbo].[tbl_settlement].[Notes] = @Note, " +
                                                                    "[dbo].[tbl_settlement].[IneligibleReason] = @IneligibleReason " +
                                                                    "where [dbo].[tbl_settlement].[Name] = @SettlementName and [dbo].[tbl_settlement].[MedicalBillID] = @MedBillName";

                                    int nSettlementType = 0;
                                    String strSettlementType = String.Empty;
                                    if (gvSettlementsInMedBill["SettlementTypeValue", i].Value != null) strSettlementType = gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString();
                                    for (int j = 0; j < lstSettlementType.Count; j++)
                                    {
                                        if (strSettlementType == lstSettlementType[j].SettlementTypeValue) nSettlementType = lstSettlementType[j].SettlementTypeCode;
                                    }

                                    Decimal SettlementAmount = 0;
                                    if (gvSettlementsInMedBill["SettlementAmount", i].Value != null)
                                    {
                                        SettlementAmount = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency);
                                    }

                                    Decimal PersonalResponsibilityAmt = 0;
                                    if (gvSettlementsInMedBill["PersonalResponsibility", i].Value != null)
                                    {
                                        PersonalResponsibilityAmt = Decimal.Parse(gvSettlementsInMedBill["PersonalResponsibility", i].Value.ToString(), NumberStyles.Currency);
                                    }

                                    // Payment method
                                    int nPaymentMethod = 0;
                                    String PaymentMethod = String.Empty;
                                    if (gvSettlementsInMedBill["PaymentMethod", i].Value != null)
                                        PaymentMethod = gvSettlementsInMedBill["PaymentMethod", i].Value.ToString();
                                    for (int j = 0; j < lstPaymentMethod.Count; j++)
                                    {
                                        if (PaymentMethod == lstPaymentMethod[j].PaymentMethodValue) nPaymentMethod = lstPaymentMethod[j].PaymentMethodId;
                                    }

                                    // Approved or not
                                    int nApproved = 0;
                                    if (gvSettlementsInMedBill["Approved", i].Value != null)
                                    {
                                        if ((Boolean)gvSettlementsInMedBill["Approved", i].Value) nApproved = 1;
                                    }

                                    DateTime? ApprovedDate = null;
                                    if (gvSettlementsInMedBill["ApprovedDate", i].Value != null) ApprovedDate = DateTime.Parse(gvSettlementsInMedBill["ApprovedDate", i].Value.ToString());


                                    String CheckNo = String.Empty;
                                    DateTime? CheckIssueDate = null;
                                    int nCheckReconciled = 0;

                                    String ACH_No = String.Empty;
                                    DateTime? ACH_Date = null;
                                    int nACHReconciled = 0;

                                    String CreditCard = String.Empty;
                                    int nCreditCard = 0;
                                    DateTime? CreditCardPaidDate = null;
                                    int nCCReconciled = 0;

                                    switch (PaymentMethod)
                                    {
                                        case "Check":
                                            if (gvSettlementsInMedBill["CheckNo", i].Value != null) CheckNo = gvSettlementsInMedBill["CheckNo", i].Value.ToString();
                                            if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            {
                                                if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty) CheckIssueDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                            }
                                            Boolean bCheckReconciledResult = false;
                                            if (gvSettlementsInMedBill["Reconciled", i].Value != null)
                                            {
                                                if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bCheckReconciledResult))
                                                {
                                                    if (bCheckReconciledResult) nCheckReconciled = 1;
                                                }
                                            }
                                            break;
                                        case "ACH/Banking":
                                            if (gvSettlementsInMedBill["ACHNo", i].Value != null) ACH_No = gvSettlementsInMedBill["ACHNo", i].Value.ToString();
                                            if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            {
                                                if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty) ACH_Date = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                            }
                                            Boolean bACHReconciledResult = false;
                                            if (gvSettlementsInMedBill["Reconciled", i].Value != null)
                                            {
                                                if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bACHReconciledResult))
                                                {
                                                    if (bACHReconciledResult) nACHReconciled = 1;
                                                }
                                            }
                                            break;
                                        case "Credit Card":
                                            if (gvSettlementsInMedBill["CreditCard", i].Value != null) CreditCard = gvSettlementsInMedBill["CreditCard", i].Value.ToString();
                                            for (int j = 0; j < lstCreditCardInfo.Count; j++)
                                            {
                                                if (CreditCard == lstCreditCardInfo[j].CreditCardNo) nCreditCard = lstCreditCardInfo[j].CreditCardId;
                                            }
                                            if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            {
                                                if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty)
                                                    CreditCardPaidDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                            }
                                            Boolean bCCReconciledResult = false;
                                            if (gvSettlementsInMedBill[15, i].Value != null)
                                            {
                                                if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bCCReconciledResult))
                                                {
                                                    if (bCCReconciledResult) nCCReconciled = 1;
                                                }
                                            }
                                            break;
                                    }

                                    // Allowed Amount
                                    Decimal AllowedAmount = 0;
                                    if (gvSettlementsInMedBill["AllowedAmount", i].Value != null)
                                    {
                                        AllowedAmount = Decimal.Parse(gvSettlementsInMedBill["AllowedAmount", i].Value.ToString(), NumberStyles.Currency);
                                    }

                                    // Note
                                    String Note = String.Empty;
                                    if (gvSettlementsInMedBill["Note", i].Value != null) Note = gvSettlementsInMedBill["Note", i].Value.ToString();



                                    SqlCommand cmdUpdateSettlement = new SqlCommand(strSqlUpdateSettlement, connRN5);
                                    cmdUpdateSettlement.CommandType = CommandType.Text;

                                    cmdUpdateSettlement.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@LastModifiedByID", nLoggedUserId);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@SettlementType", nSettlementType);


                                    cmdUpdateSettlement.Parameters.AddWithValue("@SettlementAmount", SettlementAmount);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@PersonalResponsibilityCredit", PersonalResponsibilityAmt);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@IsApproved", nApproved);
                                    if (ApprovedDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@ApprovedDate", ApprovedDate);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@ApprovedDate", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@CMMPaymentMethod", nPaymentMethod);

                                    if (CheckNo != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@CheckNo", CheckNo);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@CheckNo", DBNull.Value);

                                    if (CheckIssueDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@CheckDate", CheckIssueDate);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@CheckDate", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@CheckReconciled", nCheckReconciled);

                                    if (ACH_No != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Number", ACH_No);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Number", DBNull.Value);

                                    if (ACH_Date != null) cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Date", ACH_Date);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Date", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Reconciled", nACHReconciled);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCard", nCreditCard);

                                    if (CreditCardPaidDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", CreditCardPaidDate);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", DBNull.Value);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@CC_Reconciled", nCCReconciled);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@AllowedAmount", AllowedAmount);
                                    if (Note != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@Note", Note);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@Note", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@SettlementName", UpdateSettlementName);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@MedBillName", UpdateMedBill);

                                    int nIneligibleReason = 0;
                                    for (int j = 0; j < dicIneligibleReason.Count; j++)
                                    {
                                        if (gvSettlementsInMedBill["IneligibleReason", i]?.Value?.ToString() == dicIneligibleReason[j]) nIneligibleReason = j;
                                    }
                                    cmdUpdateSettlement.Parameters.AddWithValue("@IneligibleReason", nIneligibleReason);

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                    int nSettlmentsUpdated = cmdUpdateSettlement.ExecuteNonQuery();
                                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                    if (nSettlmentsUpdated == 0) bError = true;
                                }
                            }

                            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "Ineligible")
                                {
                                    gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                                    gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                                }
                            }

                            if (bError == false)
                            {
                                MessageBox.Show("Settlements have been saved.", "Info");
                            }
                            else if (bError == true)
                            {
                                MessageBox.Show("Some of settlments have not been saved.", "Error");
                                //return;
                            }
                        }
                        // prepare settlement gv
                        //MedBillNo

                        String strSqlQueryForSettlement = "select [dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement_type_code].[SettlementTypeValue], [dbo].[tbl_settlement].[Amount], " +
                                  "[dbo].[tbl_settlement].[PersonalResponsibilityCredit], [dbo].[tbl_payment_method].[PaymentMethod_Value], " +
                                  "[dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate], " +
                                  "[dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
                                  "[dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], [dbo].[tbl_settlement].[ACH_Reconciled], " +
                                  "[dbo].[tbl_Credit_Card__c].[Name], [dbo].[tbl_settlement].[CMMCreditCardPaidDate], [dbo].[tbl_settlement].[CC_Reconciled], " +
                                  "[dbo].[tbl_settlement].[AllowedAmount], [dbo].[tbl_settlement].[IneligibleReason], " +
                                  "[dbo].[tbl_settlement].[Notes] " +
                                  "from [dbo].[tbl_settlement] inner join [dbo].[tbl_settlement_type_code] " +
                                  "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                  "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
                                  "inner join [dbo].[tbl_Credit_Card__c] on [dbo].[tbl_settlement].[CMMCreditCard] = [dbo].[tbl_Credit_Card__c].[CreditCard_Id]" +
                                  "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and " +
                                  "[dbo].[tbl_settlement].[IsDeleted] = 0 " +
                                  "order by [dbo].[tbl_settlement].[Name]";

                        SqlCommand cmdQueryForSettlement = new SqlCommand(strSqlQueryForSettlement, connRN5);
                        cmdQueryForSettlement.CommandType = CommandType.Text;

                        cmdQueryForSettlement.Parameters.AddWithValue("@MedBillNo", strNewMedBillNo);

                        SqlDependency dependencySettlementInMedBill = new SqlDependency(cmdQueryForSettlement);
                        dependencySettlementInMedBill.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillEditChange);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        SqlDataReader rdrSettlement = cmdQueryForSettlement.ExecuteReader();
                        gvSettlementsInMedBill.Rows.Clear();
                        if (rdrSettlement.HasRows)
                        {
                            while (rdrSettlement.Read())
                            {
                                DataGridViewRow row = new DataGridViewRow();
                                row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                if (!rdrSettlement.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(0) });
                                if (!rdrSettlement.IsDBNull(1))
                                {
                                    DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();

                                    for (int i = 0; i < lstSettlementType.Count; i++)
                                    {
                                        comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                                    }
                                    for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                                    {
                                        if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                            comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                                    }

                                    row.Cells.Add(comboCellSettlementType);
                                }
                                else
                                {
                                    DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstSettlementType.Count; i++)
                                    {
                                        comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                                    }

                                    for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                                    {
                                        if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                            comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                                    }

                                    row.Cells.Add(comboCellSettlementType);
                                }

                                if (!rdrSettlement.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(2).ToString("C") });
                                else
                                {
                                    Decimal Zero = 0;
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                                }


                                if (!rdrSettlement.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(3).ToString("C") });
                                else
                                {
                                    Decimal Zero = 0;
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                                }

                                if (!rdrSettlement.IsDBNull(4))
                                {
                                    DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                                    for (int i = 0; i < lstPaymentMethod.Count; i++)
                                    {
                                        if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                        else comboCellPaymentMethod.Items.Add(String.Empty);
                                    }

                                    for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                                    {
                                        if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                            comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                                    }

                                    row.Cells.Add(comboCellPaymentMethod);
                                }
                                else
                                {
                                    DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                                    for (int i = 0; i < lstPaymentMethod.Count; i++)
                                    {
                                        if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                        else comboCellPaymentMethod.Items.Add(String.Empty);
                                    }

                                    for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                                    {
                                        if ((!rdrSettlement.IsDBNull(4)) && comboCellPaymentMethod.Items[i] != null)
                                        {
                                            if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                                comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                                        }
                                        else comboCellPaymentMethod.Value = null;
                                    }

                                    row.Cells.Add(comboCellPaymentMethod);

                                }

                                if (!rdrSettlement.IsDBNull(5))
                                {

                                    DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                                    approvedCell.Value = rdrSettlement.GetBoolean(5);
                                    approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                                    row.Cells.Add(approvedCell);
                                }
                                else
                                {
                                    DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                                    approvedCell.Value = false;
                                    approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                                    row.Cells.Add(approvedCell);
                                }

                                if (!rdrSettlement.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(6).ToString("MM/dd/yyyy")) });
                                else row.Cells.Add(new CalendarCell { Value = null });

                                // Payment information
                                if (!rdrSettlement.IsDBNull(4))
                                {
                                    String strPaymentMethod = rdrSettlement.GetString(4);

                                    switch (strPaymentMethod)
                                    {
                                        case "Check":
                                            if (!rdrSettlement.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(7) });
                                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            DataGridViewComboBoxCell comboCellCreditCardNoneForCheck = new DataGridViewComboBoxCell();
                                            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                            {
                                                if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNoneForCheck.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                                else comboCellCreditCardNoneForCheck.Items.Add(String.Empty);
                                            }
                                            row.Cells.Add(comboCellCreditCardNoneForCheck);
                                            if (!rdrSettlement.IsDBNull(8)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(8).ToString("MM/dd/yyyy")) });
                                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                            if (!rdrSettlement.IsDBNull(9)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(9) });
                                            else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                            break;
                                        case "ACH/Banking":
                                            row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            if (!rdrSettlement.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(10) });
                                            else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            DataGridViewComboBoxCell comboCellCreditCardNoneForACH = new DataGridViewComboBoxCell();
                                            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                            {
                                                if (lstCreditCardInfo[i].CreditCardNo != null)
                                                    comboCellCreditCardNoneForACH.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                                else comboCellCreditCardNoneForACH.Items.Add(String.Empty);
                                            }
                                            row.Cells.Add(comboCellCreditCardNoneForACH);
                                            if (!rdrSettlement.IsDBNull(11)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(11).ToString("MM/dd/yyyy")) });
                                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                            if (!rdrSettlement.IsDBNull(12)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(12) });
                                            else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                            break;
                                        case "Credit Card":
                                            row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                                            if (!rdrSettlement.IsDBNull(13))
                                            {
                                                for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                                {
                                                    if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                                    else comboCellCreditCard.Items.Add(String.Empty);
                                                }
                                                for (int i = 0; i < comboCellCreditCard.Items.Count; i++)
                                                {
                                                    if (rdrSettlement.GetString(13) == comboCellCreditCard.Items[i].ToString())
                                                        comboCellCreditCard.Value = comboCellCreditCard.Items[i];
                                                }
                                            }
                                            else
                                            {
                                                for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                                {
                                                    if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                                    else comboCellCreditCard.Items.Add(String.Empty);
                                                }
                                                comboCellCreditCard.Value = String.Empty;
                                            }
                                            row.Cells.Add(comboCellCreditCard);
                                            if (!rdrSettlement.IsDBNull(14)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(14).ToString("MM/dd/yyyy")) });
                                            else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                            if (!rdrSettlement.IsDBNull(15)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(15) });
                                            else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                            break;
                                        default:
                                            row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                            DataGridViewComboBoxCell comboCellCreditCardNone = new DataGridViewComboBoxCell();
                                            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                            {
                                                if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNone.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                                else comboCellCreditCardNone.Items.Add(String.Empty);
                                            }
                                            row.Cells.Add(comboCellCreditCardNone);
                                            row.Cells.Add(new CalendarCell { Value = null });
                                            row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                            break;
                                    }
                                }
                                else
                                {

                                    DataGridViewTextBoxCell txtCheckNoCell = new DataGridViewTextBoxCell();
                                    txtCheckNoCell.Value = null;
                                    row.Cells.Add(txtCheckNoCell);
                                    DataGridViewTextBoxCell txtACHNoCell = new DataGridViewTextBoxCell();
                                    txtACHNoCell.Value = null;
                                    row.Cells.Add(txtACHNoCell);
                                    DataGridViewComboBoxCell comboCreditCardCell = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCreditCardCell.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCreditCardCell.Items.Add(String.Empty);
                                    }
                                    row.Cells.Add(comboCreditCardCell);
                                    comboCreditCardCell.ReadOnly = true;
                                    CalendarCell calPaymentDate = new CalendarCell();
                                    calPaymentDate.Value = null;
                                    row.Cells.Add(calPaymentDate);
                                    DataGridViewCheckBoxCell chkReconciledCell = new DataGridViewCheckBoxCell();
                                    chkReconciledCell.Value = false;
                                    row.Cells.Add(chkReconciledCell);
                                }

                                if (!rdrSettlement.IsDBNull(16)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(16).ToString("C") });
                                else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                                if (!rdrSettlement.IsDBNull(17))
                                {
                                    if (dicIneligibleReason.Count > 0)
                                    {
                                        DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                                        for (int i = 0; i < dicIneligibleReason.Count; i++)
                                        {
                                            comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                                        }
                                        comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[rdrSettlement.GetInt32(17)];
                                        row.Cells.Add(comboCellIneligibleReason);
                                    }
                                }
                                else
                                {
                                    if (dicIneligibleReason.Count > 0)
                                    {
                                        DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                                        for (int i = 0; i < dicIneligibleReason.Count; i++)
                                        {
                                            comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                                        }
                                        comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[0];
                                        row.Cells.Add(comboCellIneligibleReason);
                                    }
                                }

                                if (!rdrSettlement.IsDBNull(18)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(18) });
                                else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                                gvSettlementsInMedBill.Rows.Add(row);
                            }
                        }
                        rdrSettlement.Close();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        String strIllnessIdForIncidentSharedTotal = String.Empty;

                        if (txtMedBill_Illness.Text.Trim() != String.Empty)
                        {
                            String IllnessNo = txtMedBill_Illness.Text.Trim();

                            String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

                            SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN5);
                            cmdQueryForIllnessId.CommandType = CommandType.Text;

                            cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", txtMedBill_Illness.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (objIllnessId != null) strIllnessIdForIncidentSharedTotal = objIllnessId.ToString();
                            else
                            {
                                MessageBox.Show("No Illness Id for given Illness No", "Error");
                                return;
                            }
                        }

                        String strIncidentIdForIncidentSharedTotal = String.Empty;

                        if (txtMedBill_Incident.Text.Trim() != String.Empty)
                        {
                            String IncidentNo = txtMedBill_Incident.Text.Trim();

                            String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

                            SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN5);
                            cmdQueryForIncidentId.CommandType = CommandType.Text;

                            cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", txtMedBill_Incident.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (objIncidentId != null) strIncidentIdForIncidentSharedTotal = objIncidentId.ToString();
                            else
                            {
                                MessageBox.Show("No Incident Id for given Incident No", "Error");
                                return;
                            }
                        }

                        // Calculate the Total Shared Amount in Medical Bill
                        String strSqlQueryForTotalSharedAmountSettlementInMedBill = "select sum([dbo].[tbl_settlement].[Amount]) from [dbo].[tbl_settlement] " +
                                                                                    "inner join [dbo].[tbl_settlement_type_code] " +
                                                                                    "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                                                    "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillId and " +
                                                                                    "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                                                    "([dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'Member Reimbursement' or " +
                                                                                    "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'CMM Provider Payment' or " +
                                                                                    "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'PR Reimbursement')";

                        SqlCommand cmdQueryForTotalSharedAmountInSettlemetsInMedBill = new SqlCommand(strSqlQueryForTotalSharedAmountSettlementInMedBill, connRN5);
                        cmdQueryForTotalSharedAmountInSettlemetsInMedBill.CommandType = CommandType.Text;

                        cmdQueryForTotalSharedAmountInSettlemetsInMedBill.Parameters.AddWithValue("@MedBillId", txtMedBillNo.Text.Trim());

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                        Object objTotalSharedAmountSettlementInMedBill = cmdQueryForTotalSharedAmountInSettlemetsInMedBill.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        Decimal TotalSharedAmountSettlement = 0;
                        if (objTotalSharedAmountSettlementInMedBill.ToString() != String.Empty)
                        {
                            TotalSharedAmountSettlement = Decimal.Parse(objTotalSharedAmountSettlementInMedBill.ToString());
                        }

                        String strSqlQueryForMedicalProviderRefund = "select sum([dbo].[tbl_settlement].[Amount]) from [dbo].[tbl_settlement] " +
                                                                     "inner join [dbo].[tbl_settlement_type_code] " +
                                                                     "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                                     "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillId and " +
                                                                     "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                                     "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'Medical Provider Refund'";

                        SqlCommand cmdQueryForMedicalProviderRefund = new SqlCommand(strSqlQueryForMedicalProviderRefund, connRN5);
                        cmdQueryForMedicalProviderRefund.CommandType = CommandType.Text;

                        cmdQueryForMedicalProviderRefund.Parameters.AddWithValue("@MedBillId", txtMedBillNo.Text.Trim());

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                        Object objMedicalProviderRefund = cmdQueryForMedicalProviderRefund.ExecuteScalar();

                        Decimal MedicalProviderRefund = 0;
                        if (objMedicalProviderRefund.ToString() != String.Empty) MedicalProviderRefund = Decimal.Parse(objMedicalProviderRefund.ToString());

                        TotalSharedAmountSettlement -= MedicalProviderRefund;

                        String strSqlUpdateMedBillForTotalSharedAmount = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[TotalSharedAmount] = @TotalSharedAmount " +
                                                 "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                                                 "[dbo].[tbl_medbill].[IsDeleted] = 0 and " +
                                                 "[dbo].[tbl_medbill].[Illness_Id] = @IllnessId and " +
                                                 "[dbo].[tbl_medbill].[Incident_Id] = @IncidentId and " +
                                                 "[dbo].[tbl_medbill].[Individual_Id] = @IndividualId";

                        SqlCommand cmdUpdateMedBillForTotalSharedAmount = new SqlCommand(strSqlUpdateMedBillForTotalSharedAmount, connRN5);
                        cmdUpdateMedBillForTotalSharedAmount.CommandType = CommandType.Text;

                        cmdUpdateMedBillForTotalSharedAmount.Parameters.AddWithValue("@TotalSharedAmount", TotalSharedAmountSettlement);
                        cmdUpdateMedBillForTotalSharedAmount.Parameters.AddWithValue("@MedBillNo", txtMedBillNo.Text.Trim());
                        cmdUpdateMedBillForTotalSharedAmount.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessIdForIncidentSharedTotal));
                        cmdUpdateMedBillForTotalSharedAmount.Parameters.AddWithValue("@IncidentId", Int32.Parse(strIncidentIdForIncidentSharedTotal));
                        cmdUpdateMedBillForTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        int nMedBillUpdated = cmdUpdateMedBillForTotalSharedAmount.ExecuteNonQuery();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (nMedBillUpdated == 0)
                        {
                            MessageBox.Show("The Medical Bill has not been updated with Total Shared Amount.", "Error");
                            return;
                        }

                        if (strIllnessIdForIncidentSharedTotal != String.Empty &&
                            strIncidentIdForIncidentSharedTotal != String.Empty)
                        {

                            String strSqlQueryForIncidentTotalSharedAmount = "select sum([dbo].[tbl_medbill].[TotalSharedAmount]) from [dbo].[tbl_medbill] " +
                                                 "where [dbo].[tbl_medbill].[IsDeleted] = 0 and " +
                                                 "[dbo].[tbl_medbill].[Illness_Id] = @IllnessId and " +
                                                 "[dbo].[tbl_medbill].[Incident_Id] = @IncidentId and " +
                                                 "[dbo].[tbl_medbill].[Individual_Id] = @IndividualId";

                            SqlCommand cmdQueryForIncidentTotalSharedAmount = new SqlCommand(strSqlQueryForIncidentTotalSharedAmount, connRN5);
                            cmdQueryForIncidentTotalSharedAmount.CommandType = CommandType.Text;

                            cmdQueryForIncidentTotalSharedAmount.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessIdForIncidentSharedTotal));
                            cmdQueryForIncidentTotalSharedAmount.Parameters.AddWithValue("@IncidentId", Int32.Parse(strIncidentIdForIncidentSharedTotal));
                            cmdQueryForIncidentTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objIncidentTotalSharedAmount = cmdQueryForIncidentTotalSharedAmount.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            Decimal IncidentTotalSharedAmount = 0;
                            if (objIncidentTotalSharedAmount.ToString() != String.Empty)
                            {
                                IncidentTotalSharedAmount = Decimal.Parse(objIncidentTotalSharedAmount.ToString());
                            }
                            else
                            {
                                MessageBox.Show("No Incident Total Shared Amount", "Error");
                                return;
                            }

                            String strUpdateIncidentSharedTotal = "update [dbo].[tbl_incident] set [dbo].[tbl_incident].[TotalSharedAmount] = @TotalSharedAmount " +
                                      "where [dbo].[tbl_incident].[IsDeleted] = 0 and " +
                                      "[dbo].[tbl_incident].[Incident_id] = @IncidentId and" +
                                      "[dbo].[tbl_incident].[Illness_id] = @IllnessId and " +
                                      "[dbo].[tbl_incident].[Individual_id] = @IndividualId";

                            SqlCommand cmdUpdateIncidentSharedTotal = new SqlCommand(strUpdateIncidentSharedTotal, connRN5);
                            cmdUpdateIncidentSharedTotal.CommandType = CommandType.Text;

                            cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@TotalSharedAmount", IncidentTotalSharedAmount);
                            cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@IncidentId", Int32.Parse(strIncidentIdForIncidentSharedTotal));
                            cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessIdForIncidentSharedTotal));
                            cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            int nIncidentUpdated = cmdUpdateIncidentSharedTotal.ExecuteNonQuery();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (nIncidentUpdated == 1)
                            {
                                String strSqlQueryForIllnessTotalSharedAmount = "select sum([dbo].[tbl_incident].[TotalSharedAmount]) from [dbo].[tbl_incident] " +
                                               "where [dbo].[tbl_incident].[IsDeleted] = 0 and " +
                                               "[dbo].[tbl_incident].[Illness_id] = @IllnessId and " +
                                               "[dbo].[tbl_incident].[Individual_id] = @IndividualId";


                                SqlCommand cmdQueryForIllnessTotalSharedAmount = new SqlCommand(strSqlQueryForIllnessTotalSharedAmount, connRN5);
                                cmdQueryForIllnessTotalSharedAmount.CommandType = CommandType.Text;

                                cmdQueryForIllnessTotalSharedAmount.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessIdForIncidentSharedTotal));
                                cmdQueryForIllnessTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                Object objIllnessTotalSharedAmount = cmdQueryForIllnessTotalSharedAmount.ExecuteScalar();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                Decimal IllnessTotalSharedAmount = 0;
                                if (objIllnessTotalSharedAmount.ToString() != String.Empty) IllnessTotalSharedAmount = Decimal.Parse(objIllnessTotalSharedAmount.ToString());

                                String strSqlUpdateIllnessSharedTotal = "update [dbo].[tbl_illness] set [dbo].[tbl_illness].[TotalSharedAmount] = @TotalSharedAmount " +
                                        "where [dbo].[tbl_illness].[IsDeleted] = 0 and " +
                                        "[dbo].[tbl_illness].[Illness_Id] = @IllnessId and " +
                                        "[dbo].[tbl_illness].[Individual_Id] = @IndividualId";

                                SqlCommand cmdUpdateIllnessSharedTotal = new SqlCommand(strSqlUpdateIllnessSharedTotal, connRN5);
                                cmdUpdateIllnessSharedTotal.CommandType = CommandType.Text;

                                cmdUpdateIllnessSharedTotal.Parameters.AddWithValue("@TotalSharedAmount", IllnessTotalSharedAmount);
                                cmdUpdateIllnessSharedTotal.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessIdForIncidentSharedTotal));
                                cmdUpdateIllnessSharedTotal.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                int nIllnessUpdated = cmdUpdateIllnessSharedTotal.ExecuteNonQuery();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                if (nIllnessUpdated == 1)
                                {
                                    String strSqlQueryForIndividualTotalSharedAmount = "select sum([dbo].[tbl_illness].[TotalSharedAmount]) from [dbo].[tbl_illness] " +
                                                   "where [dbo].[tbl_illness].[IsDeleted] = 0 and " +
                                                   "[dbo].[tbl_illness].[Individual_Id] = @IndividualId";

                                    SqlCommand cmdQueryForIndividualTotalSharedAmount = new SqlCommand(strSqlQueryForIndividualTotalSharedAmount, connRN5);
                                    cmdQueryForIndividualTotalSharedAmount.CommandType = CommandType.Text;

                                    cmdQueryForIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                    Object objIndividualTotalSharedAmount = cmdQueryForIndividualTotalSharedAmount.ExecuteScalar();
                                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                    Decimal IndividualTotalSharedAmount = 0;
                                    if (objIndividualTotalSharedAmount.ToString() != String.Empty) IndividualTotalSharedAmount = Decimal.Parse(objIndividualTotalSharedAmount.ToString());


                                    String strSqlUpdateIndividualTotalSharedAmount = "update [dbo].[contact] set [dbo].[contact].[TotalSharedAmount] = @IndividualTotalSharedAmount " +
                                                                                     "where [dbo].[contact].[IsDeleted] = 0 and " +
                                                                                     "[dbo].[contact].[Individual_ID__c] = @IndividualId";

                                    SqlCommand cmdUpdateIndividualTotalSharedAmount = new SqlCommand(strSqlUpdateIndividualTotalSharedAmount, connSalesforce);
                                    cmdUpdateIndividualTotalSharedAmount.CommandType = CommandType.Text;

                                    cmdUpdateIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualTotalSharedAmount", IndividualTotalSharedAmount);
                                    cmdUpdateIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                    if (connSalesforce.State == ConnectionState.Open)
                                    {
                                        connSalesforce.Close();
                                        connSalesforce.Open();
                                    }
                                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                                    int nIndividualUpdated = cmdUpdateIndividualTotalSharedAmount.ExecuteNonQuery();
                                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                                    if (nIndividualUpdated == 1) txtTotalSharedAmount.Text = IndividualTotalSharedAmount.ToString("C");

                                    if (nIndividualUpdated != 1)
                                    {
                                        MessageBox.Show("Individual Total Shared Amount has not been updated.", "Error");
                                        return;
                                    }
                                }
                                else
                                {
                                    MessageBox.Show("Illness total Shared Amount has not been updated.", "Error");
                                    return;
                                }
                            }
                            else
                            {
                                MessageBox.Show("Incident Total Shared Amount has not been updated.", "Error");
                                return;
                            }
                        }

                        String strSqlQueryForTotalMedBillAmountForIndividualId = "select sum([dbo].[tbl_medbill].[BillAmount]) from [dbo].[tbl_medbill] " +
                                                                                 "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                                                 "[dbo].[tbl_medbill].[IsDeleted] = 0";

                        SqlCommand cmdQueryForTotalMedBillAmountForIndividualId = new SqlCommand(strSqlQueryForTotalMedBillAmountForIndividualId, connRN5);
                        cmdQueryForTotalMedBillAmountForIndividualId.CommandType = CommandType.Text;

                        cmdQueryForTotalMedBillAmountForIndividualId.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objTotalMedBillAmountForIndividualId = cmdQueryForTotalMedBillAmountForIndividualId.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        Decimal TotalMedBillAmountForIndividualId = 0;
                        if (objTotalMedBillAmountForIndividualId != null) TotalMedBillAmountForIndividualId = Decimal.Parse(objTotalMedBillAmountForIndividualId.ToString());

                        String strSqlUpdateIndividualTotalMedBillAmount = "update [dbo].[contact] set [dbo].[contact].[MedicalBillAmountTotal] = @MedBillTotalForIndividual " +
                                                                          "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                        SqlCommand cmdUpdateIndividualTotalMedBillAmount = new SqlCommand(strSqlUpdateIndividualTotalMedBillAmount, connSalesforce);
                        cmdUpdateIndividualTotalMedBillAmount.CommandType = CommandType.Text;

                        cmdUpdateIndividualTotalMedBillAmount.Parameters.AddWithValue("@MedBillTotalForIndividual", TotalMedBillAmountForIndividualId);
                        cmdUpdateIndividualTotalMedBillAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                        if (connSalesforce.State == ConnectionState.Open)
                        {
                            connSalesforce.Close();
                            connSalesforce.Open();
                        }
                        else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                        int nIndividualTotalMedBillUpdated = cmdUpdateIndividualTotalMedBillAmount.ExecuteNonQuery();

                        if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                        if (nIndividualTotalMedBillUpdated == 1) txtTotalMedBillAmount.Text = TotalMedBillAmountForIndividualId.ToString("C");

                        if (nIndividualTotalMedBillUpdated != 1)
                        {
                            MessageBox.Show("The individual Medical Bill Amount Total has not been updated.", "Error");
                            return;
                        }
                    }
                    else if (nRowInserted == 0)
                    {
                        MessageBox.Show("The Medical Bill has not been saved.", "Error");
                        return;
                    }

                    bIsModified = false;

                }
                else if (ResultMedBillNo.ToString() == strMedBillNo)
                {
                    String strIndividualId = String.Empty;
                    String strCaseId = String.Empty;
                    String strBillStatus = String.Empty;
                    String strIllnessId = String.Empty;
                    String strIncidentId = String.Empty;

                    String MedBillNo = txtMedBillNo.Text.Trim();
                    String IndividualId = txtIndividualIDMedBill.Text.Trim();
                    strIndividualId = IndividualId;

                    if (txtMedBill_Illness.Text.Trim() != String.Empty)
                    {
                        String IllnessNo = txtMedBill_Illness.Text.Trim();

                        String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

                        SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN5);
                        cmdQueryForIllnessId.CommandType = CommandType.Text;

                        cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", IllnessNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (objIllnessId != null) strIllnessId = objIllnessId.ToString();
                        else
                        {
                            MessageBox.Show("No Illness Id for given Illness No", "Error");
                            return;
                        }
                    }

                    if (txtMedBill_Incident.Text.Trim() != String.Empty)
                    {
                        String IncidentNo = txtMedBill_Incident.Text.Trim();

                        String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

                        SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN5);
                        cmdQueryForIncidentId.CommandType = CommandType.Text;

                        cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (objIncidentId != null) strIncidentId = objIncidentId.ToString();
                        else
                        {
                            MessageBox.Show("No Incident Id for given Incident No", "Error");
                            return;
                        }
                    }

                    // Get medical provider id
                    String strSqlQueryForMedicalProviderId = "select [dbo].[account].[Id] from [dbo].[account] where [dbo].[account].[Name] = @MedicalProviderName";

                    SqlCommand cmdQueryForMedicalProviderId = new SqlCommand(strSqlQueryForMedicalProviderId, connSalesforce2);
                    cmdQueryForMedicalProviderId.CommandType = CommandType.Text;

                    cmdQueryForMedicalProviderId.Parameters.AddWithValue("@MedicalProviderName", txtMedicalProvider.Text.Trim());

                    if (connSalesforce2.State != ConnectionState.Closed)
                    {
                        connSalesforce2.Close();
                        connSalesforce2.Open();
                    }
                    else if (connSalesforce2.State == ConnectionState.Closed) connSalesforce2.Open();
                    Object objMedicalProviderId = cmdQueryForMedicalProviderId.ExecuteScalar();
                    if (connSalesforce2.State != ConnectionState.Closed) connSalesforce2.Close();

                    String MedicalProviderId = String.Empty;
                    if (objMedicalProviderId != null) MedicalProviderId = objMedicalProviderId.ToString();
                    else
                    {
                        MessageBox.Show("No Medical Provider Id for Medical Provider name: " + txtMedicalProvider.Text.Trim(), "Error", MessageBoxButtons.OK);
                        return;
                    }

                    int nPatientType = 0;   // default outpatient

                    if (rbOutpatient.Checked) nPatientType = 0;
                    else if (rbInpatient.Checked) nPatientType = 1;

                    String strNote = String.Empty;

                    if (comboMedBillType.SelectedItem.ToString() == "Medical Bill")
                    {
                        strNote = txtMedBillNote.Text.Trim();
                    }
                    else if (comboMedBillType.SelectedItem.ToString() == "Prescription")
                    {
                        strNote = txtPrescriptionNote.Text.Trim();
                    }
                    else if (comboMedBillType.SelectedItem.ToString() == "Physical Therapy")
                    {
                        strNote = txtPhysicalTherapyRxNote.Text.Trim();
                    }

                    // Update the Medical Bill
                    String strSqlUpdateMedBill = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[LastModifiedDate] = @NewLastModifiedDate, " +
                                                 "[dbo].[tbl_medbill].[LastModifiedById] = @NewLastModifiedById, " +
                                                 "[dbo].[tbl_medbill].[Case_Id] = @NewCaseId, [dbo].[tbl_medbill].[Incident_Id] = @NewIncidentId, " +
                                                 "[dbo].[tbl_medbill].[Illness_Id] = @NewIllnessId, " +
                                                 "[dbo].[tbl_medbill].[BillAmount] = @NewBillAmount, [dbo].[tbl_medbill].[MedBillType_Id] = @NewMedBillType_Id, " +
                                                 "[dbo].[tbl_medbill].[BillStatus] = @NewMedBillStatus, " +
                                                 "[dbo].[tbl_medbill].[BillClosed] = @NewMedBillClosed, " +
                                                 "[dbo].[tbl_medbill].[SettlementTotal] = @NewSettlementTotal, [dbo].[tbl_medbill].[Balance] = @NewBalance, " +
                                                 "[dbo].[tbl_medbill].[BillDate] = @NewBillDate, [dbo].[tbl_medbill].[DueDate] = @NewDueDate, [dbo].[tbl_medbill].[TotalSharedAmount] = @NewTotalSharedAmount, " +
                                                 "[dbo].[tbl_medbill].[Guarantor] = @NewGuarantor, " +
                                                 "[dbo].[tbl_medbill].[MedicalProvider_Id] = @NewMedicalProviderId, " +
                                                 "[dbo].[tbl_medbill].[Account_At_Provider] = @NewAccountAtProvider, " +
                                                 "[dbo].[tbl_medbill].[ProviderPhoneNumber] = @NewProviderPhoneNo, " +
                                                 "[dbo].[tbl_medbill].[ProviderContactPerson] = @NewProviderContactPerson, " +
                                                 "[dbo].[tbl_medbill].[ProposalLetterSentDate] = @NewProposalLetterSentDate, " +
                                                 "[dbo].[tbl_medbill].[HIPPASentDate] = @NewHIPPASentDate, " +
                                                 "[dbo].[tbl_medbill].[MedicalRecordDate] = @NewMedicalRecordDate, " +
                                                 "[dbo].[tbl_medbill].[PrescriptionDrugName] = @NewPrescriptionDrugName, [dbo].[tbl_medbill].[PrescriptionNo] = @NewPrescriptionNo, " +
                                                 "[dbo].[tbl_medbill].[PrescriptionDescription] = @NewPrescriptionDescription, " +
                                                 "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy] = @NewTotalNumberOfPhysicalTherapy, " +
                                                 "[dbo].[tbl_medbill].[PatientTypeId] = @NewPatientTypeId, " +
                                                 "[dbo].[tbl_medbill].[Note] = @Note, " +
                                                 "[dbo].[tbl_medbill].[WellBeingCareTotal] = @NewWellBeingCareTotal, [dbo].[tbl_medbill].[WellBeingCare] = @NewWellBeingCare, " +
                                                 "[dbo].[tbl_medbill].[IneligibleReason] = @NewIneligibleReason, [dbo].[tbl_medbill].[PendingReason] = @NewPendingReason " +
                                                 "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and [dbo].[tbl_medbill].[Contact_Id] = @IndividualId";

                    SqlCommand cmdUpdateMedBill = new SqlCommand(strSqlUpdateMedBill, connRN5);
                    cmdUpdateMedBill.CommandType = CommandType.Text;

                    cmdUpdateMedBill.Parameters.AddWithValue("@NewLastModifiedDate", DateTime.Today.ToString("MM/dd/yyyy"));
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewLastModifiedById", nLoggedUserId);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewCaseId", txtMedBill_CaseNo.Text.Trim());
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewIncidentId", strIncidentId);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewIllnessId", strIllnessId);
                    Decimal BillAmount = 0;
                    Decimal BillAmountResult = 0;

                    if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out BillAmountResult))
                    {
                        BillAmount = BillAmountResult;
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewBillAmount", BillAmount);
                    }
                    else
                    {
                        MessageBox.Show("Bill Amount is invalid.", "Error");
                        return;
                    }
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewMedBillType_Id", comboMedBillType.SelectedIndex + 1);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewMedBillStatus", comboMedBillStatus.SelectedIndex);
                    if (cbMedBillClosed.SelectedIndex == 0) cmdUpdateMedBill.Parameters.AddWithValue("@NewMedBillClosed", 0);
                    else if (cbMedBillClosed.SelectedIndex == 1) cmdUpdateMedBill.Parameters.AddWithValue("@NewMedBillClosed", 1);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewSettlementTotal", 0);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewBalance", 0);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewBillDate", dtpBillDate.Value);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewDueDate", dtpDueDate.Value);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalSharedAmount", 0);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewGuarantor", txtMedBillGuarantor.Text.Trim());
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewMedicalProviderId", MedicalProviderId);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewAccountAtProvider", txtMedBillAccountNoAtProvider.Text.Trim());
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewProviderPhoneNo", txtMedProviderPhoneNo.Text.Trim());
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewProviderContactPerson", txtProviderContactPerson.Text.Trim());
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewProposalLetterSentDate", dtpProposalLetterSentDate.Value);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewHIPPASentDate", dtpHippaSentDate.Value);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewMedicalRecordDate", dtpMedicalRecordDate.Value);

                    if (comboMedBillType.SelectedIndex == 0)        // Medical Bill Type - Medical Bill
                    {
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", DBNull.Value);

                        cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", DBNull.Value);

                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", nPatientType);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", comboPendingReason.SelectedIndex);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", comboIneligibleReason.SelectedIndex);

                        cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);

                    }
                    if (comboMedBillType.SelectedIndex == 1)        // Medical Bill Type - Prescription
                    {
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", DBNull.Value);

                        cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", DBNull.Value);

                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", txtPrescriptionName.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", txtNumberOfMedication.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", txtPrescriptionDescription.Text.Trim());

                        cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);
                    }
                    if (comboMedBillType.SelectedIndex == 2)        // Medical Bill Type - Physical Therapy
                    {
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", DBNull.Value);

                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", DBNull.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", DBNull.Value);

                        int nNumberOfPhysicalTherapy = 0;
                        short NumPhysicalTherapyResult = 0;
                        if (Int16.TryParse(txtNumPhysicalTherapy.Text.Trim(), out NumPhysicalTherapyResult))
                        {
                            nNumberOfPhysicalTherapy = NumPhysicalTherapyResult;
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", nNumberOfPhysicalTherapy);
                        }
                        else
                        {
                            MessageBox.Show("Please enter a positive integer in Number of Physical Therapy Text Box.", "Error");
                            return;
                        }

                        cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);
                    }


                    cmdUpdateMedBill.Parameters.AddWithValue("@NewWellBeingCareTotal", 0);
                    cmdUpdateMedBill.Parameters.AddWithValue("@NewWellBeingCare", 0);
                    cmdUpdateMedBill.Parameters.AddWithValue("@MedBillNo", MedBillNo);
                    cmdUpdateMedBill.Parameters.AddWithValue("@IndividualId", IndividualId);

                    if (connRN5.State != ConnectionState.Closed)
                    {
                        connRN5.Close();
                        connRN5.Open();
                    }
                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    int nAffectedRow = cmdUpdateMedBill.ExecuteNonQuery();
                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                    if (nAffectedRow == 1)
                    {
                        // handle Well Being Care case
                        String strNewMedBillNo = String.Empty;

                        if (txtMedBillNo.Text.Trim() != String.Empty) strNewMedBillNo = txtMedBillNo.Text.Trim();

                        Boolean bWellBeingCare = true;
                        Boolean bWellBeingCareEligible = true;

                        String strSqlQueryForICD10CodeForWellBeingCare = "select [dbo].[tbl_medbill].[BillNo], [dbo].[tbl_illness].[ICD_10_Id] from [dbo].[tbl_medbill] " +
                                                                         "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                                         "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                                                                         "[dbo].[tbl_medbill].[Individual_Id] = @IndividualId";

                        SqlCommand cmdQueryForICD10CodeForWellBeingCare = new SqlCommand(strSqlQueryForICD10CodeForWellBeingCare, connRN5);
                        cmdQueryForICD10CodeForWellBeingCare.CommandType = CommandType.Text;

                        cmdQueryForICD10CodeForWellBeingCare.Parameters.AddWithValue("@MedBillNo", strNewMedBillNo);
                        cmdQueryForICD10CodeForWellBeingCare.Parameters.AddWithValue("@IndividualId", strIndividualId);

                        String ICD10Code = String.Empty;

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                        SqlDataReader rdrICD10CodeForWellBeingCare = cmdQueryForICD10CodeForWellBeingCare.ExecuteReader();
                        if (rdrICD10CodeForWellBeingCare.HasRows)
                        {
                            rdrICD10CodeForWellBeingCare.Read();
                            if (!rdrICD10CodeForWellBeingCare.IsDBNull(1)) ICD10Code = rdrICD10CodeForWellBeingCare.GetString(1);
                        }
                        rdrICD10CodeForWellBeingCare.Close();
                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                        if (ICD10Code != "Z00.00" && ICD10Code != "Z00.012") bWellBeingCare = false;

                        if (ICD10Code == "Z00.00" || ICD10Code == "Z00.012")
                        {

                            String strSqlQueryForProgramForIndividual = "select [dbo].[contact].[Individual_ID__c], [dbo].[program].[Name] from [dbo].[contact] " +
                                                                        "inner join [dbo].[program] on [dbo].[contact].[c4g_Plan__c] = [dbo].[program].[ID] " +
                                                                        "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                            SqlCommand cmdQueryForProgramForIndividual = new SqlCommand(strSqlQueryForProgramForIndividual, connSalesforce);
                            cmdQueryForProgramForIndividual.CommandType = CommandType.Text;

                            cmdQueryForProgramForIndividual.Parameters.AddWithValue("@IndividualId", strIndividualId);

                            if (connSalesforce.State != ConnectionState.Closed)
                            {
                                connSalesforce.Close();
                                connSalesforce.Open();
                            }
                            else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                            String ProgramName = String.Empty;

                            SqlDataReader rdrProgramForIndividual = cmdQueryForProgramForIndividual.ExecuteReader();
                            if (rdrProgramForIndividual.HasRows)
                            {
                                rdrProgramForIndividual.Read();
                                if (!rdrProgramForIndividual.IsDBNull(1)) ProgramName = rdrProgramForIndividual.GetString(1);
                            }
                            rdrProgramForIndividual.Close();
                            if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                            if (ProgramName == "Gold Plus" || ProgramName == "Gold Medi-I" || ProgramName == "Gold Medi-II")
                            {
                                String strSqlQueryForIndividualStartDate = "select [dbo].[contact].[Membership_IND_Start_date__c] from [dbo].[contact] " +
                                                                           "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                                SqlCommand cmdQueryForIndividualStartDate = new SqlCommand(strSqlQueryForIndividualStartDate, connSalesforce);
                                cmdQueryForIndividualStartDate.CommandType = CommandType.Text;

                                cmdQueryForIndividualStartDate.Parameters.AddWithValue("@IndividualId", strIndividualId);

                                if (connSalesforce.State != ConnectionState.Closed)
                                {
                                    connSalesforce.Close();
                                    connSalesforce.Open();
                                }
                                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                                Object objMembershipIndStartDate = cmdQueryForIndividualStartDate.ExecuteScalar();

                                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                                DateTime MembershipIndStartDate = new DateTime();
                                if (objMembershipIndStartDate != null)
                                {
                                    MembershipIndStartDate = DateTime.Parse(objMembershipIndStartDate.ToString());
                                }

                                if (dtpBillDate.Value > MembershipIndStartDate.AddMonths(6))
                                {
                                    //String strSqlQueryForAnivDateForIndividualId = "select [dbo].[contact].[Aniv_Date], [dbo].[contact].[Membership_IND_Start_date__c] from [dbo].[contact] " +
                                    //                                               "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                                    //SqlCommand cmdQueryForAnivDateForIndividualId = new SqlCommand(strSqlQueryForAnivDateForIndividualId, connSalesforce);
                                    //cmdQueryForAnivDateForIndividualId.CommandType = CommandType.Text;

                                    //cmdQueryForAnivDateForIndividualId.Parameters.AddWithValue("@IndividualId", strIndividualId);

                                    //if (connSalesforce.State != ConnectionState.Closed)
                                    //{
                                    //    connSalesforce.Close();
                                    //    connSalesforce.Open();
                                    //}
                                    //else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                                    //DateTime? AnivDate = null;
                                    //DateTime? StartDate = null;

                                    //SqlDataReader rdrAnivDate = cmdQueryForAnivDateForIndividualId.ExecuteReader();
                                    //if (rdrAnivDate.HasRows)
                                    //{
                                    //    rdrAnivDate.Read();
                                    //    if (!rdrAnivDate.IsDBNull(0)) AnivDate = rdrAnivDate.GetDateTime(0);
                                    //    if (!rdrAnivDate.IsDBNull(1)) StartDate = rdrAnivDate.GetDateTime(1);
                                    //}
                                    //rdrAnivDate.Close();
                                    //if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                                    DateTime IndividualAnivDate = DateTime.Parse(txtAnivDate.Text);
                                    //if (AnivDate != null) IndividualAnivDate = AnivDate.Value;
                                    //else IndividualAnivDate = StartDate.Value;

                                    int nAnivYear = dtpBillDate.Value.Year;

                                    DateTime IndividualThisAnivDate = new DateTime(nAnivYear, IndividualAnivDate.Month, 1);
                                    DateTime IndividualLastAnivDate = new DateTime(nAnivYear - 1, IndividualAnivDate.Month, 1);

                                    String strSqlQueryForWellBeingIncidentsPerAnivYear = "select count([dbo].[tbl_incident].[IncidentNo]) from [dbo].[tbl_incident] " +
                                                                                         "inner join [dbo].[tbl_illness] on [dbo].[tbl_incident].[Illness_id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                                                         "inner join [dbo].[tbl_medbill] on [dbo].[tbl_incident].[Incident_id] = [dbo].[tbl_medbill].[Incident_Id] " +
                                                                                         "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                                                         "([dbo].[tbl_illness].[ICD_10_Id] = 'Z00.00' or [dbo].[tbl_illness].[ICD_10_Id] = 'Z00.012') and " +
                                                                                         "[dbo].[tbl_medbill].[BillDate] >= @LastAnivDate and " +
                                                                                         "[dbo].[tbl_medbill].[BillDate] < @ThisAnivDate";

                                    SqlCommand cmdQueryForWellBeingIncidentsPerAnivYear = new SqlCommand(strSqlQueryForWellBeingIncidentsPerAnivYear, connRN5);
                                    cmdQueryForWellBeingIncidentsPerAnivYear.CommandType = CommandType.Text;

                                    cmdQueryForWellBeingIncidentsPerAnivYear.Parameters.AddWithValue("@IndividualId", strIndividualId);
                                    cmdQueryForWellBeingIncidentsPerAnivYear.Parameters.AddWithValue("@LastAnivDate", IndividualLastAnivDate);
                                    cmdQueryForWellBeingIncidentsPerAnivYear.Parameters.AddWithValue("@ThisAnivDate", IndividualThisAnivDate);

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                    Object objIncidentCount = cmdQueryForWellBeingIncidentsPerAnivYear.ExecuteScalar();
                                    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                    int nIncidentCount = Int32.Parse(objIncidentCount.ToString());

                                    if (nIncidentCount == 1)
                                    {
                                        String strSqlQueryForWellBeingIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] " +
                                                                                   "inner join [dbo].[tbl_illness] on [dbo].[tbl_incident].[Illness_id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                                                   "inner join [dbo].[tbl_medbill] on [dbo].[tbl_incident].[Incident_id] = [dbo].[tbl_medbill].[Incident_Id] " +
                                                                                   "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                                                   "([dbo].[tbl_illness].[ICD_10_Id] = 'Z00.00' or [dbo].[tbl_illness].[ICD_10_Id] = 'Z00.012') and " +
                                                                                   "[dbo].[tbl_medbill].[BillDate] >= @LastAnivDate and " +
                                                                                   "[dbo].[tbl_medbill].[BillDate] < @ThisAnivDate";

                                        SqlCommand cmdQueryForWellBeingIncidentId = new SqlCommand(strSqlQueryForWellBeingIncidentId, connRN5);
                                        cmdQueryForWellBeingIncidentId.CommandType = CommandType.Text;

                                        cmdQueryForWellBeingIncidentId.Parameters.AddWithValue("@IndividualId", strIndividualId);
                                        cmdQueryForWellBeingIncidentId.Parameters.AddWithValue("@LastAnivDate", IndividualLastAnivDate);
                                        cmdQueryForWellBeingIncidentId.Parameters.AddWithValue("@ThisAnivDate", IndividualThisAnivDate);

                                        if (connRN5.State != ConnectionState.Closed)
                                        {
                                            connRN5.Close();
                                            connRN5.Open();
                                        }
                                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                        Object objWellBeingIncidentId = cmdQueryForWellBeingIncidentId.ExecuteScalar();
                                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                        if (objWellBeingIncidentId != null)
                                        {
                                            int nWellBeingIncidentId = Int32.Parse(objWellBeingIncidentId.ToString());

                                            String strSqlQueryForWellBeingTotalForIncident = "select sum([dbo].[tbl_medbill].[TotalSharedAmount]) from [dbo].[tbl_medbill] " +
                                                                                             "where [dbo].[tbl_medbill].[Incident_Id] = @IncidentId";

                                            SqlCommand cmdQueryForWellBeingTotalForIncident = new SqlCommand(strSqlQueryForWellBeingTotalForIncident, connRN5);
                                            cmdQueryForWellBeingTotalForIncident.CommandType = CommandType.Text;

                                            cmdQueryForWellBeingTotalForIncident.Parameters.AddWithValue("@IncidentId", nWellBeingIncidentId);

                                            if (connRN5.State != ConnectionState.Closed)
                                            {
                                                connRN5.Close();
                                                connRN5.Open();
                                            }
                                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                            Object objWellBeingTotalForIncident = cmdQueryForWellBeingTotalForIncident.ExecuteScalar();
                                            if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                            Decimal WellBeingTotalForIncident = Decimal.Parse(objWellBeingTotalForIncident.ToString());

                                            if (WellBeingTotalForIncident > 500)
                                            {
                                                // Set the well being care med bill ineligible strNewMedBillNo
                                                String strSqlUpdateMedBillWellBeingCareIneligible = "update [dbo].[tbl_medbill] set [dbo].[medbill].[BillStatus] = 3, " +
                                                                                                    "[dbo].[tbl_medbill].[WellBeingCare] = 0 " +
                                                                                                    "where [dbo].[tbl_medbill].[BillNo] = @WellBeingCareMedBill";

                                                SqlCommand cmdUpdateMedBillWellBeingCareIneligible = new SqlCommand(strSqlUpdateMedBillWellBeingCareIneligible, connRN5);
                                                cmdUpdateMedBillWellBeingCareIneligible.CommandType = CommandType.Text;

                                                cmdUpdateMedBillWellBeingCareIneligible.Parameters.AddWithValue("@WellBeingCareMedBill", strNewMedBillNo);

                                                if (connRN5.State != ConnectionState.Closed)
                                                {
                                                    connRN5.Close();
                                                    connRN5.Open();
                                                }
                                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                                int nWellBeingMedBillUpdated = cmdUpdateMedBillWellBeingCareIneligible.ExecuteNonQuery();

                                                if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                                if (nWellBeingMedBillUpdated == 0)
                                                {
                                                    MessageBox.Show("The well being med bill is not updated.", "Error");
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                // set the well being care med bill eligible
                                                String strSqlUpdateMedBillWellBeingCareEligible = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[BillStatus] = 2, " +
                                                                                                  "[dbo].[tbl_medbill].[WellBeingCare] = 1 " +
                                                                                                  "where [dbo].[tbl_medbill].[BillNo] = @WellBeingCareMedBill";

                                                SqlCommand cmdUpdateMedBillWellBeingCareEligible = new SqlCommand(strSqlUpdateMedBillWellBeingCareEligible, connRN5);
                                                cmdUpdateMedBillWellBeingCareEligible.CommandType = CommandType.Text;

                                                cmdUpdateMedBillWellBeingCareEligible.Parameters.AddWithValue("@WellBeingCareMedBill", strNewMedBillNo);

                                                if (connRN5.State != ConnectionState.Closed)
                                                {
                                                    connRN5.Close();
                                                    connRN5.Open();
                                                }
                                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                                int nWellBeingMedBillUpdated = cmdUpdateMedBillWellBeingCareEligible.ExecuteNonQuery();

                                                if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                                if (nWellBeingMedBillUpdated == 0)
                                                {
                                                    MessageBox.Show("The well being med bill is not updated.", "Error");
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                    else if (nIncidentCount > 1)
                                    {
                                        // Ineligible for Well Being Care
                                        String strSqlUpdateMedBillWellBeingCareIneligible = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[BillStatus] = 3, " +
                                                                                            "[dbo].[tbl_medbill].[WellBeingCare] = 0 " +
                                                                                            "where [dbo].[tbl_medbill].[BillNo] = @WellBeingCareMedBill";

                                        SqlCommand cmdUpdateMedBillWellBeingCareIneligible = new SqlCommand(strSqlUpdateMedBillWellBeingCareIneligible, connRN5);
                                        cmdUpdateMedBillWellBeingCareIneligible.CommandType = CommandType.Text;

                                        cmdUpdateMedBillWellBeingCareIneligible.Parameters.AddWithValue("@WellBeingCareMedBill", strNewMedBillNo);

                                        if (connRN5.State != ConnectionState.Closed)
                                        {
                                            connRN5.Close();
                                            connRN5.Open();
                                        }
                                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                        int nWellBeingMedBillUpdated = cmdUpdateMedBillWellBeingCareIneligible.ExecuteNonQuery();
                                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                                        if (nWellBeingMedBillUpdated == 0)
                                        {
                                            MessageBox.Show("The well being med bill is not updated.", "Error");
                                            return;
                                        }
                                    }
                                }
                            }
                        }

                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        if (gvSettlementsInMedBill.Rows.Count > 0)
                        {
                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value == null)
                                {
                                    MessageBox.Show("You have to select a Settlement Type.", "Alert");
                                    return;
                                }

                                Decimal result, SettlementAmount;
                                if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) SettlementAmount = result;
                                else
                                {
                                    MessageBox.Show("You have to enter decimal value in Settlement Amount field in Settlement " + gvSettlementsInMedBill[1, i]?.Value?.ToString(), "Alert");
                                    return;
                                }

                                result = 0;
                                Decimal PersonalResponsibilityAmount = 0;

                                if ((gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount") ||
                                    (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount") ||
                                    (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment"))
                                {
                                    if (gvSettlementsInMedBill["PersonalResponsibility", i]?.Value != null)
                                    {
                                        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) PersonalResponsibilityAmount = result;
                                        else
                                        {
                                            MessageBox.Show("Invalid Personal Responsibility.", "Error");
                                            return;
                                        }
                                    }
                                }

                                result = 0;
                                Decimal AllowedAmount = 0;
                                if (gvSettlementsInMedBill["AllowedAmount", i]?.Value?.ToString() != null)
                                {
                                    if (Decimal.TryParse(gvSettlementsInMedBill["AllowedAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) AllowedAmount = result;
                                    else
                                    {
                                        MessageBox.Show("You have to enter decimal value in Allowed Amount field in Settlement " + gvSettlementsInMedBill[1, i]?.Value?.ToString(), "Alert");
                                        return;
                                    }
                                }
                            }

                            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            Decimal MedBillAmount = Decimal.Parse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"));
                            Decimal SettlementAmountTotal = 0;

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                Decimal result = 0;
                                Decimal SettlementAmount = 0;
                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Provider Payment" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Discount" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Reimbursement" ||
                                    gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Ineligible")
                                {
                                    if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                                    {
                                        SettlementAmount = result;
                                        SettlementAmountTotal += SettlementAmount;
                                        if (SettlementAmountTotal > MedBillAmount)
                                        {
                                            MessageBox.Show("The total of settlement amount exceeds medical bill amount.");
                                            return;
                                        }
                                    }
                                }
                            }

                            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            Boolean bError = false;

                            String strSqlQueryForSettlementType = "select [dbo].[tbl_settlement_type_code].[SettlementTypeCode], [dbo].[tbl_settlement_type_code].[SettlementTypeValue] " +
                                        "from [dbo].[tbl_settlement_type_code]";

                            SqlCommand cmdQueryForSettlementType = new SqlCommand(strSqlQueryForSettlementType, connRN5);
                            cmdQueryForSettlementType.CommandType = CommandType.Text;

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            SqlDataReader rdrSettlementType = cmdQueryForSettlementType.ExecuteReader();
                            lstSettlementType.Clear();
                            if (rdrSettlementType.HasRows)
                            {
                                while (rdrSettlementType.Read())
                                {
                                    if (rdrSettlementType.GetInt16(0) > 0)
                                        lstSettlementType.Add(new SettlementTypeInfo { SettlementTypeCode = rdrSettlementType.GetInt16(0), SettlementTypeValue = rdrSettlementType.GetString(1) });
                                }
                            }
                            rdrSettlementType.Close();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                String SettlementName = gvSettlementsInMedBill["SettlementName", i].Value.ToString();

                                // Check whether or not the settlement is already in data base
                                String strSqlQueryForSettlementName = "select [dbo].[tbl_settlement].[Name] from [dbo].[tbl_settlement] where [dbo].[tbl_settlement].[Name] = @Settlement";

                                SqlCommand cmdQueryForSettlementName = new SqlCommand(strSqlQueryForSettlementName, connRN5);
                                cmdQueryForSettlementName.CommandType = CommandType.Text;

                                cmdQueryForSettlementName.Parameters.AddWithValue("@Settlement", SettlementName);

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                Object objResultSettlementName = cmdQueryForSettlementName.ExecuteScalar();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                if (objResultSettlementName == null)   // new settlement: save the settlement by using insert sql statement
                                {

                                    String strSqlCreateNewSettlement = "insert into [dbo].[tbl_settlement] (IsDeleted, Name, CreateDate, CreateByID, LastModifiedDate, LastModifiedByID, SystemModifiedStamp, " +
                                                                        "LastActivityDate, LastViewedDate, MedicalBillID, " +
                                                                        "SettlementType, Amount, PersonalResponsibilityCredit, CMMPaymentMethod, " +
                                                                        "CheckNo, CheckDate, CheckReconciled, ACH_Number, ACH_Date, ACH_Reconciled, CMMCreditCard, CMMCreditCardPaidDate, CC_Reconciled, " +
                                                                        "AllowedAmount, Notes, Approved, ApprovedDate, IneligibleReason) " +
                                                                        "values (0, @SettlementName, @CreateDate, @CreateByID, @LastModifiedDate, @LastModifiedByID, @SystemModifiedStamp, " +
                                                                        "@LastActivityDate, @LastViewedDate, @MedBillID, " +
                                                                        "@SettlementType, @SettlementAmount, @PersonalResponsibilityCredit, @CMMPaymentMethod, " +
                                                                        "@CheckNo, @CheckDate, @IsCheckReconciled, @ACH_Number, @ACH_Date, @IsACH_Reconciled, @CMMCreditCard, @CMMCreditCardPaidDate, @IsCC_Reconciled, " +
                                                                        "@AllowedAmount, @Notes, @IsApproved, @ApprovedDate, @IneligibleReason)";

                                    SqlCommand cmdInsertNewSettlement = new SqlCommand(strSqlCreateNewSettlement, connRN5);
                                    cmdInsertNewSettlement.CommandType = CommandType.Text;

                                    String NewSettlementName = gvSettlementsInMedBill["SettlementName", i].Value.ToString();
                                    String NewSettlementType = String.Empty;
                                    if (gvSettlementsInMedBill["SettlementTypeValue", i].Value != null) NewSettlementType = gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString();
                                    int nNewSettlementType = 0;
                                    for (int j = 0; j < lstSettlementType.Count; j++)
                                    {
                                        if (NewSettlementType == lstSettlementType[j].SettlementTypeValue) nNewSettlementType = lstSettlementType[j].SettlementTypeCode;
                                    }
                                    Decimal result = 0;
                                    Decimal SettlementAmount = 0;
                                    if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                                    {
                                        SettlementAmount = result;
                                        cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementAmount", SettlementAmount);
                                    }

                                    result = 0;
                                    Decimal PersonalResponsibilityAmount = 0;
                                    if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result)) PersonalResponsibilityAmount = result;
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@PersonalResponsibilityCredit", PersonalResponsibilityAmount);

                                    int NewIsApproved = 0;
                                    if (gvSettlementsInMedBill["Approved", i]?.Value != null)
                                    {
                                        if ((Boolean)gvSettlementsInMedBill["Approved", i]?.Value == true) NewIsApproved = 1;
                                    }
                                    DateTime? NewApprovedDate = null;
                                    if (gvSettlementsInMedBill["ApprovedDate", i]?.Value != null) NewApprovedDate = DateTime.Parse(gvSettlementsInMedBill["ApprovedDate", i].Value.ToString());

                                    String NewCMMPaymentMethod = String.Empty;
                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value != null) NewCMMPaymentMethod = gvSettlementsInMedBill["PaymentMethod", i].Value.ToString();
                                    int nNewCMMPaymentMethod = 0;
                                    for (int j = 0; j < lstPaymentMethod.Count; j++)
                                    {
                                        if (NewCMMPaymentMethod == lstPaymentMethod[j].PaymentMethodValue) nNewCMMPaymentMethod = lstPaymentMethod[j].PaymentMethodId;
                                    }

                                    String NewCheckNo = String.Empty;
                                    DateTime? NewCheckDate = null;
                                    int NewCheckReconciled = 0;
                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
                                    {
                                        if (gvSettlementsInMedBill["CheckNo", i].Value != null) NewCheckNo = gvSettlementsInMedBill["CheckNo", i].Value.ToString();
                                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null) NewCheckDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                        if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewCheckReconciled = 1;
                                    }

                                    String NewACH_Number = String.Empty;
                                    DateTime? NewACH_Date = null;
                                    int NewACH_Reconciled = 0;
                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
                                    {
                                        if (gvSettlementsInMedBill["ACHNo", i].Value != null) NewACH_Number = gvSettlementsInMedBill["ACHNo", i].Value.ToString();
                                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null) NewACH_Date = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                        if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewACH_Reconciled = 1;
                                    }

                                    int nCMMCreditCard = 0;
                                    DateTime? NewCreditCardPaidDate = null;
                                    int NewIsCCReconciled = 0;

                                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
                                    {
                                        String CreditCard = gvSettlementsInMedBill[13, i]?.Value?.ToString();
                                        for (int j = 0; j < lstCreditCardInfo.Count; j++)
                                        {
                                            if (CreditCard == lstCreditCardInfo[j].CreditCardNo)
                                            {
                                                nCMMCreditCard = lstCreditCardInfo[j].CreditCardId;
                                            }
                                        }
                                        if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            NewCreditCardPaidDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                        if (gvSettlementsInMedBill["Reconciled", i].Value != null) NewIsCCReconciled = 1;
                                    }

                                    Decimal NewAllowedAmount = 0;
                                    if (gvSettlementsInMedBill["AllowedAmount", i].Value != null) NewAllowedAmount = Decimal.Parse(gvSettlementsInMedBill["AllowedAmount", i].Value.ToString());
                                    String NewNote = String.Empty;
                                    if (gvSettlementsInMedBill["Note", i].Value != null) NewNote = gvSettlementsInMedBill["Note", i].Value.ToString();


                                    cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementName", NewSettlementName);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CreateDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CreateByID", nLoggedUserId);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastModifiedByID", nLoggedUserId);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@SystemModifiedStamp", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@LastViewedDate", DateTime.Today);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@MedBillID", txtMedBillNo.Text.Trim());
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@SettlementType", nNewSettlementType);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsApproved", NewIsApproved);

                                    if (NewApprovedDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ApprovedDate", NewApprovedDate);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@ApprovedDate", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CMMPaymentMethod", nNewCMMPaymentMethod);

                                    if (NewCheckNo != String.Empty) cmdInsertNewSettlement.Parameters.AddWithValue("@CheckNo", NewCheckNo);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@CheckNo", DBNull.Value);

                                    if (NewCheckDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@CheckDate", NewCheckDate);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@CheckDate", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsCheckReconciled", NewCheckReconciled);

                                    if (NewACH_Number != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Number", NewACH_Number);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Number", DBNull.Value);

                                    if (NewACH_Date != null) cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Date", NewACH_Date);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@ACH_Date", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsACH_Reconciled", NewACH_Reconciled);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCard", nCMMCreditCard);

                                    if (NewCreditCardPaidDate != null) cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", NewCreditCardPaidDate);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", DBNull.Value);

                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IsCC_Reconciled", NewIsCCReconciled);
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@AllowedAmount", NewAllowedAmount);

                                    if (NewNote != null) cmdInsertNewSettlement.Parameters.AddWithValue("@Notes", NewNote);
                                    else cmdInsertNewSettlement.Parameters.AddWithValue("@Notes", DBNull.Value);

                                    int nIneligibleReason = 0;
                                    for (int j = 0; j < dicIneligibleReason.Count; j++)
                                    {
                                        if (gvSettlementsInMedBill["IneligibleReason", i]?.Value?.ToString() == dicIneligibleReason[j]) nIneligibleReason = j;
                                    }
                                    cmdInsertNewSettlement.Parameters.AddWithValue("@IneligibleReason", nIneligibleReason);

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                    int nSettlementInserted = cmdInsertNewSettlement.ExecuteNonQuery();
                                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                    if (nSettlementInserted == 0) bError = true;

                                }
                                else  // the settlement with the name exist, update the settlement
                                {
                                    String UpdateSettlementName = objResultSettlementName.ToString();
                                    String UpdateMedBill = txtMedBillNo.Text.Trim();

                                    String strSqlUpdateSettlement = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[LastModifiedDate] = @LastModifiedDate, " +
                                                                    "[dbo].[tbl_settlement].[LastModifiedByID] = @LastModifiedByID, " +
                                                                    "[dbo].[tbl_settlement].[LastActivityDate] = @LastActivityDate, " +
                                                                    "[dbo].[tbl_settlement].[SettlementType] = @SettlementType, " +
                                                                    "[dbo].[tbl_settlement].[Amount] = @SettlementAmount, " +
                                                                    "[dbo].[tbl_settlement].[PersonalResponsibilityCredit] = @PersonalResponsibilityCredit, " +
                                                                    "[dbo].[tbl_settlement].[Approved] = @IsApproved, " +
                                                                    "[dbo].[tbl_settlement].[ApprovedDate] = @ApprovedDate, " +
                                                                    "[dbo].[tbl_settlement].[CMMPaymentMethod] = @CMMPaymentMethod, " +
                                                                    "[dbo].[tbl_settlement].[CheckNo] = @CheckNo, " +
                                                                    "[dbo].[tbl_settlement].[CheckDate] = @CheckDate, " +
                                                                    "[dbo].[tbl_settlement].[CheckReconciled] = @CheckReconciled, " +
                                                                    "[dbo].[tbl_settlement].[ACH_Number] = @ACH_Number, " +
                                                                    "[dbo].[tbl_settlement].[ACH_Date] = @ACH_Date, " +
                                                                    "[dbo].[tbl_settlement].[ACH_Reconciled] = @ACH_Reconciled, " +
                                                                    "[dbo].[tbl_settlement].[CMMCreditCard] = @CMMCreditCard, " +
                                                                    "[dbo].[tbl_settlement].[CMMCreditCardPaidDate] = @CMMCreditCardPaidDate, " +
                                                                    "[dbo].[tbl_settlement].[CC_Reconciled] = @CC_Reconciled, " +
                                                                    "[dbo].[tbl_settlement].[AllowedAmount] = @AllowedAmount, " +
                                                                    "[dbo].[tbl_settlement].[Notes] = @Note, " +
                                                                    "[dbo].[tbl_settlement].[IneligibleReason] = @IneligibleReason " +
                                                                    "where [dbo].[tbl_settlement].[Name] = @SettlementName and [dbo].[tbl_settlement].[MedicalBillID] = @MedBillName";

                                    int nSettlementType = 0;
                                    String strSettlementType = String.Empty;
                                    if (gvSettlementsInMedBill["SettlementTypeValue", i].Value != null) strSettlementType = gvSettlementsInMedBill["SettlementTypeValue", i].Value.ToString();
                                    for (int j = 0; j < lstSettlementType.Count; j++)
                                    {
                                        if (strSettlementType == lstSettlementType[j].SettlementTypeValue) nSettlementType = lstSettlementType[j].SettlementTypeCode;
                                    }

                                    Decimal SettlementAmount = 0;
                                    if (gvSettlementsInMedBill["SettlementAmount", i].Value != null)
                                    {
                                        SettlementAmount = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency);
                                    }

                                    Decimal PersonalResponsibilityAmt = 0;
                                    if (gvSettlementsInMedBill["PersonalResponsibility", i].Value != null)
                                    {
                                        PersonalResponsibilityAmt = Decimal.Parse(gvSettlementsInMedBill["PersonalResponsibility", i].Value.ToString(), NumberStyles.Currency);
                                    }

                                    // Payment method
                                    int nPaymentMethod = 0;
                                    String PaymentMethod = String.Empty;
                                    if (gvSettlementsInMedBill["PaymentMethod", i].Value != null)
                                        PaymentMethod = gvSettlementsInMedBill["PaymentMethod", i].Value.ToString();
                                    for (int j = 0; j < lstPaymentMethod.Count; j++)
                                    {
                                        if (PaymentMethod == lstPaymentMethod[j].PaymentMethodValue) nPaymentMethod = lstPaymentMethod[j].PaymentMethodId;
                                    }

                                    // Approved or not
                                    int nApproved = 0;
                                    if (gvSettlementsInMedBill["Approved", i].Value != null)
                                    {
                                        if ((Boolean)gvSettlementsInMedBill["Approved", i].Value) nApproved = 1;
                                    }

                                    DateTime? ApprovedDate = null;
                                    if (gvSettlementsInMedBill["ApprovedDate", i].Value != null) ApprovedDate = DateTime.Parse(gvSettlementsInMedBill["ApprovedDate", i].Value.ToString());


                                    String CheckNo = String.Empty;
                                    DateTime? CheckIssueDate = null;
                                    int nCheckReconciled = 0;

                                    String ACH_No = String.Empty;
                                    DateTime? ACH_Date = null;
                                    int nACHReconciled = 0;

                                    String CreditCard = String.Empty;
                                    int nCreditCard = 0;
                                    DateTime? CreditCardPaidDate = null;
                                    int nCCReconciled = 0;

                                    switch (PaymentMethod)
                                    {
                                        case "Check":
                                            if (gvSettlementsInMedBill["CheckNo", i].Value != null) CheckNo = gvSettlementsInMedBill["CheckNo", i].Value.ToString();
                                            if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            {
                                                if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty) CheckIssueDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                            }
                                            Boolean bCheckReconciledResult = false;
                                            if (gvSettlementsInMedBill["Reconciled", i].Value != null)
                                            {
                                                if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bCheckReconciledResult))
                                                {
                                                    if (bCheckReconciledResult) nCheckReconciled = 1;
                                                }
                                            }
                                            break;
                                        case "ACH/Banking":
                                            if (gvSettlementsInMedBill["ACHNo", i].Value != null) ACH_No = gvSettlementsInMedBill["ACHNo", i].Value.ToString();
                                            if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            {
                                                if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty) ACH_Date = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                            }
                                            Boolean bACHReconciledResult = false;
                                            if (gvSettlementsInMedBill["Reconciled", i].Value != null)
                                            {
                                                if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bACHReconciledResult))
                                                {
                                                    if (bACHReconciledResult) nACHReconciled = 1;
                                                }
                                            }
                                            break;
                                        case "Credit Card":
                                            if (gvSettlementsInMedBill["CreditCard", i].Value != null) CreditCard = gvSettlementsInMedBill["CreditCard", i].Value.ToString();
                                            for (int j = 0; j < lstCreditCardInfo.Count; j++)
                                            {
                                                if (CreditCard == lstCreditCardInfo[j].CreditCardNo) nCreditCard = lstCreditCardInfo[j].CreditCardId;
                                            }
                                            if (gvSettlementsInMedBill["PaymentDate", i].Value != null)
                                            {
                                                if (gvSettlementsInMedBill["PaymentDate", i].Value.ToString() != String.Empty)
                                                    CreditCardPaidDate = DateTime.Parse(gvSettlementsInMedBill["PaymentDate", i].Value.ToString());
                                            }
                                            Boolean bCCReconciledResult = false;
                                            if (gvSettlementsInMedBill[15, i].Value != null)
                                            {
                                                if (Boolean.TryParse(gvSettlementsInMedBill["Reconciled", i].Value.ToString(), out bCCReconciledResult))
                                                {
                                                    if (bCCReconciledResult) nCCReconciled = 1;
                                                }
                                            }
                                            break;
                                    }

                                    // Allowed Amount
                                    Decimal AllowedAmount = 0;
                                    if (gvSettlementsInMedBill["AllowedAmount", i].Value != null)
                                    {
                                        AllowedAmount = Decimal.Parse(gvSettlementsInMedBill["AllowedAmount", i].Value.ToString(), NumberStyles.Currency);
                                    }

                                    // Note
                                    String Note = String.Empty;
                                    if (gvSettlementsInMedBill["Note", i].Value != null) Note = gvSettlementsInMedBill["Note", i].Value.ToString();



                                    SqlCommand cmdUpdateSettlement = new SqlCommand(strSqlUpdateSettlement, connRN5);
                                    cmdUpdateSettlement.CommandType = CommandType.Text;

                                    cmdUpdateSettlement.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@LastModifiedByID", nLoggedUserId);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@SettlementType", nSettlementType);


                                    cmdUpdateSettlement.Parameters.AddWithValue("@SettlementAmount", SettlementAmount);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@PersonalResponsibilityCredit", PersonalResponsibilityAmt);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@IsApproved", nApproved);
                                    if (ApprovedDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@ApprovedDate", ApprovedDate);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@ApprovedDate", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@CMMPaymentMethod", nPaymentMethod);

                                    if (CheckNo != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@CheckNo", CheckNo);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@CheckNo", DBNull.Value);

                                    if (CheckIssueDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@CheckDate", CheckIssueDate);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@CheckDate", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@CheckReconciled", nCheckReconciled);

                                    if (ACH_No != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Number", ACH_No);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Number", DBNull.Value);

                                    if (ACH_Date != null) cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Date", ACH_Date);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Date", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@ACH_Reconciled", nACHReconciled);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCard", nCreditCard);

                                    if (CreditCardPaidDate != null) cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", CreditCardPaidDate);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@CMMCreditCardPaidDate", DBNull.Value);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@CC_Reconciled", nCCReconciled);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@AllowedAmount", AllowedAmount);
                                    if (Note != String.Empty) cmdUpdateSettlement.Parameters.AddWithValue("@Note", Note);
                                    else cmdUpdateSettlement.Parameters.AddWithValue("@Note", DBNull.Value);

                                    cmdUpdateSettlement.Parameters.AddWithValue("@SettlementName", UpdateSettlementName);
                                    cmdUpdateSettlement.Parameters.AddWithValue("@MedBillName", UpdateMedBill);

                                    int nIneligibleReason = 0;
                                    for (int j = 0; j < dicIneligibleReason.Count; j++)
                                    {
                                        if (gvSettlementsInMedBill["IneligibleReason", i]?.Value?.ToString() == dicIneligibleReason[j]) nIneligibleReason = j;
                                    }
                                    cmdUpdateSettlement.Parameters.AddWithValue("@IneligibleReason", nIneligibleReason);

                                    if (connRN5.State != ConnectionState.Closed)
                                    {
                                        connRN5.Close();
                                        connRN5.Open();
                                    }
                                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                                    int nRowUpdated = cmdUpdateSettlement.ExecuteNonQuery();
                                    if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                    if (nRowUpdated == 0) bError = true;
                                }
                            }

                            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                            {
                                if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "Ineligible")
                                {
                                    gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                                    gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                                }
                            }

                            if (bError == false)
                            {
                                MessageBox.Show("Settlements have been saved.", "Info");
                            }
                            else if (bError == true)
                            {
                                MessageBox.Show("Some of settlments have not been saved.", "Error");
                                //return;
                            }
                        }

                        MessageBox.Show("The Medical Bill has been updated.", "Information");

                        if (cbMedBillClosed.SelectedIndex == 1)
                        {
                            String CaseNo = txtMedBill_CaseNo.Text.Trim();

                            String strSqlQueryForMedBillsInCase = "select [dbo].[tbl_medbill].[BillClosed], [dbo].[tbl_medbill].[BillNo] from [dbo].[tbl_medbill] " +
                                                                  "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                                  "[dbo].[tbl_medbill].[Case_Id] = @CaseId";

                            SqlCommand cmdQueryForMedBillsInCase = new SqlCommand(strSqlQueryForMedBillsInCase, connRN5);
                            cmdQueryForMedBillsInCase.CommandType = CommandType.Text;

                            cmdQueryForMedBillsInCase.Parameters.AddWithValue("@IndividualId", IndividualId);
                            cmdQueryForMedBillsInCase.Parameters.AddWithValue("@CaseId", CaseNo);

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                            SqlDataReader rdrMedBillsInCase = cmdQueryForMedBillsInCase.ExecuteReader();

                            Boolean bBillClosed = true;
                            if (rdrMedBillsInCase.HasRows)
                            {
                                while (rdrMedBillsInCase.Read())
                                {
                                    if (!rdrMedBillsInCase.IsDBNull(0))
                                    {
                                        if (rdrMedBillsInCase.GetBoolean(0) == false) bBillClosed = false;
                                    }
                                    else bBillClosed = false;
                                }
                            }
                            rdrMedBillsInCase.Close();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (bBillClosed == true)
                            {
                                String strSetCaseToClosed = "update [dbo].[tbl_case] set [dbo].[tbl_case].[Case_status] = 2 " +
                                                            "where [dbo].[tbl_case].[Case_Name] = @CaseNo and " +
                                                            "[dbo].[tbl_case].[individual_id] = @IndividualId";

                                SqlCommand cmdSetCaseToClosed = new SqlCommand(strSetCaseToClosed, connRN5);
                                cmdSetCaseToClosed.CommandType = CommandType.Text;

                                cmdSetCaseToClosed.Parameters.AddWithValue("@CaseNo", CaseNo);
                                cmdSetCaseToClosed.Parameters.AddWithValue("@IndividualId", IndividualId);

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                int nCaseClosed = cmdSetCaseToClosed.ExecuteNonQuery();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                if (nCaseClosed == 1)
                                {
                                    MessageBox.Show("The case has been closed.", "Information");
                                    cbCaseStatus.SelectedIndex = 2;
                                    cbCaseStatus.Enabled = true;
                                }
                            }
                        }
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        String strSqlQueryForTotalSharedAmountInMedBill = "select sum([dbo].[tbl_settlement].[Amount]) from [dbo].[tbl_settlement] " +
                                                  "inner join [dbo].[tbl_settlement_type_code] on " +
                                                  "[dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                  "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and " +
                                                  "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                  "([dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'CMM Provider Payment' or " +
                                                  "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'Member Reimbursement' or " +
                                                  "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'PR Reimbursement')";

                        SqlCommand cmdQueryForTotalSharedAmountInMedBill = new SqlCommand(strSqlQueryForTotalSharedAmountInMedBill, connRN5);
                        cmdQueryForTotalSharedAmountInMedBill.CommandType = CommandType.Text;

                        cmdQueryForTotalSharedAmountInMedBill.Parameters.AddWithValue("@MedBillNo", strMedBillNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objTotalSharedAmountInMedBill = cmdQueryForTotalSharedAmountInMedBill.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        Decimal TotalSharedAmountInMedBill = 0;
                        if (objTotalSharedAmountInMedBill.ToString() != String.Empty) TotalSharedAmountInMedBill = Decimal.Parse(objTotalSharedAmountInMedBill.ToString());

                        String strSqlQueryForMedicalProviderRefund = "select sum([dbo].[tbl_settlement].[Amount]) from [dbo].[tbl_settlement] " +
                                                                     "inner join [dbo].[tbl_settlement_type_code] on " +
                                                                     "[dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                                     "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and " +
                                                                     "[dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                                                                     "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'Medical Provider Refund'";

                        SqlCommand cmdQueryForMedicalProviderRefund = new SqlCommand(strSqlQueryForMedicalProviderRefund, connRN5);
                        cmdQueryForMedicalProviderRefund.CommandType = CommandType.Text;

                        cmdQueryForMedicalProviderRefund.Parameters.AddWithValue("@MedBillNo", strMedBillNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objTotalMedicalProviderRefund = cmdQueryForMedicalProviderRefund.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        Decimal TotalMedicalProviderRefund = 0;
                        if (objTotalMedicalProviderRefund.ToString() != String.Empty) TotalMedicalProviderRefund = Decimal.Parse(objTotalMedicalProviderRefund.ToString());

                        TotalSharedAmountInMedBill -= TotalMedicalProviderRefund;

                        String strSqlUpdateMedBillWithTotalSharedAmount = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[TotalSharedAmount] = @TotalSharedAmount " +
                                                  "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                                                  "[dbo].[tbl_medbill].[IsDeleted] = 0 and " +
                                                  "[dbo].[tbl_medbill].[Illness_Id] = @IllnessId and " +
                                                  "[dbo].[tbl_medbill].[Incident_Id] = @IncidentId and " +
                                                  "[dbo].[tbl_medbill].[Individual_Id] = @IndividualId";


                        SqlCommand cmdUpdateMedBillWithTotalSharedAmount = new SqlCommand(strSqlUpdateMedBillWithTotalSharedAmount, connRN5);
                        cmdUpdateMedBillWithTotalSharedAmount.CommandType = CommandType.Text;

                        cmdUpdateMedBillWithTotalSharedAmount.Parameters.AddWithValue("@TotalSharedAmount", TotalSharedAmountInMedBill);
                        cmdUpdateMedBillWithTotalSharedAmount.Parameters.AddWithValue("@MedBillNo", strMedBillNo);
                        cmdUpdateMedBillWithTotalSharedAmount.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessId));
                        cmdUpdateMedBillWithTotalSharedAmount.Parameters.AddWithValue("@IncidentId", Int32.Parse(strIncidentId));
                        cmdUpdateMedBillWithTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        int nMedBillUpdated = cmdUpdateMedBillWithTotalSharedAmount.ExecuteNonQuery();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (nMedBillUpdated == 0)
                        {
                            MessageBox.Show("The Medical Bill has not been updated with Total Shared Amount.", "Error");
                            return;
                        }

                        String strSqlQueryForIncidentTotalSharedAmount = "select sum([dbo].[tbl_medbill].[TotalSharedAmount]) from [dbo].[tbl_medbill] " +
                                                 "where [dbo].[tbl_medbill].[IsDeleted] = 0 and " +
                                                 "[dbo].[tbl_medbill].[Illness_Id] = @IllnessId and " +
                                                 "[dbo].[tbl_medbill].[Incident_Id] = @IncidentId and " +
                                                 "[dbo].[tbl_medbill].[Individual_Id] = @IndividualId";

                        SqlCommand cmdQueryForIncidentTotalSharedAmount = new SqlCommand(strSqlQueryForIncidentTotalSharedAmount, connRN5);
                        cmdQueryForIncidentTotalSharedAmount.CommandType = CommandType.Text;

                        cmdQueryForIncidentTotalSharedAmount.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessId));
                        cmdQueryForIncidentTotalSharedAmount.Parameters.AddWithValue("@IncidentId", Int32.Parse(strIncidentId));
                        cmdQueryForIncidentTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objIncidentTotalSharedAmount = cmdQueryForIncidentTotalSharedAmount.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        Decimal IncidentTotalSharedAmount = 0;
                        if (objIncidentTotalSharedAmount.ToString() != String.Empty) IncidentTotalSharedAmount = Decimal.Parse(objIncidentTotalSharedAmount.ToString());
                        else
                        {
                            MessageBox.Show("No Incident Total Shared Amount", "Error");
                            return;
                        }

                        String strSqlUpdateIncidentSharedTotalAmount = "update [dbo].[tbl_incident] set [dbo].[tbl_incident].[TotalSharedAmount] = @TotalSharedAmount," +
                                                                       "[dbo].[tbl_incident].[ModifiStaff] = @ModifiStaff " +
                                                                       "where [dbo].[tbl_incident].[IsDeleted] = 0 and " +
                                                                       "[dbo].[tbl_incident].[Illness_id] = @IllnessId and " +
                                                                       "[dbo].[tbl_incident].[Incident_id] = @IncidentId and " +
                                                                       "[dbo].[tbl_incident].[Individual_id] = @IndividualId";

                        SqlCommand cmdUpdateIncidentSharedTotal = new SqlCommand(strSqlUpdateIncidentSharedTotalAmount, connRN5);
                        cmdUpdateIncidentSharedTotal.CommandType = CommandType.Text;

                        cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@TotalSharedAmount", IncidentTotalSharedAmount);
                        cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@ModifiStaff", nLoggedUserId);
                        cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessId));
                        cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@IncidentId", Int32.Parse(strIncidentId));
                        cmdUpdateIncidentSharedTotal.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        int nIncidentUpdated = cmdUpdateIncidentSharedTotal.ExecuteNonQuery(); // incident id is null in incident_history table
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        if (nIncidentUpdated == 3)
                        {
                            String strSqlQueryForIllnessTotalSharedAmount = "select sum([dbo].[tbl_incident].[TotalSharedAmount]) from [dbo].[tbl_incident] " +
                                                "where [dbo].[tbl_incident].[IsDeleted] = 0 and " +
                                                "[dbo].[tbl_incident].[Illness_id] = @IllnessId and " +
                                                "[dbo].[tbl_incident].[Individual_id] = @IndividualId";

                            SqlCommand cmdQueryForIllnessTotalSharedAmount = new SqlCommand(strSqlQueryForIllnessTotalSharedAmount, connRN5);
                            cmdQueryForIllnessTotalSharedAmount.CommandType = CommandType.Text;

                            cmdQueryForIllnessTotalSharedAmount.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessId));
                            cmdQueryForIllnessTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            Object objIllnessTotalSharedAmount = cmdQueryForIllnessTotalSharedAmount.ExecuteScalar();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            Decimal IllnessTotalSharedAmount = 0;
                            if (objIllnessTotalSharedAmount.ToString() != String.Empty) IllnessTotalSharedAmount = Decimal.Parse(objIllnessTotalSharedAmount.ToString());

                            String strSqlUpdateIllnessSharedTotal = "update [dbo].[tbl_illness] set [dbo].[tbl_illness].[TotalSharedAmount] = @TotalSharedAmount " +
                                        "where [dbo].[tbl_illness].[IsDeleted] = 0 and " +
                                        "[dbo].[tbl_illness].[Illness_Id] = @IllnessId and " +
                                        "[dbo].[tbl_illness].[Individual_Id] = @IndividualId";

                            SqlCommand cmdUpdateIllnessSharedTotal = new SqlCommand(strSqlUpdateIllnessSharedTotal, connRN5);
                            cmdUpdateIllnessSharedTotal.CommandType = CommandType.Text;

                            cmdUpdateIllnessSharedTotal.Parameters.AddWithValue("@TotalSharedAmount", IllnessTotalSharedAmount);
                            cmdUpdateIllnessSharedTotal.Parameters.AddWithValue("@IllnessId", Int32.Parse(strIllnessId));
                            cmdUpdateIllnessSharedTotal.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                            if (connRN5.State != ConnectionState.Closed)
                            {
                                connRN5.Close();
                                connRN5.Open();
                            }
                            else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                            int nIllnessUpdated = cmdUpdateIllnessSharedTotal.ExecuteNonQuery();
                            if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                            if (nIllnessUpdated == 1)
                            {

                                String strSqlQueryForIndividualTotalSharedAmount = "select sum([dbo].[tbl_illness].[TotalSharedAmount]) from [dbo].[tbl_illness] " +
                                                    "where [dbo].[tbl_illness].[IsDeleted] = 0 and " +
                                                    "[dbo].[tbl_illness].[Individual_Id] = @IndividualId";

                                SqlCommand cmdQueryForIndividualTotalSharedAmount = new SqlCommand(strSqlQueryForIndividualTotalSharedAmount, connRN5);
                                cmdQueryForIndividualTotalSharedAmount.CommandType = CommandType.Text;
                                cmdQueryForIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                if (connRN5.State != ConnectionState.Closed)
                                {
                                    connRN5.Close();
                                    connRN5.Open();
                                }
                                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                                Object objIndividualTotalSharedAmount = cmdQueryForIndividualTotalSharedAmount.ExecuteScalar();
                                if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                                Decimal IndividualTotalSharedAmount = 0;
                                if (objIndividualTotalSharedAmount.ToString() != String.Empty) IndividualTotalSharedAmount = Decimal.Parse(objIndividualTotalSharedAmount.ToString());

                                String strSqlUpdateIndividualTotalSharedAmount = "update [dbo].[contact] set [dbo].[contact].[TotalSharedAmount] = @IndividualTotalSharedAmount " +
                                                                                 "where [dbo].[contact].[IsDeleted] = 0 and " +
                                                                                 "[dbo].[contact].[Individual_ID__c] = @IndividualId";

                                SqlCommand cmdUpdateIndividualTotalSharedAmount = new SqlCommand(strSqlUpdateIndividualTotalSharedAmount, connSalesforce);
                                cmdUpdateIndividualTotalSharedAmount.CommandType = CommandType.Text;

                                cmdUpdateIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualTotalSharedAmount", IndividualTotalSharedAmount);
                                cmdUpdateIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                                if (connSalesforce.State == ConnectionState.Open)
                                {
                                    connSalesforce.Close();
                                    connSalesforce.Open();
                                }
                                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                                int nIndividualUpdated = cmdUpdateIndividualTotalSharedAmount.ExecuteNonQuery();
                                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                                if (nIndividualUpdated == 1) txtTotalSharedAmount.Text = IndividualTotalSharedAmount.ToString("C");

                                if (nIndividualUpdated != 1)
                                {
                                    MessageBox.Show("Individual Total Shared Amount has not been updated.", "Error");
                                    return;
                                }
                            }
                            else
                            {
                                MessageBox.Show("Illness Total Shared Amount has not been updated.", "Error");
                                return;
                            }
                        }
                        else
                        {
                            MessageBox.Show("Incident Total Shared Amount has not been updated.", "Error");
                            return;
                        }

                        String strSqlQueryForTotalMedBillAmountForIndividualId = "select sum([dbo].[tbl_medbill].[BillAmount]) from [dbo].[tbl_medbill] " +
                                                         "where [dbo].[tbl_medbill].[Individual_Id] = @IndividualId and " +
                                                         "[dbo].[tbl_medbill].[IsDeleted] = 0";

                        SqlCommand cmdQueryForTotalMedBillAmountForIndividualId = new SqlCommand(strSqlQueryForTotalMedBillAmountForIndividualId, connRN5);
                        cmdQueryForTotalMedBillAmountForIndividualId.CommandType = CommandType.Text;

                        cmdQueryForTotalMedBillAmountForIndividualId.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objTotalMedBillAmountForIndividualId = cmdQueryForTotalMedBillAmountForIndividualId.ExecuteScalar();
                        if (connRN5.State != ConnectionState.Closed) connRN5.Close();

                        Decimal TotalMedBillAmountForIndividualId = 0;
                        if (objTotalMedBillAmountForIndividualId != null) TotalMedBillAmountForIndividualId = Decimal.Parse(objTotalMedBillAmountForIndividualId.ToString());

                        String strSqlUpdateIndividualTotalMedBillAmount = "update [dbo].[contact] set [dbo].[contact].[MedicalBillAmountTotal] = @MedBillTotalForIndividual " +
                                                                          "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                        SqlCommand cmdUpdateIndividualTotalMedBillAmount = new SqlCommand(strSqlUpdateIndividualTotalMedBillAmount, connSalesforce);
                        cmdUpdateIndividualTotalMedBillAmount.CommandType = CommandType.Text;

                        cmdUpdateIndividualTotalMedBillAmount.Parameters.AddWithValue("@MedBillTotalForIndividual", TotalMedBillAmountForIndividualId);
                        cmdUpdateIndividualTotalMedBillAmount.Parameters.AddWithValue("@IndividualId", txtIndividualIDMedBill.Text.Trim());

                        if (connSalesforce.State == ConnectionState.Open)
                        {
                            connSalesforce.Close();
                            connSalesforce.Open();
                        }
                        else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                        int nIndividualTotalMedBillUpdated = cmdUpdateIndividualTotalMedBillAmount.ExecuteNonQuery();

                        if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                        if (nIndividualTotalMedBillUpdated == 1) txtTotalMedBillAmount.Text = TotalMedBillAmountForIndividualId.ToString("C");



                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        return;
                    }
                    else if (nAffectedRow == 0)
                    {
                        MessageBox.Show("The Medical Bill has not been updated.", "Error");
                        return;
                    }

                    bIsModified = false;
                }
            }
            else if (dlgResult == DialogResult.No)
            {
                return;
            }

            Cursor.Current = Cursors.Default;





            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //frmSaveNewMedBill frmSaveMedBill = new frmSaveNewMedBill();

            //frmSaveMedBill.StartPosition = FormStartPosition.CenterParent;
            //DialogResult dlgResult = frmSaveMedBill.ShowDialog();

            //if (dlgResult == DialogResult.Yes)
            //{
            //    String strMedBillNo = txtMedBillNo.Text.Trim();

            //    String strSqlQueryForMedBill = "select [dbo].[tbl_medbill].[BillNo] from [dbo].[tbl_medbill] where [dbo].[tbl_medbill].[BillNo] = @MedBillNo";

            //    SqlCommand cmdQueryForMedBill = new SqlCommand(strSqlQueryForMedBill, connRN);
            //    cmdQueryForMedBill.Parameters.AddWithValue("@MedBillNo", strMedBillNo);

            //    //if (connRN.State == ConnectionState.Closed) connRN.Open();
            //    if (connRN.State != ConnectionState.Closed)
            //    {
            //        connRN.Close();
            //        connRN.Open();
            //    }
            //    else if (connRN.State == ConnectionState.Closed) connRN.Open();
            //    Object ResultMedBillNo = cmdQueryForMedBill.ExecuteScalar();
            //    if (connRN.State != ConnectionState.Closed) connRN.Close();

            //    if (ResultMedBillNo == null)
            //    {
            //        String strIndividualId = String.Empty;
            //        String strCaseId = String.Empty;
            //        String strBillStatus = String.Empty;
            //        String strIllnessId = String.Empty;
            //        String strIncidentId = String.Empty;

            //        String strNewMedBillNo = String.Empty;
            //        String strMedProvider = String.Empty;
            //        String strPrescriptionName = String.Empty;
            //        String strPrescriptionNo = String.Empty;
            //        String strPrescriptionDescription = String.Empty;

            //        if (txtIndividualIDMedBill.Text.Trim() != String.Empty) strIndividualId = txtIndividualIDMedBill.Text.Trim();
            //        if (txtMedBill_CaseNo.Text.Trim() != String.Empty) strCaseId = txtMedBill_CaseNo.Text.Trim();
            //        //if (txtMedicalBillStatus.Text.Trim() != String.Empty) strBillStatus = txtMedicalBillStatus.Text.Trim();

            //        //if (txtMedBill_Illness.Text.Trim() != String.Empty) strIllnessId = Illness.IllnessNo;
            //        //if (txtMedBill_Incident.Text.Trim() != String.Empty) strIncidentId = txtMedBill_Incident.Text.Trim();

            //        if (txtMedBillNo.Text.Trim() != String.Empty) strNewMedBillNo = txtMedBillNo.Text.Trim();

            //        if (txtMedBill_Illness.Text.Trim() != String.Empty)
            //        {
            //            String IllnessNo = txtMedBill_Illness.Text.Trim();

            //            String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

            //            SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN);
            //            cmdQueryForIllnessId.CommandType = CommandType.Text;

            //            cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", IllnessNo);

            //            if (connRN.State != ConnectionState.Closed)
            //            {
            //                connRN.Close();
            //                connRN.Open();
            //            }
            //            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            //            Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
            //            if (connRN.State != ConnectionState.Closed) connRN.Close();

            //            if (objIllnessId != null) strIllnessId = objIllnessId.ToString();
            //            else
            //            {
            //                MessageBox.Show("No Illness Id for given Illness No", "Error");
            //                return;
            //            }
            //        }

            //        if (txtMedBill_Incident.Text.Trim() != String.Empty)
            //        {
            //            String IncidentNo = txtMedBill_Incident.Text.Trim();

            //            String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

            //            SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN);
            //            cmdQueryForIncidentId.CommandType = CommandType.Text;

            //            cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", IncidentNo);

            //            if (connRN.State != ConnectionState.Closed)
            //            {
            //                connRN.Close();
            //                connRN.Open();
            //            }
            //            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            //            Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
            //            if (connRN.State != ConnectionState.Closed) connRN.Close();

            //            if (objIncidentId != null) strIncidentId = objIncidentId.ToString();
            //            else
            //            {
            //                MessageBox.Show("No Incident Id for given Incident No", "Error");
            //                return;
            //            }
            //        }


            //        String MedicalProvider = String.Empty;

            //        if (txtMedicalProvider.Text.Trim() != String.Empty)
            //        {
            //            MedicalProvider = txtMedicalProvider.Text.Trim();
            //        }
            //        else
            //        {
            //            MessageBox.Show("Please enter the name of medical provider.", "Error");
            //            return;
            //        }

            //        String PrescriptionName = String.Empty;

            //        if (txtPrescriptionName.Text.Trim() != String.Empty)
            //        {
            //            PrescriptionName = txtPrescriptionName.Text.Trim();
            //        }

            //        String PrescriptionNo = String.Empty;

            //        if (txtNumberOfMedication.Text.Trim() != String.Empty)
            //        {
            //            PrescriptionNo = txtNumberOfMedication.Text.Trim();
            //        }

            //        String PrescriptionDescription = String.Empty;

            //        if (txtPrescriptionDescription.Text.Trim() != String.Empty)
            //        {
            //            PrescriptionDescription = txtPrescriptionDescription.Text.Trim();
            //        }


            //        int nPatientType = 0;   // default outpatient

            //        if (rbOutpatient.Checked) nPatientType = 0;
            //        else if (rbInpatient.Checked) nPatientType = 1;

            //        //int nSelectedMedNote = cbMedicalBillNote1.SelectedIndex;

            //        String strNote = String.Empty;

            //        if (comboMedBillType.SelectedItem.ToString() == "Medical Bill")
            //        {
            //            strNote = txtMedBillNote.Text.Trim();
            //        }
            //        else if (comboMedBillType.SelectedItem.ToString() == "Prescription")
            //        {
            //            strNote = txtPrescriptionNote.Text.Trim();
            //        }
            //        else if (comboMedBillType.SelectedItem.ToString() == "Physical Therapy")
            //        {
            //            strNote = txtPhysicalTherapyRxNote.Text.Trim();
            //        }



            //        String strSqlInsertNewMedBill = "insert into dbo.tbl_medbill (IsDeleted, BillNo, MedBillType_Id, BillStatus, CreatedDate, CreatedById, LastModifiedDate, LastModifiedById, " +
            //                                        "LastActivityDate, LastViewedDate, LastReferencedDate, Case_Id, Incident_Id, Illness_Id, BillAmount, SettlementTotal, " +
            //                                        "Balance, BillDate, TotalSharedAmount, Individual_Id, Contact_Id, MedicalProvider_Id, PendingReason, " +
            //                                        "Account_At_Provider, ProviderPhoneNumber, ProviderContactPerson, " +
            //                                        "ProposalLetterSentDate, HIPPASentDate, MedicalRecordDate, " +
            //                                        "BillStatus, ProofOfPaymentReceivedDate, IneligibleReason, OriginalPrescription, PersonalResponsibilityCredit, " +
            //                                        "WellBeingCareTotal, WellBeingCare, DueDate, TotalNumberOfPhysicalTherapy, " +
            //                                        "PrescriptionDrugName, PrescriptionNo, PrescriptionDescription, " +
            //                                        "PatientTypeId, Note) " +
            //                                        "values (@IsDeleted, @BillNo, @MedBillType_Id, @MedBillStatus, @CreatedDate, @CreateById, @LastModifiedDate, @LastModifiedById, " +
            //                                        "@LastActivityDate, @LastViewedDate, @LastReferencedDate, @Case_Id, @Incident_Id, @Illness_Id, @BillAmount, @SettlementTotal, " +
            //                                        "@Balance, @BillDate, @TotalSharedAmount, @Individual_Id, @Contact_Id, @MedicalProvider_Id, @PendingReason, " +
            //                                        "@Account_At_Provider, @ProviderPhoneNo, @ProviderContactPerson, " +
            //                                        "@ProposalLetterSentDate, @HIPPASentDate, @MedicalRecordDate, " +
            //                                        "@BillStatus, @ProofOfPaymentReceivedDate, @IneligibleReason, @OriginalPrescription, @PersonalResponsibilityCredit, " +
            //                                        "@WellBeingCareTotal, @WellBeingCare, @DueDate, @TotalNumberOfPhysicalTherapy, " +
            //                                        "@PrescriptionDrugName, @PrescriptionNo, @PrescriptionDescription, " +
            //                                        "@PatientTypeId, @Note)";

            //        SqlCommand cmdInsertNewMedBill = new SqlCommand(strSqlInsertNewMedBill, connRN);
            //        cmdInsertNewMedBill.CommandType = CommandType.Text;

            //        cmdInsertNewMedBill.Parameters.AddWithValue("@IsDeleted", 0);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@BillNo", strNewMedBillNo);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@MedBillType_Id", comboMedBillType.SelectedIndex + 1);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@MedBillStatus", comboMedBillStatus.SelectedIndex);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@CreatedDate", DateTime.Today);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@CreateById", nLoggedUserId);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@LastModifiedById", nLoggedUserId);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@LastViewedDate", DateTime.Today);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@LastReferencedDate", DateTime.Today);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@Case_Id", strCaseId);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@Incident_Id", strIncidentId);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@Illness_Id", strIllnessId);


            //        Decimal BillAmountResult = 0;
            //        Decimal BillAmount = 0;

            //        if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out BillAmountResult))
            //        {
            //            BillAmount = BillAmountResult;
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@BillAmount", BillAmount);
            //        }
            //        else
            //        {
            //            MessageBox.Show("Bill Amount is invalid.", "Error");
            //            return;
            //        }

            //        cmdInsertNewMedBill.Parameters.AddWithValue("@SettlementTotal", 0);

            //        Decimal BalanceResult = 0;
            //        Decimal Balance = 0;

            //        if (Decimal.TryParse(txtBalance.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out BalanceResult))
            //        {
            //            Balance = BalanceResult;
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@Balance", Balance);
            //        }
            //        else
            //        {
            //            MessageBox.Show("Balance is invalid.", "Error");
            //            return;
            //        }

            //        cmdInsertNewMedBill.Parameters.AddWithValue("@BillDate", dtpBillDate.Value);

            //        Decimal TotalSharedAmount = 0;
            //        for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
            //        {
            //            if ((gvSettlementsInMedBill["SettlementType", i].Value.ToString() == "CMM Provider Payment") ||
            //                (gvSettlementsInMedBill["SettlementType", i].Value.ToString() == "Member Reimbursement"))
            //                TotalSharedAmount += Decimal.Parse(gvSettlementsInMedBill["SettlementType", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
            //            if (gvSettlementsInMedBill["SettlementType", i].Value.ToString() == "Medical Provider Refund")
            //                TotalSharedAmount -= Decimal.Parse(gvSettlementsInMedBill["SettlementType", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
            //        }

            //        cmdInsertNewMedBill.Parameters.AddWithValue("@TotalSharedAmount", TotalSharedAmount);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@Individual_Id", strIndividualId);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@Contact_Id", strIndividualId);
            //        foreach (MedicalProviderInfo info in lstMedicalProvider)
            //        {
            //            if (info.Name == txtMedicalProvider.Text.Trim())
            //            {
            //                cmdInsertNewMedBill.Parameters.AddWithValue("@MedicalProvider_Id", info.ID);
            //                break;
            //            }
            //        }

            //        cmdInsertNewMedBill.Parameters.AddWithValue("@Account_At_Provider", txtMedBillAccountNoAtProvider.Text.Trim());
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@ProviderPhoneNo", txtMedProviderPhoneNo.Text.Trim());
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@ProviderContactPerson", txtProviderContactPerson.Text.Trim());
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@ProposalLetterSentDate", dtpProposalLetterSentDate.Value);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@HIPPASentDate", dtpHippaSentDate.Value);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@MedicalRecordDate", dtpMedicalRecordDate.Value);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@BillStatus", comboMedBillStatus.SelectedIndex);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@ProofOfPaymentReceivedDate", DateTime.Today);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@OriginalPrescription", DBNull.Value);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@PersonalResponsibilityCredit", 500);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@WellBeingCareTotal", 0);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@WellBeingCare", 0);
            //        //cmdInsertNewMedBill.Parameters.AddWithValue("@Memo", DBNull.Value);
            //        cmdInsertNewMedBill.Parameters.AddWithValue("@DueDate", DateTime.Today);

            //        if (comboMedBillType.SelectedIndex == 0)        // Medical Bill Type : Medical Bill
            //        {
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", DBNull.Value);
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", DBNull.Value);
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", DBNull.Value);

            //            cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", DBNull.Value);

            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", nPatientType);
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", comboPendingReason.SelectedIndex);
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", comboIneligibleReason.SelectedIndex);

            //            cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
            //        }
            //        else if (comboMedBillType.SelectedIndex == 1)   // Medical Bill Type : Prescription
            //        {
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", DBNull.Value);
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", DBNull.Value);
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", DBNull.Value);

            //            cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", DBNull.Value);

            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", txtPrescriptionName.Text.Trim());
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", txtNumberOfMedication.Text.Trim());
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", txtPrescriptionDescription.Text.Trim());
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
            //        }
            //        else if (comboMedBillType.SelectedIndex == 2)   // Medical Bill Type : Physical Therapy
            //        {
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", DBNull.Value);
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", DBNull.Value);
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", DBNull.Value);

            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", DBNull.Value);
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", DBNull.Value);
            //            cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", DBNull.Value);

            //            int nNumberOfPhysicalTherapy = 0;
            //            short result = 0;
            //            if (Int16.TryParse(txtNumPhysicalTherapy.Text.Trim(), out result))
            //            {
            //                nNumberOfPhysicalTherapy = result;
            //                cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", nNumberOfPhysicalTherapy);
            //            }
            //            else
            //            {
            //                MessageBox.Show("Please enter a positive integer in the Number of Physical Therapy Text Box.", "Alert");
            //                return;
            //            }

            //            cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
            //        }

            //        //if (connRN.State == ConnectionState.Closed) connRN.Open();
            //        if (connRN.State != ConnectionState.Closed)
            //        {
            //            connRN.Close();
            //            connRN.Open();
            //        }
            //        else if (connRN.State == ConnectionState.Closed) connRN.Open();
            //        int nRowInserted = cmdInsertNewMedBill.ExecuteNonQuery();
            //        if (connRN.State != ConnectionState.Closed) connRN.Close();

            //        if (nRowInserted == 1)
            //        {
            //            MessageBox.Show("The Medical Bill has been saved.", "Information");
            //            //btnAddNewSettlement.Enabled = true;
            //            return;

            //        }
            //        else if (nRowInserted == 0)
            //        {
            //            MessageBox.Show("The Medical Bill has not been saved.", "Error");
            //            return;
            //        }

            //        bIsModified = false;

            //    }
            //    else if (ResultMedBillNo.ToString() == strMedBillNo)
            //    {
            //        // update the med bill

            //        if (txtIndividualIDMedBill.Text.Trim() == String.Empty)
            //        {
            //            MessageBox.Show("There is no illness code.", "Alert");
            //            return;
            //        }

            //        if (txtMedBill_Incident.Text.Trim() == String.Empty)
            //        {
            //            MessageBox.Show("There is no incident id.", "Alert");
            //            return;
            //        }

            //        String MedBillNo = txtMedBillNo.Text.Trim();
            //        String IndividualId = txtIndividualIDMedBill.Text.Trim();

            //        String strIllnessId = String.Empty;
            //        String strIncidentId = String.Empty;

            //        if (txtMedBill_Illness.Text.Trim() != String.Empty)
            //        {
            //            String IllnessNo = txtMedBill_Illness.Text.Trim();

            //            String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

            //            SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN);
            //            cmdQueryForIllnessId.CommandType = CommandType.Text;

            //            cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", IllnessNo);

            //            if (connRN.State != ConnectionState.Closed)
            //            {
            //                connRN.Close();
            //                connRN.Open();
            //            }
            //            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            //            Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
            //            if (connRN.State != ConnectionState.Closed) connRN.Close();

            //            if (objIllnessId != null) strIllnessId = objIllnessId.ToString();
            //            else
            //            {
            //                MessageBox.Show("No Illness Id for given Illness No", "Error");
            //                return;
            //            }
            //        }

            //        if (txtMedBill_Incident.Text.Trim() != String.Empty)
            //        {
            //            String IncidentNo = txtMedBill_Incident.Text.Trim();

            //            String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

            //            SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN);
            //            cmdQueryForIncidentId.CommandType = CommandType.Text;

            //            cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", IncidentNo);

            //            if (connRN.State != ConnectionState.Closed)
            //            {
            //                connRN.Close();
            //                connRN.Open();
            //            }
            //            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            //            Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
            //            if (connRN.State != ConnectionState.Closed) connRN.Close();

            //            if (objIncidentId != null) strIncidentId = objIncidentId.ToString();
            //            else
            //            {
            //                MessageBox.Show("No Incident Id for given Incident No", "Error");
            //                return;
            //            }
            //        }

            //        // Get illness id for ICD 10 Code
            //        //String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] " +
            //        //                                    "where [dbo].[tbl_illness].[Individual_Id] = @IndividualId and [dbo].[tbl_illness].[ICD_10_Id] = @ICD10Code";

            //        //SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN);
            //        //cmdQueryForIllnessId.CommandType = CommandType.Text;

            //        //cmdQueryForIllnessId.Parameters.AddWithValue("@IndividualId", IndividualId);
            //        //cmdQueryForIllnessId.Parameters.AddWithValue("@ICD10Code", txtMedBill_Illness.Text.Trim());

            //        ////if (connRN.State == ConnectionState.Closed) connRN.Open();
            //        //if (connRN.State != ConnectionState.Closed)
            //        //{
            //        //    connRN.Close();
            //        //    connRN.Open();
            //        //}
            //        //else if (connRN.State == ConnectionState.Closed) connRN.Open();
            //        ////int nIllnessId = Int32.Parse(cmdQueryForIllnessId.ExecuteScalar().ToString());
            //        //Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
            //        //if (connRN.State != ConnectionState.Closed) connRN.Close();

            //        //int nResult;
            //        //int? nIllnessId = null;
            //        //if (objIllnessId != null)
            //        //{
            //        //    if (Int32.TryParse(objIllnessId.ToString(), NumberStyles.Integer, new CultureInfo("en-US"), out nResult)) nIllnessId = nResult;
            //        //}

            //        // Get medical provider id
            //        String strSqlQueryForMedicalProviderId = "select [dbo].[tbl_MedicalProvider].[ID] from [dbo].[tbl_MedicalProvider] where [dbo].[tbl_MedicalProvider].[Name] = @MedicalProviderName";

            //        SqlCommand cmdQueryForMedicalProviderId = new SqlCommand(strSqlQueryForMedicalProviderId, connRN);
            //        cmdQueryForMedicalProviderId.CommandType = CommandType.Text;

            //        cmdQueryForMedicalProviderId.Parameters.AddWithValue("@MedicalProviderName", txtMedicalProvider.Text.Trim());

            //        //if (connRN.State == ConnectionState.Closed) connRN.Open();
            //        if (connRN.State != ConnectionState.Closed)
            //        {
            //            connRN.Close();
            //            connRN.Open();
            //        }
            //        else if (connRN.State == ConnectionState.Closed) connRN.Open();
            //        //String MedicalProviderId = cmdQueryForMedicalProviderId.ExecuteScalar().ToString();
            //        Object objMedicalProviderId = cmdQueryForMedicalProviderId.ExecuteScalar();
            //        if (connRN.State != ConnectionState.Closed) connRN.Close();

            //        String MedicalProviderId = String.Empty;

            //        if (objMedicalProviderId != null) MedicalProviderId = objMedicalProviderId.ToString();

            //        int nPatientType = 0;   // default outpatient

            //        if (rbOutpatient.Checked) nPatientType = 0;
            //        else if (rbInpatient.Checked) nPatientType = 1;

            //        String strNote = String.Empty;

            //        if (comboMedBillType.SelectedItem.ToString() == "Medical Bill")
            //        {
            //            strNote = txtMedBillNote.Text.Trim();
            //        }
            //        else if (comboMedBillType.SelectedItem.ToString() == "Prescription")
            //        {
            //            strNote = txtPrescriptionNote.Text.Trim();
            //        }
            //        else if (comboMedBillType.SelectedItem.ToString() == "Physical Therapy")
            //        {
            //            strNote = txtPhysicalTherapyRxNote.Text.Trim();
            //        }

            //        // Update the Medical Bill
            //        String strSqlUpdateMedBill = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[LastModifiedDate] = @NewLastModifiedDate, " +
            //                                     "[dbo].[tbl_medbill].[LastModifiedById] = @NewLastModifiedById, " +
            //                                         "[dbo].[tbl_medbill].[Case_Id] = @NewCaseId, [dbo].[tbl_medbill].[Incident_Id] = @NewIncidentId, " +
            //                                         "[dbo].[tbl_medbill].[Illness_Id] = @NewIllnessId, " +
            //                                         "[dbo].[tbl_medbill].[BillAmount] = @NewBillAmount, [dbo].[tbl_medbill].[MedBillType_Id] = @NewMedBillType_Id, " +
            //                                         "[dbo].[tbl_medbill].[BillStatus] = @NewMedBillStatus, " +
            //                                         "[dbo].[tbl_medbill].[SettlementTotal] = @NewSettlementTotal, [dbo].[tbl_medbill].[Balance] = @NewBalance, " +
            //                                         "[dbo].[tbl_medbill].[BillDate] = @NewBillDate, [dbo].[tbl_medbill].[DueDate] = @NewDueDate, [dbo].[tbl_medbill].[TotalSharedAmount] = @NewTotalSharedAmount, " +
            //                                         "[dbo].[tbl_medbill].[Guarantor] = @NewGuarantor, " +
            //                                         "[dbo].[tbl_medbill].[MedicalProvider_Id] = @NewMedicalProviderId, " +
            //                                         "[dbo].[tbl_medbill].[Account_At_Provider] = @NewAccountAtProvider, " +
            //                                         "[dbo].[tbl_medbill].[ProviderPhoneNumber] = @NewProviderPhoneNo, " +
            //                                         "[dbo].[tbl_medbill].[ProviderContactPerson] = @NewProviderContactPerson, " +
            //                                         "[dbo].[tbl_medbill].[ProposalLetterSentDate] = @NewProposalLetterSentDate, " +
            //                                         "[dbo].[tbl_medbill].[HIPPASentDate] = @NewHIPPASentDate, " +
            //                                         "[dbo].[tbl_medbill].[MedicalRecordDate] = @NewMedicalRecordDate, " +
            //                                         "[dbo].[tbl_medbill].[PrescriptionDrugName] = @NewPrescriptionDrugName, [dbo].[tbl_medbill].[PrescriptionNo] = @NewPrescriptionNo, " +
            //                                         "[dbo].[tbl_medbill].[PrescriptionDescription] = @NewPrescriptionDescription, " +
            //                                         "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy] = @NewTotalNumberOfPhysicalTherapy, " +
            //                                         "[dbo].[tbl_medbill].[PatientTypeId] = @NewPatientTypeId, " +
            //                                         "[dbo].[tbl_medbill].[Note] = @Note, " +
            //                                         "[dbo].[tbl_medbill].[WellBeingCareTotal] = @NewWellBeingCareTotal, [dbo].[tbl_medbill].[WellBeingCare] = @NewWellBeingCare, " +
            //                                         "[dbo].[tbl_medbill].[IneligibleReason] = @NewIneligibleReason, [dbo].[tbl_medbill].[PendingReason] = @NewPendingReason, " +
            //                                         "[dbo].[tbl_medbill].[OriginalPrescription] = @NewOriginalPrescription " +
            //                                         "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and [dbo].[tbl_medbill].[Contact_Id] = @IndividualId";

            //        SqlCommand cmdUpdateMedBill = new SqlCommand(strSqlUpdateMedBill, connRN);
            //        cmdUpdateMedBill.CommandType = CommandType.Text;

            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewLastModifiedDate", DateTime.Today.ToString("MM/dd/yyyy"));
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewLastModifiedById", nLoggedUserId);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewCaseId", txtMedBill_CaseNo.Text.Trim());
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewIncidentId", strIncidentId);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewIllnessId", strIllnessId);
            //        Decimal BillAmount = 0;
            //        Decimal BillAmountResult = 0;

            //        if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out BillAmountResult))
            //        {
            //            BillAmount = BillAmountResult;
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewBillAmount", BillAmount);
            //        }
            //        else
            //        {
            //            MessageBox.Show("Bill Amount is invalid.", "Error");
            //            return;
            //        }
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewMedBillType_Id", comboMedBillType.SelectedIndex + 1);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewMedBillStatus", comboMedBillStatus.SelectedIndex);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewSettlementTotal", 0);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewBalance", 0);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewBillDate", dtpBillDate.Value);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewDueDate", dtpDueDate.Value);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalSharedAmount", 0);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewGuarantor", txtMedBillGuarantor.Text.Trim());
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewMedicalProviderId", MedicalProviderId);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewAccountAtProvider", txtMedBillAccountNoAtProvider.Text.Trim());
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewProviderPhoneNo", txtMedProviderPhoneNo.Text.Trim());
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewProviderContactPerson", txtProviderContactPerson.Text.Trim());
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewProposalLetterSentDate", dtpProposalLetterSentDate.Value);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewHIPPASentDate", dtpHippaSentDate.Value);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewMedicalRecordDate", dtpMedicalRecordDate.Value);

            //        if (comboMedBillType.SelectedIndex == 0)        // Medical Bill Type - Medical Bill
            //        {
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", DBNull.Value);
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", DBNull.Value);
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", DBNull.Value);

            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", DBNull.Value);

            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", nPatientType);
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", comboPendingReason.SelectedIndex);
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", comboIneligibleReason.SelectedIndex);

            //            cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);

            //        }
            //        if (comboMedBillType.SelectedIndex == 1)        // Medical Bill Type - Prescription
            //        {
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", DBNull.Value);
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", DBNull.Value);
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", DBNull.Value);

            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", DBNull.Value);

            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", txtPrescriptionName.Text.Trim());
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", txtNumberOfMedication.Text.Trim());
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", txtPrescriptionDescription.Text.Trim());

            //            cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);
            //        }
            //        if (comboMedBillType.SelectedIndex == 2)        // Medical Bill Type - Physical Therapy
            //        {
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", DBNull.Value);
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", DBNull.Value);
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", DBNull.Value);

            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", DBNull.Value);
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", DBNull.Value);
            //            cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", DBNull.Value);

            //            int nNumberOfPhysicalTherapy = 0;
            //            short NumPhysicalTherapyResult = 0;
            //            if (Int16.TryParse(txtNumPhysicalTherapy.Text.Trim(), out NumPhysicalTherapyResult))
            //            {
            //                nNumberOfPhysicalTherapy = NumPhysicalTherapyResult;
            //                cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", nNumberOfPhysicalTherapy);
            //            }
            //            else
            //            {
            //                MessageBox.Show("Please enter a positive integer in Number of Physical Therapy Text Box.", "Error");
            //                return;
            //            }

            //            cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);
            //        }


            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewWellBeingCareTotal", 0);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewWellBeingCare", 0);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@NewOriginalPrescription", String.Empty);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@MedBillNo", MedBillNo);
            //        cmdUpdateMedBill.Parameters.AddWithValue("@IndividualId", IndividualId);

            //        //if (connRN.State == ConnectionState.Closed) connRN.Open();
            //        if (connRN.State != ConnectionState.Closed)
            //        {
            //            connRN.Close();
            //            connRN.Open();
            //        }
            //        else if (connRN.State == ConnectionState.Closed) connRN.Open();
            //        int nAffectedRow = cmdUpdateMedBill.ExecuteNonQuery();
            //        if (connRN.State != ConnectionState.Closed) connRN.Close();

            //        if (nAffectedRow == 1)
            //        {
            //            MessageBox.Show("The Medical Bill has been updated.", "Information");
            //            return;
            //        }
            //        else if (nAffectedRow == 0)
            //        {
            //            MessageBox.Show("The Medical Bill has not been updated.", "Error");
            //            return;
            //        }

            //        bIsModified = false;
            //    }
            //}
            //else if (dlgResult == DialogResult.No)
            //{
            //    //tbCMMManager.TabPages.Remove(tbpgMedicalBill);
            //    //tbCMMManager.SelectedTab = tbCMMManager.TabPages["tbpgCreateCase"];
            //    return;
            //}
        }

        private void btnMedBillCreationPgLowerCancel_Click(object sender, EventArgs e)
        {
            DialogResult dlgClose = MessageBox.Show("Do you want to close Medical Bill page?", "Alert", MessageBoxButtons.YesNo);

            if (dlgClose == DialogResult.Yes)
            {
                DialogResult dlgResult = MessageBox.Show("Do you want save the change?", "Alert", MessageBoxButtons.YesNo);

                if (dlgResult == DialogResult.Yes)
                {
                    String strMedBillNo = txtMedBillNo.Text.Trim();

                    String strSqlQueryForMedBill = "select [dbo].[tbl_medbill].[BillNo] from [dbo].[tbl_medbill] where [dbo].[tbl_medbill].[BillNo] = @MedBillNo";

                    SqlCommand cmdQueryForMedBill = new SqlCommand(strSqlQueryForMedBill, connRN);
                    cmdQueryForMedBill.Parameters.AddWithValue("@MedBillNo", strMedBillNo);

                    //if (connRN.State == ConnectionState.Closed) connRN.Open();
                    if (connRN.State != ConnectionState.Closed)
                    {
                        connRN.Close();
                        connRN.Open();
                    }
                    else if (connRN.State == ConnectionState.Closed) connRN.Open();
                    Object ResultMedBillNo = cmdQueryForMedBill.ExecuteScalar();
                    if (connRN.State != ConnectionState.Closed) connRN.Close();

                    if (ResultMedBillNo == null)
                    {
                        String strIndividualId = String.Empty;
                        String strCaseId = String.Empty;
                        String strBillStatus = String.Empty;
                        String strIllnessId = String.Empty;
                        String strIncidentId = String.Empty;

                        String strNewMedBillNo = String.Empty;
                        String strMedProvider = String.Empty;
                        String strPrescriptionName = String.Empty;
                        String strPrescriptionNo = String.Empty;
                        String strPrescriptionDescription = String.Empty;

                        if (txtIndividualIDMedBill.Text.Trim() != String.Empty) strIndividualId = txtIndividualIDMedBill.Text.Trim();
                        if (txtMedBill_CaseNo.Text.Trim() != String.Empty) strCaseId = txtMedBill_CaseNo.Text.Trim();
                        //if (txtMedicalBillStatus.Text.Trim() != String.Empty) strBillStatus = txtMedicalBillStatus.Text.Trim();

                        //if (txtMedBill_Illness.Text.Trim() != String.Empty) strIllnessId = Illness.IllnessNo;
                        //if (txtMedBill_Incident.Text.Trim() != String.Empty) strIncidentId = txtMedBill_Incident.Text.Trim();

                        if (txtMedBill_Illness.Text.Trim() != String.Empty)
                        {
                            String IllnessNo = txtMedBill_Illness.Text.Trim();

                            String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

                            SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN);
                            cmdQueryForIllnessId.CommandType = CommandType.Text;

                            cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", IllnessNo);

                            if (connRN.State != ConnectionState.Closed)
                            {
                                connRN.Close();
                                connRN.Open();
                            }
                            else if (connRN.State == ConnectionState.Closed) connRN.Open();
                            Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                            if (connRN.State != ConnectionState.Closed) connRN.Close();

                            if (objIllnessId != null) strIllnessId = objIllnessId.ToString();
                            else
                            {
                                MessageBox.Show("No Illness Id for given Illness No", "Error");
                                return;
                            }
                        }

                        if (txtMedBill_Incident.Text.Trim() != String.Empty)
                        {
                            String IncidentNo = txtMedBill_Incident.Text.Trim();

                            String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

                            SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN);
                            cmdQueryForIncidentId.CommandType = CommandType.Text;

                            cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                            if (connRN.State != ConnectionState.Closed)
                            {
                                connRN.Close();
                                connRN.Open();
                            }
                            else if (connRN.State == ConnectionState.Closed) connRN.Open();
                            Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
                            if (connRN.State != ConnectionState.Closed) connRN.Close();

                            if (objIncidentId != null) strIncidentId = objIncidentId.ToString();
                            else
                            {
                                MessageBox.Show("No Incident Id for given Incident No", "Error");
                                return;
                            }
                        }


                        if (txtMedBillNo.Text.Trim() != String.Empty) strNewMedBillNo = txtMedBillNo.Text.Trim();

                        String MedicalProvider = String.Empty;

                        if (txtMedicalProvider.Text.Trim() != String.Empty)
                        {
                            MedicalProvider = txtMedicalProvider.Text.Trim();
                        }

                        String PrescriptionName = String.Empty;

                        if (txtPrescriptionName.Text.Trim() != String.Empty)
                        {
                            PrescriptionName = txtPrescriptionName.Text.Trim();
                        }

                        String PrescriptionNo = String.Empty;

                        if (txtNumberOfMedication.Text.Trim() != String.Empty)
                        {
                            PrescriptionNo = txtNumberOfMedication.Text.Trim();
                        }

                        String PrescriptionDescription = String.Empty;

                        if (txtPrescriptionDescription.Text.Trim() != String.Empty)
                        {
                            PrescriptionDescription = txtPrescriptionDescription.Text.Trim();
                        }


                        int nPatientType = 0;   // default outpatient

                        if (rbOutpatient.Checked) nPatientType = 0;
                        else if (rbInpatient.Checked) nPatientType = 1;

                        //int nSelectedMedNote = cbMedicalBillNote1.SelectedIndex;

                        String strNote = String.Empty;

                        if (comboMedBillType.SelectedItem.ToString() == "Medical Bill")
                        {
                            strNote = txtMedBillNote.Text.Trim();
                        }
                        else if (comboMedBillType.SelectedItem.ToString() == "Prescription")
                        {
                            strNote = txtPrescriptionNote.Text.Trim();
                        }
                        else if (comboMedBillType.SelectedItem.ToString() == "Physical Therapy")
                        {
                            strNote = txtPhysicalTherapyRxNote.Text.Trim();
                        }



                        String strSqlInsertNewMedBill = "insert into dbo.tbl_medbill (BillNo, MedBillType_Id, CreatedDate, CreatedById, LastModifiedDate, LastModifiedById, " +
                                                        "LastActivityDate, LastViewedDate, LastReferencedDate, Case_Id, Incident_Id, Illness_Id, BillAmount, SettlementTotal, " +
                                                        "Balance, BillDate, TotalSharedAmount, Individual_Id, Contact_Id, MedicalProvider_Id, PendingReason, " +
                                                        "Account_At_Provider, ProviderPhoneNumber, ProviderContactPerson, " +
                                                        "ProposalLetterSentDate, HIPPASentDate, MedicalRecordDate, " +
                                                        "BillStatus, ProofOfPaymentReceivedDate, IneligibleReason, OriginalPrescription, PersonalResponsibilityCredit, " +
                                                        "WellBeingCareTotal, WellBeingCare, DueDate, TotalNumberOfPhysicalTherapy, " +
                                                        "PrescriptionDrugName, PrescriptionNo, PrescriptionDescription, " +
                                                        "PatientTypeId, Note) " +
                                                        "values (@BillNo, @MedBillType_Id, @CreatedDate, @CreateById, @LastModifiedDate, @LastModifiedById, " +
                                                        "@LastActivityDate, @LastViewedDate, @LastReferencedDate, @Case_Id, @Incident_Id, @Illness_Id, @BillAmount, @SettlementTotal, " +
                                                        "@Balance, @BillDate, @TotalSharedAmount, @Individual_Id, @Contact_Id, @MedicalProvider_Id, @PendingReason, " +
                                                        "@Account_At_Provider, @ProviderPhoneNo, @ProviderContactPerson, " +
                                                        "@ProposalLetterSentDate, @HIPPASentDate, @MedicalRecordDate, " +
                                                        "@BillStatus, @ProofOfPaymentReceivedDate, @IneligibleReason, @OriginalPrescription, @PersonalResponsibilityCredit, " +
                                                        "@WellBeingCareTotal, @WellBeingCare, @DueDate, @TotalNumberOfPhysicalTherapy, " +
                                                        "@PrescriptionDrugName, @PrescriptionNo, @PrescriptionDescription, " +
                                                        "@PatientTypeId, @Note)";

                        SqlCommand cmdInsertNewMedBill = new SqlCommand(strSqlInsertNewMedBill, connRN);
                        cmdInsertNewMedBill.CommandType = CommandType.Text;

                        cmdInsertNewMedBill.Parameters.AddWithValue("@BillNo", strNewMedBillNo);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@MedBillType_Id", comboMedBillType.SelectedIndex + 1);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@CreatedDate", DateTime.Today);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@CreateById", nLoggedUserId);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@LastModifiedDate", DateTime.Today);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@LastModifiedById", nLoggedUserId);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@LastViewedDate", DateTime.Today);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@LastReferencedDate", DateTime.Today);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Case_Id", strCaseId);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Incident_Id", strIncidentId);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Illness_Id", strIllnessId);
                        Decimal dBillAmount = 0;

                        if (!Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out dBillAmount))
                        {
                            MessageBox.Show("Bill Amount should be currency value.", "Error");
                            return;
                        }
                        else
                        {
                            cmdInsertNewMedBill.Parameters.AddWithValue("@BillAmount", Decimal.Parse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US")));
                        }
                        cmdInsertNewMedBill.Parameters.AddWithValue("@SettlementTotal", 0);

                        Decimal dBalance = 0;
                        if (!Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out dBalance))
                        {
                            MessageBox.Show("Balance should be currency value.", "Error");
                        }
                        else
                        {
                            cmdInsertNewMedBill.Parameters.AddWithValue("@Balance", Decimal.Parse(txtBalance.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US")));
                        }

                        cmdInsertNewMedBill.Parameters.AddWithValue("@BillDate", dtpBillDate.Value);

                        Decimal TotalSharedAmount = 0;
                        for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                        {
                            if ((gvSettlementsInMedBill["SettlementType", i].Value.ToString() == "CMM Provider Payment") ||
                                (gvSettlementsInMedBill["SettlementType", i].Value.ToString() == "Member Reimbursement"))
                                TotalSharedAmount += Decimal.Parse(gvSettlementsInMedBill["SettlementType", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                            if (gvSettlementsInMedBill["SettlementType", i].Value.ToString() == "Medical Provider Refund")
                                TotalSharedAmount -= Decimal.Parse(gvSettlementsInMedBill["SettlementType", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                        }

                        cmdInsertNewMedBill.Parameters.AddWithValue("@TotalSharedAmount", TotalSharedAmount);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Individual_Id", strIndividualId);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@Contact_Id", strIndividualId);
                        foreach (MedicalProviderInfo info in lstMedicalProvider)
                        {
                            if (info.Name == txtMedicalProvider.Text.Trim())
                            {
                                cmdInsertNewMedBill.Parameters.AddWithValue("@MedicalProvider_Id", info.ID);
                                break;
                            }
                        }

                        cmdInsertNewMedBill.Parameters.AddWithValue("@Account_At_Provider", txtMedBillAccountNoAtProvider.Text.Trim());
                        cmdInsertNewMedBill.Parameters.AddWithValue("@ProviderPhoneNo", txtMedProviderPhoneNo.Text.Trim());
                        cmdInsertNewMedBill.Parameters.AddWithValue("@ProviderContactPerson", txtProviderContactPerson.Text.Trim());
                        cmdInsertNewMedBill.Parameters.AddWithValue("@ProposalLetterSentDate", dtpProposalLetterSentDate.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@HIPPASentDate", dtpHippaSentDate.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@MedicalRecordDate", dtpMedicalRecordDate.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@BillStatus", comboMedBillStatus.SelectedIndex);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@ProofOfPaymentReceivedDate", DateTime.Today);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@OriginalPrescription", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@PersonalResponsibilityCredit", 500);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@WellBeingCareTotal", 0);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@WellBeingCare", 0);
                        //cmdInsertNewMedBill.Parameters.AddWithValue("@Memo", DBNull.Value);
                        cmdInsertNewMedBill.Parameters.AddWithValue("@DueDate", DateTime.Today);

                        if (comboMedBillType.SelectedIndex == 0)        // Medical Bill Type : Medical Bill
                        {
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", DBNull.Value);

                            cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", DBNull.Value);

                            cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", nPatientType);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", comboPendingReason.SelectedIndex);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", comboIneligibleReason.SelectedIndex);

                            cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
                        }
                        else if (comboMedBillType.SelectedIndex == 1)   // Medical Bill Type : Prescription
                        {
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", DBNull.Value);

                            cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", DBNull.Value);

                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", txtPrescriptionName.Text.Trim());
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", txtNumberOfMedication.Text.Trim());
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", txtPrescriptionDescription.Text.Trim());
                            cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
                        }
                        else if (comboMedBillType.SelectedIndex == 2)   // Medical Bill Type : Physical Therapy
                        {
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDrugName", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionNo", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PrescriptionDescription", DBNull.Value);

                            cmdInsertNewMedBill.Parameters.AddWithValue("@PatientTypeId", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@PendingReason", DBNull.Value);
                            cmdInsertNewMedBill.Parameters.AddWithValue("@IneligibleReason", DBNull.Value);

                            int nNumberOfPhysicalTherapy = 0;
                            short result = 0;
                            if (Int16.TryParse(txtNumPhysicalTherapy.Text.Trim(), out result))
                            {
                                nNumberOfPhysicalTherapy = result;
                                cmdInsertNewMedBill.Parameters.AddWithValue("@TotalNumberOfPhysicalTherapy", nNumberOfPhysicalTherapy);
                            }
                            else MessageBox.Show("Please enter a positive integer in Number of Physical Therapy Text Box.", "Alert");

                            cmdInsertNewMedBill.Parameters.AddWithValue("@Note", strNote);
                        }

                        //if (connRN.State == ConnectionState.Closed) connRN.Open();
                        if (connRN.State != ConnectionState.Closed)
                        {
                            connRN.Close();
                            connRN.Open();
                        }
                        else if (connRN.State == ConnectionState.Closed) connRN.Open();
                        int nRowInserted = cmdInsertNewMedBill.ExecuteNonQuery();
                        if (connRN.State != ConnectionState.Closed) connRN.Close();

                        if (nRowInserted == 1)
                        {
                            MessageBox.Show("The Medical Bill has been saved.", "Information");
                        }
                        else if (nRowInserted == 0)
                        {
                            MessageBox.Show("The Medical Bill has not been saved.", "Error");
                        }

                        bIsModified = false;

                        tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                        tbCMMManager.SelectedTab = tbCMMManager.TabPages["tbpgCreateCase"];

                    }
                    else if (ResultMedBillNo.ToString() == strMedBillNo)
                    {
                        // update the med bill

                        String MedBillNo = txtMedBillNo.Text.Trim();
                        String IndividualId = txtIndividualIDMedBill.Text.Trim();

                        String strIllnessId = String.Empty;
                        String strIncidentId = String.Empty;

                        if (txtMedBill_Illness.Text.Trim() != String.Empty)
                        {
                            String IllnessNo = txtMedBill_Illness.Text.Trim();

                            String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

                            SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN);
                            cmdQueryForIllnessId.CommandType = CommandType.Text;

                            cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", IllnessNo);

                            if (connRN.State != ConnectionState.Closed)
                            {
                                connRN.Close();
                                connRN.Open();
                            }
                            else if (connRN.State == ConnectionState.Closed) connRN.Open();
                            Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                            if (connRN.State != ConnectionState.Closed) connRN.Close();

                            if (objIllnessId != null) strIllnessId = objIllnessId.ToString();
                            else
                            {
                                MessageBox.Show("No Illness Id for given Illness No", "Error");
                                return;
                            }
                        }

                        if (txtMedBill_Incident.Text.Trim() != String.Empty)
                        {
                            String IncidentNo = txtMedBill_Incident.Text.Trim();

                            String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

                            SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN);
                            cmdQueryForIncidentId.CommandType = CommandType.Text;

                            cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                            if (connRN.State != ConnectionState.Closed)
                            {
                                connRN.Close();
                                connRN.Open();
                            }
                            else if (connRN.State == ConnectionState.Closed) connRN.Open();
                            Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
                            if (connRN.State != ConnectionState.Closed) connRN.Close();

                            if (objIncidentId != null) strIncidentId = objIncidentId.ToString();
                            else
                            {
                                MessageBox.Show("No Incident Id for given Incident No", "Error");
                                return;
                            }
                        }


                        // Get illness id for ICD 10 Code
                        //String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] " +
                        //                                    "where [dbo].[tbl_illness].[Individual_Id] = @IndividualId and [dbo].[tbl_illness].[ICD_10_Id] = @ICD10Code";

                        //SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN);
                        //cmdQueryForIllnessId.CommandType = CommandType.Text;

                        //cmdQueryForIllnessId.Parameters.AddWithValue("@IndividualId", IndividualId);
                        //cmdQueryForIllnessId.Parameters.AddWithValue("@ICD10Code", txtMedBill_Illness.Text.Trim());

                        ////if (connRN.State == ConnectionState.Closed) connRN.Open();
                        //if (connRN.State != ConnectionState.Closed)
                        //{
                        //    connRN.Close();
                        //    connRN.Open();
                        //}
                        //else if (connRN.State == ConnectionState.Closed) connRN.Open();
                        ////int nIllnessId = Int32.Parse(cmdQueryForIllnessId.ExecuteScalar().ToString());
                        //Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                        //if (connRN.State != ConnectionState.Closed) connRN.Close();

                        //int? nIllnessId = null;

                        //if (objIllnessId != null)
                        //{
                        //    int IllnessIdResult = 0;
                        //    if (Int32.TryParse(objIllnessId.ToString(), NumberStyles.Integer, new CultureInfo("en-US"), out IllnessIdResult)) nIllnessId = IllnessIdResult;
                        //}

                        // Get medical provider id
                        //String strSqlQueryForMedicalProviderId = "select [dbo].[tbl_MedicalProvider].[ID] from [dbo].[tbl_MedicalProvider] where [dbo].[tbl_MedicalProvider].[Name] = @MedicalProviderName";
                        String strSqlQueryForMedicalProviderId = "select [dbo].[account].[ID] from [dbo].[account] where [dbo].[account].[Name] = @MedicalProviderName";


                        SqlCommand cmdQueryForMedicalProviderId = new SqlCommand(strSqlQueryForMedicalProviderId, connSalesforce3);
                        cmdQueryForMedicalProviderId.CommandType = CommandType.Text;

                        cmdQueryForMedicalProviderId.Parameters.AddWithValue("@MedicalProviderName", txtMedicalProvider.Text.Trim());

                        //if (connRN.State == ConnectionState.Closed) connRN.Open();
                        if (connSalesforce3.State != ConnectionState.Closed)
                        {
                            connSalesforce3.Close();
                            connSalesforce3.Open();
                        }
                        else if (connSalesforce3.State == ConnectionState.Closed) connSalesforce3.Open();
                        //String MedicalProviderId = cmdQueryForMedicalProviderId.ExecuteScalar().ToString();
                        Object objMedicalProviderId = cmdQueryForMedicalProviderId.ExecuteScalar();
                        if (connSalesforce3.State != ConnectionState.Closed) connSalesforce3.Close();

                        String MedicalProviderId = String.Empty;

                        if (objMedicalProviderId != null) MedicalProviderId = objMedicalProviderId.ToString();

                        int nPatientType = 0;   // default is outpatient

                        if (rbOutpatient.Checked) nPatientType = 0;
                        else if (rbInpatient.Checked) nPatientType = 1;

                        String strNote = String.Empty;

                        if (comboMedBillType.SelectedItem.ToString() == "Medical Bill")
                        {
                            strNote = txtMedBillNote.Text.Trim();
                        }
                        else if (comboMedBillType.SelectedItem.ToString() == "Prescription")
                        {
                            strNote = txtPrescriptionNote.Text.Trim();
                        }
                        else if (comboMedBillType.SelectedItem.ToString() == "Physical Therapy")
                        {
                            strNote = txtPhysicalTherapyRxNote.Text.Trim();
                        }

                        // Update the Medical Bill
                        String strSqlUpdateMedBill = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[LastModifiedDate] = @NewLastModifiedDate, [dbo].[tbl_medbill].[LastModifiedById] = @NewLastModifiedById, " +
                                                         "[dbo].[tbl_medbill].[Case_Id] = @NewCaseId, [dbo].[tbl_medbill].[Incident_Id] = @NewIncidentId, [dbo].[tbl_medbill].[Illness_Id] = @NewIllnessId, " +
                                                         "[dbo].[tbl_medbill].[BillAmount] = @NewBillAmount, [dbo].[tbl_medbill].[MedBillType_Id] = @NewMedBillType_Id, " +
                                                         "[dbo].[tbl_medbill].[SettlementTotal] = @NewSettlementTotal, [dbo].[tbl_medbill].[Balance] = @NewBalance, " +
                                                         "[dbo].[tbl_medbill].[BillDate] = @NewBillDate, [dbo].[tbl_medbill].[DueDate] = @NewDueDate, [dbo].[tbl_medbill].[TotalSharedAmount] = @NewTotalSharedAmount, " +
                                                         "[dbo].[tbl_medbill].[Guarantor] = @NewGuarantor, " +
                                                         "[dbo].[tbl_medbill].[MedicalProvider_Id] = @NewMedicalProviderId, " +
                                                         "[dbo].[tbl_medbill].[Account_At_Provider] = @NewAccountAtProvider, " +
                                                         "[dbo].[tbl_medbill].[ProviderPhoneNumber] = @NewProviderPhoneNo, " +
                                                         "[dbo].[tbl_medbill].[ProviderContactPerson] = @NewProviderContactPerson, " +
                                                         "[dbo].[tbl_medbill].[ProposalLetterSentDate] = @NewProposalLetterSentDate, " +
                                                         "[dbo].[tbl_medbill].[HIPPASentDate] = @NewHIPPASentDate, " +
                                                         "[dbo].[tbl_medbill].[MedicalRecordDate] = @NewMedicalRecordDate, " +
                                                         "[dbo].[tbl_medbill].[PrescriptionDrugName] = @NewPrescriptionDrugName, [dbo].[tbl_medbill].[PrescriptionNo] = @NewPrescriptionNo, " +
                                                         "[dbo].[tbl_medbill].[PrescriptionDescription] = @NewPrescriptionDescription, " +
                                                         "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy] = @NewTotalNumberOfPhysicalTherapy, " +
                                                         "[dbo].[tbl_medbill].[PatientTypeId] = @NewPatientTypeId, " +
                                                         "[dbo].[tbl_medbill].[Note] = @Note, " +
                                                         "[dbo].[tbl_medbill].[WellBeingCareTotal] = @NewWellBeingCareTotal, [dbo].[tbl_medbill].[WellBeingCare] = @NewWellBeingCare, " +
                                                         "[dbo].[tbl_medbill].[IneligibleReason] = @NewIneligibleReason, [dbo].[tbl_medbill].[PendingReason] = @NewPendingReason, " +
                                                         "[dbo].[tbl_medbill].[OriginalPrescription] = @NewOriginalPrescription " +
                                                         "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and [dbo].[tbl_medbill].[Contact_Id] = @IndividualId";

                        SqlCommand cmdUpdateMedBill = new SqlCommand(strSqlUpdateMedBill, connRN);
                        cmdUpdateMedBill.CommandType = CommandType.Text;

                        cmdUpdateMedBill.Parameters.AddWithValue("@NewLastModifiedDate", DateTime.Today.ToString("MM/dd/yyyy"));
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewLastModifiedById", nLoggedUserId);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewCaseId", txtMedBill_CaseNo.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewIncidentId", strIncidentId);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewIllnessId", strIllnessId);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewBillAmount", Decimal.Parse(txtMedBillAmount.Text.Substring(1).Trim()));
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewMedBillType_Id", comboMedBillType.SelectedIndex + 1);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewSettlementTotal", 0);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewBalance", 0);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewBillDate", dtpBillDate.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewDueDate", dtpDueDate.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalSharedAmount", 0);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewGuarantor", txtMedBillGuarantor.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewMedicalProviderId", MedicalProviderId);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewAccountAtProvider", txtMedBillAccountNoAtProvider.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewProviderPhoneNo", txtMedProviderPhoneNo.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewProviderContactPerson", txtProviderContactPerson.Text.Trim());
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewProposalLetterSentDate", dtpProposalLetterSentDate.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewHIPPASentDate", dtpHippaSentDate.Value);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewMedicalRecordDate", dtpMedicalRecordDate.Value);

                        if (comboMedBillType.SelectedIndex == 0)        // Medical Bill Type - Medical Bill
                        {
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", DBNull.Value);

                            cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", DBNull.Value);

                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", nPatientType);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", comboPendingReason.SelectedIndex);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", comboIneligibleReason.SelectedIndex);

                            cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);

                        }
                        if (comboMedBillType.SelectedIndex == 1)        // Medical Bill Type - Prescription
                        {
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", DBNull.Value);

                            cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", DBNull.Value);

                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", txtPrescriptionName.Text.Trim());
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", txtNumberOfMedication.Text.Trim());
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", txtPrescriptionDescription.Text.Trim());

                            cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);
                        }
                        if (comboMedBillType.SelectedIndex == 2)        // Medical Bill Type - Physical Therapy
                        {
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDrugName", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionNo", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPrescriptionDescription", DBNull.Value);

                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPatientTypeId", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewPendingReason", DBNull.Value);
                            cmdUpdateMedBill.Parameters.AddWithValue("@NewIneligibleReason", DBNull.Value);

                            int nNumberOfPhysicalTherapy = 0;
                            short result = 0;
                            if (Int16.TryParse(txtNumPhysicalTherapy.Text.Trim(), out result))
                            {
                                nNumberOfPhysicalTherapy = result;
                                cmdUpdateMedBill.Parameters.AddWithValue("@NewTotalNumberOfPhysicalTherapy", nNumberOfPhysicalTherapy);
                            }
                            else MessageBox.Show("Please enter a positive integer in Number of Physical Therapy Text Box.", "Alert");

                            cmdUpdateMedBill.Parameters.AddWithValue("@Note", strNote);
                        }


                        cmdUpdateMedBill.Parameters.AddWithValue("@NewWellBeingCareTotal", 0);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewWellBeingCare", 0);
                        cmdUpdateMedBill.Parameters.AddWithValue("@NewOriginalPrescription", String.Empty);
                        cmdUpdateMedBill.Parameters.AddWithValue("@MedBillNo", MedBillNo);
                        cmdUpdateMedBill.Parameters.AddWithValue("@IndividualId", IndividualId);

                        //if (connRN.State == ConnectionState.Closed) connRN.Open();
                        if (connRN.State != ConnectionState.Closed)
                        {
                            connRN.Close();
                            connRN.Open();
                        }
                        else if (connRN.State == ConnectionState.Closed) connRN.Open();
                        int nAffectedRow = cmdUpdateMedBill.ExecuteNonQuery();
                        if (connRN.State != ConnectionState.Closed) connRN.Close();

                        if (nAffectedRow == 1)
                        {
                            MessageBox.Show("The Medical Bill has been updated.", "Information");
                        }
                        else if (nAffectedRow == 0)
                        {
                            MessageBox.Show("The Medical Bill has not been updated.", "Error");
                        }

                        bIsModified = false;

                        tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                        tbCMMManager.SelectedIndex = 4;

                    }
                }
                else if (dlgResult == DialogResult.No)
                {
                    tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                    tbCMMManager.SelectedTab = tbCMMManager.TabPages["tbpgCreateCase"];
                    return;
                }
            }
            else
            {
                return;
            }

        }

        private void btnIndViewUpdateUpperRight_Click(object sender, EventArgs e)
        {
            Cursor.Current = Cursors.WaitCursor;

            String IndividualIdForUpdate = txtIndividualID.Text.Trim();

            //int nPreferredLanguage = 0;
            String PreferredLanguage = String.Empty;

            if (rbKorean.Checked) PreferredLanguage = "Korean";
            else if (rbEnglish.Checked) PreferredLanguage = "English";
            else
            {
                MessageBox.Show("Please selected the preferred language.", "Error");
                return;
            }

            String PreferredCommMethod = String.Empty;
            if (cbPreferredCommunication.SelectedItem != null) PreferredCommMethod = cbPreferredCommunication.SelectedItem.ToString();
            else
            {
                MessageBox.Show("Please select the preferred communication method.", "Error");
                return;
            }

            String ReimbursementMethod = String.Empty;
            if (cbReimbursementMethod.SelectedItem != null) ReimbursementMethod = cbReimbursementMethod.SelectedItem.ToString();
            else
            {
                MessageBox.Show("Please select the reimbursement method.", "Error");
                return;
            }

            String strSqlUpdateIndividualInfo = "update [dbo].[contact] set [dbo].[contact].[PreferredLanguage__c] = @PreferredLanguage, " +
                                                "[dbo].[contact].[PreferredCommunicationMethod__c] = @PreferredCommMethod, " +
                                                "[dbo].[contact].[FirstName] = @FirstName, " +
                                                "[dbo].[contact].[MiddleName] = @MiddleName, " +
                                                "[dbo].[contact].[LastName] = @LastName, " +
                                                "[dbo].[contact].[Birthdate] = @BirthDate, " +
                                                "[dbo].[contact].[CMM_Gender__c] = @Gender, " +
                                                "[dbo].[contact].[Social_Security_Number__c] = @SSN, " +
                                                "[dbo].[contact].[MailingStreet] = @ShippingStreet, " +
                                                "[dbo].[contact].[MailingCity] = @ShippingCity, " +
                                                "[dbo].[contact].[MailingState] = @ShippingState, " +
                                                "[dbo].[contact].[MailingPostalCode] = @ShippingZipCode, " +
                                                "[dbo].[contact].[OtherStreet] = @BillingStreet, " +
                                                "[dbo].[contact].[OtherCity] = @BillingCity, " +
                                                "[dbo].[contact].[OtherState] = @BillingState, " +
                                                "[dbo].[contact].[OtherPostalCode] = @BillingZipCode, " +
                                                "[dbo].[contact].[Email] = @Email, " +
                                                "[dbo].[contact].[Phone] = @Phone, " +
                                                "[dbo].[contact].[HomePhone] = @HomePhone, " +
                                                "[dbo].[contact].[PowerOfAttorney__c] = @PowerOfAttorney, " +
                                                "[dbo].[contact].[Relationship_POA__c] = @Relationship, " +
                                                "[dbo].[contact].[ReimbursementMethod__c] = @ReimbursementMethod, " +
                                                "[dbo].[contact].[BankName__c] = @BankName, " +
                                                "[dbo].[contact].[RoutingNumber__c] = @BankRoutingNumber, " +
                                                "[dbo].[contact].[AccountNumber__c] = @AccountNumber, " +
                                                "[dbo].[contact].[AccountHolder__c] = @AccountHolder, " +
                                                "[dbo].[contact].[c4g_Church__c] = @ChurchId " +
                                                "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

            SqlCommand cmdUpdateIndividualInfo = new SqlCommand(strSqlUpdateIndividualInfo, connSalesforce);
            cmdUpdateIndividualInfo.CommandType = CommandType.Text;

            cmdUpdateIndividualInfo.Parameters.AddWithValue("@PreferredLanguage", PreferredLanguage);
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@PreferredCommMethod", PreferredCommMethod);
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@FirstName", txtFirstName.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@MiddleName", txtMiddleName.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@LastName", txtLastName.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@BirthDate", dtpBirthDate.Value);
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@Gender", cbGender.SelectedIndex);
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@SSN", txtIndividualSSN.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingStreet", txtStreetAddress1.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingCity", txtCity1.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingState", txtState1.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingZipCode", txtZip1.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingStreet", txtStreetAddress2.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingCity", txtCity2.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingState", txtState2.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingZipCode", txtZip2.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@Email", txtEmail.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@Phone", txtCellPhone1.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@HomePhone", txtBusinessPhone.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@PowerOfAttorney", txtPowerOfAttorney.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@Relationship", txtRelationship.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@ReimbursementMethod", ReimbursementMethod);
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@BankName", txtBankName.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@BankRoutingNumber", txtBankRoutingNo.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@AccountNumber", txtAccountNo.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@AccountHolder", txtAccountHolder.Text.Trim());

            if (txtIndChurchName.Text.Trim() != String.Empty)
            {
                Boolean bInChurchList = false;
                foreach (ChurchInfo info in lstChurchInfo)
                {
                    if (info.Name.Trim() == txtIndChurchName.Text.Trim())
                    {
                        cmdUpdateIndividualInfo.Parameters.AddWithValue("@ChurchId", info.ID);
                        bInChurchList = true;
                        break;
                    }
                }
                if (!bInChurchList)
                {
                    MessageBox.Show("The church name is not in the list.", "Error");
                    //cmdUpdateIndividualInfo.Parameters.AddWithValue("@ChurchId", DBNull.Value);
                    return;
                }
            }
            else
            {
                cmdUpdateIndividualInfo.Parameters.AddWithValue("@ChurchId", DBNull.Value);
            }

            cmdUpdateIndividualInfo.Parameters.AddWithValue("@IndividualId", IndividualIdForUpdate);

            if (connSalesforce.State == ConnectionState.Open)
            {
                connSalesforce.Close();
                connSalesforce.Open();
            }
            else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

            int nRowAffected = cmdUpdateIndividualInfo.ExecuteNonQuery();
            if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

            if (nRowAffected == 1)
            {
                MessageBox.Show("The individual information has been updated.", "Information");
                return;
            }
            else
            {
                MessageBox.Show("The individual information has not been updated.", "Error");
                return;
            }
            Cursor.Current = Cursors.Default;
        }



        private void btnIndViewCancelUpperRight_Click(object sender, EventArgs e)
        {
            DialogResult dlgResult = MessageBox.Show("Do you want to close Individual Page?", "Alert", MessageBoxButtons.YesNo);

            if (dlgResult == DialogResult.Yes)
            {

                // This if statement should be commented out
                //if (tbCMMManager.Contains(tbpgCaseView))
                //{
                //    MessageBox.Show("Case View page is open. Close Case View page first.", "Alert");
                //    return;
                //}
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                //if (tbCMMManager.Contains(tbpgMedicalBill))
                //{
                //    DialogResult dlgSaveMedBill = MessageBox.Show("Do you want to save the Medical Bill?", "Alert", MessageBoxButtons.YesNo);

                //    if (dlgSaveMedBill == DialogResult.Yes)
                //    {
                //        SaveMedBill();
                //        tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                //        SaveCase();
                //        tbCMMManager.TabPages.Remove(tbpgCreateCase);
                //        tbCMMManager.TabPages.Remove(tbpgCaseView);
                //    }
                //    else if (dlgSaveMedBill == DialogResult.No)
                //    {
                //        tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                //        DialogResult dlgSaveCase = MessageBox.Show("Do you want to save the Case?", "Alert", MessageBoxButtons.YesNo);
                //        if (dlgSaveCase == DialogResult.Yes)
                //        {
                //            SaveCase();
                //            tbCMMManager.TabPages.Remove(tbpgCreateCase);
                //            tbCMMManager.TabPages.Remove(tbpgCaseView);
                //        }
                //        else if (dlgSaveCase == DialogResult.No)
                //        {
                //            tbCMMManager.TabPages.Remove(tbpgCreateCase);
                //            tbCMMManager.TabPages.Remove(tbpgCaseView);

                //            DialogResult dlgSaveIndividual = MessageBox.Show("Do you want to update individual information?", "Alert", MessageBoxButtons.YesNo);
                //            if (dlgSaveIndividual == DialogResult.Yes)
                //            {
                //                UpdateIndividualInfo();
                //                tbCMMManager.TabPages.Remove(tbpgIndividual);
                //            }
                //            else if (dlgSaveIndividual == DialogResult.No)
                //            {
                //                tbCMMManager.TabPages.Remove(tbpgIndividual);
                //            }
                //        }
                //    }
                //}
                //else if (tbCMMManager.Contains(tbpgCreateCase))
                //{
                //    DialogResult dlgSaveCase = MessageBox.Show("Do you want to save the Case?", "Alert", MessageBoxButtons.YesNo);

                //    if (dlgSaveCase == DialogResult.Yes)
                //    {
                //        SaveCase();
                //        tbCMMManager.TabPages.Remove(tbpgCreateCase);
                //        tbCMMManager.TabPages.Remove(tbpgCaseView);

                //        DialogResult dlgSaveIndividualInfo = MessageBox.Show("Do you want to update the Individual Information?", "Alert", MessageBoxButtons.YesNo);
                //        if (dlgSaveIndividualInfo == DialogResult.Yes)
                //        {
                //            UpdateIndividualInfo();
                //            tbCMMManager.TabPages.Remove(tbpgIndividual);
                //        }
                //        else if (dlgSaveIndividualInfo == DialogResult.No)
                //        {
                //            tbCMMManager.TabPages.Remove(tbpgIndividual);
                //        }

                //    }
                //    else if (dlgSaveCase == DialogResult.No)
                //    {
                //        tbCMMManager.TabPages.Remove(tbpgCreateCase);
                //        tbCMMManager.TabPages.Remove(tbpgCaseView);

                //        DialogResult dlgSaveIndividualInfo = MessageBox.Show("Do you want to update the Individual Information?", "Alert", MessageBoxButtons.YesNo);
                //        if (dlgSaveIndividualInfo == DialogResult.Yes)
                //        {
                //            UpdateIndividualInfo();
                //            tbCMMManager.TabPages.Remove(tbpgIndividual);
                //        }
                //        else if (dlgSaveIndividualInfo == DialogResult.No)
                //        {
                //            tbCMMManager.TabPages.Remove(tbpgIndividual);
                //        }
                //    }
                //}

                DialogResult dlgSaveResult = MessageBox.Show("Do you want to update the Individual Information?", "Alert", MessageBoxButtons.YesNo);

                if (dlgSaveResult == DialogResult.Yes)
                {
                    // Save individual info
                    String IndividualIdForUpdate = txtIndividualID.Text.Trim();

                    int nPreferredLanguage = 0;

                    if (rbKorean.Checked) nPreferredLanguage = 0;
                    else if (rbEnglish.Checked) nPreferredLanguage = 1;

                    String strSqlUpdateIndividualInfo = "update [dbo].[contact] set [dbo].[contact].[PreferredLanguage] = @PreferredLanguage, " +
                                                        "[dbo].[contact].[PreferredCommunicationMethod] = @PreferredCommMethod, " +
                                                        "[dbo].[contact].[FirstName] = @FirstName, " +
                                                        "[dbo].[contact].[MiddleName] = @MiddleName, " +
                                                        "[dbo].[contact].[LastName] = @LastName, " +
                                                        "[dbo].[contact].[Birthdate] = @BirthDate, " +
                                                        "[dbo].[contact].[CMM_Gender__c] = @Gender, " +
                                                        "[dbo].[contact].[Social_Security_Number__c] = @SSN, " +
                                                        "[dbo].[contact].[MailingStreet] = @ShippingStreet, " +
                                                        "[dbo].[contact].[MailingCity] = @ShippingCity, " +
                                                        "[dbo].[contact].[MailingState] = @ShippingState, " +
                                                        "[dbo].[contact].[MailingPostalCode] = @ShippingZipCode, " +
                                                        "[dbo].[contact].[OtherStreet] = @BillingStreet, " +
                                                        "[dbo].[contact].[OtherCity] = @BillingCity, " +
                                                        "[dbo].[contact].[OtherState] = @BillingState, " +
                                                        "[dbo].[contact].[OtherPostalCode] = @BillingZipCode, " +
                                                        "[dbo].[contact].[Email] = @Email, " +
                                                        "[dbo].[contact].[Phone] = @Phone, " +
                                                        "[dbo].[contact].[HomePhone] = @HomePhone, " +
                                                        "[dbo].[contact].[PowerOfAttorney] = @PowerOfAttorney, " +
                                                        "[dbo].[contact].[Relationship] = @Relationship, " +
                                                        "[dbo].[contact].[ReimbursementMethod] = @ReimbursementMethod, " +
                                                        "[dbo].[contact].[c4g_Church__c] = @ChurchId " +
                                                        "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                    SqlCommand cmdUpdateIndividualInfo = new SqlCommand(strSqlUpdateIndividualInfo, connSalesforce);
                    cmdUpdateIndividualInfo.CommandType = CommandType.Text;

                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@PreferredLanguage", nPreferredLanguage);
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@PreferredCommMethod", cbPreferredCommunication.SelectedIndex);
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@FirstName", txtFirstName.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@MiddleName", txtMiddleName.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@LastName", txtLastName.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@BirthDate", dtpBirthDate.Value);
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@Gender", cbGender.SelectedIndex);
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@SSN", txtIndividualSSN.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingStreet", txtStreetAddress1.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingCity", txtCity1.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingState", txtState1.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingZipCode", txtZip1.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingStreet", txtStreetAddress2.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingCity", txtCity2.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingState", txtState2.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingZipCode", txtZip2.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@Email", txtEmail.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@Phone", txtCellPhone1.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@HomePhone", txtBusinessPhone.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@PowerOfAttorney", txtPowerOfAttorney.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@Relationship", txtRelationship.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@ReimbursementMethod", cbReimbursementMethod.SelectedIndex);

                    if (txtIndChurchName.Text.Trim() != String.Empty)
                    {
                        foreach (ChurchInfo info in lstChurchInfo)
                        {
                            if (info.Name.Trim() == txtIndChurchName.Text.Trim())
                            {
                                cmdUpdateIndividualInfo.Parameters.AddWithValue("@ChurchId", info.ID);
                                break;
                            }
                        }
                    }
                    else cmdUpdateIndividualInfo.Parameters.AddWithValue("@ChurchId", DBNull.Value);

                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@IndividualId", IndividualIdForUpdate);

                    if (connSalesforce.State == ConnectionState.Open)
                    {
                        connSalesforce.Close();
                        connSalesforce.Open();
                    }
                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                    int nRowAffected = cmdUpdateIndividualInfo.ExecuteNonQuery();
                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                    if (nRowAffected == 1)
                    {
                        MessageBox.Show("The individual information has been updated.", "Information");
                    }
                    else if (nRowAffected == 0)
                    {
                        MessageBox.Show("The individual information has not been updated.", "Error");
                    }

                    if (tbCMMManager.Contains(tbpgMedicalBill)) tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                    if (tbCMMManager.Contains(tbpgCreateCase)) tbCMMManager.TabPages.Remove(tbpgCreateCase);
                    if (tbCMMManager.Contains(tbpgCaseView)) tbCMMManager.TabPages.Remove(tbpgCaseView);
                    if (tbCMMManager.Contains(tbpgIndividual)) tbCMMManager.TabPages.Remove(tbpgIndividual);
                    tbCMMManager.SelectedIndex = 1;
                }
                else
                {
                    if (tbCMMManager.Contains(tbpgMedicalBill)) tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                    if (tbCMMManager.Contains(tbpgCreateCase)) tbCMMManager.TabPages.Remove(tbpgCreateCase);
                    if (tbCMMManager.Contains(tbpgCaseView)) tbCMMManager.TabPages.Remove(tbpgCaseView);
                    if (tbCMMManager.Contains(tbpgIndividual)) tbCMMManager.TabPages.Remove(tbpgIndividual);
                    tbCMMManager.SelectedIndex = 1;
                    return;
                }
            }
            else return;
        }

        //private void SaveMedBill()
        //{

        //}

        //private void SaveCase()
        //{

        //}

        //private void UpdateIndividualInfo()
        //{

        //}

        private void btnIndViewCancelLowerRight_Click(object sender, EventArgs e)
        {
            DialogResult dlgResult = MessageBox.Show("Do you want to close Individual Page?", "Alert", MessageBoxButtons.YesNo);

            if (dlgResult == DialogResult.Yes)
            {
                if (tbCMMManager.Contains(tbpgCaseView))
                {
                    MessageBox.Show("Case View page is open. Close Case View page first.", "Alert");
                    return;
                }

                DialogResult dlgSaveResult = MessageBox.Show("Do you want to update the Individual Information?", "Alert", MessageBoxButtons.YesNo);

                if (dlgSaveResult == DialogResult.Yes)
                {
                    // Save individual info
                    String IndividualIdForUpdate = txtIndividualID.Text.Trim();

                    int nPreferredLanguage = 0;

                    if (rbKorean.Checked) nPreferredLanguage = 0;
                    else if (rbEnglish.Checked) nPreferredLanguage = 1;

                    String strSqlUpdateIndividualInfo = "update [dbo].[contact] set [dbo].[contact].[PreferredLanguage] = @PreferredLanguage, " +
                                                        "[dbo].[contact].[PreferredCommunicationMethod] = @PreferredCommMethod, " +
                                                        "[dbo].[contact].[FirstName] = @FirstName, " +
                                                        "[dbo].[contact].[MiddleName] = @MiddleName, " +
                                                        "[dbo].[contact].[LastName] = @LastName, " +
                                                        "[dbo].[contact].[Birthdate] = @BirthDate, " +
                                                        "[dbo].[contact].[CMM_Gender__c] = @Gender, " +
                                                        "[dbo].[contact].[Social_Security_Number__c] = @SSN, " +
                                                        "[dbo].[contact].[MailingStreet] = @ShippingStreet, " +
                                                        "[dbo].[contact].[MailingCity] = @ShippingCity, " +
                                                        "[dbo].[contact].[MailingState] = @ShippingState, " +
                                                        "[dbo].[contact].[MailingPostalCode] = @ShippingZipCode, " +
                                                        "[dbo].[contact].[OtherStreet] = @BillingStreet, " +
                                                        "[dbo].[contact].[OtherCity] = @BillingCity, " +
                                                        "[dbo].[contact].[OtherState] = @BillingState, " +
                                                        "[dbo].[contact].[OtherPostalCode] = @BillingZipCode, " +
                                                        "[dbo].[contact].[Email] = @Email, " +
                                                        "[dbo].[contact].[Phone] = @Phone, " +
                                                        "[dbo].[contact].[HomePhone] = @HomePhone, " +
                                                        "[dbo].[contact].[PowerOfAttorney] = @PowerOfAttorney, " +
                                                        "[dbo].[contact].[Relationship] = @Relationship, " +
                                                        "[dbo].[contact].[ReimbursementMethod] = @ReimbursementMethod, " +
                                                        "[dbo].[contact].[c4g_Church__c] = @ChurchId " +
                                                        "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                    SqlCommand cmdUpdateIndividualInfo = new SqlCommand(strSqlUpdateIndividualInfo, connSalesforce);
                    cmdUpdateIndividualInfo.CommandType = CommandType.Text;

                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@PreferredLanguage", nPreferredLanguage);
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@PreferredCommMethod", cbPreferredCommunication.SelectedIndex);
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@FirstName", txtFirstName.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@MiddleName", txtMiddleName.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@LastName", txtLastName.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@BirthDate", dtpBirthDate.Value);
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@Gender", cbGender.SelectedIndex);
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@SSN", txtIndividualSSN.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingStreet", txtStreetAddress1.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingCity", txtCity1.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingState", txtState1.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingZipCode", txtZip1.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingStreet", txtStreetAddress2.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingCity", txtCity2.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingState", txtState2.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingZipCode", txtZip2.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@Email", txtEmail.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@Phone", txtCellPhone1.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@HomePhone", txtBusinessPhone.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@PowerOfAttorney", txtPowerOfAttorney.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@Relationship", txtRelationship.Text.Trim());
                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@ReimbursementMethod", cbReimbursementMethod.SelectedIndex);

                    if (txtIndChurchName.Text.Trim() != String.Empty)
                    {
                        foreach (ChurchInfo info in lstChurchInfo)
                        {
                            if (info.Name.Trim() == txtIndChurchName.Text.Trim())
                            {
                                cmdUpdateIndividualInfo.Parameters.AddWithValue("@ChurchId", info.ID);
                                break;
                            }
                        }
                    }
                    else cmdUpdateIndividualInfo.Parameters.AddWithValue("@ChurchId", DBNull.Value);

                    cmdUpdateIndividualInfo.Parameters.AddWithValue("@IndividualId", IndividualIdForUpdate);

                    if (connSalesforce.State == ConnectionState.Open)
                    {
                        connSalesforce.Close();
                        connSalesforce.Open();
                    }
                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                    int nRowAffected = cmdUpdateIndividualInfo.ExecuteNonQuery();
                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                    if (nRowAffected == 1)
                    {
                        MessageBox.Show("The individual information has been updated.", "Information");
                    }
                    else if (nRowAffected == 0)
                    {
                        MessageBox.Show("The individual information has not been updated.", "Error");
                    }
                }
                tbCMMManager.TabPages.Remove(tbpgIndividual);
                tbCMMManager.SelectedIndex = 1;
            }
            else return;
        }

        private void btnCloseCaseView_Click(object sender, EventArgs e)
        {
            //if (tbCMMManager.Contains(tbpgCreateCase))
            //{
            //    MessageBox.Show("Case Page is open. Close Case Page first.", "Alert");
            //    return;
            //}

            DialogResult dlgResult = MessageBox.Show("Do you want to close Case View?", "Alert", MessageBoxButtons.YesNo);

            if (dlgResult == DialogResult.Yes)
            {
                if (tbCMMManager.Contains(tbpgMedicalBill)) tbCMMManager.TabPages.Remove(tbpgMedicalBill);
                if (tbCMMManager.Contains(tbpgCreateCase)) tbCMMManager.TabPages.Remove(tbpgCreateCase);
                if (tbCMMManager.Contains(tbpgCaseView)) tbCMMManager.TabPages.Remove(tbpgCaseView);
                tbCMMManager.SelectedIndex = 2;
                return;
            }
            else return;

        }

        //private void btnCaseViewIndividual_Click(object sender, EventArgs e)
        //{
        //    if (tbCMMManager.TabPages.Contains(tbpgCaseView))
        //    {
        //        MessageBox.Show("Case View Page is already open. Close Case View page first.", "Alert");
        //        return;
        //    }
        //    else
        //    {
        //        tbCMMManager.TabPages.Insert(3, tbpgCaseView);
        //        tbCMMManager.SelectedIndex = 3;
        //    }
        //}

        private void btnIndViewUpdateLowerRight_Click(object sender, EventArgs e)
        {
            Cursor.Current = Cursors.WaitCursor;

            String IndividualIdForUpdate = txtIndividualID.Text.Trim();

            int nPreferredLanguage = 0;

            if (rbKorean.Checked) nPreferredLanguage = 0;
            else if (rbEnglish.Checked) nPreferredLanguage = 1;

            String strSqlUpdateIndividualInfo = "update [dbo].[contact] set [dbo].[contact].[PreferredLanguage] = @PreferredLanguage, " +
                                                "[dbo].[contact].[PreferredCommunicationMethod] = @PreferredCommMethod, " +
                                                "[dbo].[contact].[FirstName] = @FirstName, " +
                                                "[dbo].[contact].[MiddleName] = @MiddleName, " +
                                                "[dbo].[contact].[LastName] = @LastName, " +
                                                "[dbo].[contact].[Birthdate] = @BirthDate, " +
                                                "[dbo].[contact].[CMM_Gender__c] = @Gender, " +
                                                "[dbo].[contact].[Social_Security_Number__c] = @SSN, " +
                                                "[dbo].[contact].[MailingStreet] = @ShippingStreet, " +
                                                "[dbo].[contact].[MailingCity] = @ShippingCity, " +
                                                "[dbo].[contact].[MailingState] = @ShippingState, " +
                                                "[dbo].[contact].[MailingPostalCode] = @ShippingZipCode, " +
                                                "[dbo].[contact].[OtherStreet] = @BillingStreet, " +
                                                "[dbo].[contact].[OtherCity] = @BillingCity, " +
                                                "[dbo].[contact].[OtherState] = @BillingState, " +
                                                "[dbo].[contact].[OtherPostalCode] = @BillingZipCode, " +
                                                "[dbo].[contact].[Email] = @Email, " +
                                                "[dbo].[contact].[Phone] = @Phone, " +
                                                "[dbo].[contact].[HomePhone] = @HomePhone, " +
                                                "[dbo].[contact].[PowerOfAttorney] = @PowerOfAttorney, " +
                                                "[dbo].[contact].[Relationship] = @Relationship, " +
                                                "[dbo].[contact].[ReimbursementMethod] = @ReimbursementMethod, " +
                                                "[dbo].[contact].[c4g_Church__c] = @ChurchId " +
                                                "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

            SqlCommand cmdUpdateIndividualInfo = new SqlCommand(strSqlUpdateIndividualInfo, connSalesforce);
            cmdUpdateIndividualInfo.CommandType = CommandType.Text;

            cmdUpdateIndividualInfo.Parameters.AddWithValue("@PreferredLanguage", nPreferredLanguage);
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@PreferredCommMethod", cbPreferredCommunication.SelectedIndex);
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@FirstName", txtFirstName.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@MiddleName", txtMiddleName.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@LastName", txtLastName.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@BirthDate", dtpBirthDate.Value);
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@Gender", cbGender.SelectedIndex);
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@SSN", txtIndividualSSN.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingStreet", txtStreetAddress1.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingCity", txtCity1.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingState", txtState1.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@ShippingZipCode", txtZip1.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingStreet", txtStreetAddress2.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingCity", txtCity2.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingState", txtState2.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@BillingZipCode", txtZip2.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@Email", txtEmail.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@Phone", txtCellPhone1.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@HomePhone", txtBusinessPhone.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@PowerOfAttorney", txtPowerOfAttorney.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@Relationship", txtRelationship.Text.Trim());
            cmdUpdateIndividualInfo.Parameters.AddWithValue("@ReimbursementMethod", cbReimbursementMethod.SelectedIndex);

            if (txtIndChurchName.Text.Trim() != String.Empty)
            {
                Boolean bInChurchList = false;
                foreach (ChurchInfo info in lstChurchInfo)
                {
                    if (info.Name.Trim() == txtIndChurchName.Text.Trim())
                    {
                        cmdUpdateIndividualInfo.Parameters.AddWithValue("@ChurchId", info.ID);
                        bInChurchList = true;
                        break;
                    }
                }
                if (!bInChurchList)
                {
                    MessageBox.Show("The church name is not in the list.", "Error");
                    //cmdUpdateIndividualInfo.Parameters.AddWithValue("@ChurchId", DBNull.Value);
                    return;
                }
            }
            else
            {
                cmdUpdateIndividualInfo.Parameters.AddWithValue("@ChurchId", DBNull.Value);
            }

            cmdUpdateIndividualInfo.Parameters.AddWithValue("@IndividualId", IndividualIdForUpdate);

            if (connSalesforce.State == ConnectionState.Open)
            {
                connSalesforce.Close();
                connSalesforce.Open();
            }
            else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

            int nRowAffected = cmdUpdateIndividualInfo.ExecuteNonQuery();
            if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

            if (nRowAffected == 1)
            {
                MessageBox.Show("The individual information has been updated.", "Information");
                return;
            }
            else
            {
                MessageBox.Show("The individual information has not been updated.", "Error");
                return;
            }

            Cursor.Current = Cursors.Default;
        }

        private void chkNPF_CaseCreationPage_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox chk = sender as CheckBox;

            if (chk.Checked) btnBrowseNPF.Enabled = true;
            else btnBrowseNPF.Enabled = false;
        }

        private void chkIB_CaseCreationPage_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox chk = sender as CheckBox;

            if (chk.Checked) btnBrowseIB.Enabled = true;
            else btnBrowseIB.Enabled = false;
        }

        private void chkPoP_CaseCreationPage_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox chk = sender as CheckBox;

            if (chk.Checked) btnBrowsePoP.Enabled = true;
            else btnBrowsePoP.Enabled = false;
        }

        private void chkMedicalRecordCaseCreationPage_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox chk = sender as CheckBox;

            if (chk.Checked) btnBrowseMR.Enabled = true;
            else btnBrowseMR.Enabled = false;
        }

        private void chkOtherDocCaseCreationPage_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox chk = sender as CheckBox;

            if (chk.Checked) btnBrowseUnknownDoc.Enabled = true;
            else btnBrowseUnknownDoc.Enabled = false;
        }

        private void comboMedBillStatus_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox medbill_status = sender as ComboBox;

            if (medbill_status.SelectedIndex == (int)MedBillStatus.Pending ||
                medbill_status.SelectedIndex == (int)MedBillStatus.CMMPendingPayment)
            {
                cbMedBillClosed.SelectedIndex = 0;
                cbMedBillClosed.Enabled = false;
            }
            else
            {
                cbMedBillClosed.SelectedIndex = 1;
                cbMedBillClosed.Enabled = true;
            }
        }

        private void tbpgIndividual_Click(object sender, EventArgs e)
        {

        }

        private void tbpgMedBillView_Click(object sender, EventArgs e)
        {

        }

        private void gvIllnessList_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex <= -1) return;

            DataGridView gvIllness = (DataGridView)sender;

            String IndividualId = txtIllnessViewIndId.Text.Trim();
            String IllnessNo = gvIllness["Illness_IllnessNo", e.RowIndex]?.Value?.ToString();

            frmIllnessCreationPage frm = new frmIllnessCreationPage();
            frm.mode = IllnessMode.Edit;
            frm.nLoggedInUserId = nLoggedUserId;
            frm.strIndividualNo = IndividualId;
            frm.IllnessNo = IllnessNo;

            frm.ShowDialog();
        }

        private void gvIncidentList_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex <= -1) return;

            DataGridView gvIncident = (DataGridView)sender;

            String IllnessId = String.Empty;
            String IllnessNo = gvIncident["Incident_IllnessNo", e.RowIndex]?.Value?.ToString();
            String IncidentId = String.Empty;
            String IncidentNo = gvIncident["Incident_IncidentNo", e.RowIndex]?.Value?.ToString();
            String CaseId = gvIncident["Incident_CaseId", e.RowIndex]?.Value?.ToString();
            String IndividualId = txtIncidentViewIndId.Text.Trim();

            String strSqlQueryForIllnessId = "select [dbo].[tbl_illness].[Illness_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[IllnessNo] = @IllnessNo";

            SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN);
            cmdQueryForIllnessId.CommandType = CommandType.Text;

            cmdQueryForIllnessId.Parameters.AddWithValue("@IllnessNo", IllnessNo);
            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
            if (connRN.State == ConnectionState.Open) connRN.Close();
            IllnessId = objIllnessId?.ToString();

            String strSqlQueryForIncidentId = "select [dbo].[tbl_incident].[Incident_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[IncidentNo] = @IncidentNo";

            SqlCommand cmdQueryForIncidentId = new SqlCommand(strSqlQueryForIncidentId, connRN);
            cmdQueryForIncidentId.CommandType = CommandType.Text;

            cmdQueryForIncidentId.Parameters.AddWithValue("@IncidentNo", IncidentNo);

            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            Object objIncidentId = cmdQueryForIncidentId.ExecuteScalar();
            if (connRN.State == ConnectionState.Open) connRN.Close();
            IncidentId = objIncidentId?.ToString();

            frmIncidentCreationPage frmIncident = new frmIncidentCreationPage();

            frmIncident.strIllnessId = IllnessId;
            frmIncident.strIncidentId = IncidentId;
            frmIncident.strIncidentNo = IncidentNo;
            frmIncident.strCaseId = CaseId;
            frmIncident.strIndividualId = IndividualId;
            frmIncident.mode = frmIncidentCreationPage.IncidentMode.Edit;

            frmIncident.ShowDialog();

        }

        private void gvMedBillList_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex <= -1) return;

            if (gvMedBillList.Rows.Count > 0)
            {
                InitializeMedBillTabOnNewMedBill();

                comboPendingReason.Items.Clear();
                if (dicPendingReason.Count > 0)
                {
                    for (int i = 0; i < dicPendingReason.Count; i++)
                    {
                        comboPendingReason.Items.Add(dicPendingReason[i]);
                    }
                    comboPendingReason.SelectedIndex = 0;
                }

                comboIneligibleReason.Items.Clear();
                if (dicIneligibleReason.Count > 0)
                {
                    for (int i = 0; i < dicIneligibleReason.Count; i++)
                    {
                        comboIneligibleReason.Items.Add(dicIneligibleReason[i]);
                    }
                    comboIneligibleReason.SelectedIndex = 0;
                }

                String strCaseNameSelected = String.Empty;
                String strPatientLastName = IndividualForMedBill.strLastName;
                String strPatientFirstName = IndividualForMedBill.strFirstName;
                String strPatientMiddleName = IndividualForMedBill.strMiddleName;
                String strDateOfBirth = IndividualForMedBill.dtBirthDate.Value.ToString("MM/dd/yyyy");
                String strSSN = IndividualForMedBill.strSSN;
                String strStreetAddr = IndividualForMedBill.strShippingStreetAddress;
                String strCity = IndividualForMedBill.strShippingCity;
                String strState = IndividualForMedBill.strShippingState;
                String strZip = IndividualForMedBill.strShippingZip;


                InitializeMedBillTabOnNewMedBill();

                //nRowSelected = gvProcessingCaseNo.CurrentCell.RowIndex;

                String IndividualId = txtMedBillViewIndId.Text.Trim();

                txtIndividualIDMedBill.Text = IndividualId;

                if (strPatientMiddleName != String.Empty) txtPatientNameMedBill.Text = strPatientLastName + ", " + strPatientFirstName + " " + strPatientMiddleName;
                else txtPatientNameMedBill.Text = strPatientLastName + ", " + strPatientFirstName;

                txtMedBillDOB.Text = strDateOfBirth;
                txtMedBillSSN.Text = strSSN;
                txtMedBillAddress.Text = strStreetAddr + ", " + strCity + ", " + strState + " " + strZip;

                String strSqlQueryForCaseStatus = "select [dbo].[tbl_case_status_code].[CaseStatusValue] from [dbo].[tbl_case_status_code]";
                SqlCommand cmdQueryForCaseStatus = new SqlCommand(strSqlQueryForCaseStatus, connRN4);
                cmdQueryForCaseStatus.CommandType = CommandType.Text;

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrCaseStatus = cmdQueryForCaseStatus.ExecuteReader();
                cbCaseStatus.Items.Clear();
                if (rdrCaseStatus.HasRows)
                {
                    while (rdrCaseStatus.Read())
                    {
                        cbCaseStatus.Items.Add(rdrCaseStatus.GetString(0));
                    }
                }
                rdrCaseStatus.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                DataGridView gvMedBill = (DataGridView)sender;

                String CaseId = gvMedBill["MedBill_CaseId", e.RowIndex]?.Value?.ToString();
                String MedBillNo = gvMedBill["MedBill_BillNo", e.RowIndex]?.Value?.ToString();

                String strSqlQueryForDocumentsInfo = "select [dbo].[tbl_case].[NPF_Form], [dbo].[tbl_case].[NPF_Receiv_Date], " +
                                         "[dbo].[tbl_case].[IB_Form], [dbo].[tbl_case].[IB_Receiv_Date], " +
                                         "[dbo].[tbl_case].[POP_Form], [dbo].[tbl_case].[POP_Receiv_Date], " +
                                         "[dbo].[tbl_case].[MedRec_Form], [dbo].[tbl_case].[MedRec_Receiv_Date], " +
                                         "[dbo].[tbl_case].[Unknown_Form], [dbo].[tbl_case].[Unknown_Receiv_Date] " +
                                         "from [dbo].[tbl_case] " +
                                         "where [dbo].[tbl_case].[Case_Name] = @CaseId and " +
                                         "[dbo].[tbl_case].[Contact_ID] = @IndividualId and " +
                                         "[dbo].[tbl_case].[IsDeleted] = 0";

                SqlCommand cmdQueryForDocInfo = new SqlCommand(strSqlQueryForDocumentsInfo, connRN4);
                cmdQueryForDocInfo.CommandType = CommandType.Text;

                cmdQueryForDocInfo.Parameters.AddWithValue("@CaseId", CaseId);
                cmdQueryForDocInfo.Parameters.AddWithValue("@IndividualId", IndividualId);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrDocInfo = cmdQueryForDocInfo.ExecuteReader();
                if (rdrDocInfo.HasRows)
                {
                    rdrDocInfo.Read();

                    if (!rdrDocInfo.IsDBNull(0))
                    {
                        if (rdrDocInfo.GetBoolean(0))
                        {
                            chkMedBillNPFReceived.Checked = true;
                            chkMedBillNPFReceived.Enabled = false;
                            dtpMedBillNPF.Text = rdrDocInfo.GetDateTime(1).ToString("MM/dd/yyyy");
                            dtpMedBillNPF.Enabled = false;
                            btnViewNPF.Enabled = true;
                        }
                        else
                        {
                            chkMedBillNPFReceived.Checked = false;
                            chkMedBillNPFReceived.Enabled = false;
                            dtpMedBillNPF.Format = DateTimePickerFormat.Custom;
                            dtpMedBillNPF.CustomFormat = " ";
                            dtpMedBillNPF.Enabled = false;
                            btnViewNPF.Enabled = false;
                        }
                    }
                    if (!rdrDocInfo.IsDBNull(2))
                    {
                        if (rdrDocInfo.GetBoolean(2))
                        {
                            chkMedBill_IBReceived.Checked = true;
                            chkMedBill_IBReceived.Enabled = false;
                            dtpMedBill_IB.Text = rdrDocInfo.GetDateTime(3).ToString("MM/dd/yyyy");
                            dtpMedBill_IB.Enabled = false;
                            btnViewIB.Enabled = true;
                        }
                        else
                        {
                            chkMedBill_IBReceived.Checked = false;
                            chkMedBill_IBReceived.Enabled = false;
                            dtpMedBill_IB.Format = DateTimePickerFormat.Custom;
                            dtpMedBill_IB.CustomFormat = " ";
                            dtpMedBill_IB.Enabled = false;
                            btnViewIB.Enabled = false;
                        }
                    }
                    if (!rdrDocInfo.IsDBNull(4))
                    {
                        if (rdrDocInfo.GetBoolean(4))
                        {
                            chkMedBillPOPReceived.Checked = true;
                            chkMedBillPOPReceived.Enabled = false;
                            dtpMedBillPOP.Text = rdrDocInfo.GetDateTime(5).ToString("MM/dd/yyyy");
                            dtpMedBillPOP.Enabled = false;
                            btnViewPoP.Enabled = true;
                        }
                        else
                        {
                            chkMedBillPOPReceived.Checked = false;
                            chkMedBillPOPReceived.Enabled = false;
                            dtpMedBillPOP.Format = DateTimePickerFormat.Custom;
                            dtpMedBillPOP.CustomFormat = " ";
                            dtpMedBillPOP.Enabled = false;
                            btnViewPoP.Enabled = false;
                        }
                    }
                    if (!rdrDocInfo.IsDBNull(6))
                    {
                        if (rdrDocInfo.GetBoolean(6))
                        {
                            chkMedRecordReceived.Checked = true;
                            chkMedRecordReceived.Enabled = false;
                            dtpMedBillMedRecord.Text = rdrDocInfo.GetDateTime(7).ToString("MM/dd/yyyy");
                            dtpMedBillMedRecord.Enabled = false;
                            btnViewMedRecord.Enabled = true;
                        }
                        else
                        {
                            chkMedRecordReceived.Checked = false;
                            chkMedRecordReceived.Enabled = false;
                            dtpMedBillMedRecord.Format = DateTimePickerFormat.Custom;
                            dtpMedBillMedRecord.CustomFormat = " ";
                            dtpMedBillMedRecord.Enabled = false;
                            btnViewMedRecord.Enabled = false;
                        }
                    }

                    if (!rdrDocInfo.IsDBNull(8))
                    {
                        if (rdrDocInfo.GetBoolean(8))
                        {
                            chkOtherDocReceived.Checked = true;
                            chkOtherDocReceived.Enabled = false;
                            dtpMedBillOtherDoc.Text = rdrDocInfo.GetDateTime(9).ToString("MM/dd/yyyy");
                            dtpMedBillOtherDoc.Enabled = false;
                            btnViewOtherDoc.Enabled = true;
                        }
                        else
                        {
                            chkOtherDocReceived.Checked = false;
                            chkOtherDocReceived.Enabled = false;
                            dtpMedBillOtherDoc.Format = DateTimePickerFormat.Custom;
                            dtpMedBillOtherDoc.CustomFormat = " ";
                            dtpMedBillOtherDoc.Enabled = false;
                            btnViewOtherDoc.Enabled = false;
                        }
                    }

                    //strCaseIdSelected = CaseNameInMedBill;
                    //strContactIdSelected = IndividualIdInMedBill;

                    strCaseIdSelected = CaseId;
                    strContactIdSelected = IndividualId;

                }
                rdrDocInfo.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                //String CaseId = gvMedBill["MedBill_CaseId", e.RowIndex]?.Value?.ToString();

                //String strSqlQueryForMedBillEdit = "select [dbo].[tbl_medbill].[Case_Id], [dbo].[tbl_illness].[IllnessNo], [dbo].[tbl_incident].[IncidentNo], [dbo].[tbl_program].[ProgramName], " +
                //               "[dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill].[MedBillType_Id], [dbo].[tbl_medbill].[BillStatus], [dbo].[tbl_medbill].[BillClosed], " +
                //               "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_MedicalProvider].[Name], " +
                //               "[dbo].[tbl_medbill].[PrescriptionDrugName], [dbo].[tbl_medbill].[PrescriptionNo], [dbo].[tbl_medbill].[PrescriptionDescription], " +
                //               "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy], [dbo].[tbl_medbill].[PatientTypeId], " +
                //               "[dbo].[tbl_medbill].[BillDate], [dbo].[tbl_medbill].[DueDate], " +
                //               "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_medbill].[ProviderContactPerson], " +
                //               "[dbo].[tbl_medbill].[Note], " +
                //               "[dbo].[tbl_illness].[ICD_10_Id], " +
                //               "[dbo].[tbl_medbill].[PendingReason], [dbo].[tbl_medbill].[IneligibleReason], " +
                //               "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_medbill].[ProviderPhoneNumber], [dbo].[tbl_medbill].[ProviderContactPerson], " +
                //               "[dbo].[tbl_medbill].[ProposalLetterSentDate], [dbo].[tbl_medbill].[HIPPASentDate], [dbo].[tbl_medbill].[MedicalRecordDate], " +
                //               "[dbo].[tbl_medbill].[Illness_Id], [dbo].[tbl_medbill].[Incident_Id] " +
                //               "from [dbo].[tbl_medbill] " +
                //               "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                //               "inner join [dbo].[tbl_incident] on [dbo].[tbl_medbill].[Incident_Id] = [dbo].[tbl_incident].[Incident_id] " +
                //               "inner join [dbo].[tbl_program] on [dbo].[tbl_incident].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                //               "inner join [dbo].[tbl_MedicalProvider] on [dbo].[tbl_medbill].[MedicalProvider_Id] = [dbo].[tbl_MedicalProvider].[ID] " +
                //               "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                //               "[dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                //               "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and" +
                //               "[dbo].[tbl_medbill].[IsDeleted] = 0";
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                String strSqlQueryForMedBillInUse = "select [dbo].[tbl_MedBillInUse].[BillNo], [dbo].[tbl_MedBillInUse].[EditingStaff] from [dbo].[tbl_MedBillInUse] " +
                                    "where [dbo].[tbl_MedBillInUse].[BillNo] = @MedBillInUse";

                SqlCommand cmdQueryForMedBillInUse = new SqlCommand(strSqlQueryForMedBillInUse, connRN4);
                cmdQueryForMedBillInUse.CommandType = CommandType.Text;

                cmdQueryForMedBillInUse.Parameters.AddWithValue("@MedBillInUse", MedBillNo);

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrMedBillInUse = cmdQueryForMedBillInUse.ExecuteReader();
                if (rdrMedBillInUse.HasRows)
                {
                    rdrMedBillInUse.Read();
                    if (MedBillNo == rdrMedBillInUse.GetString(0).Trim() &&
                        nLoggedUserId != rdrMedBillInUse.GetInt16(1))
                    {
                        MessageBox.Show("The Medical Bill: " + MedBillNo + " is in use.", "Error");
                        rdrMedBillInUse.Close();
                        if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                        return;
                    }
                }
                else
                {
                    rdrMedBillInUse.Close();
                    if (connRN4.State != ConnectionState.Closed) connRN.Close();

                    String strSqlInsertMedBillInUse = "insert into [dbo].[tbl_MedBillInUse] (BillNo, EditingStaff) values (@MedBillNo, @ModifyingStaff)";

                    SqlCommand cmdInsertMedBillInUse = new SqlCommand(strSqlInsertMedBillInUse, connRN4);
                    cmdInsertMedBillInUse.CommandType = CommandType.Text;

                    cmdInsertMedBillInUse.Parameters.AddWithValue("@MedBillNo", MedBillNo);
                    cmdInsertMedBillInUse.Parameters.AddWithValue("@ModifyingStaff", nLoggedUserId);

                    if (connRN4.State != ConnectionState.Closed)
                    {
                        connRN4.Close();
                        connRN4.Open();
                    }
                    else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                    int nMedBillInUseInserted = cmdInsertMedBillInUse.ExecuteNonQuery();
                    if (nMedBillInUseInserted != 1)
                    {
                        MessageBox.Show("Medical Bill in use: " + MedBillNo + " has not been inserted.", "Error");
                        if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                        return;
                    }
                    if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                String strSqlQueryForMedBillEdit = "select [dbo].[tbl_medbill].[Case_Id], [dbo].[tbl_illness].[IllnessNo], [dbo].[tbl_incident].[IncidentNo], [dbo].[tbl_program].[ProgramName], " +
                                                   "[dbo].[tbl_medbill].[BillNo], [dbo].[tbl_medbill].[MedBillType_Id], [dbo].[tbl_medbill].[BillStatus], [dbo].[tbl_medbill].[BillClosed], " +
                                                   "[dbo].[tbl_medbill].[BillAmount], [dbo].[tbl_medbill].[MedicalProvider_Id], " +
                                                   "[dbo].[tbl_medbill].[PrescriptionDrugName], [dbo].[tbl_medbill].[PrescriptionNo], [dbo].[tbl_medbill].[PrescriptionDescription], " +
                                                   "[dbo].[tbl_medbill].[TotalNumberOfPhysicalTherapy], [dbo].[tbl_medbill].[PatientTypeId], " +
                                                   "[dbo].[tbl_medbill].[BillDate], [dbo].[tbl_medbill].[DueDate], " +
                                                   "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_medbill].[ProviderContactPerson], [dbo].[tbl_medbill].[ProviderPhoneNumber], " +
                                                   "[dbo].[tbl_medbill].[Note], " +
                                                   "[dbo].[tbl_illness].[ICD_10_Id], " +
                                                   "[dbo].[tbl_medbill].[PendingReason], [dbo].[tbl_medbill].[IneligibleReason], " +
                                                   "[dbo].[tbl_medbill].[ProposalLetterSentDate], [dbo].[tbl_medbill].[HIPPASentDate], [dbo].[tbl_medbill].[MedicalRecordDate], " +
                                                   "[dbo].[tbl_medbill].[Illness_Id], [dbo].[tbl_medbill].[Incident_Id] " +
                                                   "from [dbo].[tbl_medbill] " +
                                                   "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                   "inner join [dbo].[tbl_incident] on [dbo].[tbl_medbill].[Incident_Id] = [dbo].[tbl_incident].[Incident_id] " +
                                                   "inner join [dbo].[tbl_program] on [dbo].[tbl_incident].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                                                   "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo and " +
                                                   "[dbo].[tbl_medbill].[Case_Id] = @CaseName and " +
                                                   "[dbo].[tbl_medbill].[Contact_Id] = @IndividualId and" +
                                                   "[dbo].[tbl_medbill].[IsDeleted] = 0";

                SqlCommand cmdQueryForMedBillEdit = new SqlCommand(strSqlQueryForMedBillEdit, connRN4);
                cmdQueryForMedBillEdit.CommandType = CommandType.Text;

                cmdQueryForMedBillEdit.Parameters.AddWithValue("@MedBillNo", MedBillNo);
                cmdQueryForMedBillEdit.Parameters.AddWithValue("@CaseName", CaseId);
                cmdQueryForMedBillEdit.Parameters.AddWithValue("@IndividualId", IndividualId);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrMedBillEdit = cmdQueryForMedBillEdit.ExecuteReader();

                MedicalBillInfoForList MedBillForEdit = new MedicalBillInfoForList();

                if (rdrMedBillEdit.HasRows)
                {
                    rdrMedBillEdit.Read();
                    if (!rdrMedBillEdit.IsDBNull(0)) MedBillForEdit.CaseId = rdrMedBillEdit.GetString(0).Trim();
                    if (!rdrMedBillEdit.IsDBNull(1)) MedBillForEdit.IllnessNo = rdrMedBillEdit.GetString(1).Trim();
                    if (!rdrMedBillEdit.IsDBNull(2)) MedBillForEdit.IncidentNo = rdrMedBillEdit.GetString(2).Trim();
                    if (!rdrMedBillEdit.IsDBNull(3)) MedBillForEdit.ProgramName = rdrMedBillEdit.GetString(3).Trim();
                    if (!rdrMedBillEdit.IsDBNull(4)) MedBillForEdit.MedBillNo = rdrMedBillEdit.GetString(4).Trim();
                    if (!rdrMedBillEdit.IsDBNull(5)) MedBillForEdit.MedBillTypeId = rdrMedBillEdit.GetInt16(5);
                    if (!rdrMedBillEdit.IsDBNull(6)) MedBillForEdit.MedBillStatusId = rdrMedBillEdit.GetInt16(6);
                    if (!rdrMedBillEdit.IsDBNull(7)) MedBillForEdit.bBillClosed = rdrMedBillEdit.GetBoolean(7);
                    if (!rdrMedBillEdit.IsDBNull(8)) MedBillForEdit.BillAmount = rdrMedBillEdit.GetDecimal(8);
                    if (!rdrMedBillEdit.IsDBNull(9)) MedBillForEdit.MedicalProviderId = rdrMedBillEdit.GetString(9);
                    if (!rdrMedBillEdit.IsDBNull(10)) MedBillForEdit.PrescriptionDrugName = rdrMedBillEdit.GetString(10);
                    if (!rdrMedBillEdit.IsDBNull(11)) MedBillForEdit.PrescriptionNo = rdrMedBillEdit.GetString(11);
                    if (!rdrMedBillEdit.IsDBNull(12)) MedBillForEdit.PrescriptionDescription = rdrMedBillEdit.GetString(12);
                    if (!rdrMedBillEdit.IsDBNull(13)) MedBillForEdit.TotalNumberOfPhysicalTherapy = rdrMedBillEdit.GetInt16(13);
                    if (!rdrMedBillEdit.IsDBNull(14)) MedBillForEdit.nPatientTypeId = rdrMedBillEdit.GetInt16(14);
                    if (!rdrMedBillEdit.IsDBNull(15)) MedBillForEdit.BillDate = rdrMedBillEdit.GetDateTime(15);
                    if (!rdrMedBillEdit.IsDBNull(16)) MedBillForEdit.ReceivedDate = rdrMedBillEdit.GetDateTime(16);
                    if (!rdrMedBillEdit.IsDBNull(17)) MedBillForEdit.AccountNoAtProvider = rdrMedBillEdit.GetString(17);
                    if (!rdrMedBillEdit.IsDBNull(18)) MedBillForEdit.ProviderContactPerson = rdrMedBillEdit.GetString(18);
                    if (!rdrMedBillEdit.IsDBNull(19)) MedBillForEdit.ProviderPhoneNumber = rdrMedBillEdit.GetString(19);
                    if (!rdrMedBillEdit.IsDBNull(20)) MedBillForEdit.Note = rdrMedBillEdit.GetString(20);
                    if (!rdrMedBillEdit.IsDBNull(21)) MedBillForEdit.ICD_10_Id = rdrMedBillEdit.GetString(21);
                    if (!rdrMedBillEdit.IsDBNull(22)) MedBillForEdit.nPendingReasonIndex = rdrMedBillEdit.GetInt32(22);
                    if (!rdrMedBillEdit.IsDBNull(23)) MedBillForEdit.nIneligibleReasonIndex = rdrMedBillEdit.GetInt32(23);
                    if (!rdrMedBillEdit.IsDBNull(24)) MedBillForEdit.ProposalLetterSentDate = rdrMedBillEdit.GetDateTime(24);
                    if (!rdrMedBillEdit.IsDBNull(25)) MedBillForEdit.HIPPASentDate = rdrMedBillEdit.GetDateTime(25);
                    if (!rdrMedBillEdit.IsDBNull(26)) MedBillForEdit.MedicalRecordDate = rdrMedBillEdit.GetDateTime(26);
                    if (!rdrMedBillEdit.IsDBNull(27)) MedBillForEdit.IllnessId = Int32.Parse(rdrMedBillEdit.GetString(27).Trim());
                    if (!rdrMedBillEdit.IsDBNull(28)) MedBillForEdit.IncidentId = Int32.Parse(rdrMedBillEdit.GetString(28).Trim());
                }

                String strSqlQueryForMedicalProviderName = "select [dbo].[account].[Name] from [dbo].[account] where [dbo].[account].[Id] = @MedicalProviderId";

                SqlCommand cmdQueryForMedicalProviderName = new SqlCommand(strSqlQueryForMedicalProviderName, connSalesforce2);
                cmdQueryForMedicalProviderName.CommandType = CommandType.Text;

                cmdQueryForMedicalProviderName.Parameters.AddWithValue("@MedicalProviderId", MedBillForEdit.MedicalProviderId);

                if (connSalesforce2.State != ConnectionState.Closed)
                {
                    connSalesforce2.Close();
                    connSalesforce2.Open();
                }
                else if (connSalesforce2.State == ConnectionState.Closed) connSalesforce2.Open();
                Object objMedicalProviderName = cmdQueryForMedicalProviderName.ExecuteScalar();
                if (connSalesforce2.State == ConnectionState.Open) connSalesforce2.Close();

                if (objMedicalProviderName != null) MedBillForEdit.MedicalProviderName = objMedicalProviderName.ToString();

                //////////////////////////////////////////////////////////////////////////////////
                txtMedBill_CaseNo.Text = MedBillForEdit.CaseId;
                Illness.IllnessNo = MedBillForEdit.IllnessNo;
                txtMedBill_Illness.Text = MedBillForEdit.IllnessNo;
                Incident.IncidentNo = MedBillForEdit.IncidentNo;
                txtMedBill_Incident.Text = MedBillForEdit.IncidentNo;
                txtIncdProgram.Text = MedBillForEdit.ProgramName;
                txtMedBillNo.Text = MedBillForEdit.MedBillNo;
                if (MedBillForEdit.MedBillTypeId != -1)
                {
                    comboMedBillType.Items.Clear();
                    for (int i = 1; i <= dicMedBillTypes.Count; i++)
                    {
                        comboMedBillType.Items.Add(dicMedBillTypes[i]);
                    }
                    comboMedBillType.SelectedIndex = MedBillForEdit.MedBillTypeId - 1;
                }
                if (MedBillForEdit.MedBillStatusId != -1)
                {
                    if (dicMedBillStatus.Count > 0)
                    {
                        comboMedBillStatus.Items.Clear();
                        for (int i = 0; i < dicMedBillStatus.Count; i++)
                        {
                            comboMedBillStatus.Items.Add(dicMedBillStatus[i]);
                        }
                        comboMedBillStatus.SelectedIndex = MedBillForEdit.MedBillStatusId;
                    }
                }

                if (MedBillForEdit.bBillClosed) cbMedBillClosed.SelectedIndex = 1;
                else cbMedBillClosed.SelectedIndex = 0;

                comboMedBillStatus.SelectedIndex = MedBillForEdit.MedBillStatusId;

                txtMedBillAmount.Text = MedBillForEdit.BillAmount.ToString("C");
                txtBalance.Text = MedBillForEdit.Balance.ToString("C");
                txtMedicalProvider.Text = MedBillForEdit.MedicalProviderName.Trim();
                txtPrescriptionName.Text = MedBillForEdit.PrescriptionDrugName.Trim();
                txtNumPhysicalTherapy.Text = MedBillForEdit.TotalNumberOfPhysicalTherapy.ToString();
                if (MedBillForEdit.nPatientTypeId == 0) rbOutpatient.Checked = true;
                else if (MedBillForEdit.nPatientTypeId == 1) rbInpatient.Checked = true;

                if (MedBillForEdit.BillDate.Value != null)
                {
                    dtpBillDate.Checked = true;
                    dtpBillDate.Text = MedBillForEdit.BillDate.Value.ToString("MM/dd/yyyy");
                }
                else
                {
                    dtpBillDate.Format = DateTimePickerFormat.Custom;
                    dtpBillDate.CustomFormat = " ";
                }

                if (MedBillForEdit.ReceivedDate.Value != null)
                {
                    dtpDueDate.Checked = true;
                    dtpDueDate.Text = MedBillForEdit.ReceivedDate.Value.ToString("MM/dd/yyyy");
                }
                else
                {
                    dtpDueDate.Format = DateTimePickerFormat.Custom;
                    dtpDueDate.Text = " ";
                }

                txtMedBillAccountNoAtProvider.Text = MedBillForEdit.AccountNoAtProvider;
                txtProviderContactPerson.Text = MedBillForEdit.ProviderContactPerson;
                txtMedProviderPhoneNo.Text = MedBillForEdit.ProviderPhoneNumber;

                if (MedBillForEdit.Note != String.Empty)
                {
                    if (comboMedBillType.SelectedIndex == 0) txtMedBillNote.Text = MedBillForEdit.Note;
                    if (comboMedBillType.SelectedIndex == 1) txtPrescriptionNote.Text = MedBillForEdit.Note;
                    if (comboMedBillType.SelectedIndex == 2) txtPhysicalTherapyRxNote.Text = MedBillForEdit.Note;
                }

                if (MedBillForEdit.ICD_10_Id != String.Empty) txtMedBill_ICD10Code.Text = MedBillForEdit.ICD_10_Id;
                if ((comboMedBillType.SelectedIndex == 0) && (MedBillForEdit.nPendingReasonIndex != -1)) comboPendingReason.SelectedIndex = MedBillForEdit.nPendingReasonIndex;
                if ((comboMedBillType.SelectedIndex == 0) && (MedBillForEdit.nIneligibleReasonIndex != -1)) comboIneligibleReason.SelectedIndex = MedBillForEdit.nIneligibleReasonIndex;

                if (comboMedBillType.SelectedIndex == 0)
                {
                    txtPrescriptionName.Text = String.Empty;
                    txtPrescriptionDescription.Text = String.Empty;
                    txtPrescriptionNote.Text = String.Empty;
                    txtNumberOfMedication.Text = String.Empty;

                    txtNumPhysicalTherapy.Text = String.Empty;
                    txtPhysicalTherapyRxNote.Text = String.Empty;
                }
                else if (comboMedBillType.SelectedIndex == 1)       // Medical Bill Type - Prescription
                {
                    txtNumPhysicalTherapy.Text = String.Empty;
                    txtPhysicalTherapyRxNote.Text = String.Empty;

                    rbInpatient.Checked = false;
                    rbOutpatient.Checked = false;

                    comboPendingReason.SelectedIndex = 0;
                    comboIneligibleReason.SelectedIndex = 0;

                    txtMedBillNote.Text = String.Empty;
                }
                else if (comboMedBillType.SelectedIndex == 2)       // Medical Bill Type - Physical Therapy
                {
                    txtPrescriptionName.Text = String.Empty;
                    txtPrescriptionDescription.Text = String.Empty;
                    txtPrescriptionNote.Text = String.Empty;
                    txtNumberOfMedication.Text = String.Empty;

                    rbInpatient.Checked = false;
                    rbOutpatient.Checked = false;

                    comboPendingReason.SelectedIndex = 0;
                    comboIneligibleReason.SelectedIndex = 0;

                    txtMedBillNote.Text = String.Empty;
                }

                if (MedBillForEdit.ProposalLetterSentDate != null)
                {
                    dtpProposalLetterSentDate.Checked = true;
                    dtpProposalLetterSentDate.Value = MedBillForEdit.ProposalLetterSentDate.Value;
                    dtpProposalLetterSentDate.Format = DateTimePickerFormat.Short;
                }
                if (MedBillForEdit.HIPPASentDate != null)
                {
                    dtpHippaSentDate.Checked = true;
                    dtpHippaSentDate.Value = MedBillForEdit.HIPPASentDate.Value;
                    dtpHippaSentDate.Format = DateTimePickerFormat.Short;
                }
                if (MedBillForEdit.MedicalRecordDate != null)
                {
                    dtpMedicalRecordDate.Checked = true;
                    dtpMedicalRecordDate.Value = MedBillForEdit.MedicalRecordDate.Value;
                    dtpMedicalRecordDate.Format = DateTimePickerFormat.Short;
                }

                if (MedBillForEdit.IllnessId != -1) Illness.IllnessId = MedBillForEdit.IllnessId.ToString();
                else Illness.IllnessId = String.Empty;
                if (MedBillForEdit.IncidentId != -1) Incident.IncidentId = MedBillForEdit.IncidentId.ToString();
                else Incident.IncidentId = String.Empty;

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                String ICD10Code = txtMedBill_ICD10Code.Text.Trim();

                String strSqlQueryForDiseaseName = "select [dbo].[ICD10 Code].[Name] from [dbo].[ICD10 Code] where [dbo].[ICD10 Code].[ICD10_CODE__C] = @ICD10Code";

                SqlCommand cmdQueryForDiseaseName = new SqlCommand(strSqlQueryForDiseaseName, connSalesforce);
                cmdQueryForDiseaseName.CommandType = CommandType.Text;

                cmdQueryForDiseaseName.Parameters.AddWithValue("@ICD10Code", ICD10Code);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                Object objDiseaseName = cmdQueryForDiseaseName.ExecuteScalar();
                txtMedBillDiseaseName.Text = objDiseaseName?.ToString();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();

                var srcMedicalProvider = new AutoCompleteStringCollection();

                for (int i = 0; i < lstMedicalProvider.Count; i++)
                {
                    srcMedicalProvider.Add(lstMedicalProvider[i].Name);
                }

                txtMedicalProvider.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                txtMedicalProvider.AutoCompleteSource = AutoCompleteSource.CustomSource;
                txtMedicalProvider.AutoCompleteCustomSource = srcMedicalProvider;

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // Settlement

                lstPaymentMethod.Clear();
                String strSqlQueryForPaymentMethod = "select [dbo].[tbl_payment_method].[PaymentMethod_Id], [dbo].[tbl_payment_method].[PaymentMethod_Value] from [dbo].[tbl_payment_method] " +
                                                     "order by [dbo].[tbl_payment_method].[PaymentMethod_Value]";

                SqlCommand cmdQueryForPaymentMethod = new SqlCommand(strSqlQueryForPaymentMethod, connRN4);
                cmdQueryForPaymentMethod.CommandType = CommandType.Text;

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrPaymentMethod = cmdQueryForPaymentMethod.ExecuteReader();
                if (rdrPaymentMethod.HasRows)
                {
                    while (rdrPaymentMethod.Read())
                    {
                        if (!rdrPaymentMethod.IsDBNull(1)) lstPaymentMethod.Add(new PaymentMethod { PaymentMethodId = rdrPaymentMethod.GetInt16(0), PaymentMethodValue = rdrPaymentMethod.GetString(1) });
                        else lstPaymentMethod.Add(new PaymentMethod { PaymentMethodId = rdrPaymentMethod.GetInt16(0), PaymentMethodValue = null });
                    }
                }
                rdrPaymentMethod.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                // Retrieve credit card info
                lstCreditCardInfo.Clear();
                String strSqlQueryForCreditCardInfo = "select [dbo].[tbl_Credit_Card__c].[CreditCard_Id], [dbo].[tbl_Credit_Card__c].[Name] from [dbo].[tbl_Credit_Card__c]";

                SqlCommand cmdQueryForCreditCardInfo = new SqlCommand(strSqlQueryForCreditCardInfo, connRN4);
                cmdQueryForCreditCardInfo.CommandType = CommandType.Text;

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrCreditCardInfo = cmdQueryForCreditCardInfo.ExecuteReader();
                if (rdrCreditCardInfo.HasRows)
                {
                    while (rdrCreditCardInfo.Read())
                    {
                        if (!rdrCreditCardInfo.IsDBNull(1))
                            lstCreditCardInfo.Add(new CreditCardInfo { CreditCardId = rdrCreditCardInfo.GetInt16(0), CreditCardNo = rdrCreditCardInfo.GetString(1) });
                        else
                            lstCreditCardInfo.Add(new CreditCardInfo { CreditCardId = rdrCreditCardInfo.GetInt16(0), CreditCardNo = null });
                    }
                }
                rdrCreditCardInfo.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                String IncidentNo = txtMedBill_Incident.Text.Trim();
                String IndividualIdMedBill = txtCaseIndividualID.Text.Trim();

                String strSqlQueryForIncident = "select [dbo].[tbl_incident].[Program_id], [dbo].[tbl_program].[ProgramName], [dbo].[tbl_incident].[IsDeleted] " +
                                "from [dbo].[tbl_incident] " +
                                "inner join [dbo].[tbl_program] on [dbo].[tbl_incident].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                                "where [dbo].[tbl_incident].[Individual_id] = @IndividualId and " +
                                "[dbo].[tbl_incident].[IncidentNo] = @IncidentNo " +
                                "order by [dbo].[tbl_incident].[Program_id]";

                SqlCommand cmdQueryForIncident = new SqlCommand(strSqlQueryForIncident, connRN4);
                cmdQueryForIncident.CommandType = CommandType.Text;

                cmdQueryForIncident.Parameters.AddWithValue("@IndividualId", IndividualIdMedBill);
                cmdQueryForIncident.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrIncident = cmdQueryForIncident.ExecuteReader();
                lstIncidentProgramInfo.Clear();
                if (rdrIncident.HasRows)
                {
                    while (rdrIncident.Read())
                    {
                        if (!rdrIncident.IsDBNull(0) && !rdrIncident.IsDBNull(1))
                        {
                            IncidentProgramInfo incidentProgram = new IncidentProgramInfo(rdrIncident.GetBoolean(2), rdrIncident.GetInt16(0), rdrIncident.GetString(1).Trim());
                            lstIncidentProgramInfo.Add(incidentProgram);
                        }
                    }
                }
                rdrIncident.Close();
                if (connRN4.State == ConnectionState.Open) connRN4.Close();

                String strSqlQueryForIncidentChange = "select [dbo].[tbl_incident_history].[Program_id], [dbo].[tbl_program].[ProgramName], [dbo].[tbl_incident_history].[IsDeleted] " +
                                        "from [dbo].[tbl_incident_history] " +
                                        "inner join [dbo].[tbl_program] on [dbo].[tbl_incident_history].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                                        "where ([dbo].[tbl_incident_history].[Operation] = 2 or " +
                                        "[dbo].[tbl_incident_history].[Operation] = 3 or " +
                                        "[dbo].[tbl_incident_history].[Operation] = 4) and " +
                                        "[dbo].[tbl_incident_history].[Individual_id] = @IndividualId and" +
                                        "[dbo].[tbl_incident_history].[IncidentNo] = @IncidentNo " +
                                        "order by [dbo].[tbl_incident_history].[Program_id]";

                SqlCommand cmdQueryForIncidentChange = new SqlCommand(strSqlQueryForIncidentChange, connRN4);
                cmdQueryForIncidentChange.CommandType = CommandType.Text;

                cmdQueryForIncidentChange.Parameters.AddWithValue("@IndividualId", IndividualIdMedBill);
                cmdQueryForIncidentChange.Parameters.AddWithValue("@IncidentNo", IncidentNo);

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrIncidentChange = cmdQueryForIncidentChange.ExecuteReader();
                //lstIncidentProgramInfo.Clear();
                if (rdrIncidentChange.HasRows)
                {
                    while (rdrIncidentChange.Read())
                    {
                        if (!rdrIncidentChange.IsDBNull(0) && !rdrIncidentChange.IsDBNull(1))
                        {
                            IncidentProgramInfo incidentProgram = new IncidentProgramInfo(rdrIncidentChange.GetBoolean(2), rdrIncidentChange.GetInt16(0), rdrIncidentChange.GetString(1).Trim());
                            lstIncidentProgramInfo.Add(incidentProgram);
                        }
                    }
                }
                rdrIncidentChange.Close();
                if (connRN4.State == ConnectionState.Open) connRN4.Close();

                foreach (IncidentProgramInfo incdInfo in lstIncidentProgramInfo)
                {
                    if (incdInfo.bIsDeleted == true)
                    {
                        MessageBox.Show("The Incident has been deleted. Personal Responsibility cannot be calculated.", "Error");
                        lstIncidentProgramInfo.Clear();
                    }
                }

                Boolean bBronze = false;
                Boolean bSilver = false;
                Boolean bGold = false;
                Boolean bGoldPlus = false;
                Boolean bGoldMed1 = false;
                Boolean bGoldMed2 = false;

                if (lstIncidentProgramInfo.Count > 0)
                {
                    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    {
                        if ((incidentInfo.IncidentProgramId == 3) &&
                            (incidentInfo.bIsDeleted == false))
                        {
                            incidentInfo.bPersonalResponsibilityProgram = true;
                            bBronze = true;
                            break;
                        }
                    }

                    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    {
                        if ((incidentInfo.IncidentProgramId == 2) &&
                            (bBronze == false) &&
                            (incidentInfo.bIsDeleted == false))
                        {
                            incidentInfo.bPersonalResponsibilityProgram = true;
                            bSilver = true;
                            break;
                        }
                    }

                    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    {
                        if ((incidentInfo.IncidentProgramId == 1) &&
                            (bBronze == false) &&
                            (bSilver == false) &&
                            (incidentInfo.bIsDeleted == false))
                        {
                            incidentInfo.bPersonalResponsibilityProgram = true;
                            break;
                        }
                    }

                    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    {
                        if ((incidentInfo.IncidentProgramId == 0) &&
                            (bBronze == false) &&
                            (bSilver == false) &&
                            (bGold == false) &&
                            (incidentInfo.bIsDeleted == false))
                        {
                            incidentInfo.bPersonalResponsibilityProgram = true;
                            break;
                        }
                    }

                    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    {
                        if ((incidentInfo.IncidentProgramId == 4) &&
                            (bBronze == false) &&
                            (bSilver == false) &&
                            (bGold == false) &&
                            (bGoldPlus == false) &&
                            (incidentInfo.bIsDeleted == false))
                        {
                            incidentInfo.bPersonalResponsibilityProgram = true;
                            break;
                        }
                    }

                    foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                    {
                        if ((incidentInfo.IncidentProgramId == 5) &&
                            (bBronze == false) &&
                            (bSilver == false) &&
                            (bGold == false) &&
                            (bGoldPlus == false) &&
                            (bGoldMed1 == false) &&
                            (incidentInfo.bIsDeleted == false))
                        {
                            incidentInfo.bPersonalResponsibilityProgram = true;
                            break;
                        }
                    }
                }

                foreach (IncidentProgramInfo incidentInfo in lstIncidentProgramInfo)
                {
                    if (incidentInfo.bPersonalResponsibilityProgram == true)
                        PersonalResponsibilityAmountInMedBill = incidentInfo.PersonalResponsibilityAmount;
                }

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                String strSqlQueryForSettlement = "select [dbo].[tbl_settlement].[Name], [dbo].[tbl_settlement_type_code].[SettlementTypeValue], [dbo].[tbl_settlement].[Amount], " +
                                                  "[dbo].[tbl_settlement].[PersonalResponsibilityCredit], [dbo].[tbl_payment_method].[PaymentMethod_Value], " +
                                                  "[dbo].[tbl_settlement].[Approved], [dbo].[tbl_settlement].[ApprovedDate], " +
                                                  "[dbo].[tbl_settlement].[CheckNo], [dbo].[tbl_settlement].[CheckDate], [dbo].[tbl_settlement].[CheckReconciled], " +
                                                  "[dbo].[tbl_settlement].[ACH_Number], [dbo].[tbl_settlement].[ACH_Date], [dbo].[tbl_settlement].[ACH_Reconciled], " +
                                                  "[dbo].[tbl_Credit_Card__c].[Name], [dbo].[tbl_settlement].[CMMCreditCardPaidDate], [dbo].[tbl_settlement].[CC_Reconciled], " +
                                                  "[dbo].[tbl_settlement].[AllowedAmount], [dbo].[tbl_settlement].[IneligibleReason], " +
                                                  "[dbo].[tbl_settlement].[Notes] " +
                                                  "from [dbo].[tbl_settlement] inner join [dbo].[tbl_settlement_type_code] " +
                                                  "on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                  "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
                                                  "inner join [dbo].[tbl_Credit_Card__c] on [dbo].[tbl_settlement].[CMMCreditCard] = [dbo].[tbl_Credit_Card__c].[CreditCard_Id]" +
                                                  "where [dbo].[tbl_settlement].[MedicalBillID] = @MedBillNo and " +
                                                  "[dbo].[tbl_settlement].[IsDeleted] = 0 " +
                                                  "order by [dbo].[tbl_settlement].[Name]";

                SqlCommand cmdQueryForSettlement = new SqlCommand(strSqlQueryForSettlement, connRN4);
                cmdQueryForSettlement.CommandType = CommandType.Text;

                cmdQueryForSettlement.Parameters.AddWithValue("@MedBillNo", MedBillNo);

                SqlDependency dependencySettlementInMedBill = new SqlDependency(cmdQueryForSettlement);
                dependencySettlementInMedBill.OnChange += new OnChangeEventHandler(OnSettlementsInMedBillEditChange);

                //if (connRN.State == ConnectionState.Closed) connRN.Open();
                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();
                SqlDataReader rdrSettlement = cmdQueryForSettlement.ExecuteReader();
                gvSettlementsInMedBill.Rows.Clear();
                if (rdrSettlement.HasRows)
                {
                    while (rdrSettlement.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();
                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                        if (!rdrSettlement.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(0) });
                        if (!rdrSettlement.IsDBNull(1))
                        {
                            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();

                            for (int i = 0; i < lstSettlementType.Count; i++)
                            {
                                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                            }
                            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                            {
                                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                            }

                            row.Cells.Add(comboCellSettlementType);
                        }
                        else
                        {
                            DataGridViewComboBoxCell comboCellSettlementType = new DataGridViewComboBoxCell();
                            for (int i = 0; i < lstSettlementType.Count; i++)
                            {
                                comboCellSettlementType.Items.Add(lstSettlementType[i].SettlementTypeValue);
                            }

                            for (int i = 0; i < comboCellSettlementType.Items.Count; i++)
                            {
                                if (rdrSettlement.GetString(1) == comboCellSettlementType.Items[i].ToString())
                                    comboCellSettlementType.Value = comboCellSettlementType.Items[i];
                            }

                            row.Cells.Add(comboCellSettlementType);
                        }

                        if (!rdrSettlement.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(2).ToString("C") });
                        else
                        {
                            Decimal Zero = 0;
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                        }


                        if (!rdrSettlement.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(3).ToString("C") });
                        else
                        {
                            Decimal Zero = 0;
                            row.Cells.Add(new DataGridViewTextBoxCell { Value = Zero.ToString("C") });
                        }

                        /////////////////////////////////////////////////////////////////////
                        if (!rdrSettlement.IsDBNull(4))
                        {
                            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                            for (int i = 0; i < lstPaymentMethod.Count; i++)
                            {
                                if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                else comboCellPaymentMethod.Items.Add(String.Empty);
                            }

                            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                            {
                                if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                    comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                            }

                            row.Cells.Add(comboCellPaymentMethod);
                        }
                        else
                        {
                            DataGridViewComboBoxCell comboCellPaymentMethod = new DataGridViewComboBoxCell();

                            for (int i = 0; i < lstPaymentMethod.Count; i++)
                            {
                                if (lstPaymentMethod[i].PaymentMethodValue != null) comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                                else comboCellPaymentMethod.Items.Add(String.Empty);
                                //comboCellPaymentMethod.Items.Add(lstPaymentMethod[i].PaymentMethodValue);
                            }

                            for (int i = 0; i < comboCellPaymentMethod.Items.Count; i++)
                            {
                                if ((!rdrSettlement.IsDBNull(4)) && comboCellPaymentMethod.Items[i] != null)
                                {
                                    if (rdrSettlement.GetString(4) == comboCellPaymentMethod.Items[i].ToString())
                                        comboCellPaymentMethod.Value = comboCellPaymentMethod.Items[i];
                                }
                                else comboCellPaymentMethod.Value = null;
                            }

                            row.Cells.Add(comboCellPaymentMethod);

                        }

                        /////////////////////////////////////////////////////////////////////
                        if (!rdrSettlement.IsDBNull(5))
                        {

                            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                            approvedCell.Value = rdrSettlement.GetBoolean(5);
                            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                            row.Cells.Add(approvedCell);
                            if (LoggedInUserRole == UserRole.RNStaff ||
                                LoggedInUserRole == UserRole.NPStaff ||
                                LoggedInUserRole == UserRole.FDStaff)
                                approvedCell.ReadOnly = true;
                            else if (LoggedInUserRole == UserRole.RNManager)
                                approvedCell.ReadOnly = false;
                        }
                        else
                        {
                            DataGridViewCheckBoxCell approvedCell = new DataGridViewCheckBoxCell();
                            approvedCell.Value = false;
                            approvedCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                            row.Cells.Add(approvedCell);
                            if (LoggedInUserRole == UserRole.RNStaff ||
                                LoggedInUserRole == UserRole.NPStaff ||
                                LoggedInUserRole == UserRole.FDStaff)
                                approvedCell.ReadOnly = true;
                            else if (LoggedInUserRole == UserRole.RNManager)
                                approvedCell.ReadOnly = false;
                        }

                        if (!rdrSettlement.IsDBNull(6)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(6).ToString("MM/dd/yyyy")) });
                        else row.Cells.Add(new CalendarCell { Value = null });

                        // Payment information
                        if (!rdrSettlement.IsDBNull(4))
                        {
                            String strPaymentMethod = rdrSettlement.GetString(4);

                            switch (strPaymentMethod)
                            {
                                case "Check":
                                    if (!rdrSettlement.IsDBNull(7)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(7) });
                                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    DataGridViewComboBoxCell comboCellCreditCardNoneForCheck = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNoneForCheck.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCellCreditCardNoneForCheck.Items.Add(String.Empty);
                                    }
                                    row.Cells.Add(comboCellCreditCardNoneForCheck);
                                    if (!rdrSettlement.IsDBNull(8))
                                    {
                                        row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(8).ToString("MM/dd/yyyy")) });
                                    }
                                    else
                                    {
                                        row.Cells.Add(new CalendarCell { Value = String.Empty });
                                    }
                                    if (!rdrSettlement.IsDBNull(9))
                                    {
                                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(9) });
                                    }
                                    else
                                    {
                                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                    }
                                    break;
                                case "ACH/Banking":
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    if (!rdrSettlement.IsDBNull(10)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(10) });
                                    else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    DataGridViewComboBoxCell comboCellCreditCardNoneForACH = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null)
                                            comboCellCreditCardNoneForACH.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCellCreditCardNoneForACH.Items.Add(String.Empty);
                                    }
                                    row.Cells.Add(comboCellCreditCardNoneForACH);
                                    if (!rdrSettlement.IsDBNull(11))
                                    {
                                        row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(11).ToString("MM/dd/yyyy")) });
                                    }
                                    else
                                    {
                                        row.Cells.Add(new CalendarCell { Value = String.Empty });
                                    }
                                    if (!rdrSettlement.IsDBNull(12))
                                    {
                                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(12) });
                                    }
                                    else
                                    {
                                        row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                    }
                                    break;
                                case "Credit Card":
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                                    if (!rdrSettlement.IsDBNull(13))
                                    {
                                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                        {
                                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                            else comboCellCreditCard.Items.Add(String.Empty);
                                        }
                                        for (int i = 0; i < comboCellCreditCard.Items.Count; i++)
                                        {
                                            if (rdrSettlement.GetString(13) == comboCellCreditCard.Items[i].ToString())
                                                comboCellCreditCard.Value = comboCellCreditCard.Items[i];
                                        }
                                    }
                                    else
                                    {
                                        //DataGridViewComboBoxCell comboCellCreditCard = new DataGridViewComboBoxCell();
                                        for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                        {
                                            if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCard.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                            else comboCellCreditCard.Items.Add(String.Empty);
                                        }
                                        comboCellCreditCard.Value = String.Empty;
                                        //row.Cells.Add(comboCellCreditCard);
                                    }
                                    row.Cells.Add(comboCellCreditCard);
                                    if (!rdrSettlement.IsDBNull(14)) row.Cells.Add(new CalendarCell { Value = DateTime.Parse(rdrSettlement.GetDateTime(14).ToString("MM/dd/yyyy")) });
                                    else row.Cells.Add(new CalendarCell { Value = String.Empty });
                                    if (!rdrSettlement.IsDBNull(15)) row.Cells.Add(new DataGridViewCheckBoxCell { Value = rdrSettlement.GetBoolean(15) });
                                    else row.Cells.Add(new DataGridViewCheckBoxCell { Value = false });
                                    break;
                                default:
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    row.Cells.Add(new DataGridViewTextBoxCell { Value = null });
                                    DataGridViewComboBoxCell comboCellCreditCardNone = new DataGridViewComboBoxCell();
                                    for (int i = 0; i < lstCreditCardInfo.Count; i++)
                                    {
                                        if (lstCreditCardInfo[i].CreditCardNo != null) comboCellCreditCardNone.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                        else comboCellCreditCardNone.Items.Add(String.Empty);
                                    }
                                    row.Cells.Add(comboCellCreditCardNone);
                                    row.Cells.Add(new CalendarCell { Value = null });
                                    row.Cells.Add(new DataGridViewCheckBoxCell { Value = null });
                                    break;
                            }
                        }
                        else
                        {

                            DataGridViewTextBoxCell txtCheckNoCell = new DataGridViewTextBoxCell();
                            txtCheckNoCell.Value = null;
                            row.Cells.Add(txtCheckNoCell);
                            DataGridViewTextBoxCell txtACHNoCell = new DataGridViewTextBoxCell();
                            txtACHNoCell.Value = null;
                            row.Cells.Add(txtACHNoCell);
                            DataGridViewComboBoxCell comboCreditCardCell = new DataGridViewComboBoxCell();
                            for (int i = 0; i < lstCreditCardInfo.Count; i++)
                            {
                                if (lstCreditCardInfo[i].CreditCardNo != null) comboCreditCardCell.Items.Add(lstCreditCardInfo[i].CreditCardNo);
                                else comboCreditCardCell.Items.Add(String.Empty);
                            }
                            row.Cells.Add(comboCreditCardCell);
                            comboCreditCardCell.ReadOnly = true;
                            CalendarCell calPaymentDate = new CalendarCell();
                            calPaymentDate.Value = null;
                            row.Cells.Add(calPaymentDate);
                            DataGridViewCheckBoxCell chkReconciledCell = new DataGridViewCheckBoxCell();
                            chkReconciledCell.Value = false;
                            row.Cells.Add(chkReconciledCell);

                        }


                        if (!rdrSettlement.IsDBNull(16)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetDecimal(16).ToString("C") });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                        if (!rdrSettlement.IsDBNull(17))
                        {
                            if (dicIneligibleReason.Count > 0)
                            {
                                DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                                for (int i = 0; i < dicIneligibleReason.Count; i++)
                                {
                                    comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                                }
                                comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[rdrSettlement.GetInt32(17)];
                                row.Cells.Add(comboCellIneligibleReason);
                            }
                        }
                        else
                        {
                            if (dicIneligibleReason.Count > 0)
                            {
                                DataGridViewComboBoxCell comboCellIneligibleReason = new DataGridViewComboBoxCell();
                                for (int i = 0; i < dicIneligibleReason.Count; i++)
                                {
                                    comboCellIneligibleReason.Items.Add(dicIneligibleReason[i]);
                                }
                                comboCellIneligibleReason.Value = comboCellIneligibleReason.Items[0];
                                row.Cells.Add(comboCellIneligibleReason);
                            }
                        }

                        if (!rdrSettlement.IsDBNull(18)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrSettlement.GetString(18) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = null });

                        gvSettlementsInMedBill.Rows.Add(row);
                        //AddNewRowToGVSettlementSafely(row);
                    }
                }
                rdrSettlement.Close();
                if (connRN4.State != ConnectionState.Closed) connRN4.Close();
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                ///

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Check")
                    {
                        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                    }

                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "ACH/Banking")
                    {
                        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                    }

                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value?.ToString() == "Credit Card")
                    {
                        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = false;
                        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                    }
                    if (gvSettlementsInMedBill["PaymentMethod", i]?.Value == null)
                    {
                        gvSettlementsInMedBill.Rows[i].Cells["CheckNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["ACHNo"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["CreditCard"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["PaymentDate"].ReadOnly = true;
                        gvSettlementsInMedBill.Rows[i].Cells["Reconciled"].ReadOnly = true;
                    }
                }

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    if (gvSettlementsInMedBill[2, i]?.Value?.ToString() == "Ineligible") gvSettlementsInMedBill.Rows[i].DefaultCellStyle.BackColor = Color.Salmon;
                    else
                    {
                        gvSettlementsInMedBill["IneligibleReason", i].Value = null;
                        gvSettlementsInMedBill["IneligibleReason", i].ReadOnly = true;
                    }
                }

                if (txtMedBillAmount.Text.Trim() != String.Empty)
                {
                    Decimal SettlementTotal = 0;
                    Decimal Balance = 0;
                    Decimal Result = 0;
                    Decimal BillAmount = 0;
                    if (Decimal.TryParse(txtMedBillAmount.Text.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out Result))
                    {
                        BillAmount = Result;

                        for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                        {
                            if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "PR Reimbursement" &&
                                gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() != "Medical Provider Refund")
                            {
                                Decimal Settlement = Decimal.Parse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"));
                                SettlementTotal += Settlement;
                            }
                        }
                        if (SettlementTotal > BillAmount) MessageBox.Show("Settlement Total exceeds the Medical Bill Amount.", "Alert");
                        else
                        {
                            Balance = BillAmount - SettlementTotal;
                            txtBalance.Text = Balance.ToString("C");
                        }
                    }
                }

                Decimal TotalSharedAmount = 0;
                //if (gvSettlementsInMedBill.Rows.Count == 0) txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");
                txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    Decimal SharedAmount = 0;
                    Decimal MedicalProviderRefund = 0;
                    Decimal result = 0;

                    if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "CMM Provider Payment" ||
                        gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Reimbursement" ||
                        gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "PR Reimbursement")
                    {
                        if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                        {
                            SharedAmount = result;
                            TotalSharedAmount += SharedAmount;
                            txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");
                        }
                    }
                    else if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Medical Provider Refund")
                    {
                        if (Decimal.TryParse(gvSettlementsInMedBill["SettlementAmount", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                        {
                            MedicalProviderRefund = result;
                            TotalSharedAmount -= MedicalProviderRefund;
                            txtTotalSharedAmtMedBill.Text = TotalSharedAmount.ToString("C");
                        }
                    }
                }

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                ///

                Decimal PersonResponsibilityAmt = PersonalResponsibilityAmountInMedBill;
                Decimal PersonalResponsibilityBalance = PersonalResponsibilityAmountInMedBill;
                Decimal TotalPersonalResponsibilityShared = 0;

                for (int i = 0; i < gvSettlementsInMedBill.Rows.Count; i++)
                {
                    Decimal PersonalResponsibilityShared = 0;
                    Decimal result = 0;

                    if (gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Self Pay Discount" ||
                        gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "3rd Party Discount" ||
                        gvSettlementsInMedBill["SettlementTypeValue", i]?.Value?.ToString() == "Member Payment")
                    {
                        if (Decimal.TryParse(gvSettlementsInMedBill["PersonalResponsibility", i]?.Value?.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out result))
                        {
                            PersonalResponsibilityShared = result;
                            TotalPersonalResponsibilityShared += PersonalResponsibilityShared;
                            PersonalResponsibilityBalance -= TotalPersonalResponsibilityShared;
                        }
                    }
                }

                txtPersonalResponsibility.Text = PersonalResponsibilityBalance.ToString("C");

                // Populate Task GridView

                MedBillNoForTask = gvMedBillList["MedBill_BillNo", e.RowIndex].Value.ToString();
                String strSqlQueryForTaskInMedBill = "select [dbo].[tbl_task].[Subject], [dbo].[tbl_task].[DueDate], [dbo].[tbl_user].[User_Name], [dbo].[tbl_task_status_code].[TaskStatusValue], " +
                                                     "[dbo].[tbl_task].[id] " +
                                                     "from [dbo].[tbl_task] " +
                                                     "inner join [dbo].[tbl_user] on [dbo].[tbl_task].[AssignedTo] = [dbo].[tbl_user].[User_Id] " +
                                                     "inner join [dbo].[tbl_task_status_code] on [dbo].[tbl_task].[Status] = [dbo].[tbl_task_status_code].[TaskStatusCode] " +
                                                     "where [dbo].[tbl_task].[whatid] = @MedBillNo " +
                                                     "order by [dbo].[tbl_task].[CreateDate] desc";

                SqlCommand cmdQueryForTask = new SqlCommand(strSqlQueryForTaskInMedBill, connRN4);
                cmdQueryForTask.CommandType = CommandType.Text;

                cmdQueryForTask.Parameters.AddWithValue("@MedBillNo", MedBillNoForTask);

                SqlDependency dependencyTask = new SqlDependency(cmdQueryForTask);
                dependencyTask.OnChange += new OnChangeEventHandler(OnTaskInMedBillChange);

                if (connRN4.State != ConnectionState.Closed)
                {
                    connRN4.Close();
                    connRN4.Open();
                }
                else if (connRN4.State == ConnectionState.Closed) connRN4.Open();

                SqlDataReader rdrTaskForMedBill = cmdQueryForTask.ExecuteReader();
                gvMostRecentTasks.Rows.Clear();
                if (rdrTaskForMedBill.HasRows)
                {
                    while (rdrTaskForMedBill.Read())
                    {
                        DataGridViewRow row = new DataGridViewRow();
                        if (!rdrTaskForMedBill.IsDBNull(0)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetString(0) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrTaskForMedBill.IsDBNull(1)) row.Cells.Add(new CalendarCell { Value = rdrTaskForMedBill.GetDateTime(1).ToString("MM/dd/yyyy") });
                        else row.Cells.Add(new CalendarCell { Value = String.Empty });
                        if (!rdrTaskForMedBill.IsDBNull(2)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetString(2) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrTaskForMedBill.IsDBNull(3)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetString(3) });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });
                        if (!rdrTaskForMedBill.IsDBNull(4)) row.Cells.Add(new DataGridViewTextBoxCell { Value = rdrTaskForMedBill.GetInt32(4).ToString() });
                        else row.Cells.Add(new DataGridViewTextBoxCell { Value = String.Empty });

                        gvMostRecentTasks.Rows.Add(row);
                    }
                }
                rdrTaskForMedBill.Close();

                if (connRN4.State == ConnectionState.Open) connRN4.Close();

                EnableMedicalBillForm();

                btnMedBillCreatePgUpperSave.Enabled = true;
                //btnMedBillCreationPgLowerSave.Enabled = true;

                tbCMMManager.SelectedTab = tbpgMedicalBill;
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //if (!tbCMMManager.TabPages.Contains(tbpgMedicalBill))
                //{
                //    tbCMMManager.TabPages.Add(tbpgMedicalBill);
                //    tbCMMManager.SelectedTab = tbpgMedicalBill;
                //}
                //else
                //{
                //    MessageBox.Show("Medical Bill page is already open. Close Medical Bill page first.", "Alert");
                //    return;
                //}
            }

        }

        private void btnExport_Click(object sender, EventArgs e)
        {
            ExcelPackage excelApprovedSettlement = new ExcelPackage();

            String strSqlQueryForAuthorName = "select [dbo].[tbl_user].[User_Name] from [dbo].[tbl_user] where [dbo].[tbl_user].[User_Id] = @UserId";

            SqlCommand cmdQueryForAuthorName = new SqlCommand(strSqlQueryForAuthorName, connRN3);
            cmdQueryForAuthorName.CommandType = CommandType.Text;

            cmdQueryForAuthorName.Parameters.AddWithValue("@UserId", nLoggedUserId);

            if (connRN3.State != ConnectionState.Closed)
            {
                connRN3.Close();
                connRN3.Open();
            }
            else if (connRN3.State == ConnectionState.Closed) connRN3.Open();
            String strUserName = cmdQueryForAuthorName.ExecuteScalar()?.ToString();
            if (connRN3.State == ConnectionState.Open) connRN3.Close();

            excelApprovedSettlement.Workbook.Properties.Author = strUserName;
            excelApprovedSettlement.Workbook.Properties.Title = "Approved Settlement Export";
            excelApprovedSettlement.Workbook.Properties.Subject = "Approved Settlement List";
            excelApprovedSettlement.Workbook.Properties.Created = DateTime.Now;

            ExcelWorksheet wsApprovedSettlements = excelApprovedSettlement.Workbook.Worksheets.Add("Sheet 1");

            wsApprovedSettlements.Cells["A1"].Value = "Full Name";
            wsApprovedSettlements.Cells["A1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["A1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["A1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(1).Width = 20;
            wsApprovedSettlements.Cells["B1"].Value = "First Name";
            wsApprovedSettlements.Cells["B1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["B1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["B1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(2).Width = 15;
            wsApprovedSettlements.Cells["C1"].Value = "Middle Name";
            wsApprovedSettlements.Cells["C1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["C1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["C1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(3).Width = 10;
            wsApprovedSettlements.Cells["D1"].Value = "Last Name";
            wsApprovedSettlements.Cells["D1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["D1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["D1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(4).Width = 10;
            wsApprovedSettlements.Cells["E1"].Value = "Household Role";
            wsApprovedSettlements.Cells["E1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["E1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["E1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(5).Width = 20;
            wsApprovedSettlements.Cells["F1"].Value = "Individual ID";
            wsApprovedSettlements.Cells["F1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["F1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["F1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(6).Width = 20;
            wsApprovedSettlements.Cells["G1"].Value = "Primary Name";
            wsApprovedSettlements.Cells["G1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["G1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["G1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(7).Width = 20;
            wsApprovedSettlements.Cells["H1"].Value = "CMM Payment Method";
            wsApprovedSettlements.Cells["H1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["H1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["H1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(8).Width = 20;
            wsApprovedSettlements.Cells["I1"].Value = "Program Name";
            wsApprovedSettlements.Cells["I1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["I1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["I1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(9).Width = 20;
            wsApprovedSettlements.Cells["J1"].Value = "Incident Program";
            wsApprovedSettlements.Cells["J1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["J1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["J1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(10).Width = 15;
            wsApprovedSettlements.Cells["K1"].Value = "Membership Start Date";
            wsApprovedSettlements.Cells["K1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["K1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["K1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(11).Width = 20;
            wsApprovedSettlements.Cells["L1"].Value = "Membership: Membership Number";
            wsApprovedSettlements.Cells["L1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["L1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["L1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(12).Width = 20;
            wsApprovedSettlements.Cells["M1"].Value = "Itemized Bill Received Date";
            wsApprovedSettlements.Cells["M1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["M1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["M1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(13).Width = 25;
            wsApprovedSettlements.Cells["N1"].Value = "Date of Service";
            wsApprovedSettlements.Cells["N1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["N1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["N1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(14).Width = 15;
            wsApprovedSettlements.Cells["O1"].Value = "Medical Provider: Account Name";
            wsApprovedSettlements.Cells["O1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["O1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["O1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(15).Width = 30;
            wsApprovedSettlements.Cells["P1"].Value = "Member's Account Number at Provider";
            wsApprovedSettlements.Cells["P1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["P1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["P1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(16).Width = 30;
            wsApprovedSettlements.Cells["Q1"].Value = "Account Name: Shipping Street";
            wsApprovedSettlements.Cells["Q1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["Q1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["Q1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(17).Width = 30;
            wsApprovedSettlements.Cells["R1"].Value = "Account Name: Shipping City";
            wsApprovedSettlements.Cells["R1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["R1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["R1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(18).Width = 25;
            wsApprovedSettlements.Cells["S1"].Value = "Account Name: Shipping State/Province";
            wsApprovedSettlements.Cells["S1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["S1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["S1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(19).Width = 30;
            wsApprovedSettlements.Cells["T1"].Value = "Account Name: Shipping Zip/Postal Code";
            wsApprovedSettlements.Cells["T1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["T1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["T1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(20).Width = 30;
            wsApprovedSettlements.Cells["U1"].Value = "Amount";
            wsApprovedSettlements.Cells["U1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["U1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["U1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(21).Width = 10;
            wsApprovedSettlements.Cells["V1"].Value = "Type";
            wsApprovedSettlements.Cells["V1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["V1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["V1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(22).Width = 30;
            wsApprovedSettlements.Cells["W1"].Value = "Medical Bill Name";
            wsApprovedSettlements.Cells["W1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["W1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["W1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(23).Width = 20;
            wsApprovedSettlements.Cells["X1"].Value = "Settlement Name";
            wsApprovedSettlements.Cells["X1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["X1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["X1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(24).Width = 20;
            wsApprovedSettlements.Cells["Y1"].Value = "Well-Being Care Shared";
            wsApprovedSettlements.Cells["Y1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["Y1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["Y1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(25).Width = 20;
            wsApprovedSettlements.Cells["Z1"].Value = "ICD10 Code: ICD10 Description";
            wsApprovedSettlements.Cells["Z1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["Z1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["Z1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(26).Width = 50;
            wsApprovedSettlements.Cells["AA1"].Value = "Created by - Full Name";
            wsApprovedSettlements.Cells["AA1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["AA1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["AA1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(27).Width = 20;
            wsApprovedSettlements.Cells["AB1"].Value = "Last Modified By - Full Name";
            wsApprovedSettlements.Cells["AB1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["AB1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["AB1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(28).Width = 30;
            wsApprovedSettlements.Cells["AC1"].Value = "Membership Status";
            wsApprovedSettlements.Cells["AC1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["AC1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["AC1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(29).Width = 20;
            wsApprovedSettlements.Cells["AD1"].Value = "Approved";
            wsApprovedSettlements.Cells["AD1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["AD1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["AD1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(30).Width = 10;
            wsApprovedSettlements.Cells["AE1"].Value = "Incident: Incident Name";
            wsApprovedSettlements.Cells["AE1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["AE1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["AE1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(30).Width = 20;


            ApprovedSettlementInfo info = new ApprovedSettlementInfo();

            String strSqlQueryForSettlementApproved = "select [dbo].[tbl_incident].[IncidentNo], [dbo].[tbl_settlement].[Name], " +
                                                      "[dbo].[tbl_settlement].[MedicalBillID], [dbo].[tbl_medbill].[Individual_Id], " +
                                                      "[dbo].[tbl_payment_method].[PaymentMethod_Value], [dbo].[tbl_program].[ProgramName], " +
                                                      "[dbo].[tbl_case].[IB_Receiv_Date], " +
                                                      "[dbo].[tbl_medbill].[BillDate], [dbo].[tbl_medbill].[Account_At_Provider], " +
                                                      "[dbo].[tbl_settlement].[Amount], [dbo].[tbl_settlement_type_code].[SettlementTypeValue]," +
                                                      "[dbo].[tbl_CreateStaff].[Staff_Name], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                      "[dbo].[tbl_medbill].[MedicalProvider_Id], [dbo].[tbl_illness].[ICD_10_Id], " +
                                                      "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_settlement].[Approved] " +
                                                      "from [dbo].[tbl_settlement] " +
                                                      "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
                                                      "inner join [dbo].[tbl_settlement_type_code] on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                      "inner join [dbo].[tbl_medbill] on [dbo].[tbl_settlement].[MedicalBillID] = [dbo].[tbl_medbill].[BillNo] " +
                                                      "inner join [dbo].[tbl_case] on [dbo].[tbl_medbill].[Case_Id] = [dbo].[tbl_case].[Case_Name] " +
                                                      "inner join [dbo].[tbl_incident] on [dbo].[tbl_medbill].[Incident_Id] = [dbo].[tbl_incident].[Incident_id] " +
                                                      "inner join [dbo].[tbl_program] on [dbo].[tbl_incident].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                                                      "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                      "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_settlement].[CreateByID] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                                      "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_settlement].[LastModifiedByID] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                                      "where [dbo].[tbl_settlement].[Approved] = 1 and " +
                                                      "[dbo].[tbl_illness].[ICD_10_Id] <> 'Z00.00' and [dbo].[tbl_illness].[ICD_10_Id] <> 'Z00.012' and [dbo].[tbl_illness].[ICD_10_Id] is not NULL and " +
                                                      "([dbo].[tbl_payment_method].[PaymentMethod_Value] = 'Check' or [dbo].[tbl_payment_method].[PaymentMethod_Value] = 'ACH/Banking') and " +
                                                      "([dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'Member Reimbursement' or " +
                                                      "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'CMM Provider Payment' or " +
                                                      "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'PR Reimbursement') and " +
                                                      "([dbo].[tbl_medbill].[WellBeingCare] = 0 or [dbo].[tbl_medbill].[WellBeingCare] is NULL) and " +
                                                      "([dbo].[tbl_settlement].[CheckDate] is NULL or [dbo].[tbl_settlement].[CheckDate] = '') and " +
                                                      "([dbo].[tbl_settlement].[CheckNo] is NULL or [dbo].[tbl_settlement].[CheckNo] = '') and " +
                                                      "([dbo].[tbl_settlement].[ACH_Number] is NULL or [dbo].[tbl_settlement].[CheckNo] = '') and " +
                                                      "([dbo].[tbl_settlement].[IsExported] = 0 or [dbo].[tbl_settlement].[IsExported] is NULL)";

            SqlCommand cmdQueryForSettlementApproved = new SqlCommand(strSqlQueryForSettlementApproved, connRN);
            cmdQueryForSettlementApproved.CommandType = CommandType.Text;

            List<String> lstMedBillID = new List<String>();
            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrSettlementApproved = cmdQueryForSettlementApproved.ExecuteReader();

            List<ApprovedSettlementInfo> lstApprovedSettlement = new List<ApprovedSettlementInfo>();

            if (rdrSettlementApproved.HasRows)
            {
                while (rdrSettlementApproved.Read())
                {
                    ApprovedSettlementInfo settlement = new ApprovedSettlementInfo();

                    if (!rdrSettlementApproved.IsDBNull(0)) settlement.IncidentNo = rdrSettlementApproved.GetString(0);
                    if (!rdrSettlementApproved.IsDBNull(1)) settlement.SettlementName = rdrSettlementApproved.GetString(1);
                    if (!rdrSettlementApproved.IsDBNull(2)) settlement.MedBillName = rdrSettlementApproved.GetString(2);
                    if (!rdrSettlementApproved.IsDBNull(3)) settlement.IndividualId = rdrSettlementApproved.GetString(3);
                    if (!rdrSettlementApproved.IsDBNull(4)) settlement.PaymentType = rdrSettlementApproved.GetString(4);
                    if (!rdrSettlementApproved.IsDBNull(5)) settlement.IncidentProgram = rdrSettlementApproved.GetString(5);
                    if (!rdrSettlementApproved.IsDBNull(6)) settlement.IBReceivedDate = rdrSettlementApproved.GetDateTime(6);
                    if (!rdrSettlementApproved.IsDBNull(7)) settlement.ServiceDate = rdrSettlementApproved.GetDateTime(7);
                    if (!rdrSettlementApproved.IsDBNull(8)) settlement.AccountNoAtMedProvider = rdrSettlementApproved.GetString(8);
                    if (!rdrSettlementApproved.IsDBNull(9)) settlement.Amount = rdrSettlementApproved.GetDecimal(9);
                    if (!rdrSettlementApproved.IsDBNull(10)) settlement.SettlementType = rdrSettlementApproved.GetString(10);
                    if (!rdrSettlementApproved.IsDBNull(11)) settlement.CreatedBy = rdrSettlementApproved.GetString(11);
                    if (!rdrSettlementApproved.IsDBNull(12)) settlement.LastModifiedBy = rdrSettlementApproved.GetString(12);
                    if (!rdrSettlementApproved.IsDBNull(13)) settlement.MedicalProviderId = rdrSettlementApproved.GetString(13);
                    if (!rdrSettlementApproved.IsDBNull(14)) settlement.ICD10Code = rdrSettlementApproved.GetString(14);
                    if (settlement.ICD10Code != "Z00.00" && settlement.ICD10Code != "Z00.012") settlement.WellBeingCareShared = 0;
                    //if (settlement.ICD10Code == "Z00.00" || settlement.ICD10Code == "Z00.012") settlement.WellBeingCareShared = settlement.Amount;

                    if (!rdrSettlementApproved.IsDBNull(15)) settlement.AccountNoAtMedProvider = rdrSettlementApproved.GetString(15);
                    if (!rdrSettlementApproved.IsDBNull(16)) settlement.Approved = rdrSettlementApproved.GetBoolean(16);

                    lstApprovedSettlement.Add(settlement);

                }
            }
            rdrSettlementApproved.Close();
            if (connRN.State == ConnectionState.Open) connRN.Close();

            foreach (ApprovedSettlementInfo settlement in lstApprovedSettlement)
            {
                if (settlement.ICD10Code != null)
                {
                    String strSqlQueryForDiseaseName = "select [dbo].[ICD10 Code].[Name] from [dbo].[ICD10 Code] where [dbo].[ICD10 Code].[ICD10_CODE__C] = @ICD10Code";

                    SqlCommand cmdQueryForDiseaseName = new SqlCommand(strSqlQueryForDiseaseName, connSalesforce);
                    cmdQueryForDiseaseName.CommandType = CommandType.Text;

                    cmdQueryForDiseaseName.Parameters.AddWithValue("@ICD10Code", settlement.ICD10Code);

                    if (connSalesforce.State != ConnectionState.Closed)
                    {
                        connSalesforce.Close();
                        connSalesforce.Open();
                    }
                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                    Object objDiseaseName = cmdQueryForDiseaseName.ExecuteScalar();
                    if (objDiseaseName != null) settlement.ICD10CodeDescription = objDiseaseName.ToString();
                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
                }
                else settlement.ICD10CodeDescription = String.Empty;
            }


            foreach (ApprovedSettlementInfo settlement in lstApprovedSettlement)
            {
                String strSqlQueryForIndividualInfo = "select [dbo].[contact].[Name], [dbo].[contact].[FirstName], [dbo].[contact].[MiddleName], [dbo].[contact].[LastName], " +
                                                      "[dbo].[contact].[Household_Role__c], [dbo].[contact].[Primary_Name__c], [dbo].[program].[Name], " +
                                                      "[dbo].[contact].[Membership_IND_Start_date__c], [dbo].[contact].[Membership_Number__c], " +
                                                      "[dbo].[account].[SHIPPINGSTREET], [dbo].[account].[SHIPPINGCITY], [dbo].[account].[SHIPPINGSTATE], [dbo].[account].[SHIPPINGPOSTALCODE], " +
                                                      "[dbo].[contact].[c4g_Membership_Status__c] " +
                                                      "from [dbo].[contact] " +
                                                      "inner join [dbo].[program] on [dbo].[contact].[c4g_Plan__c] = [dbo].[program].[ID] " +
                                                      "inner join [dbo].[account] on [dbo].[contact].[AccountId] = [dbo].[account].[ID] " +
                                                      "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                SqlCommand cmdQueryForIndividualInfo = new SqlCommand(strSqlQueryForIndividualInfo, connSalesforce);
                cmdQueryForIndividualInfo.CommandType = CommandType.Text;

                cmdQueryForIndividualInfo.Parameters.AddWithValue("@IndividualId", settlement.IndividualId);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                SqlDataReader rdrIndividualInfo = cmdQueryForIndividualInfo.ExecuteReader();

                if (rdrIndividualInfo.HasRows)
                {
                    rdrIndividualInfo.Read();
                    if (!rdrIndividualInfo.IsDBNull(0)) settlement.FullName = rdrIndividualInfo.GetString(0);
                    if (!rdrIndividualInfo.IsDBNull(1)) settlement.FirstName = rdrIndividualInfo.GetString(1);
                    if (!rdrIndividualInfo.IsDBNull(2)) settlement.MiddleName = rdrIndividualInfo.GetString(2);
                    if (!rdrIndividualInfo.IsDBNull(3)) settlement.LastName = rdrIndividualInfo.GetString(3);
                    if (!rdrIndividualInfo.IsDBNull(4)) settlement.HouseholdRole = rdrIndividualInfo.GetString(4);
                    if (!rdrIndividualInfo.IsDBNull(5)) settlement.PrimaryName = rdrIndividualInfo.GetString(5);
                    if (!rdrIndividualInfo.IsDBNull(6)) settlement.ProgramName = rdrIndividualInfo.GetString(6);
                    if (!rdrIndividualInfo.IsDBNull(7)) settlement.MembershipStartDate = rdrIndividualInfo.GetDateTime(7);
                    if (!rdrIndividualInfo.IsDBNull(8)) settlement.MembershipNo = rdrIndividualInfo.GetString(8);
                    if (!rdrIndividualInfo.IsDBNull(9)) settlement.AccountShippingStreet = rdrIndividualInfo.GetString(9);
                    if (!rdrIndividualInfo.IsDBNull(10)) settlement.AccountShippingCity = rdrIndividualInfo.GetString(10);
                    if (!rdrIndividualInfo.IsDBNull(11)) settlement.AccountShippingState = rdrIndividualInfo.GetString(11);
                    if (!rdrIndividualInfo.IsDBNull(12)) settlement.AccountShppingZip = rdrIndividualInfo.GetDouble(12).ToString();
                    if (!rdrIndividualInfo.IsDBNull(13)) settlement.MembershipStatus = rdrIndividualInfo.GetString(13);
                }

                rdrIndividualInfo.Close();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
            }

            foreach (ApprovedSettlementInfo settlement in lstApprovedSettlement)
            {
                String strSqlQueryForMedicalProviderName = "select [dbo].[MedicalProvider].[Name] from [dbo].[MedicalProvider] where [dbo].[MedicalProvider].[ID] = @MedicalProviderId";

                SqlCommand cmdQueryForMedicalProvider = new SqlCommand(strSqlQueryForMedicalProviderName, connSalesforce);
                cmdQueryForMedicalProvider.CommandType = CommandType.Text;

                cmdQueryForMedicalProvider.Parameters.AddWithValue("@MedicalProviderId", settlement.MedicalProviderId);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                Object objMedicalProviderName = cmdQueryForMedicalProvider.ExecuteScalar();
                if (objMedicalProviderName != null) settlement.MedicalProviderName = objMedicalProviderName.ToString();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
            }




            for (int i = 0; i < lstApprovedSettlement.Count; i++)
            {
                if (i % 2 == 0)
                {
                    wsApprovedSettlements.Cells[i + 2, 1].Value = lstApprovedSettlement[i].FullName;
                    wsApprovedSettlements.Cells[i + 2, 2].Value = lstApprovedSettlement[i].FirstName;
                    wsApprovedSettlements.Cells[i + 2, 3].Value = lstApprovedSettlement[i].MiddleName;
                    wsApprovedSettlements.Cells[i + 2, 4].Value = lstApprovedSettlement[i].LastName;
                    wsApprovedSettlements.Cells[i + 2, 5].Value = lstApprovedSettlement[i].HouseholdRole;
                    wsApprovedSettlements.Cells[i + 2, 6].Value = lstApprovedSettlement[i].IndividualId;
                    wsApprovedSettlements.Cells[i + 2, 7].Value = lstApprovedSettlement[i].PrimaryName;
                    wsApprovedSettlements.Cells[i + 2, 8].Value = lstApprovedSettlement[i].PaymentType;
                    wsApprovedSettlements.Cells[i + 2, 9].Value = lstApprovedSettlement[i].ProgramName;
                    wsApprovedSettlements.Cells[i + 2, 10].Value = lstApprovedSettlement[i].IncidentProgram;
                    wsApprovedSettlements.Cells[i + 2, 11].Value = lstApprovedSettlement[i].MembershipStartDate.ToString("MM/dd/yyyy");
                    wsApprovedSettlements.Cells[i + 2, 12].Value = lstApprovedSettlement[i].MembershipNo;
                    wsApprovedSettlements.Cells[i + 2, 13].Value = lstApprovedSettlement[i].IBReceivedDate.ToString("MM/dd/yyyy");
                    wsApprovedSettlements.Cells[i + 2, 14].Value = lstApprovedSettlement[i].ServiceDate.ToString("MM/dd/yyyy");
                    wsApprovedSettlements.Cells[i + 2, 15].Value = lstApprovedSettlement[i].MedicalProviderName;
                    wsApprovedSettlements.Cells[i + 2, 16].Value = lstApprovedSettlement[i].AccountNoAtMedProvider;
                    wsApprovedSettlements.Cells[i + 2, 17].Value = lstApprovedSettlement[i].AccountShippingStreet;
                    wsApprovedSettlements.Cells[i + 2, 18].Value = lstApprovedSettlement[i].AccountShippingCity;
                    wsApprovedSettlements.Cells[i + 2, 19].Value = lstApprovedSettlement[i].AccountShippingState;
                    wsApprovedSettlements.Cells[i + 2, 20].Value = lstApprovedSettlement[i].AccountShppingZip;
                    wsApprovedSettlements.Cells[i + 2, 21].Value = lstApprovedSettlement[i].Amount;
                    wsApprovedSettlements.Cells[i + 2, 22].Value = lstApprovedSettlement[i].SettlementType;
                    wsApprovedSettlements.Cells[i + 2, 23].Value = lstApprovedSettlement[i].MedBillName;
                    wsApprovedSettlements.Cells[i + 2, 24].Value = lstApprovedSettlement[i].SettlementName;
                    wsApprovedSettlements.Cells[i + 2, 25].Value = lstApprovedSettlement[i].WellBeingCareShared;
                    wsApprovedSettlements.Cells[i + 2, 26].Value = lstApprovedSettlement[i].ICD10CodeDescription;
                    wsApprovedSettlements.Cells[i + 2, 27].Value = lstApprovedSettlement[i].CreatedBy;
                    wsApprovedSettlements.Cells[i + 2, 28].Value = lstApprovedSettlement[i].LastModifiedBy;
                    wsApprovedSettlements.Cells[i + 2, 29].Value = lstApprovedSettlement[i].MembershipStatus;
                    wsApprovedSettlements.Cells[i + 2, 30].Value = lstApprovedSettlement[i].Approved;
                    wsApprovedSettlements.Cells[i + 2, 31].Value = lstApprovedSettlement[i].IncidentNo;
                }
                else
                {
                    wsApprovedSettlements.Cells[i + 2, 1].Value = lstApprovedSettlement[i].FullName;
                    wsApprovedSettlements.Cells[i + 2, 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 1].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 2].Value = lstApprovedSettlement[i].FirstName;
                    wsApprovedSettlements.Cells[i + 2, 2].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 2].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 3].Value = lstApprovedSettlement[i].MiddleName;
                    wsApprovedSettlements.Cells[i + 2, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 3].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 4].Value = lstApprovedSettlement[i].LastName;
                    wsApprovedSettlements.Cells[i + 2, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 4].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 5].Value = lstApprovedSettlement[i].HouseholdRole;
                    wsApprovedSettlements.Cells[i + 2, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 5].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 6].Value = lstApprovedSettlement[i].IndividualId;
                    wsApprovedSettlements.Cells[i + 2, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 6].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 7].Value = lstApprovedSettlement[i].PrimaryName;
                    wsApprovedSettlements.Cells[i + 2, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 7].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 8].Value = lstApprovedSettlement[i].PaymentType;
                    wsApprovedSettlements.Cells[i + 2, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 8].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 9].Value = lstApprovedSettlement[i].ProgramName;
                    wsApprovedSettlements.Cells[i + 2, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 9].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 10].Value = lstApprovedSettlement[i].IncidentProgram;
                    wsApprovedSettlements.Cells[i + 2, 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 10].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 11].Value = lstApprovedSettlement[i].MembershipStartDate.ToString("MM/dd/yyyy");
                    wsApprovedSettlements.Cells[i + 2, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 11].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 12].Value = lstApprovedSettlement[i].MembershipNo;
                    wsApprovedSettlements.Cells[i + 2, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 12].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 13].Value = lstApprovedSettlement[i].IBReceivedDate.ToString("MM/dd/yyyy");
                    wsApprovedSettlements.Cells[i + 2, 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 13].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 14].Value = lstApprovedSettlement[i].ServiceDate.ToString("MM/dd/yyyy");
                    wsApprovedSettlements.Cells[i + 2, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 14].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 15].Value = lstApprovedSettlement[i].MedicalProviderName;
                    wsApprovedSettlements.Cells[i + 2, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 15].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 16].Value = lstApprovedSettlement[i].AccountNoAtMedProvider;
                    wsApprovedSettlements.Cells[i + 2, 16].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 16].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 17].Value = lstApprovedSettlement[i].AccountShippingStreet;
                    wsApprovedSettlements.Cells[i + 2, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 17].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 18].Value = lstApprovedSettlement[i].AccountShippingCity;
                    wsApprovedSettlements.Cells[i + 2, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 18].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 19].Value = lstApprovedSettlement[i].AccountShippingState;
                    wsApprovedSettlements.Cells[i + 2, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 19].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 20].Value = lstApprovedSettlement[i].AccountShppingZip;
                    wsApprovedSettlements.Cells[i + 2, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 20].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 21].Value = lstApprovedSettlement[i].Amount;
                    wsApprovedSettlements.Cells[i + 2, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 21].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 22].Value = lstApprovedSettlement[i].SettlementType;
                    wsApprovedSettlements.Cells[i + 2, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 22].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 23].Value = lstApprovedSettlement[i].MedBillName;
                    wsApprovedSettlements.Cells[i + 2, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 23].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 24].Value = lstApprovedSettlement[i].SettlementName;
                    wsApprovedSettlements.Cells[i + 2, 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 24].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 25].Value = lstApprovedSettlement[i].WellBeingCareShared;
                    wsApprovedSettlements.Cells[i + 2, 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 25].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 26].Value = lstApprovedSettlement[i].ICD10CodeDescription;
                    wsApprovedSettlements.Cells[i + 2, 26].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 26].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 27].Value = lstApprovedSettlement[i].CreatedBy;
                    wsApprovedSettlements.Cells[i + 2, 27].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 27].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 28].Value = lstApprovedSettlement[i].LastModifiedBy;
                    wsApprovedSettlements.Cells[i + 2, 28].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 28].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 29].Value = lstApprovedSettlement[i].MembershipStatus;
                    wsApprovedSettlements.Cells[i + 2, 29].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 29].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 30].Value = lstApprovedSettlement[i].Approved;
                    wsApprovedSettlements.Cells[i + 2, 30].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 30].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 31].Value = lstApprovedSettlement[i].IncidentNo;
                    wsApprovedSettlements.Cells[i + 2, 31].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 31].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                }

            }

            SaveFileDialog saveFileDlg = new SaveFileDialog();
            saveFileDlg.Filter = "Excel File|*.xlsx";
            saveFileDlg.Title = "Save an Excel File";
            saveFileDlg.ShowDialog();

            if (saveFileDlg.FileName != "")
            {
                FileInfo fi = new FileInfo(saveFileDlg.FileName);
                excelApprovedSettlement.SaveAs(fi);
            }
        }

        private void btnWellBeingExport_Click(object sender, EventArgs e)
        {
            ExcelPackage excelApprovedSettlement = new ExcelPackage();

            String strSqlQueryForAuthorName = "select [dbo].[tbl_user].[User_Name] from [dbo].[tbl_user] where [dbo].[tbl_user].[User_Id] = @UserId";

            SqlCommand cmdQueryForAuthorName = new SqlCommand(strSqlQueryForAuthorName, connRN3);
            cmdQueryForAuthorName.CommandType = CommandType.Text;

            cmdQueryForAuthorName.Parameters.AddWithValue("@UserId", nLoggedUserId);

            if (connRN3.State != ConnectionState.Closed)
            {
                connRN3.Close();
                connRN3.Open();
            }
            else if (connRN3.State == ConnectionState.Closed) connRN3.Open();
            String strUserName = cmdQueryForAuthorName.ExecuteScalar()?.ToString();
            if (connRN3.State == ConnectionState.Open) connRN3.Close();

            excelApprovedSettlement.Workbook.Properties.Author = strUserName;
            excelApprovedSettlement.Workbook.Properties.Title = "Approved Settlement Export";
            excelApprovedSettlement.Workbook.Properties.Subject = "Approved Settlement List";
            excelApprovedSettlement.Workbook.Properties.Created = DateTime.Now;

            ExcelWorksheet wsApprovedSettlements = excelApprovedSettlement.Workbook.Worksheets.Add("Sheet 1");

            wsApprovedSettlements.Cells["A1"].Value = "Full Name";
            wsApprovedSettlements.Cells["A1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["A1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["A1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(1).Width = 20;
            wsApprovedSettlements.Cells["B1"].Value = "First Name";
            wsApprovedSettlements.Cells["B1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["B1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["B1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(2).Width = 15;
            wsApprovedSettlements.Cells["C1"].Value = "Middle Name";
            wsApprovedSettlements.Cells["C1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["C1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["C1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(3).Width = 10;
            wsApprovedSettlements.Cells["D1"].Value = "Last Name";
            wsApprovedSettlements.Cells["D1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["D1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["D1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(4).Width = 10;
            wsApprovedSettlements.Cells["E1"].Value = "Household Role";
            wsApprovedSettlements.Cells["E1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["E1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["E1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(5).Width = 20;
            wsApprovedSettlements.Cells["F1"].Value = "Individual ID";
            wsApprovedSettlements.Cells["F1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["F1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["F1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(6).Width = 20;
            wsApprovedSettlements.Cells["G1"].Value = "Primary Name";
            wsApprovedSettlements.Cells["G1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["G1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["G1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(7).Width = 20;
            wsApprovedSettlements.Cells["H1"].Value = "CMM Payment Method";
            wsApprovedSettlements.Cells["H1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["H1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["H1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(8).Width = 20;
            wsApprovedSettlements.Cells["I1"].Value = "Program Name";
            wsApprovedSettlements.Cells["I1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["I1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["I1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(9).Width = 20;
            wsApprovedSettlements.Cells["J1"].Value = "Incident Program";
            wsApprovedSettlements.Cells["J1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["J1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["J1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(10).Width = 15;
            wsApprovedSettlements.Cells["K1"].Value = "Membership Start Date";
            wsApprovedSettlements.Cells["K1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["K1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["K1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(11).Width = 20;
            wsApprovedSettlements.Cells["L1"].Value = "Membership: Membership Number";
            wsApprovedSettlements.Cells["L1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["L1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["L1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(12).Width = 20;
            wsApprovedSettlements.Cells["M1"].Value = "Itemized Bill Received Date";
            wsApprovedSettlements.Cells["M1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["M1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["M1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(13).Width = 25;
            wsApprovedSettlements.Cells["N1"].Value = "Date of Service";
            wsApprovedSettlements.Cells["N1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["N1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["N1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(14).Width = 15;
            wsApprovedSettlements.Cells["O1"].Value = "Medical Provider: Account Name";
            wsApprovedSettlements.Cells["O1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["O1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["O1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(15).Width = 30;
            wsApprovedSettlements.Cells["P1"].Value = "Member's Account Number at Provider";
            wsApprovedSettlements.Cells["P1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["P1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["P1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(16).Width = 30;
            wsApprovedSettlements.Cells["Q1"].Value = "Account Name: Shipping Street";
            wsApprovedSettlements.Cells["Q1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["Q1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["Q1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(17).Width = 30;
            wsApprovedSettlements.Cells["R1"].Value = "Account Name: Shipping City";
            wsApprovedSettlements.Cells["R1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["R1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["R1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(18).Width = 25;
            wsApprovedSettlements.Cells["S1"].Value = "Account Name: Shipping State/Province";
            wsApprovedSettlements.Cells["S1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["S1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["S1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(19).Width = 30;
            wsApprovedSettlements.Cells["T1"].Value = "Account Name: Shipping Zip/Postal Code";
            wsApprovedSettlements.Cells["T1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["T1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["T1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(20).Width = 30;
            wsApprovedSettlements.Cells["U1"].Value = "Amount";
            wsApprovedSettlements.Cells["U1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["U1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["U1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(21).Width = 10;
            wsApprovedSettlements.Cells["V1"].Value = "Type";
            wsApprovedSettlements.Cells["V1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["V1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["V1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(22).Width = 30;
            wsApprovedSettlements.Cells["W1"].Value = "Medical Bill Name";
            wsApprovedSettlements.Cells["W1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["W1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["W1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(23).Width = 20;
            wsApprovedSettlements.Cells["X1"].Value = "Settlement Name";
            wsApprovedSettlements.Cells["X1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["X1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["X1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(24).Width = 20;
            wsApprovedSettlements.Cells["Y1"].Value = "Well-Being Care Shared";
            wsApprovedSettlements.Cells["Y1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["Y1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["Y1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(25).Width = 20;
            wsApprovedSettlements.Cells["Z1"].Value = "ICD10 Code: ICD10 Description";
            wsApprovedSettlements.Cells["Z1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["Z1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["Z1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(26).Width = 50;
            wsApprovedSettlements.Cells["AA1"].Value = "Created by - Full Name";
            wsApprovedSettlements.Cells["AA1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["AA1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["AA1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(27).Width = 20;
            wsApprovedSettlements.Cells["AB1"].Value = "Last Modified By - Full Name";
            wsApprovedSettlements.Cells["AB1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["AB1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["AB1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(28).Width = 30;
            wsApprovedSettlements.Cells["AC1"].Value = "Membership Status";
            wsApprovedSettlements.Cells["AC1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["AC1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["AC1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(29).Width = 20;
            wsApprovedSettlements.Cells["AD1"].Value = "Approved";
            wsApprovedSettlements.Cells["AD1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["AD1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["AD1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(30).Width = 10;
            wsApprovedSettlements.Cells["AE1"].Value = "Incident: Incident Name";
            wsApprovedSettlements.Cells["AE1"].Style.WrapText = true;
            wsApprovedSettlements.Cells["AE1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            wsApprovedSettlements.Cells["AE1"].Style.Font.Bold = true;
            wsApprovedSettlements.Column(30).Width = 20;


            ApprovedSettlementInfo info = new ApprovedSettlementInfo();

            String strSqlQueryForSettlementApproved = "select [dbo].[tbl_incident].[IncidentNo], [dbo].[tbl_settlement].[Name], " +
                                                      "[dbo].[tbl_settlement].[MedicalBillID], [dbo].[tbl_medbill].[Individual_Id], " +
                                                      "[dbo].[tbl_payment_method].[PaymentMethod_Value], [dbo].[tbl_program].[ProgramName], " +
                                                      "[dbo].[tbl_case].[IB_Receiv_Date], " +
                                                      "[dbo].[tbl_medbill].[BillDate], [dbo].[tbl_medbill].[Account_At_Provider], " +
                                                      "[dbo].[tbl_settlement].[Amount], [dbo].[tbl_settlement_type_code].[SettlementTypeValue]," +
                                                      "[dbo].[tbl_CreateStaff].[Staff_Name], [dbo].[tbl_ModifiStaff].[Staff_Name], " +
                                                      "[dbo].[tbl_medbill].[MedicalProvider_Id], [dbo].[tbl_illness].[ICD_10_Id], " +
                                                      "[dbo].[tbl_medbill].[Account_At_Provider], [dbo].[tbl_settlement].[Approved] " +
                                                      "from [dbo].[tbl_settlement] " +
                                                      "inner join [dbo].[tbl_payment_method] on [dbo].[tbl_settlement].[CMMPaymentMethod] = [dbo].[tbl_payment_method].[PaymentMethod_Id] " +
                                                      "inner join [dbo].[tbl_settlement_type_code] on [dbo].[tbl_settlement].[SettlementType] = [dbo].[tbl_settlement_type_code].[SettlementTypeCode] " +
                                                      "inner join [dbo].[tbl_medbill] on [dbo].[tbl_settlement].[MedicalBillID] = [dbo].[tbl_medbill].[BillNo] " +
                                                      "inner join [dbo].[tbl_case] on [dbo].[tbl_medbill].[Case_Id] = [dbo].[tbl_case].[Case_Name] " +
                                                      "inner join [dbo].[tbl_incident] on [dbo].[tbl_medbill].[Incident_Id] = [dbo].[tbl_incident].[Incident_id] " +
                                                      "inner join [dbo].[tbl_program] on [dbo].[tbl_incident].[Program_id] = [dbo].[tbl_program].[Program_Id] " +
                                                      "inner join [dbo].[tbl_illness] on [dbo].[tbl_medbill].[Illness_Id] = [dbo].[tbl_illness].[Illness_Id] " +
                                                      "inner join [dbo].[tbl_CreateStaff] on [dbo].[tbl_settlement].[CreateByID] = [dbo].[tbl_CreateStaff].[CreateStaff_Id] " +
                                                      "inner join [dbo].[tbl_ModifiStaff] on [dbo].[tbl_settlement].[LastModifiedByID] = [dbo].[tbl_ModifiStaff].[ModifiStaff_Id] " +
                                                      "where [dbo].[tbl_settlement].[Approved] = 1 and " +
                                                      "([dbo].[tbl_illness].[ICD_10_Id] ='Z00.00' or [dbo].[tbl_illness].[ICD_10_Id] = 'Z00.012') and " +
                                                      "([dbo].[tbl_payment_method].[PaymentMethod_Value] = 'Check' or [dbo].[tbl_payment_method].[PaymentMethod_Value] = 'ACH/Banking') and " +
                                                      "([dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'Member Reimbursement' or " +
                                                      "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'CMM Provider Payment' or " +
                                                      "[dbo].[tbl_settlement_type_code].[SettlementTypeValue] = 'PR Reimbursement') and " +
                                                      "([dbo].[tbl_medbill].[WellBeingCare] = 0 or [dbo].[tbl_medbill].[WellBeingCare] is NULL) and " +
                                                      "([dbo].[tbl_settlement].[CheckDate] is NULL or [dbo].[tbl_settlement].[CheckDate] = '') and " +
                                                      "([dbo].[tbl_settlement].[CheckNo] is NULL or [dbo].[tbl_settlement].[CheckNo] = '') and " +
                                                      "([dbo].[tbl_settlement].[ACH_Number] is NULL or [dbo].[tbl_settlement].[CheckNo] = '') and " +
                                                      "([dbo].[tbl_settlement].[IsExported] = 0 or [dbo].[tbl_settlement].[IsExported] is NULL)";

            SqlCommand cmdQueryForSettlementApproved = new SqlCommand(strSqlQueryForSettlementApproved, connRN);
            cmdQueryForSettlementApproved.CommandType = CommandType.Text;

            List<String> lstMedBillID = new List<String>();
            if (connRN.State != ConnectionState.Closed)
            {
                connRN.Close();
                connRN.Open();
            }
            else if (connRN.State == ConnectionState.Closed) connRN.Open();
            SqlDataReader rdrSettlementApproved = cmdQueryForSettlementApproved.ExecuteReader();

            List<ApprovedSettlementInfo> lstApprovedSettlement = new List<ApprovedSettlementInfo>();

            if (rdrSettlementApproved.HasRows)
            {
                while (rdrSettlementApproved.Read())
                {
                    ApprovedSettlementInfo settlement = new ApprovedSettlementInfo();

                    if (!rdrSettlementApproved.IsDBNull(0)) settlement.IncidentNo = rdrSettlementApproved.GetString(0);
                    if (!rdrSettlementApproved.IsDBNull(1)) settlement.SettlementName = rdrSettlementApproved.GetString(1);
                    if (!rdrSettlementApproved.IsDBNull(2)) settlement.MedBillName = rdrSettlementApproved.GetString(2);
                    if (!rdrSettlementApproved.IsDBNull(3)) settlement.IndividualId = rdrSettlementApproved.GetString(3);
                    if (!rdrSettlementApproved.IsDBNull(4)) settlement.PaymentType = rdrSettlementApproved.GetString(4);
                    if (!rdrSettlementApproved.IsDBNull(5)) settlement.IncidentProgram = rdrSettlementApproved.GetString(5);
                    if (!rdrSettlementApproved.IsDBNull(6)) settlement.IBReceivedDate = rdrSettlementApproved.GetDateTime(6);
                    if (!rdrSettlementApproved.IsDBNull(7)) settlement.ServiceDate = rdrSettlementApproved.GetDateTime(7);
                    if (!rdrSettlementApproved.IsDBNull(8)) settlement.AccountNoAtMedProvider = rdrSettlementApproved.GetString(8);
                    if (!rdrSettlementApproved.IsDBNull(9)) settlement.Amount = rdrSettlementApproved.GetDecimal(9);
                    if (!rdrSettlementApproved.IsDBNull(10)) settlement.SettlementType = rdrSettlementApproved.GetString(10);
                    if (!rdrSettlementApproved.IsDBNull(11)) settlement.CreatedBy = rdrSettlementApproved.GetString(11);
                    if (!rdrSettlementApproved.IsDBNull(12)) settlement.LastModifiedBy = rdrSettlementApproved.GetString(12);
                    if (!rdrSettlementApproved.IsDBNull(13)) settlement.MedicalProviderId = rdrSettlementApproved.GetString(13);
                    if (!rdrSettlementApproved.IsDBNull(14)) settlement.ICD10Code = rdrSettlementApproved.GetString(14);
                    //if (settlement.ICD10Code != "Z00.00" && settlement.ICD10Code != "Z00.012") settlement.WellBeingCareShared = 0;
                    if (settlement.ICD10Code == "Z00.00" || settlement.ICD10Code == "Z00.012") settlement.WellBeingCareShared = settlement.Amount;
                    if (!rdrSettlementApproved.IsDBNull(15)) settlement.AccountNoAtMedProvider = rdrSettlementApproved.GetString(15);
                    if (!rdrSettlementApproved.IsDBNull(16)) settlement.Approved = rdrSettlementApproved.GetBoolean(16);

                    lstApprovedSettlement.Add(settlement);

                }
            }
            rdrSettlementApproved.Close();
            if (connRN.State == ConnectionState.Open) connRN.Close();

            foreach (ApprovedSettlementInfo settlement in lstApprovedSettlement)
            {
                if (settlement.ICD10Code != null)
                {
                    String strSqlQueryForDiseaseName = "select [dbo].[ICD10 Code].[Name] from [dbo].[ICD10 Code] where [dbo].[ICD10 Code].[ICD10_CODE__C] = @ICD10Code";

                    SqlCommand cmdQueryForDiseaseName = new SqlCommand(strSqlQueryForDiseaseName, connSalesforce);
                    cmdQueryForDiseaseName.CommandType = CommandType.Text;

                    cmdQueryForDiseaseName.Parameters.AddWithValue("@ICD10Code", settlement.ICD10Code);

                    if (connSalesforce.State != ConnectionState.Closed)
                    {
                        connSalesforce.Close();
                        connSalesforce.Open();
                    }
                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                    Object objDiseaseName = cmdQueryForDiseaseName.ExecuteScalar();
                    if (objDiseaseName != null) settlement.ICD10CodeDescription = objDiseaseName.ToString();
                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
                }
                else settlement.ICD10CodeDescription = String.Empty;
            }


            foreach (ApprovedSettlementInfo settlement in lstApprovedSettlement)
            {
                String strSqlQueryForIndividualInfo = "select [dbo].[contact].[Name], [dbo].[contact].[FirstName], [dbo].[contact].[MiddleName], [dbo].[contact].[LastName], " +
                                                      "[dbo].[contact].[Household_Role__c], [dbo].[contact].[Primary_Name__c], [dbo].[program].[Name], " +
                                                      "[dbo].[contact].[Membership_IND_Start_date__c], [dbo].[contact].[Membership_Number__c], " +
                                                      "[dbo].[account].[SHIPPINGSTREET], [dbo].[account].[SHIPPINGCITY], [dbo].[account].[SHIPPINGSTATE], [dbo].[account].[SHIPPINGPOSTALCODE], " +
                                                      "[dbo].[contact].[c4g_Membership_Status__c] " +
                                                      "from [dbo].[contact] " +
                                                      "inner join [dbo].[program] on [dbo].[contact].[c4g_Plan__c] = [dbo].[program].[ID] " +
                                                      "inner join [dbo].[account] on [dbo].[contact].[AccountId] = [dbo].[account].[ID] " +
                                                      "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                SqlCommand cmdQueryForIndividualInfo = new SqlCommand(strSqlQueryForIndividualInfo, connSalesforce);
                cmdQueryForIndividualInfo.CommandType = CommandType.Text;

                cmdQueryForIndividualInfo.Parameters.AddWithValue("@IndividualId", settlement.IndividualId);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();

                SqlDataReader rdrIndividualInfo = cmdQueryForIndividualInfo.ExecuteReader();

                if (rdrIndividualInfo.HasRows)
                {
                    rdrIndividualInfo.Read();
                    if (!rdrIndividualInfo.IsDBNull(0)) settlement.FullName = rdrIndividualInfo.GetString(0);
                    if (!rdrIndividualInfo.IsDBNull(1)) settlement.FirstName = rdrIndividualInfo.GetString(1);
                    if (!rdrIndividualInfo.IsDBNull(2)) settlement.MiddleName = rdrIndividualInfo.GetString(2);
                    if (!rdrIndividualInfo.IsDBNull(3)) settlement.LastName = rdrIndividualInfo.GetString(3);
                    if (!rdrIndividualInfo.IsDBNull(4)) settlement.HouseholdRole = rdrIndividualInfo.GetString(4);
                    if (!rdrIndividualInfo.IsDBNull(5)) settlement.PrimaryName = rdrIndividualInfo.GetString(5);
                    if (!rdrIndividualInfo.IsDBNull(6)) settlement.ProgramName = rdrIndividualInfo.GetString(6);
                    if (!rdrIndividualInfo.IsDBNull(7)) settlement.MembershipStartDate = rdrIndividualInfo.GetDateTime(7);
                    if (!rdrIndividualInfo.IsDBNull(8)) settlement.MembershipNo = rdrIndividualInfo.GetString(8);
                    if (!rdrIndividualInfo.IsDBNull(9)) settlement.AccountShippingStreet = rdrIndividualInfo.GetString(9);
                    if (!rdrIndividualInfo.IsDBNull(10)) settlement.AccountShippingCity = rdrIndividualInfo.GetString(10);
                    if (!rdrIndividualInfo.IsDBNull(11)) settlement.AccountShippingState = rdrIndividualInfo.GetString(11);
                    if (!rdrIndividualInfo.IsDBNull(12)) settlement.AccountShppingZip = rdrIndividualInfo.GetDouble(12).ToString();
                    if (!rdrIndividualInfo.IsDBNull(13)) settlement.MembershipStatus = rdrIndividualInfo.GetString(13);
                }

                rdrIndividualInfo.Close();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
            }

            foreach (ApprovedSettlementInfo settlement in lstApprovedSettlement)
            {
                String strSqlQueryForMedicalProviderName = "select [dbo].[MedicalProvider].[Name] from [dbo].[MedicalProvider] where [dbo].[MedicalProvider].[ID] = @MedicalProviderId";

                SqlCommand cmdQueryForMedicalProvider = new SqlCommand(strSqlQueryForMedicalProviderName, connSalesforce);
                cmdQueryForMedicalProvider.CommandType = CommandType.Text;

                cmdQueryForMedicalProvider.Parameters.AddWithValue("@MedicalProviderId", settlement.MedicalProviderId);

                if (connSalesforce.State != ConnectionState.Closed)
                {
                    connSalesforce.Close();
                    connSalesforce.Open();
                }
                else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                Object objMedicalProviderName = cmdQueryForMedicalProvider.ExecuteScalar();
                if (objMedicalProviderName != null) settlement.MedicalProviderName = objMedicalProviderName.ToString();
                if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
            }




            for (int i = 0; i < lstApprovedSettlement.Count; i++)
            {
                if (i % 2 == 0)
                {
                    wsApprovedSettlements.Cells[i + 2, 1].Value = lstApprovedSettlement[i].FullName;
                    wsApprovedSettlements.Cells[i + 2, 2].Value = lstApprovedSettlement[i].FirstName;
                    wsApprovedSettlements.Cells[i + 2, 3].Value = lstApprovedSettlement[i].MiddleName;
                    wsApprovedSettlements.Cells[i + 2, 4].Value = lstApprovedSettlement[i].LastName;
                    wsApprovedSettlements.Cells[i + 2, 5].Value = lstApprovedSettlement[i].HouseholdRole;
                    wsApprovedSettlements.Cells[i + 2, 6].Value = lstApprovedSettlement[i].IndividualId;
                    wsApprovedSettlements.Cells[i + 2, 7].Value = lstApprovedSettlement[i].PrimaryName;
                    wsApprovedSettlements.Cells[i + 2, 8].Value = lstApprovedSettlement[i].PaymentType;
                    wsApprovedSettlements.Cells[i + 2, 9].Value = lstApprovedSettlement[i].ProgramName;
                    wsApprovedSettlements.Cells[i + 2, 10].Value = lstApprovedSettlement[i].IncidentProgram;
                    wsApprovedSettlements.Cells[i + 2, 11].Value = lstApprovedSettlement[i].MembershipStartDate.ToString("MM/dd/yyyy");
                    wsApprovedSettlements.Cells[i + 2, 12].Value = lstApprovedSettlement[i].MembershipNo;
                    wsApprovedSettlements.Cells[i + 2, 13].Value = lstApprovedSettlement[i].IBReceivedDate.ToString("MM/dd/yyyy");
                    wsApprovedSettlements.Cells[i + 2, 14].Value = lstApprovedSettlement[i].ServiceDate.ToString("MM/dd/yyyy");
                    wsApprovedSettlements.Cells[i + 2, 15].Value = lstApprovedSettlement[i].MedicalProviderName;
                    wsApprovedSettlements.Cells[i + 2, 16].Value = lstApprovedSettlement[i].AccountNoAtMedProvider;
                    wsApprovedSettlements.Cells[i + 2, 17].Value = lstApprovedSettlement[i].AccountShippingStreet;
                    wsApprovedSettlements.Cells[i + 2, 18].Value = lstApprovedSettlement[i].AccountShippingCity;
                    wsApprovedSettlements.Cells[i + 2, 19].Value = lstApprovedSettlement[i].AccountShippingState;
                    wsApprovedSettlements.Cells[i + 2, 20].Value = lstApprovedSettlement[i].AccountShppingZip;
                    wsApprovedSettlements.Cells[i + 2, 21].Value = lstApprovedSettlement[i].Amount;
                    wsApprovedSettlements.Cells[i + 2, 22].Value = lstApprovedSettlement[i].SettlementType;
                    wsApprovedSettlements.Cells[i + 2, 23].Value = lstApprovedSettlement[i].MedBillName;
                    wsApprovedSettlements.Cells[i + 2, 24].Value = lstApprovedSettlement[i].SettlementName;
                    wsApprovedSettlements.Cells[i + 2, 25].Value = lstApprovedSettlement[i].WellBeingCareShared;
                    wsApprovedSettlements.Cells[i + 2, 26].Value = lstApprovedSettlement[i].ICD10CodeDescription;
                    wsApprovedSettlements.Cells[i + 2, 27].Value = lstApprovedSettlement[i].CreatedBy;
                    wsApprovedSettlements.Cells[i + 2, 28].Value = lstApprovedSettlement[i].LastModifiedBy;
                    wsApprovedSettlements.Cells[i + 2, 29].Value = lstApprovedSettlement[i].MembershipStatus;
                    wsApprovedSettlements.Cells[i + 2, 30].Value = lstApprovedSettlement[i].Approved;
                    wsApprovedSettlements.Cells[i + 2, 31].Value = lstApprovedSettlement[i].IncidentNo;
                }
                else
                {
                    wsApprovedSettlements.Cells[i + 2, 1].Value = lstApprovedSettlement[i].FullName;
                    wsApprovedSettlements.Cells[i + 2, 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 1].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 2].Value = lstApprovedSettlement[i].FirstName;
                    wsApprovedSettlements.Cells[i + 2, 2].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 2].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 3].Value = lstApprovedSettlement[i].MiddleName;
                    wsApprovedSettlements.Cells[i + 2, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 3].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 4].Value = lstApprovedSettlement[i].LastName;
                    wsApprovedSettlements.Cells[i + 2, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 4].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 5].Value = lstApprovedSettlement[i].HouseholdRole;
                    wsApprovedSettlements.Cells[i + 2, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 5].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 6].Value = lstApprovedSettlement[i].IndividualId;
                    wsApprovedSettlements.Cells[i + 2, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 6].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 7].Value = lstApprovedSettlement[i].PrimaryName;
                    wsApprovedSettlements.Cells[i + 2, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 7].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 8].Value = lstApprovedSettlement[i].PaymentType;
                    wsApprovedSettlements.Cells[i + 2, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 8].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 9].Value = lstApprovedSettlement[i].ProgramName;
                    wsApprovedSettlements.Cells[i + 2, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 9].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 10].Value = lstApprovedSettlement[i].IncidentProgram;
                    wsApprovedSettlements.Cells[i + 2, 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 10].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 11].Value = lstApprovedSettlement[i].MembershipStartDate.ToString("MM/dd/yyyy");
                    wsApprovedSettlements.Cells[i + 2, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 11].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 12].Value = lstApprovedSettlement[i].MembershipNo;
                    wsApprovedSettlements.Cells[i + 2, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 12].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 13].Value = lstApprovedSettlement[i].IBReceivedDate.ToString("MM/dd/yyyy");
                    wsApprovedSettlements.Cells[i + 2, 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 13].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 14].Value = lstApprovedSettlement[i].ServiceDate.ToString("MM/dd/yyyy");
                    wsApprovedSettlements.Cells[i + 2, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 14].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 15].Value = lstApprovedSettlement[i].MedicalProviderName;
                    wsApprovedSettlements.Cells[i + 2, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 15].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 16].Value = lstApprovedSettlement[i].AccountNoAtMedProvider;
                    wsApprovedSettlements.Cells[i + 2, 16].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 16].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 17].Value = lstApprovedSettlement[i].AccountShippingStreet;
                    wsApprovedSettlements.Cells[i + 2, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 17].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 18].Value = lstApprovedSettlement[i].AccountShippingCity;
                    wsApprovedSettlements.Cells[i + 2, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 18].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 19].Value = lstApprovedSettlement[i].AccountShippingState;
                    wsApprovedSettlements.Cells[i + 2, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 19].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 20].Value = lstApprovedSettlement[i].AccountShppingZip;
                    wsApprovedSettlements.Cells[i + 2, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 20].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 21].Value = lstApprovedSettlement[i].Amount;
                    wsApprovedSettlements.Cells[i + 2, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 21].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 22].Value = lstApprovedSettlement[i].SettlementType;
                    wsApprovedSettlements.Cells[i + 2, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 22].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 23].Value = lstApprovedSettlement[i].MedBillName;
                    wsApprovedSettlements.Cells[i + 2, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 23].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 24].Value = lstApprovedSettlement[i].SettlementName;
                    wsApprovedSettlements.Cells[i + 2, 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 24].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 25].Value = lstApprovedSettlement[i].WellBeingCareShared;
                    wsApprovedSettlements.Cells[i + 2, 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 25].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 26].Value = lstApprovedSettlement[i].ICD10CodeDescription;
                    wsApprovedSettlements.Cells[i + 2, 26].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 26].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 27].Value = lstApprovedSettlement[i].CreatedBy;
                    wsApprovedSettlements.Cells[i + 2, 27].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 27].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 28].Value = lstApprovedSettlement[i].LastModifiedBy;
                    wsApprovedSettlements.Cells[i + 2, 28].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 28].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 29].Value = lstApprovedSettlement[i].MembershipStatus;
                    wsApprovedSettlements.Cells[i + 2, 29].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 29].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 30].Value = lstApprovedSettlement[i].Approved;
                    wsApprovedSettlements.Cells[i + 2, 30].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 30].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                    wsApprovedSettlements.Cells[i + 2, 31].Value = lstApprovedSettlement[i].IncidentNo;
                    wsApprovedSettlements.Cells[i + 2, 31].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    wsApprovedSettlements.Cells[i + 2, 31].Style.Fill.BackgroundColor.SetColor(Color.FromKnownColor(KnownColor.LightGray));
                }

            }

            SaveFileDialog saveFileDlg = new SaveFileDialog();
            saveFileDlg.Filter = "Excel File|*.xlsx";
            saveFileDlg.Title = "Save an Excel File";
            saveFileDlg.ShowDialog();

            if (saveFileDlg.FileName != "")
            {
                FileInfo fi = new FileInfo(saveFileDlg.FileName);
                excelApprovedSettlement.SaveAs(fi);
            }
        }

        private void gvNewTaskNPtoRNFD_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void btnCreateTask_Click(object sender, EventArgs e)
        {
            String IndividualId = txtIndividualIDMedBill.Text.Trim();
            String IndividualName = txtPatientNameMedBill.Text.Trim();
            String MedBillId = txtMedBillNo.Text.Trim();

            frmTaskCreationPage frmTask = new frmTaskCreationPage(IndividualId,
                                                                  RelatedToTable.MedicalBill,
                                                                  IndividualName,
                                                                  MedBillId,
                                                                  nLoggedUserId,
                                                                  LoggedInUserName,
                                                                  LoggedInUserRole,
                                                                  LoggedInUserDepartment,
                                                                  TaskMode.AddNew);
            frmTask.ShowDialog();
        }

        private void gvMostRecentTasks_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            DataGridView gvTask = (DataGridView)sender;

            String strTaskId = gvTask["TaskIdMedBill", e.RowIndex].Value as String;
            //String strSubject = gvTask[0, e.RowIndex].Value as String;
            //String strDueDate = gvTask[1, e.RowIndex].Value as String;
            //String AssignedTo = gvTask[2, e.RowIndex].Value as String;
            //String StatusTask = gvTask[3, e.RowIndex].Value as String;

            if (strTaskId != String.Empty)
            {
                int nTaskId = Int32.Parse(strTaskId);

                String strSqlQueryForCreateById = "select [dbo].[tbl_task].[CreatedById] from [dbo].[tbl_task] where [dbo].[tbl_task].[id] = @TaskId";

                SqlCommand cmdQueryForCreateById = new SqlCommand(strSqlQueryForCreateById, connRN5);
                cmdQueryForCreateById.CommandType = CommandType.Text;

                cmdQueryForCreateById.Parameters.AddWithValue("@TaskId", nTaskId);

                if (connRN5.State != ConnectionState.Closed)
                {
                    connRN5.Close();
                    connRN5.Open();
                }
                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                Object objCreateById = cmdQueryForCreateById.ExecuteScalar();
                if (connRN5.State == ConnectionState.Open) connRN5.Close();

                int? nCreateById = null;
                if (objCreateById != null) nCreateById = Int16.Parse(objCreateById.ToString());

                String TaskCreatorName = String.Empty;
                int? nTaskCreatorId = null;
                int? nTaskCreatorUserRoleId = null;

                String strSqlQueryForCreateByUserRoleId = "select [dbo].[tbl_user].[User_Name], [dbo].[tbl_user].[User_Id], [dbo].[tbl_user].[User_Role_Id] " +
                                                          "from [dbo].[tbl_user] where [dbo].[tbl_user].[User_Id] = @CreateById";

                SqlCommand cmdQueryForCreateByUserRoleId = new SqlCommand(strSqlQueryForCreateByUserRoleId, connRN5);
                cmdQueryForCreateByUserRoleId.CommandType = CommandType.Text;

                cmdQueryForCreateByUserRoleId.Parameters.AddWithValue("@CreateById", nCreateById);
                if (connRN5.State != ConnectionState.Closed)
                {
                    connRN5.Close();
                    connRN5.Open();
                }
                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                SqlDataReader rdrTaskCreatorInfo = cmdQueryForCreateByUserRoleId.ExecuteReader();
                if (rdrTaskCreatorInfo.HasRows)
                {
                    if (rdrTaskCreatorInfo.Read())
                    {
                        if (!rdrTaskCreatorInfo.IsDBNull(0)) TaskCreatorName = rdrTaskCreatorInfo.GetString(0);
                        if (!rdrTaskCreatorInfo.IsDBNull(1)) nTaskCreatorId = rdrTaskCreatorInfo.GetInt16(1);
                        if (!rdrTaskCreatorInfo.IsDBNull(2)) nTaskCreatorUserRoleId = rdrTaskCreatorInfo.GetInt16(2);
                    }
                }
                //Object objCreateByUserRoleId = cmdQueryForCreateByUserRoleId.ExecuteScalar();
                if (connRN5.State == ConnectionState.Open) connRN5.Close();

                //if (objCreateByUserRoleId != null) nCreateByUserRoleId = Int16.Parse(objCreateByUserRoleId.ToString());

                String WhoId = txtIndividualIDMedBill.Text.Trim();
                String IndividualName = txtPatientNameMedBill.Text.Trim();

                //frmTaskCreationPage(int task_id, String individual_id, String creator_name, int creator_id, int login_user_id, String login_user_name, UserRole login_user_role_id, Department login_user_department, TaskMode mode)

                frmTaskCreationPage frmTaskToModify = new frmTaskCreationPage(nTaskId, WhoId, TaskCreatorName, nTaskCreatorId.Value, nLoggedUserId, LoggedInUserName, LoggedInUserRole, LoggedInUserDepartment, TaskMode.EditInMedBill);

                frmTaskToModify.ShowDialog();


                //if (LoggedInUserRole == UserRole.RNManager)
                //{
                //    if ((UserRole)nCreateByUserRoleId.Value != UserRole.RNStaff)
                //    {
                //        MessageBox.Show("The Task is not created by RN staff. It can't be modified by RN manager.");
                //        return;
                //    }
                //}

                //if (LoggedInUserRole == UserRole.NPManager)
                //{
                //    if ((UserRole)nCreateByUserRoleId.Value != UserRole.NPStaff)
                //    {
                //        MessageBox.Show("This Task is not created by NP staff. It can't be modified by NP manager.");
                //        return;
                //    }
                //}

                //if (LoggedInUserRole == UserRole.FDManager)
                //{
                //    if ((UserRole)nCreateByUserRoleId.Value != UserRole.FDStaff)
                //    {
                //        MessageBox.Show("This Task is not created by FD staff. It can't be modified by FD manager.");
                //        return;
                //    }
                //}

                //if (LoggedInUserRole != UserRole.Administrator &&
                //    LoggedInUserRole != UserRole.FDManager &&
                //    LoggedInUserRole != UserRole.NPManager &&
                //    LoggedInUserRole != UserRole.RNManager)
                //{
                //    MessageBox.Show("You are not authorized to modify the task.");
                //    return;
                //}

                //String strSqlQueryForTask = "select [dbo].[tbl_task].[AssignedTo], [dbo].[tbl_task].[Subject], [dbo].[tbl_task].[DueDate], " +
                //                            "[dbo].[tbl_task].[RelatedToTableId], [dbo].[tbl_task].[whatid], " +
                //                            "[dbo].[tbl_task].[IndividualName], [dbo][tbl_task].[whoid], " +
                //                            "[dbo].[tbl_task].[Comment], [dbo].[tbl_task].[Solution], " +
                //                            "[dbo].[tbl_task].[Status], [dbo].[tbl_task].[Priority], " +
                //                            "[dbo].[tbl_task].[IsReminderSet], [dbo].[tbl_task].[ReminderDateTime], [dbo].[tbl_task].[HasAttachment], [dbo].[tbl_task].[Attachment] " +
                //                            "from [dbo].[tbl_task] " +                                            
                //                            "where [dbo].[tbl_task].[id] = @TaskId";

                //SqlCommand cmdQueryForTask = new SqlCommand(strSqlQueryForTask, connRN5);
                //cmdQueryForTask.CommandType = CommandType.Text;

                //cmdQueryForTask.Parameters.AddWithValue("@TaskId", nTaskId);

                //if (connRN5.State != ConnectionState.Closed)
                //{
                //    connRN5.Close();
                //    connRN5.Open();
                //}
                //else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                //SqlDataReader rdrTaskForEdit = cmdQueryForTask.ExecuteReader();
                //if (rdrTaskForEdit.HasRows)
                //{

                //}

                //if (connRN5.State == ConnectionState.Open) connRN5.Close();
            }
        }

        private void gvSettlementsInMedBill_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete || e.KeyCode == Keys.Back)
            {
                gvSettlementsInMedBill.CurrentCell.Value = String.Empty;
            }
        }

        private void gvPaymentCreditCard_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            DataGridView gvCCPayment = (DataGridView)sender;

            if (e.ColumnIndex == 0)
            {
                String ccPaymentIndividualId = String.Empty;
                if (gvCCPayment["IndividualIdInPaymentCreditCard", e.RowIndex].Value != null) ccPaymentIndividualId = gvCCPayment["IndividualIdInPaymentCreditCard", e.RowIndex].Value.ToString();
                String ccPaymentIndividualName = String.Empty;
                if (gvCCPayment["IndividualNamePaymentCreditCard", e.RowIndex].Value != null) ccPaymentIndividualName = gvCCPayment["IndividualNamePaymentCreditCard", e.RowIndex].Value.ToString();
                String ccPaymentMedicalBillNo = String.Empty;
                if (gvCCPayment["MedBillNoInPaymentCreditCard", e.RowIndex].Value != null) ccPaymentMedicalBillNo = gvCCPayment["MedBillNoInPaymentCreditCard", e.RowIndex].Value.ToString();
                String ccPaymentSettlementNo = String.Empty;
                if (gvCCPayment["SettlementNoInPaymentCreditCard", e.RowIndex].Value != null) ccPaymentSettlementNo = gvCCPayment["SettlementNoInPaymentCreditCard", e.RowIndex].Value.ToString();
                String ccPaymentMedicalProviderName = String.Empty;
                if (gvCCPayment["MedProviderInPaymentCreditCard", e.RowIndex].Value != null) ccPaymentMedicalProviderName = gvCCPayment["MedProviderInPaymentCreditCard", e.RowIndex].Value.ToString();
                String ccPaymentCreditCardNo = String.Empty;
                if (gvCCPayment["CreditCardNoCreditCardPayment", e.RowIndex].Value != null) ccPaymentCreditCardNo = gvCCPayment["CreditCardNoCreditCardPayment", e.RowIndex].Value.ToString();
                else
                {
                    MessageBox.Show("No credit card is selected.", "Alert");
                    return;
                }
                String ccPaymentMedBillAmount = String.Empty;
                Decimal MedBillAmount = 0;
                Decimal MedBillAmountResult = 0;
                if (gvCCPayment["BillAmountCreditCardPayment", e.RowIndex].Value != null)
                {
                    ccPaymentMedBillAmount = gvCCPayment["BillAmountCreditCardPayment", e.RowIndex].Value.ToString();
                    if (Decimal.TryParse(ccPaymentMedBillAmount, NumberStyles.Currency, new CultureInfo("en-US"), out MedBillAmountResult))
                    {
                        MedBillAmount = MedBillAmountResult;
                    }
                    else
                    {
                        MessageBox.Show("Medical bill amount is invalid.", "Error");
                        return;
                    }
                }

                String ccPaymentSettlementPaymentAmount = String.Empty;
                Decimal SettlementPaymentAmount = 0;
                Decimal SettlementPaymentResult = 0;
                if (gvCCPayment["AmountInPaymentCreditCard", e.RowIndex].Value != null)
                {
                    ccPaymentSettlementPaymentAmount = gvCCPayment["AmountInPaymentCreditCard", e.RowIndex].Value.ToString();
                    if (Decimal.TryParse(ccPaymentSettlementPaymentAmount, NumberStyles.Currency, new CultureInfo("en-US"), out SettlementPaymentResult))
                    {
                        SettlementPaymentAmount = SettlementPaymentResult;
                    }
                    else
                    {
                        MessageBox.Show("Settlement payment amount is invalid.", "Error");
                        return;
                    }
                }

                Decimal SettlementAmountForComparison = 0;
                String strSqlQueryForSettlementAmountForComparison = "select [dbo].[tbl_settlement].[Amount] from [dbo].[tbl_settlement] where [dbo].[tbl_settlement].[Name] = @SettlementNo";

                SqlCommand cmdQueryForSettlementAmountForComparison = new SqlCommand(strSqlQueryForSettlementAmountForComparison, connRN5);
                cmdQueryForSettlementAmountForComparison.CommandType = CommandType.Text;

                cmdQueryForSettlementAmountForComparison.Parameters.AddWithValue("@SettlementNo", ccPaymentSettlementNo);

                if (connRN5.State != ConnectionState.Closed)
                {
                    connRN5.Close();
                    connRN5.Open();
                }
                else if (connRN5.State == ConnectionState.Closed) connRN5.Open();

                Object objSettlementAmountForComparison = cmdQueryForSettlementAmountForComparison.ExecuteScalar();
                if (objSettlementAmountForComparison != null) SettlementAmountForComparison = Decimal.Parse(objSettlementAmountForComparison.ToString());
                if (connRN5.State == ConnectionState.Open) connRN5.Close();

                String ccPaymentSettlementNotes = gvCCPayment["CreditCardPaymentNote", e.RowIndex].Value.ToString();

                frmConfirmCCPaymentDlg dlgConfirmation = new frmConfirmCCPaymentDlg(ccPaymentIndividualId,
                                                                                ccPaymentIndividualName,
                                                                                ccPaymentMedicalProviderName,
                                                                                ccPaymentMedicalBillNo,
                                                                                ccPaymentSettlementNo,
                                                                                ccPaymentCreditCardNo,
                                                                                MedBillAmount,
                                                                                SettlementAmountForComparison,
                                                                                SettlementPaymentAmount,
                                                                                ccPaymentSettlementNotes);
                DialogResult dlgResult = dlgConfirmation.ShowDialog();
                String SettlementNote = dlgConfirmation.Note;

                if (dlgResult == DialogResult.Yes)
                {
                    if (SettlementAmountForComparison == SettlementPaymentAmount)
                    {
                        String strSqlUpdateSettlementForPayment = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[Notes] = @PaymentNotes, " +
                                                                  "[dbo].[tbl_settlement].[IsPaid] = @PaymentConfirmed, [dbo].[tbl_settlement].[PaidByID] = @PaidBy, " +
                                                                  "[dbo].[tbl_settlement].[CMMCreditCard] = @CreditCardId, [dbo].[tbl_settlement].[CMMCreditCardPaidDate] = @CCPaidDate " +
                                                                  "where [dbo].[tbl_settlement].[Name] = @SettlementNo";

                        SqlCommand cmdUpdateSettlementForPayment = new SqlCommand(strSqlUpdateSettlementForPayment, connRN5);
                        cmdUpdateSettlementForPayment.CommandType = CommandType.Text;

                        cmdUpdateSettlementForPayment.Parameters.AddWithValue("@PaymentNotes", SettlementNote);
                        cmdUpdateSettlementForPayment.Parameters.AddWithValue("@PaymentConfirmed", 1);
                        cmdUpdateSettlementForPayment.Parameters.AddWithValue("@PaidBy", nLoggedUserId);
                        int? nCreditCardId = null;
                        foreach(CreditCardInfo info in lstCreditCardInfo)
                        {
                            String CreditCardNo = String.Empty;
                            if (gvCCPayment["CreditCardNoCreditCardPayment", e.RowIndex].Value != null) CreditCardNo = gvCCPayment["CreditCardNoCreditCardPayment", e.RowIndex].Value.ToString();
                            if (info.CreditCardNo == CreditCardNo)
                            {
                                nCreditCardId = info.CreditCardId;
                            }
                        }
                        cmdUpdateSettlementForPayment.Parameters.AddWithValue("@CreditCardId", nCreditCardId);
                        cmdUpdateSettlementForPayment.Parameters.AddWithValue("@CCPaidDate", DateTime.Today);
                        cmdUpdateSettlementForPayment.Parameters.AddWithValue("@SettlementNo", ccPaymentSettlementNo);
                        

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        int nRowAffected = cmdUpdateSettlementForPayment.ExecuteNonQuery();
                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                        if (nRowAffected == 1)
                        {
                            MessageBox.Show("The payment has been confirmed.", "Info");
                            return;
                        }
                        else if (nRowAffected == 0)
                        {
                            MessageBox.Show("The payment has not been confirmed.", "Info");
                            return;
                        }
                    }
                    else if (SettlementAmountForComparison > SettlementPaymentAmount)
                    {
                        // update settlement for extra discount from medical provider
                        String strSqlUpdateSettlementForModifiedPayment = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[Notes] = @PaymentNotes, " +
                                                                          "[dbo].[tbl_settlement].[IsPaid] = @PaymentConfirmed, [dbo].[tbl_settlement].[PaidByID] = @PaidBy, " +
                                                                          "[dbo].[tbl_settlement].[CMMCreditCard] = @CreditCardId, [dbo].[tbl_settlement].[CMMCreditCardPaidDate] = @CCPaidDate " +
                                                                          "[dbo].[tbl_settlement].[Amount] = @SettlementAmount " +
                                                                          "where [dbo].[tbl_settlement].[Name] = @SettlementNo";

                        SqlCommand cmdUpdateSettlementForModifiedPayment = new SqlCommand(strSqlUpdateSettlementForModifiedPayment, connRN5);
                        cmdUpdateSettlementForModifiedPayment.CommandType = CommandType.Text;

                        cmdUpdateSettlementForModifiedPayment.Parameters.AddWithValue("@PaymentNotes", SettlementNote);
                        cmdUpdateSettlementForModifiedPayment.Parameters.AddWithValue("@PaymentConfirmed", 1);
                        cmdUpdateSettlementForModifiedPayment.Parameters.AddWithValue("@PaidBy", nLoggedUserId);
                        int? nCreditCardId = null;
                        foreach (CreditCardInfo info in lstCreditCardInfo)
                        {
                            String CreditCardNo = String.Empty;
                            if (gvCCPayment["CreditCardNoCreditCardPayment", e.RowIndex].Value != null) CreditCardNo = gvCCPayment["CreditCardNoCreditCardPayment", e.RowIndex].Value.ToString();
                            if (info.CreditCardNo == CreditCardNo)
                            {
                                nCreditCardId = info.CreditCardId;
                            }
                        }
                        cmdUpdateSettlementForModifiedPayment.Parameters.AddWithValue("@CreditCardId", nCreditCardId);
                        cmdUpdateSettlementForModifiedPayment.Parameters.AddWithValue("@CCPaidDate", DateTime.Today);
                        cmdUpdateSettlementForModifiedPayment.Parameters.AddWithValue("@SettlementAmount", SettlementPaymentAmount);
                        cmdUpdateSettlementForModifiedPayment.Parameters.AddWithValue("@SettlementNo", ccPaymentSettlementNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        int nSettlementUpdated = cmdUpdateSettlementForModifiedPayment.ExecuteNonQuery();
                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                        // insert into new discount settlement for the difference when medical provider gives member extra discount
                        String strSqlQueryForLastSettlementNo = "select max([dbo].[tbl_settlement].[Name]) from [dbo].[tbl_settlement]";

                        SqlCommand cmdQueryForLastSettlementNo = new SqlCommand(strSqlQueryForLastSettlementNo, connRN5);
                        cmdQueryForLastSettlementNo.CommandType = CommandType.Text;

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objMaxSettlementNo = cmdQueryForLastSettlementNo.ExecuteScalar();
                        if (connRN5.State == ConnectionState.Open) connRN5.Close();
                        String MaxSettlementNo = String.Empty;
                        if (objMaxSettlementNo != null) MaxSettlementNo = objMaxSettlementNo.ToString();

                        String MaxSettlementNumber = MaxSettlementNo.Substring(5);
                        int nMaxSettlementNo = Int32.Parse(MaxSettlementNumber);
                        nMaxSettlementNo++;
                        String NewSettlementNo = "STLM-";
                        NewSettlementNo += nMaxSettlementNo.ToString();

                        Decimal SettlementAmount = SettlementAmountForComparison - SettlementPaymentAmount;
                        String Notes = "Member Discount Settlement added by the application";
                        //ccPaymentMedicalBillNo
                        String strSqlInsertMemberDiscountSettlement = "insert into [dbo].[tbl_settlement] (IsDeleted, Name, CreateDate, CreateByID, LastModifiedDate, LastModifiedByID, " +
                                                                      "SystemModifiedStamp, LastActivityDate, LastViewedDate, MedicalBillID, SettlementType, " +
                                                                      "Amount, PersonalResponsibilityCredit, CMMPaymentMethod, CMMCreditCard ,Notes) " +
                                                                      "values (0, @NewSettlementNo, @CreateDate, @CreateByID, @ModifiedDate, @LastModifiedByID, " +
                                                                      "@SystemModifiedDate, @LastActivityDate, @LastViewedDate, @MedicalBillId, @SettlementType, " +
                                                                      "@SettlementAmount, @PersonalResponsibility, @CMMPaymentMethod, @CMMCreditCard, @Notes)";

                        SqlCommand cmdInsertMemberDiscountSettlement = new SqlCommand(strSqlInsertMemberDiscountSettlement, connRN5);
                        cmdInsertMemberDiscountSettlement.CommandType = CommandType.Text;

                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@NewSettlementNo", NewSettlementNo);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@CreateDate", DateTime.Today);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@CreateByID", nLoggedUserId);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@ModifiedDate", DateTime.Today);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@LastModifiedByID", nLoggedUserId);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@SystemModifiedDate", DateTime.Today);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@LastActivityDate", DateTime.Today);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@LastViewedDate", DateTime.Today);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@MedicalBillID", ccPaymentMedicalBillNo);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@SettlementType", SettlementType.MemberDiscount);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@SettlementAmount", SettlementAmount);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@PersonalResponsibility", SettlementAmount);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@CMMPaymentMethod", 0);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@CMMCreditCard", 0);
                        cmdInsertMemberDiscountSettlement.Parameters.AddWithValue("@Notes", Notes);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        int nSettlementInserted = cmdInsertMemberDiscountSettlement.ExecuteNonQuery();
                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                        // 02/06/19 - begin here to calculate Medical Bill Balance, PR Balance and update Medbill accordingly
                        //ccPaymentMedicalBillNo
                        String strSqlQueryForMedBillAmount = "select [dbo].[tbl_medbill].[BillAmount] from [dbo].[tbl_medbill] where [dbo].[tbl_medbill].[BillNo] = @MedBillNo";

                        SqlCommand cmdQueryForMedBillAmount = new SqlCommand(strSqlQueryForMedBillAmount, connRN5);
                        cmdQueryForMedBillAmount.CommandType = CommandType.Text;

                        cmdQueryForMedBillAmount.Parameters.AddWithValue("@MedBillNo", ccPaymentMedicalBillNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objBillAmount = cmdQueryForMedBillAmount.ExecuteScalar();
                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                        Decimal MedicalBillAmount = 0;
                        if (objBillAmount != null) MedicalBillAmount = Decimal.Parse(objBillAmount.ToString());

                        String strSqlQueryForSettlementSum = "select sum([dbo].[tbl_settlement].[Amount]) from [dbo].[tbl_settlement] " +
                                                             "where [dbo].[tbl_settlement].[MedicalBillID] = @MedicalBillNo and " +
                                                             "([dbo].[tbl_settlement].[SettlementType] = 1 or " +
                                                             "[dbo].[tbl_settlement].[SettlementType] = 2 or " +
                                                             "[dbo].[tbl_settlement].[SettlementType] = 3 or " +
                                                             "[dbo].[tbl_settlement].[SettlementType] = 4 or " +
                                                             "[dbo].[tbl_settlement].[SettlementType] = 5 or " +
                                                             "[dbo].[tbl_settlement].[SettlementType] = 6 or " +
                                                             "[dbo].[tbl_settlement].[SettlementType] = 7 or " +
                                                             "[dbo].[tbl_settlement].[SettlementType] = 9 or " +
                                                             "[dbo].[tbl_settlement].[SettlementType] = 10)";

                        SqlCommand cmdQueryForSettlementSum = new SqlCommand(strSqlQueryForSettlementSum, connRN5);
                        cmdQueryForSettlementSum.CommandType = CommandType.Text;

                        cmdQueryForSettlementSum.Parameters.AddWithValue("@MedicalBillNo", ccPaymentMedicalBillNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objSettlementSum = cmdQueryForSettlementSum.ExecuteScalar();
                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                        Decimal SettlementSum = 0;
                        if (objSettlementSum != null) SettlementSum = Decimal.Parse(objSettlementSum.ToString());

                        String strSqlQueryForMedProviderRefund = "select sum([dbo].[tbl_settlement].[Amount]) from [dbo].[tbl_settlement] " +
                                                                 "where [dbo].[tbl_settlement].[MedicalBillID] = @MedicalBillNo and " +
                                                                 "[dbo].[tbl_settlement].[SettlementType] = 8";

                        SqlCommand cmdQueryForMedProviderRefund = new SqlCommand(strSqlQueryForMedProviderRefund, connRN5);
                        cmdQueryForMedProviderRefund.CommandType = CommandType.Text;

                        cmdQueryForMedProviderRefund.Parameters.AddWithValue("@MedicalBillNo", ccPaymentMedicalBillNo);


                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        Object objMedProviderRefund = cmdQueryForMedProviderRefund.ExecuteScalar();
                        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                        Decimal MedProviderRefund = 0;
                        if (objMedProviderRefund != null) MedProviderRefund = Decimal.Parse(objMedProviderRefund.ToString());

                        Decimal MedBillBalance = MedicalBillAmount - SettlementSum + MedProviderRefund;

                        String strSqlUpdateMedBillBalance = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[Balance] = @UpdatedMedBillBalance " +
                                                            "where [dbo].[tbl_medbill].[BillNo] = @MedBillNo";

                        SqlCommand cmdUpdateMedBillBalance = new SqlCommand(strSqlUpdateMedBillBalance, connRN5);
                        cmdUpdateMedBillBalance.CommandType = CommandType.Text;

                        cmdUpdateMedBillBalance.Parameters.AddWithValue("@UpdatedMedBillBalance", MedBillBalance);
                        cmdUpdateMedBillBalance.Parameters.AddWithValue("@MedBillNo", ccPaymentMedicalBillNo);

                        if (connRN5.State != ConnectionState.Closed)
                        {
                            connRN5.Close();
                            connRN5.Open();
                        }
                        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        int nUpdatedMedBill = cmdUpdateMedBillBalance.ExecuteNonQuery();
                        if (connRN5.State == ConnectionState.Open) connRN5.Close();


                        //MedBillBalance -= SettlementAmount;

                        //String strSqlUpdateMedBillBalance = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[Balance] = @NewBalance where [dbo].[tbl_medbill].[BillNo] = @MedBillNo";

                        //SqlCommand cmdUpdateMedBillBalance = new SqlCommand(strSqlUpdateMedBillBalance, connRN5);
                        //cmdUpdateMedBillBalance.CommandType = CommandType.Text;

                        //cmdUpdateMedBillBalance.Parameters.AddWithValue("@NewBalance", MedBillBalance);
                        //cmdUpdateMedBillBalance.Parameters.AddWithValue("@MedBillNo", ccPaymentMedicalBillNo);

                        //if (connRN5.State != ConnectionState.Closed)
                        //{
                        //    connRN5.Close();
                        //    connRN5.Open();
                        //}
                        //else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                        //int nMedBillUpdated = cmdUpdateMedBillBalance.ExecuteNonQuery();
                        //if (connRN5.State == ConnectionState.Open) connRN5.Close();

                        if (nSettlementUpdated == 1 && nSettlementInserted == 1)
                        {
                            MessageBox.Show("The payment has been confirmed.", "Info");
                            return;
                        }
                        else
                        {
                            MessageBox.Show("The payment has not been confirmed.", "Error");
                            return;
                        }
                    }

                    // Save the settlement payment
                    //String SettlementNo = gvCCPayment["SettlementNoInPaymentCreditCard", e.RowIndex].Value.ToString();
                    //String strPaymentAmount = gvCCPayment["AmountInPaymentCreditCard", e.RowIndex].Value.ToString();
                    //String strSettlementNotes = gvCCPayment["CreditCardPaymentNote", e.RowIndex].Value.ToString();
                    //String IndividualId = gvCCPayment["IndividualIdInPaymentCreditCard", e.RowIndex].Value.ToString();
                    //Decimal AmountResult = 0;
                    //Decimal PaymentAmount = 0;
                    //if (Decimal.TryParse(strPaymentAmount.Trim(), NumberStyles.Currency, new CultureInfo("en-US"), out AmountResult))
                    //{
                    //    PaymentAmount = AmountResult;
                    //}
                    //else
                    //{
                    //    MessageBox.Show("Payment amount is invalid.", "Error");
                    //    return;
                    //}

                    //String strSqlQueryForSettlementAmount = "select [dbo].[tbl_settlement].[Amount] from [dbo].[tbl_settlement] where [dbo].[tbl_settlement].[Name] = @SettlementNo";

                    //SqlCommand cmdQueryForSettlementAmount = new SqlCommand(strSqlQueryForSettlementAmount, connRN5);
                    //cmdQueryForSettlementAmount.CommandType = CommandType.Text;

                    //cmdQueryForSettlementAmount.Parameters.AddWithValue("@SettlementNo", SettlementNo);

                    //if (connRN5.State != ConnectionState.Closed)
                    //{
                    //    connRN5.Close();
                    //    connRN5.Open();
                    //}
                    //else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //Object objSettlementAmount = cmdQueryForSettlementAmount.ExecuteScalar();
                    //Decimal SettlementAmount = 0;
                    //if (objSettlementAmount != null) SettlementAmount = Decimal.Parse(objSettlementAmount.ToString());
                    //if (connRN5.State == ConnectionState.Open) connRN5.Close();

                    //if (PaymentAmount == SettlementAmount)
                    //{
                    //    String strSqlUpdateSettlementForPayment = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[Notes] = @PaymentNotes, " +
                    //                                              "[dbo].[tbl_settlement].[IsPaid] = @PaymentConfirmed, " +
                    //                                              "[dbo].[tbl_settlement].[PaidByID] = @PaidBy " +
                    //                                              "where [dbo].[tbl_settlement].[Name] = @SettlementName";

                    //    SqlCommand cmdUpdateSettlementForPayment = new SqlCommand(strSqlUpdateSettlementForPayment, connRN5);
                    //    cmdUpdateSettlementForPayment.CommandType = CommandType.Text;

                    //    //cmdUpdateSettlementForPayment.Parameters.AddWithValue("@PaymentAmount", PaymentAmount);
                    //    cmdUpdateSettlementForPayment.Parameters.AddWithValue("@PaymentNotes", strSettlementNotes);
                    //    cmdUpdateSettlementForPayment.Parameters.AddWithValue("@PaymentConfirmed", 1);
                    //    cmdUpdateSettlementForPayment.Parameters.AddWithValue("@PaidBy", nLoggedUserId);
                    //    cmdUpdateSettlementForPayment.Parameters.AddWithValue("@SettlementName", SettlementNo);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    int nSettlementUpdated = cmdUpdateSettlementForPayment.ExecuteNonQuery();
                    //    if (connRN5.State == ConnectionState.Open) connRN5.Close();
                    //}
                    //else
                    //{
                    //    String strSqlUpdateSettlementAmountForPayment = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[Amount] = @AmountPaid, " +
                    //                                                    "[dbo].[tbl_settlement].[Notes] = @PaymentNotes, " +
                    //                                                    "[dbo].[tbl_settlement].[IsPaid] = @PaymentConfirmed, " +
                    //                                                    "[dbo].[tbl_settlement].[PaidByID] = @PaidBy " +
                    //                                                    "where [dbo].[tbl_settlement].[Name] = @SettlementName";

                    //    SqlCommand cmdUpdateSettlementAmountForPayment = new SqlCommand(strSqlUpdateSettlementAmountForPayment, connRN5);
                    //    cmdUpdateSettlementAmountForPayment.CommandType = CommandType.Text;

                    //    cmdUpdateSettlementAmountForPayment.Parameters.AddWithValue("@AmountPaid", PaymentAmount);
                    //    cmdUpdateSettlementAmountForPayment.Parameters.AddWithValue("@PaymentNotes", strSettlementNotes);
                    //    cmdUpdateSettlementAmountForPayment.Parameters.AddWithValue("@PaymentConfirmed", 1);
                    //    cmdUpdateSettlementAmountForPayment.Parameters.AddWithValue("@PaidBy", nLoggedUserId);
                    //    cmdUpdateSettlementAmountForPayment.Parameters.AddWithValue("@SettlementName", SettlementNo);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    int nRowSettlementUpdated = cmdUpdateSettlementAmountForPayment.ExecuteNonQuery();
                    //    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                    //    String strSqlQueryForMedBillNoForSettlement = "select [dbo].[tbl_settlement].[MedicalBillID] from [dbo].[tbl_settlement] " +
                    //                                                  "where [dbo].[tbl_settlement].[Name] = @SettlementName";

                    //    SqlCommand cmdQueryForMedBillIDForSettlement = new SqlCommand(strSqlQueryForMedBillNoForSettlement, connRN5);
                    //    cmdQueryForMedBillIDForSettlement.CommandType = CommandType.Text;

                    //    cmdQueryForMedBillIDForSettlement.Parameters.AddWithValue("@SettlementName", SettlementNo);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    Object objMedBillID = cmdQueryForMedBillIDForSettlement.ExecuteScalar();
                    //    String MedBillIDForSettlement = String.Empty;
                    //    if (objMedBillID != null) MedBillIDForSettlement = objMedBillID.ToString();
                    //    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                    //    String strSqlQueryForTotalSharedAmountForMedBill = "select sum([dbo].[tbl_settlement].[Amount]) from [dbo].[tbl_settlement] " +
                    //                                                       "where [dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                    //                                                       "[dbo].[tbl_settlement].[MedicalBillID] = @MedBillID and " +
                    //                                                       "([dbo].[tbl_settlement].[SettlementType] = 4 or " +
                    //                                                       "[dbo].[tbl_settlement].[SettlementType] = 6 or " +
                    //                                                       "[dbo].[tbl_settlement].[SettlementType] = 9)";

                    //    SqlCommand cmdQueryForTotalSharedAmountForMedBill = new SqlCommand(strSqlQueryForTotalSharedAmountForMedBill, connRN5);
                    //    cmdQueryForTotalSharedAmountForMedBill.CommandType = CommandType.Text;

                    //    cmdQueryForTotalSharedAmountForMedBill.Parameters.AddWithValue("@MedBillID", MedBillIDForSettlement);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    Object objTotalSharedAmount = cmdQueryForTotalSharedAmountForMedBill.ExecuteScalar();
                    //    if (connRN5.State == ConnectionState.Open) connRN5.Close();
                    //    Decimal TotalSharedAmount = 0;
                    //    if (objTotalSharedAmount != null) TotalSharedAmount = Decimal.Parse(objTotalSharedAmount.ToString());

                    //    String strSqlQueryForMedicalProviderRefund = "select sum([dbo].[tbl_settlement].[Amount]) from [dbo].[tbl_settlement] " +
                    //                                                 "where [dbo].[tbl_settlement].[IsDeleted] = 0 and " +
                    //                                                 "[dbo].[tbl_settlement].[MedicalBillID] = @MedBillID and " +
                    //                                                 "[dbo].[tbl_settlement].[SettlementType] = 8";

                    //    SqlCommand cmdQeuryForMedicalProviderRefund = new SqlCommand(strSqlQueryForMedicalProviderRefund, connRN5);
                    //    cmdQeuryForMedicalProviderRefund.CommandType = CommandType.Text;

                    //    cmdQeuryForMedicalProviderRefund.Parameters.AddWithValue("@MedBillID", MedBillIDForSettlement);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    Object objMedProviderRefund = cmdQeuryForMedicalProviderRefund.ExecuteScalar();
                    //    Decimal MedProviderRefund = 0;
                    //    if (objMedProviderRefund != null) MedProviderRefund = Decimal.Parse(objMedProviderRefund.ToString());

                    //    TotalSharedAmount -= MedProviderRefund;

                    //    String strSqlUpdateMedBillForNewSTotalSharedAmount = "update [dbo].[tbl_medbill] set [dbo].[tbl_medbill].[TotalSharedAmount] = @TotalSharedAmount " +
                    //                                                         "where [dbo].[tbl_medbill].[BillNo] = @MedBillID";

                    //    SqlCommand cmdUpdateMedBillForNewTotalSharedAmount = new SqlCommand(strSqlUpdateMedBillForNewSTotalSharedAmount, connRN5);
                    //    cmdUpdateMedBillForNewTotalSharedAmount.CommandType = CommandType.Text;

                    //    cmdUpdateMedBillForNewTotalSharedAmount.Parameters.AddWithValue("@TotalSharedAmount", TotalSharedAmount);
                    //    cmdUpdateMedBillForNewTotalSharedAmount.Parameters.AddWithValue("@MedBillID", MedBillIDForSettlement);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    int nRowMedBillUpdated = cmdUpdateMedBillForNewTotalSharedAmount.ExecuteNonQuery();
                    //    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                    //    String strSqlQueryForIncidentIdForMedBill = "select [dbo].[tbl_medbill].[Incident_Id] from [dbo].[tbl_medbill] " +
                    //                                                "where [dbo].[tbl_medbill].[BillNo] = @MedBillID";

                    //    SqlCommand cmdQueryForIncidentIdForMedBill = new SqlCommand(strSqlQueryForIncidentIdForMedBill, connRN5);
                    //    cmdQueryForIncidentIdForMedBill.CommandType = CommandType.Text;

                    //    cmdQueryForIncidentIdForMedBill.Parameters.AddWithValue("@MedBillID", MedBillIDForSettlement);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    Object objIncidentId = cmdQueryForIncidentIdForMedBill.ExecuteScalar();
                    //    String IncidentId = String.Empty;
                    //    if (objIncidentId != null) IncidentId = objIncidentId.ToString();
                    //    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                    //    // 01/25/19 begin here to add tbl_medbill.IsDeleted = 0 to where clause
                    //    String strSqlQueryForIncidentSharedTotal = "select sum([dbo].[tbl_medbill].[TotalSharedAmount]) from [dbo].[tbl_medbill] " +
                    //                                               "where [dbo].[tbl_medbill].[Incident_Id] = @IncidentId";

                    //    SqlCommand cmdQueryForIncidentSharedTotal = new SqlCommand(strSqlQueryForIncidentSharedTotal, connRN5);
                    //    cmdQueryForIncidentSharedTotal.Parameters.AddWithValue("@IncidentId", IncidentId);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    Object objIncidentTotalSharedAmount = cmdQueryForIncidentSharedTotal.ExecuteScalar();
                    //    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                    //    Decimal IncidentTotalSharedAmount = 0;
                    //    if (objIncidentTotalSharedAmount != null) IncidentTotalSharedAmount = Decimal.Parse(objIncidentTotalSharedAmount.ToString());

                    //    String strSqlUpdateIncidentForTotalSharedAmount = "update [dbo].[tbl_incident] set [dbo].[tbl_incident].[TotalSharedAmount] = @IncidentTotalSharedAmount " +
                    //                                                      "where [dbo].[tbl_incident].[Incidend_id] = @IncidentId";

                    //    SqlCommand cmdUpdateIncidentForTotalSharedAmount = new SqlCommand(strSqlUpdateIncidentForTotalSharedAmount, connRN5);
                    //    cmdUpdateIncidentForTotalSharedAmount.CommandType = CommandType.Text;

                    //    cmdUpdateIncidentForTotalSharedAmount.Parameters.AddWithValue("@IncidentTotalSharedAmount", IncidentTotalSharedAmount);
                    //    cmdUpdateIncidentForTotalSharedAmount.Parameters.AddWithValue("@IncidentId", IncidentId);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    int nRowIncidentUpdated = cmdUpdateIncidentForTotalSharedAmount.ExecuteNonQuery();
                    //    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                    //    String strSqlQueryForIllnessId = "select [dbo].[tbl_incident].[Illness_id] from [dbo].[tbl_incident] where [dbo].[tbl_incident].[Incident_id] = @IncidentId";

                    //    SqlCommand cmdQueryForIllnessId = new SqlCommand(strSqlQueryForIllnessId, connRN5);
                    //    cmdQueryForIllnessId.CommandType = CommandType.Text;

                    //    cmdQueryForIllnessId.Parameters.AddWithValue("@IncidentId", IncidentId);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    Object objIllnessId = cmdQueryForIllnessId.ExecuteScalar();
                    //    if (connRN5.State == ConnectionState.Open) connRN5.Close();
                    //    int nIllnessId = 0;
                    //    if (objIllnessId != null) nIllnessId = Int32.Parse(objIllnessId.ToString());

                    //    String strSqlQueryForIllnessSharedTotal = "select sum([dbo].[tbl_incident].[TotalSharedAmount]) from [dbo].[tbl_incident] " +
                    //                                              "where [dbo].[tbl_incident].[Illness_id] = @IllnessId";

                    //    SqlCommand cmdQueryForIllnessSharedTotal = new SqlCommand(strSqlQueryForIllnessSharedTotal, connRN5);
                    //    cmdQueryForIllnessSharedTotal.CommandType = CommandType.Text;

                    //    cmdQueryForIllnessSharedTotal.Parameters.AddWithValue("@IllnessId", nIllnessId);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    Object objIllnessTotalSharedAmount = cmdQueryForIllnessSharedTotal.ExecuteScalar();
                    //    if (connRN5.State == ConnectionState.Open) connRN5.Close();
                    //    Decimal IllnessTotalSharedAmount = Int32.Parse(objIllnessTotalSharedAmount.ToString());

                    //    String strSqlUpdateIllnessTotalSharedAmount = "update [dbo].[tbl_illness] set [dbo].[tbl_illess].[TotalSharedAmount] = @IllnessTotalSharedAmount " +
                    //                                                 "where [dbo].[tbl_illness].[Illness_Id] = @IllnessId";

                    //    SqlCommand cmdUpdateIllnessTotalSharedAmount = new SqlCommand(strSqlUpdateIllnessTotalSharedAmount, connRN5);
                    //    cmdUpdateIllnessTotalSharedAmount.CommandType = CommandType.Text;

                    //    cmdUpdateIllnessTotalSharedAmount.Parameters.AddWithValue("@IllnessTotalSharedAmount", IllnessTotalSharedAmount);
                    //    cmdUpdateIllnessTotalSharedAmount.Parameters.AddWithValue("@IllnessId", nIllnessId);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    int nRowIllnessUpdated = cmdUpdateIllnessTotalSharedAmount.ExecuteNonQuery();
                    //    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                    //    String strSqlQueryForIndividualID = "select [dbo].[tbl_illness].[Individual_Id] from [dbo].[tbl_illness] where [dbo].[tbl_illness].[Illness_Id] = @IllnessId";

                    //    SqlCommand cmdQueryForIndividualID = new SqlCommand(strSqlQueryForIndividualID, connRN5);
                    //    cmdQueryForIndividualID.Parameters.AddWithValue("@IllnessId", nIllnessId);

                    //    if (connRN5.State != ConnectionState.Closed)
                    //    {
                    //        connRN5.Close();
                    //        connRN5.Open();
                    //    }
                    //    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //    Object objIndividualID = cmdQueryForIndividualID.ExecuteScalar();
                    //    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                    //    String IndividualIdQueried = String.Empty;
                    //    if (objIndividualID != null) IndividualIdQueried = objIndividualID.ToString();

                    //    if (IndividualId.Trim() == IndividualIdQueried.Trim())
                    //    {
                    //        String strSqlQueryForIndividualTotalSharedAmount = "select sum([dbo].[tbl_illness].[TotalSharedAmount]) from [dbo].[tbl_illness] " +
                    //                                                           "where [dbo].[tbl_illness].[Individual_Id] = @IndividualId";

                    //        SqlCommand cmdQueryForIndividualTotalSharedAmount = new SqlCommand(strSqlQueryForIndividualTotalSharedAmount, connRN5);
                    //        cmdQueryForIndividualTotalSharedAmount.CommandType = CommandType.Text;

                    //        cmdQueryForIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualId", IndividualId);

                    //        if (connRN5.State != ConnectionState.Closed)
                    //        {
                    //            connRN5.Close();
                    //            connRN5.Open();
                    //        }
                    //        else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    //        Object objIndividualTotalSharedAmount = cmdQueryForIndividualTotalSharedAmount.ExecuteScalar();
                    //        if (connRN5.State == ConnectionState.Open) connRN5.Close();

                    //        Decimal IndividualTotalSharedAmount = 0;
                    //        if (objIndividualTotalSharedAmount != null) IndividualTotalSharedAmount = Decimal.Parse(objIndividualTotalSharedAmount.ToString());

                    //        String strSqlUpdateIndividualTotalSharedAmount = "update [dbo].[contact] set [dbo].[contact].[TotalSharedAmount] = @IndividualTotalSharedAmount " +
                    //                                                         "[dbo].[contact].[Individual_ID__c] = @IndivudalId";

                    //        SqlCommand cmdUpdateIndividualTotalSharedAmount = new SqlCommand(strSqlUpdateIndividualTotalSharedAmount, connSalesforce);
                    //        cmdUpdateIndividualTotalSharedAmount.CommandType = CommandType.Text;

                    //        cmdUpdateIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualTotalSharedAmount", IndividualTotalSharedAmount);
                    //        cmdUpdateIndividualTotalSharedAmount.Parameters.AddWithValue("@IndividualId", IndividualId);

                    //        if (connSalesforce.State != ConnectionState.Closed)
                    //        {
                    //            connSalesforce.Close();
                    //            connSalesforce.Open();
                    //        }
                    //        else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                    //        int nRowIndividualUpdated = cmdUpdateIndividualTotalSharedAmount.ExecuteNonQuery();
                    //        if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();


                    //    }
                    //}
                }
                else if (dlgResult == DialogResult.Cancel) return;      // The user choose to cancel. return to credit card payment tab

            }
        }

        private void gvPaymentCreditCard_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex <= -1) return;

            DataGridView gvCCPayment = sender as DataGridView;
            if (e.ColumnIndex == 20)
            {
                String SettlementNo = gvCCPayment["SettlementNoInPaymentCreditCard", e.RowIndex].Value.ToString();
                String SettlementNote = String.Empty;
                if (gvCCPayment["CreditCardPaymentNote", e.RowIndex]?.Value != null) SettlementNote = gvCCPayment["CreditCardPaymentNote", e.RowIndex].Value.ToString();

                frmSettlementNote frmNote = new frmSettlementNote(SettlementNo, SettlementNote);

                DialogResult dlgResult = frmNote.ShowDialog();

                if (dlgResult == DialogResult.OK)
                {
                    // Save the Settlement Note
                    String strSettlementNo = frmNote.SettlementNo;
                    String strSettlementNote = frmNote.SettlementNote;

                    String strSqlUpdateSettlementNote = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[Notes] = @Notes where [dbo].[tbl_settlement].[Name] = @SettlementNo";

                    SqlCommand cmdUpdateSettlementNote = new SqlCommand(strSqlUpdateSettlementNote, connRN5);
                    cmdUpdateSettlementNote.CommandType = CommandType.Text;

                    cmdUpdateSettlementNote.Parameters.AddWithValue("@Notes", strSettlementNote);
                    cmdUpdateSettlementNote.Parameters.AddWithValue("@SettlementNo", strSettlementNo);

                    if (connRN5.State != ConnectionState.Closed)
                    {
                        connRN5.Close();
                        connRN5.Open();
                    }
                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    int nRowUpdated = cmdUpdateSettlementNote.ExecuteNonQuery();
                    if (nRowUpdated == 1) MessageBox.Show("The Settlement Note has been saved.", "Info");
                    else MessageBox.Show("The Settlement Note has not been saved.", "Error");
                    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                }
                else return;
            }
        }

        private void gvPaymentACH_ColumnHeaderMouseDoubleClick(object sender, DataGridViewCellMouseEventArgs e)
        {

            Boolean bAllACHSelected = true;

            if (e.ColumnIndex == 0)
            {
                for (int i = 0; i < gvPaymentACH.Rows.Count; i++)
                {
                    if (Boolean.Parse(gvPaymentACH["SelectedACHPayment", i].Value.ToString()) == false) bAllACHSelected = false;
                }
                if (bAllACHSelected == false)
                {
                    for (int i = 0; i < gvPaymentACH.Rows.Count; i++)
                    {
                        gvPaymentACH["SelectedACHPayment", i].Value = true;
                    }
                }
                else if (bAllACHSelected == true)
                {
                    for (int i = 0; i < gvPaymentACH.Rows.Count; i++)
                    {
                        gvPaymentACH["SelectedACHPayment", i].Value = false;
                    }
                }
            }
        }

        private void gvPaymentCheck_ColumnHeaderMouseDoubleClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            Boolean bAllCheckPaymentSelected = true;

            if (e.ColumnIndex == 0)
            {
                for (int i = 0; i < gvPaymentCheck.Rows.Count; i++)
                {
                    if (Boolean.Parse(gvPaymentCheck["SelectedPaymentCheck", i].Value.ToString()) == false) bAllCheckPaymentSelected = false;
                }

                if (bAllCheckPaymentSelected == false)
                {
                    for (int i = 0; i < gvPaymentCheck.Rows.Count; i++)
                    {
                        gvPaymentCheck["SelectedPaymentCheck", i].Value = true;
                    }
                }
                else if (bAllCheckPaymentSelected == true)
                {
                    for (int i = 0; i < gvPaymentCheck.Rows.Count; i++)
                    {
                        gvPaymentCheck["SelectedPaymentCheck", i].Value = false;
                    }
                }
            }
        }

        private void cbReimbursementMethod_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbReimbursementMethod.SelectedIndex == 0)
            {
                txtBankName.Text = String.Empty;
                txtBankName.ReadOnly = true;
                txtBankRoutingNo.Text = String.Empty;
                txtBankRoutingNo.ReadOnly = true;
                txtAccountNo.Text = String.Empty;
                txtAccountNo.ReadOnly = true;
                txtAccountHolder.Text = String.Empty;
                txtAccountHolder.ReadOnly = true;
            }
            else if (cbReimbursementMethod.SelectedIndex == 1)
            {
                txtBankName.ReadOnly = false;
                if (IndividualBankInfo.BankName != String.Empty) txtBankName.Text = IndividualBankInfo.BankName;
                txtBankRoutingNo.ReadOnly = false;
                if (IndividualBankInfo.BankRoutingNumber != String.Empty) txtBankRoutingNo.Text = IndividualBankInfo.BankRoutingNumber;
                txtAccountNo.ReadOnly = false;
                if (IndividualBankInfo.AccountNumber != String.Empty) txtAccountNo.Text = IndividualBankInfo.AccountNumber;
                txtAccountHolder.ReadOnly = false;
                if (IndividualBankInfo.AccountHolder != String.Empty) txtAccountHolder.Text = IndividualBankInfo.AccountHolder;
            }
        }

        private void btnACHExport_Click(object sender, EventArgs e)
        {

            Boolean bIsACHPaymentSelected = false;
            for(int i = 0; i < gvPaymentACH.Rows.Count; i++)
            {
                if (Boolean.Parse(gvPaymentACH["SelectedACHPayment", i].Value.ToString()) == true) bIsACHPaymentSelected = true;
            }
            if (bIsACHPaymentSelected == false)
            {
                MessageBox.Show("No Settlement is selected.", "Alert");
                return;
            }

            List<ACHPaymentExportInfo> lstACHPaymentExport = new List<ACHPaymentExportInfo>();

            for (int i = 0; i < gvPaymentACH.Rows.Count; i++)
            {
                if (Boolean.Parse(gvPaymentACH["SelectedACHPayment", i].Value.ToString()) == true)
                {
                    String ACHPaymentBankAccountHolderName = String.Empty;
                    if (gvPaymentACH["AccountHolderPaymentACH", i].Value != null) ACHPaymentBankAccountHolderName = gvPaymentACH["AccountHolderPaymentACH", i].Value.ToString();
                    else
                    {
                        MessageBox.Show("Bank account holder's name is empty.", "Error");
                        return;
                    }

                    String ACHPaymentIndividualId = String.Empty;
                    if (gvPaymentACH["IndividualIdPaymentACH", i].Value != null) ACHPaymentIndividualId = gvPaymentACH["IndividualIdPaymentACH", i].Value.ToString();
                    else
                    {
                        MessageBox.Show("Individual Id is empty.", "Error");
                        return;
                    }

                    String ACHPaymentIndividualName = String.Empty;
                    if (gvPaymentACH["IndividualNamePaymentACH", i].Value != null) ACHPaymentIndividualName = gvPaymentACH["IndividualNamePaymentACH", i].Value.ToString();
                    else
                    {
                        MessageBox.Show("Individual name is empty.", "Error");
                    }

                    String ACHPaymentSettlementNo = String.Empty;
                    if (gvPaymentACH["SettlementNoPaymentACH", i].Value != null) ACHPaymentSettlementNo = gvPaymentACH["SettlementNoPaymentACH", i].Value.ToString();
                    else
                    {
                        MessageBox.Show("Settlement No is empty.", "Error");
                        return;
                    }

                    String Amount = String.Empty;
                    if (gvPaymentACH["AmountPaymentACH", i].Value != null) Amount = gvPaymentACH["AmountPaymentACH", i].Value.ToString();
                    else
                    {
                        MessageBox.Show("Amount is empty.", "Error");
                        return;
                    }
                    Decimal ACHPaymentAmount = 0;
                    Decimal ACHAmountResult = 0;

                    if (Decimal.TryParse(Amount, NumberStyles.Currency, new CultureInfo("en-US"), out ACHAmountResult))
                    {
                        ACHPaymentAmount = ACHAmountResult;
                    }
                    else
                    {
                        MessageBox.Show("ACH Amount is invalid.", "Error");
                        return;
                    }

                    String ACHPaymentRoutingNo = String.Empty;
                    if (gvPaymentACH["RoutingNoPaymentACH", i].Value != null) ACHPaymentRoutingNo = gvPaymentACH["RoutingNoPaymentACH", i].Value.ToString();
                    else
                    {
                        MessageBox.Show("Routing number is empty.", "Error");
                        return;
                    }

                    String ACHPaymentAccountNo = String.Empty;
                    if (gvPaymentACH["AccountNoPaymentACH", i].Value != null) ACHPaymentAccountNo = gvPaymentACH["AccountNoPaymentACH", i].Value.ToString();
                    else
                    {
                        MessageBox.Show("Account numbre is empty", "Error");
                        return;
                    }

                    ACHPaymentExportInfo ach_Info = new ACHPaymentExportInfo();
                    ach_Info.BankAccountHolderName = ACHPaymentIndividualName;
                    ach_Info.IndividualId = ACHPaymentIndividualId;
                    ach_Info.IndividualName = ACHPaymentIndividualName;
                    ach_Info.SettlementNumber = ACHPaymentSettlementNo;
                    ach_Info.Amount = ACHPaymentAmount;
                    ach_Info.RoutingNumber = ACHPaymentRoutingNo;
                    ach_Info.AccountNumber = ACHPaymentAccountNo;

                    lstACHPaymentExport.Add(ach_Info);
                }
            }

            List<String> lstIndividualIDs = new List<String>();
            lstIndividualIDs = lstACHPaymentExport.Select(x => x.IndividualId).Distinct().ToList();

            List<ACHPaymentExportInfo> lstACHPaymentExportDistinctIndividual = new List<ACHPaymentExportInfo>();

            foreach (String IndvidualId in lstIndividualIDs)
            {
                ACHPaymentExportInfo exportInfo = new ACHPaymentExportInfo();
                exportInfo.IndividualId = IndvidualId;
                foreach (ACHPaymentExportInfo info in lstACHPaymentExport)
                {
                    if (exportInfo.IndividualId == info.IndividualId)
                    {
                        exportInfo.BankAccountHolderName = info.BankAccountHolderName;
                        exportInfo.IndividualName = info.IndividualName;
                        exportInfo.SettlementNumber += info.SettlementNumber.Substring(5) + "; ";
                        exportInfo.Amount += info.Amount;
                        exportInfo.RoutingNumber = info.RoutingNumber;
                        exportInfo.AccountNumber = info.AccountNumber;
                    }
                }
                lstACHPaymentExportDistinctIndividual.Add(exportInfo);
            }

            foreach (ACHPaymentExportInfo info in lstACHPaymentExportDistinctIndividual)
            {
                info.Description += " - " + info.IndividualName + " - STLM-" + info.SettlementNumber;
            }

            SaveFileDialog dlg = new SaveFileDialog();
            dlg.FileName = DateTime.Today.ToString("MMddyyyy");
            dlg.DefaultExt = ".txt";
            dlg.Filter = "Text documents (.txt)|*.txt";


            DialogResult result = dlg.ShowDialog();

            if (result == DialogResult.OK)
            {
                try
                {
                    using (FileStream fs = File.Create(dlg.FileName))
                    {
                        Byte[] heading = new UTF8Encoding(true).GetBytes("BANK HOLDER'S NAME\t\tAMOUNT\tROUTING NUMBER\tACCOUNT NUMBER\tDESCRIPTION" + Environment.NewLine);
                        fs.Write(heading, 0, heading.Length);
                        foreach (ACHPaymentExportInfo info in lstACHPaymentExportDistinctIndividual)
                        {
                            StringBuilder sbSettlement = new StringBuilder();
                            sbSettlement.Append(info.IndividualName + '\t');
                            sbSettlement.Append(info.IndividualId + '\t');
                            sbSettlement.Append(info.Amount.ToString() + '\t');
                            sbSettlement.Append(info.RoutingNumber + '\t');
                            sbSettlement.Append(info.AccountNumber + '\t');
                            sbSettlement.Append(info.Description + Environment.NewLine);
                            Byte[] settlement = new UTF8Encoding(true).GetBytes(sbSettlement.ToString());

                            fs.Write(settlement, 0, settlement.Length);
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                foreach (ACHPaymentExportInfo info in lstACHPaymentExport)
                {
                    String strSqlUpdateSettlementPaid = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[IsACHExported] = 1, [dbo].[tbl_settlement].[ACHExportedByID] = @ExportedByID " +
                                                        "where [dbo].[tbl_settlement].[Name] = @SettlementNo";

                    SqlCommand cmdUpdateSettlementPaid = new SqlCommand(strSqlUpdateSettlementPaid, connRN5);
                    cmdUpdateSettlementPaid.CommandType = CommandType.Text;

                    cmdUpdateSettlementPaid.Parameters.AddWithValue("@ExportedByID", nLoggedUserId);
                    cmdUpdateSettlementPaid.Parameters.AddWithValue("@SettlementNo", info.SettlementNumber);

                    if (connRN5.State != ConnectionState.Closed)
                    {
                        connRN5.Close();
                        connRN5.Open();
                    }
                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    int nSettlementUpdated = cmdUpdateSettlementPaid.ExecuteNonQuery();
                    if (connRN5.State == ConnectionState.Open) connRN5.Close();
                }
            }
        }

        private void btnConfirmCheckPayment_Click(object sender, EventArgs e)
        {

            frmConfirmCheckPayment frmConfirm = new frmConfirmCheckPayment();
            DialogResult ConfirmDialog = frmConfirm.ShowDialog();

            if (ConfirmDialog == DialogResult.OK)
            {
                List<String> lstSettlementSelected = new List<String>();
                for (int i = 0; i < gvPaymentCheck.Rows.Count; i++)
                {
                    if ((Boolean.Parse(gvPaymentCheck["SelectedPaymentCheck", i].Value.ToString())) == true)
                    {
                        lstSettlementSelected.Add(gvPaymentCheck["SettlementNoPaymentCheck", i].Value.ToString());
                    }
                }

                if (lstSettlementSelected.Count == 0)
                {
                    MessageBox.Show("No settlment selected.", "Alert");
                    return;
                }

                List<CheckPaymentCSVExportInfo> lstCheckPayemntCSVExport = new List<CheckPaymentCSVExportInfo>();
                for(int i = 0; i < gvPaymentCheck.Rows.Count; i++)
                {
                    if ((Boolean.Parse(gvPaymentCheck["SelectedPaymentCheck", i].Value.ToString())) == true)
                    {
                        CheckPaymentCSVExportInfo csv_info = new CheckPaymentCSVExportInfo();

                        if (gvPaymentCheck["IndividualIdPaymentCheck", i].Value != null) csv_info.IndividualId = gvPaymentCheck["IndividualIdPaymentCheck", i].Value.ToString();
                        if (gvPaymentCheck["IndividualNamePaymentCheck", i].Value != null)
                        {
                            csv_info.IndividualName = gvPaymentCheck["IndividualNamePaymentCheck", i].Value.ToString();
                            csv_info.PatientName = gvPaymentCheck["IndividualNamePaymentCheck", i].Value.ToString();
                        }
                        if (gvPaymentCheck["HouseholdRolePaymentCheck", i].Value != null) csv_info.HouseholdRole = gvPaymentCheck["HouseholdRolePaymentCheck", i].Value.ToString();
                        if (gvPaymentCheck["IncidentNoPaymentCheck", i].Value != null) csv_info.IncidentNo = gvPaymentCheck["IncidentNoPaymentCheck", i].Value.ToString();
                        if (gvPaymentCheck["IncidentProgramNamePaymentCheck", i].Value != null) csv_info.IncidentProgram = gvPaymentCheck["IncidentProgramNamePaymentCheck", i].Value.ToString();
                        if (gvPaymentCheck["SettlementNoPaymentCheck", i].Value != null) csv_info.SettlementNo = gvPaymentCheck["SettlementNoPaymentCheck", i].Value.ToString();
                        if (gvPaymentCheck["PrimaryNamePaymentCheck", i].Value != null) csv_info.PrimaryName = gvPaymentCheck["PrimaryNamePaymentCheck", i].Value.ToString();
                        
                        csv_info.TransactionDate = frmConfirm.CheckDate;
                        if (gvPaymentCheck["MembershipNoPaymentCheck", i].Value != null) csv_info.MembershipNo = gvPaymentCheck["MembershipNoPaymentCheck", i].Value.ToString();
                        if (gvPaymentCheck["AmountPaymentCheck", i].Value != null)
                        {
                            Decimal AmountResult = 0;
                            if (Decimal.TryParse(gvPaymentCheck["AmountPaymentCheck", i].Value.ToString(), NumberStyles.Currency, new CultureInfo("en-US"), out AmountResult))
                            {
                                csv_info.SettlementAmount = AmountResult;
                            }
                        }
                        if (gvPaymentCheck["DateOfServicePaymentCheck", i].Value != null)
                        {
                            DateTime ServiceDate;
                            if (DateTime.TryParse(gvPaymentCheck["DateOfServicePaymentCheck", i].Value.ToString(), out ServiceDate)) csv_info.ServiceDate = ServiceDate;
                        }
                        if (gvPaymentCheck["MedProviderPaymentCheck", i].Value != null) csv_info.MedicalProvider = gvPaymentCheck["MedProviderPaymentCheck", i].Value.ToString();
                        if (gvPaymentCheck["AccountNamePaymentCheck", i].Value != null) csv_info.AccountNoAtProvider = gvPaymentCheck["AccountNamePaymentCheck", i].Value.ToString();
                        if (gvPaymentCheck["ShippingStreetPaymentCheck", i].Value != null) csv_info.StreetAddress = gvPaymentCheck["ShippingStreetPaymentCheck", i].Value.ToString();
                        if (gvPaymentCheck["ShippingCityPaymentCheck", i].Value != null) csv_info.City = gvPaymentCheck["ShippingCityPaymentCheck", i].Value.ToString();
                        if (gvPaymentCheck["ShippingStatePaymentCheck", i].Value != null) csv_info.State = gvPaymentCheck["ShippingStatePaymentCheck", i].Value.ToString();
                        if (gvPaymentCheck["ShippingZipPaymentCheck", i].Value != null) csv_info.Zip = gvPaymentCheck["ShippingZipPaymentCheck", i].Value.ToString();

                        lstCheckPayemntCSVExport.Add(csv_info);
                    }
                }
                List<CheckPaymentCSVExportInfo> lstSortedCheckPaymentCSVExport = new List<CheckPaymentCSVExportInfo>();
                lstSortedCheckPaymentCSVExport = lstCheckPayemntCSVExport.OrderBy(o => o.IndividualId).ToList();

                foreach (CheckPaymentCSVExportInfo info in lstSortedCheckPaymentCSVExport)
                {
                    String strSqlQueryForPatientName = "select [dbo].[contact].[LastName], [dbo].[contact].[FirstName], [dbo].[contact].[MiddleName] from [dbo].[contact] " +
                                                       "where [dbo].[contact].[Individual_ID__c] = @IndividualId";

                    SqlCommand cmdQueryForPatientName = new SqlCommand(strSqlQueryForPatientName, connSalesforce);
                    cmdQueryForPatientName.CommandType = CommandType.Text;

                    cmdQueryForPatientName.Parameters.AddWithValue("@IndividualId", info.IndividualId);

                    if (connSalesforce.State != ConnectionState.Closed)
                    {
                        connSalesforce.Close();
                        connSalesforce.Open();
                    }
                    else if (connSalesforce.State == ConnectionState.Closed) connSalesforce.Open();
                    SqlDataReader rdrPatientName = cmdQueryForPatientName.ExecuteReader();
                    if (rdrPatientName.HasRows)
                    {
                        rdrPatientName.Read();
                        if (!rdrPatientName.IsDBNull(0)) info.PatientLastName = rdrPatientName.GetString(0);
                        if (!rdrPatientName.IsDBNull(1)) info.PatientFirstName = rdrPatientName.GetString(1);
                        if (!rdrPatientName.IsDBNull(2)) info.PatientMiddleName = rdrPatientName.GetString(2);
                    }
                    rdrPatientName.Close();
                    if (connSalesforce.State == ConnectionState.Open) connSalesforce.Close();
                }
 
                SaveFileDialog dlg = new SaveFileDialog();
                dlg.FileName = DateTime.Today.ToString("MMddyyyy");
                dlg.DefaultExt = ".csv";
                dlg.Filter = "CSV documents (.csv)|*.csv";

                DialogResult result = dlg.ShowDialog();

                if (result == DialogResult.OK)
                {
                    using (FileStream fs = File.Create(dlg.FileName))
                    {
                        Byte[] heading = new UTF8Encoding(true)
                            .GetBytes("AccountFullName,Check PayeeEntity,RefNumber,Txndate,Memo,address1,address2,City,State,postal,IsToBePrinted,Expense Account,Expense Amount,Expense Memo" + Environment.NewLine);
                        fs.Write(heading, 0, heading.Length);
                        int nReferenceNo = 1;

                        for (int i = 0; i < lstSortedCheckPaymentCSVExport.Count; i++)
                        {
                            if (i == 0)
                            {
                                StringBuilder sbSettlement = new StringBuilder();

                                sbSettlement.Append("Bank of Hope:Bank of Hope [ACH-Med] (4125)" + ",");
                                sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].IndividualId + ",");
                                sbSettlement.Append(nReferenceNo.ToString() + ",");
                                sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].TransactionDate.ToShortDateString() + ",");
                                sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].MembershipNo + "-CMM NEEDS SHARED,");
                                if (lstSortedCheckPaymentCSVExport[i].HouseholdRole.Trim() == "Child")
                                {
                                    if (lstSortedCheckPaymentCSVExport[i].PatientMiddleName == String.Empty)
                                    {
                                        sbSettlement.Append("\"" + lstSortedCheckPaymentCSVExport[i].PatientLastName.Trim() + "," +
                                                            lstSortedCheckPaymentCSVExport[i].PatientFirstName.Trim() + "|" +
                                                            lstSortedCheckPaymentCSVExport[i].PrimaryName.Trim() + "\",");
                                    }
                                    else
                                    {
                                        sbSettlement.Append("\"" + lstSortedCheckPaymentCSVExport[i].PatientLastName.Trim() + "," +
                                                            lstSortedCheckPaymentCSVExport[i].PatientFirstName.Trim() + " " +
                                                            lstSortedCheckPaymentCSVExport[i].PatientMiddleName.Trim() + "|" +
                                                            lstSortedCheckPaymentCSVExport[i].PrimaryName.Trim() + "\",");
                                    }
                                }
                                else
                                {
                                    if (lstSortedCheckPaymentCSVExport[i].PatientMiddleName == String.Empty)
                                    {
                                        sbSettlement.Append("\"" + lstSortedCheckPaymentCSVExport[i].PatientLastName.Trim() + "," +
                                                            lstSortedCheckPaymentCSVExport[i].PatientFirstName.Trim() + "\",");
                                    }
                                    else
                                    {
                                        sbSettlement.Append("\"" + lstSortedCheckPaymentCSVExport[i].PatientLastName.Trim() + "," +
                                                            lstSortedCheckPaymentCSVExport[i].PatientFirstName.Trim() + " " +
                                                            lstSortedCheckPaymentCSVExport[i].PatientMiddleName.Trim() + "\",");
                                    }
                                }
                                sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].StreetAddress + ",");
                                sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].City + ",");
                                sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].State + ",");
                                sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].Zip + ",");
                                sbSettlement.Append("TRUE,");
                                sbSettlement.Append("CMM Expense:Medical Bill,");
                                sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].SettlementAmount.ToString() + ",");
                                sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].ServiceDate.ToString("MM/dd/yyyy") + " - " +
                                                    lstSortedCheckPaymentCSVExport[i].MedicalProvider.Trim() + " - " +
                                                    lstSortedCheckPaymentCSVExport[i].AccountNoAtProvider +
                                                    Environment.NewLine);

                                Byte[] settlement = new UTF8Encoding(true).GetBytes(sbSettlement.ToString());

                                fs.Write(settlement, 0, settlement.Length);

                                if (lstSortedCheckPaymentCSVExport.Count > (i + 1))
                                {
                                    if (lstSortedCheckPaymentCSVExport[i].IndividualId != lstSortedCheckPaymentCSVExport[i + 1].IndividualId)
                                    {
                                        StringBuilder sbIncidentInfo = new StringBuilder();
                                        sbIncidentInfo.Append(",," + nReferenceNo + ",,,,,,,,,,," +
                                                                    lstSortedCheckPaymentCSVExport[i].IncidentProgram.Trim() + " - " +
                                                                    lstSortedCheckPaymentCSVExport[i].PatientName + " - " +
                                                                    lstSortedCheckPaymentCSVExport[i].IncidentNo +
                                                                    Environment.NewLine);

                                        Byte[] incidentInfo = new UTF8Encoding(true).GetBytes(sbIncidentInfo.ToString());

                                        fs.Write(incidentInfo, 0, incidentInfo.Length);
                                        nReferenceNo++;
                                    }
                                }
                                if (i == lstSortedCheckPaymentCSVExport.Count - 1)
                                {
                                    StringBuilder sbIncidentInfo = new StringBuilder();
                                    sbIncidentInfo.Append(",," + nReferenceNo + ",,,,,,,,,,," +
                                                                lstSortedCheckPaymentCSVExport[i].IncidentProgram.Trim() + " - " +
                                                                lstSortedCheckPaymentCSVExport[i].PatientName + " - " +
                                                                lstSortedCheckPaymentCSVExport[i].IncidentNo + 
                                                                Environment.NewLine);

                                    Byte[] incidentInfo = new UTF8Encoding(true).GetBytes(sbIncidentInfo.ToString());

                                    fs.Write(incidentInfo, 0, incidentInfo.Length);
                                    nReferenceNo++;
                                }
                            }
                            else if (i > 0)
                            {
                                if (lstSortedCheckPaymentCSVExport[i].IndividualId != lstSortedCheckPaymentCSVExport[i - 1].IndividualId)
                                {
                                    StringBuilder sbSettlement = new StringBuilder();

                                    sbSettlement.Append("Bank of Hope:Bank of Hope [ACH-Med] (4125)" + ",");
                                    sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].IndividualId + ",");
                                    sbSettlement.Append(nReferenceNo.ToString() + ",");
                                    sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].TransactionDate.ToShortDateString() + ",");
                                    sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].MembershipNo + "-CMM NEEDS SHARED,");
                                    if (lstSortedCheckPaymentCSVExport[i].HouseholdRole.Trim() == "Child")
                                    {
                                        if (lstSortedCheckPaymentCSVExport[i].PatientMiddleName == String.Empty)
                                        {
                                            sbSettlement.Append("\"" + lstSortedCheckPaymentCSVExport[i].PatientLastName.Trim() + "," +
                                                                lstSortedCheckPaymentCSVExport[i].PatientFirstName.Trim() + "|" +
                                                                lstSortedCheckPaymentCSVExport[i].PrimaryName.Trim() + "\",");
                                        }
                                        else
                                        {
                                            sbSettlement.Append("\"" + lstSortedCheckPaymentCSVExport[i].PatientLastName.Trim() + "," +
                                                                lstSortedCheckPaymentCSVExport[i].PatientFirstName.Trim() + " " +
                                                                lstSortedCheckPaymentCSVExport[i].PatientMiddleName.Trim() + "|" +
                                                                lstSortedCheckPaymentCSVExport[i].PrimaryName.Trim() + "\",");
                                        }
                                    }
                                    else
                                    {
                                        if (lstSortedCheckPaymentCSVExport[i].PatientMiddleName == String.Empty)
                                        {
                                            sbSettlement.Append("\"" + lstSortedCheckPaymentCSVExport[i].PatientLastName.Trim() + "," +
                                                                lstSortedCheckPaymentCSVExport[i].PatientFirstName.Trim() + "\",");
                                        }
                                        else
                                        {
                                            sbSettlement.Append("\"" + lstSortedCheckPaymentCSVExport[i].PatientLastName.Trim() + "," +
                                                                lstSortedCheckPaymentCSVExport[i].PatientFirstName.Trim() + " " +
                                                                lstSortedCheckPaymentCSVExport[i].PatientMiddleName.Trim() + "\",");
                                        }
                                    }
                                    sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].StreetAddress + ",");
                                    sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].City + ",");
                                    sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].State + ",");
                                    sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].Zip + ",");
                                    sbSettlement.Append("TRUE,");
                                    sbSettlement.Append("CMM Expense:Medical Bill,");
                                    sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].SettlementAmount.ToString() + ",");
                                    sbSettlement.Append(lstSortedCheckPaymentCSVExport[i].ServiceDate.ToString("MM/dd/yyyy") + " - " +
                                                        lstSortedCheckPaymentCSVExport[i].MedicalProvider.Trim() + " - " +
                                                        lstSortedCheckPaymentCSVExport[i].AccountNoAtProvider +
                                                        Environment.NewLine);

                                    Byte[] settlement = new UTF8Encoding(true).GetBytes(sbSettlement.ToString());

                                    fs.Write(settlement, 0, settlement.Length);

                                    if (lstSortedCheckPaymentCSVExport.Count > (i + 1))
                                    {
                                        if (lstSortedCheckPaymentCSVExport[i].IndividualId != lstSortedCheckPaymentCSVExport[i + 1].IndividualId)
                                        {
                                            StringBuilder sbIncidentInfo = new StringBuilder();
                                            sbIncidentInfo.Append(",," + nReferenceNo + ",,,,,,,,,,," +
                                                                        lstSortedCheckPaymentCSVExport[i].IncidentProgram.Trim() + " - " +
                                                                        lstSortedCheckPaymentCSVExport[i].PatientName + " - " +
                                                                        lstSortedCheckPaymentCSVExport[i].IncidentNo +
                                                                        Environment.NewLine);

                                            Byte[] incidentInfo = new UTF8Encoding(true).GetBytes(sbIncidentInfo.ToString());

                                            fs.Write(incidentInfo, 0, incidentInfo.Length);
                                            nReferenceNo++;
                                        }
                                    }

                                    if (i == lstSortedCheckPaymentCSVExport.Count - 1)
                                    {
                                        StringBuilder sbIncidentInfo = new StringBuilder();
                                        sbIncidentInfo.Append(",," + nReferenceNo + ",,,,,,,,,,," +
                                                                    lstSortedCheckPaymentCSVExport[i].IncidentProgram.Trim() + " - " +
                                                                    lstSortedCheckPaymentCSVExport[i].PatientName + " - " +
                                                                    lstSortedCheckPaymentCSVExport[i].IncidentNo +
                                                                    Environment.NewLine);

                                        Byte[] incidentInfo = new UTF8Encoding(true).GetBytes(sbIncidentInfo.ToString());

                                        fs.Write(incidentInfo, 0, incidentInfo.Length);
                                        nReferenceNo++;
                                    }
                                }
                                else if (lstSortedCheckPaymentCSVExport[i].IndividualId == lstSortedCheckPaymentCSVExport[i - 1].IndividualId)
                                {
                                    StringBuilder sbSettlement = new StringBuilder();

                                    sbSettlement.Append(",," + nReferenceNo.ToString() + ",,,,,,,,," + "CMM Expense:Medical Bill" + "," +
                                                        lstSortedCheckPaymentCSVExport[i].SettlementAmount.ToString() + "," +
                                                        lstSortedCheckPaymentCSVExport[i].ServiceDate.ToString("MM/dd/yyyy") + " - " +
                                                        lstSortedCheckPaymentCSVExport[i].MedicalProvider + " - " +
                                                        lstSortedCheckPaymentCSVExport[i].AccountNoAtProvider +
                                                        Environment.NewLine);

                                    Byte[] settlement = new UTF8Encoding(true).GetBytes(sbSettlement.ToString());

                                    fs.Write(settlement, 0, settlement.Length);

                                    if (lstSortedCheckPaymentCSVExport.Count > (i + 1))
                                    {
                                        if (lstSortedCheckPaymentCSVExport[i].IndividualId != lstSortedCheckPaymentCSVExport[i + 1].IndividualId)
                                        {
                                            StringBuilder sbIncidentInfo = new StringBuilder();
                                            sbIncidentInfo.Append(",," + nReferenceNo + ",,,,,,,,,,," +
                                                                        lstSortedCheckPaymentCSVExport[i].IncidentProgram.Trim() + " - " +
                                                                        lstSortedCheckPaymentCSVExport[i].PatientName + " - " +
                                                                        lstSortedCheckPaymentCSVExport[i].IncidentNo +
                                                                        Environment.NewLine);

                                            Byte[] incidentInfo = new UTF8Encoding(true).GetBytes(sbIncidentInfo.ToString());

                                            fs.Write(incidentInfo, 0, incidentInfo.Length);
                                            nReferenceNo++;
                                        }
                                    }
                                    if (i == lstSortedCheckPaymentCSVExport.Count - 1)
                                    {
                                        StringBuilder sbIncidentInfo = new StringBuilder();
                                        sbIncidentInfo.Append(",," + nReferenceNo + ",,,,,,,,,,," +
                                                                    lstSortedCheckPaymentCSVExport[i].IncidentProgram.Trim() + " - " +
                                                                    lstSortedCheckPaymentCSVExport[i].PatientName + " - " +
                                                                    lstSortedCheckPaymentCSVExport[i].IncidentNo +
                                                                    Environment.NewLine);

                                        Byte[] incidentInfo = new UTF8Encoding(true).GetBytes(sbIncidentInfo.ToString());

                                        fs.Write(incidentInfo, 0, incidentInfo.Length);
                                        nReferenceNo++;
                                    }
                                }
                            }
                        }
                    }
                }

                Boolean bUpdateSucceeded = true;
                DateTime CheckDate = frmConfirm.CheckDate;
                int nCheckNumber = frmConfirm.CheckNumber;

                foreach (CheckPaymentCSVExportInfo info in lstSortedCheckPaymentCSVExport)
                {
                    String strSqlUpdateSettlementForCheckPayment = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[IsPaid] = 1, [dbo].[tbl_settlement].[PaidByID] = @PaidByID, " +
                                                                   "[dbo].[tbl_settlement].[CheckNo] = @CheckNo, [dbo].[tbl_settlement].[CheckDate] = @CheckDate " +
                                                                   "where [dbo].[tbl_settlement].[Name] = @SettlementNo";

                    SqlCommand cmdUpdateSettlementForCheckPayment = new SqlCommand(strSqlUpdateSettlementForCheckPayment, connRN5);
                    cmdUpdateSettlementForCheckPayment.CommandType = CommandType.Text;

                    cmdUpdateSettlementForCheckPayment.Parameters.AddWithValue("@PaidByID", nLoggedUserId);
                    cmdUpdateSettlementForCheckPayment.Parameters.AddWithValue("@CheckNo", nCheckNumber.ToString());
                    cmdUpdateSettlementForCheckPayment.Parameters.AddWithValue("@CheckDate", CheckDate);
                    cmdUpdateSettlementForCheckPayment.Parameters.AddWithValue("@SettlementNo", info.SettlementNo);

                    if (connRN5.State != ConnectionState.Closed)
                    {
                        connRN5.Close();
                        connRN5.Open();
                    }
                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    int nSettlementUpdated = cmdUpdateSettlementForCheckPayment.ExecuteNonQuery();
                    if (connRN5.State == ConnectionState.Open) connRN5.Close();
                    if (nSettlementUpdated != 1) bUpdateSucceeded = false;

                    nCheckNumber++;
                }
                if (bUpdateSucceeded)
                {
                    MessageBox.Show("Check payments have been confirmed.", "Info");
                    return;
                }
                else
                {
                    MessageBox.Show("At least one of check payment has not been confirmed.", "Error");
                    return;
                }
            }
            else if (ConfirmDialog == DialogResult.Cancel) return;
        }

        private void btnConfirmACH_Click(object sender, EventArgs e)
        {

            frmConfirmACHPayment frmConfirm = new frmConfirmACHPayment();

            DialogResult ConfirmDialogResult = frmConfirm.ShowDialog();

            if (ConfirmDialogResult == DialogResult.OK)
            {
                List<String> lstSettlements = new List<String>();
                for (int i = 0; i < gvPaymentACH.Rows.Count; i++)
                {
                    if (Boolean.Parse(gvPaymentACH["SelectedACHPayment", i].Value.ToString()) == true &&
                        Boolean.Parse(gvPaymentACH["IsACHExportedACHPayment", i].Value.ToString()) == true)
                    {
                        lstSettlements.Add(gvPaymentACH["SettlementNoPaymentACH", i].Value.ToString());
                    }
                }

                if (lstSettlements.Count == 0)
                {
                    MessageBox.Show("No settlement selected.", "Alert");
                    return;
                }

                Boolean bUpdateSucceeded = true;
                foreach (String settlement in lstSettlements)
                {
                    DateTime ACH_Date = frmConfirm.ACH_Date;
                    String ACH_Number = frmConfirm.ACH_Number;

                    String strSqlUpdateSettlementForACHPayment = "update [dbo].[tbl_settlement] set [dbo].[tbl_settlement].[IsPaid] = 1, [dbo].[tbl_settlement].[PaidByID] = @PaidByID, " +
                                                                 "[dbo].[tbl_settlement].[ACH_Number] = @ACH_Number, [dbo].[tbl_settlement].[ACH_Date] = @ACH_Date " +
                                                                 "where [dbo].[tbl_settlement].[Name] = @Settlement";

                    SqlCommand cmdUpdateSettlementForACHPayment = new SqlCommand(strSqlUpdateSettlementForACHPayment, connRN5);
                    cmdUpdateSettlementForACHPayment.CommandType = CommandType.Text;

                    cmdUpdateSettlementForACHPayment.Parameters.AddWithValue("@PaidByID", nLoggedUserId);
                    cmdUpdateSettlementForACHPayment.Parameters.AddWithValue("@ACH_Number", ACH_Number);
                    cmdUpdateSettlementForACHPayment.Parameters.AddWithValue("@ACH_Date", ACH_Date);
                    cmdUpdateSettlementForACHPayment.Parameters.AddWithValue("@Settlement", settlement);

                    if (connRN5.State != ConnectionState.Closed)
                    {
                        connRN5.Close();
                        connRN5.Open();
                    }
                    else if (connRN5.State == ConnectionState.Closed) connRN5.Open();
                    int nSettlementUpdated = cmdUpdateSettlementForACHPayment.ExecuteNonQuery();
                    if (connRN5.State == ConnectionState.Open) connRN5.Close();

                    if (nSettlementUpdated != 1) bUpdateSucceeded = false;
                }

                if (bUpdateSucceeded)
                {
                    MessageBox.Show("The ACH payments have been confirmed.", "Info");
                    return;
                }
                else
                {
                    MessageBox.Show("At least one of settlement has not been updated.", "Error");
                    return;
                }
            }
            else if (ConfirmDialogResult == DialogResult.Cancel)
            {
                return;
            }
        }

        private void gvPaymentACH_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == 0 && e.RowIndex >= 0)
            {
                if (Boolean.Parse(gvPaymentACH[e.ColumnIndex, e.RowIndex].Value.ToString()) == true)
                {
                    gvPaymentACH[e.ColumnIndex, e.RowIndex].Value = false;
                    return;
                }
                else
                {
                    gvPaymentACH[e.ColumnIndex, e.RowIndex].Value = true;
                    return;
                }
            }
        }

        private void gvPaymentCheck_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == 0 && e.RowIndex >= 0)
            {
                if (Boolean.Parse(gvPaymentCheck[e.ColumnIndex, e.RowIndex].Value.ToString()) == true)
                {
                    gvPaymentCheck[e.ColumnIndex, e.RowIndex].Value = false;
                    return;
                }
                else
                {
                    gvPaymentCheck[e.ColumnIndex, e.RowIndex].Value = true;
                    return;
                }
            }
        }
    }

    public class MedicalBillInfoForList
    {
        public String MedBillNo;
        public int MedBillTypeId;
        public String MedBillTypeName;
        public int MedBillStatusId;
        public String MedBillStatus;
        public Boolean bBillClosed;
        public DateTime? CreateDate;
        public String CreateStaffName;
        public DateTime? LastModifiDate;
        public String ModifiStaffName;
        public String CaseId;
        public int IllnessId;
        public String IllnessNo;
        public String ProgramName;
        public String ICD_10_Id;
        public int IncidentId;
        public String IncidentNo;
        public Decimal BillAmount;
        public Decimal Balance;
        public Decimal SettlementTotal;
        public Decimal TotalSharedAmount;
        public DateTime? BillDate;
        public DateTime? ReceivedDate;
        public String Guarantor;
        public String MedicalProviderId;
        public String MedicalProviderName;
        public int nPatientTypeId;
        public String PatientTypeName;
        public int nPendingReasonIndex;
        public String PendingReason;
        public int nIneligibleReasonIndex;
        public String IneligibleReason;
        public String PrescriptionDrugName;
        public String PrescriptionNo;
        public String PrescriptionDescription;
        public String Note;
        public int TotalNumberOfPhysicalTherapy;
        public Decimal PersonalResponsibilityCredit;
        public Boolean WellBeingCare;
        public Decimal WellBeingCareTotal;
        public String ProviderPhoneNumber;
        public String AccountNoAtProvider;
        public String ProviderContactPerson;
        public DateTime? ProposalLetterSentDate;
        public DateTime? HIPPASentDate;
        public DateTime? MedicalRecordDate;

        public MedicalBillInfoForList()
        {
            MedBillNo = String.Empty;
            MedBillTypeId = -1;
            MedBillTypeName = String.Empty;
            MedBillStatusId = -1;
            MedBillStatus = String.Empty;
            bBillClosed = false;
            CreateDate = null;
            CreateStaffName = String.Empty;
            LastModifiDate = null;
            ModifiStaffName = String.Empty;
            CaseId = String.Empty;
            IllnessId = -1;
            IllnessNo = String.Empty;
            ProgramName = String.Empty;
            ICD_10_Id = String.Empty;
            IncidentId = -1;
            IncidentNo = String.Empty;
            BillAmount = 0;
            Balance = 0;
            SettlementTotal = 0;
            TotalSharedAmount = 0;
            BillDate = null;
            ReceivedDate = null;
            Guarantor = String.Empty;
            MedicalProviderId = String.Empty;
            MedicalProviderName = String.Empty;
            nPatientTypeId = -1;
            PatientTypeName = String.Empty;
            nPendingReasonIndex = -1;
            PendingReason = String.Empty;
            nIneligibleReasonIndex = -1;
            IneligibleReason = String.Empty;
            PrescriptionDrugName = String.Empty;
            PrescriptionNo = String.Empty;
            PrescriptionDescription = String.Empty;
            TotalNumberOfPhysicalTherapy = 0;
            Note = String.Empty;
            PersonalResponsibilityCredit = 0;
            WellBeingCare = false;
            WellBeingCareTotal = 0;
            ProviderPhoneNumber = String.Empty;
            AccountNoAtProvider = String.Empty;
            ProviderContactPerson = String.Empty;
            ProposalLetterSentDate = null;
            HIPPASentDate = null;
            MedicalRecordDate = null;
        }
    }

    public class BankInfo
    {
        public String BankName;
        public String BankRoutingNumber;
        public String AccountNumber;
        public String AccountHolder;

        public BankInfo()
        {
            BankName = String.Empty;
            BankRoutingNumber = String.Empty;
            AccountNumber = String.Empty;
            AccountHolder = String.Empty;
        }
    }

    public class ApprovedSettlementInfo
    {
        public String IncidentNo;
        public String FullName;
        public String FirstName;
        public String MiddleName;
        public String LastName;
        public String HouseholdRole;
        public String IndividualId;
        public String PrimaryName;
        public String CMMPaymentMethod;
        public String ProgramName;
        public String IncidentProgram;
        public DateTime MembershipStartDate;
        public String MembershipNo;
        public String ICD10Code;
        public DateTime IBReceivedDate;
        public DateTime ServiceDate;
        public String MedicalProviderId;
        public String MedicalProviderName;
        public String AccountNoAtMedProvider;
        public String AccountShippingStreet;
        public String AccountShippingCity;
        public String AccountShippingState;
        public String AccountShppingZip;
        public Decimal Amount;
        public String SettlementType;
        public String PaymentType;
        public String MedBillName;
        public String SettlementName;
        public Decimal WellBeingCareShared;
        public String ICD10CodeDescription;
        public String CreatedBy;
        public String LastModifiedBy;
        public String MembershipStatus;
        public Boolean Approved;

        public ApprovedSettlementInfo()
        {

        }
    }

    public class IncidentProgramInfo
    {
        public Boolean bIsDeleted;
        public Boolean bPersonalResponsibilityProgram;
        public int? IncidentProgramId;
        public String IncidentProgramName;
        public Decimal PersonalResponsibilityAmount;

        public IncidentProgramInfo()
        {
            bPersonalResponsibilityProgram = false;
            IncidentProgramId = null;
            IncidentProgramName = String.Empty;
        }

        public IncidentProgramInfo(Boolean deleted, int program_id, String program_name)
        {
            bIsDeleted = deleted;
            IncidentProgramId = program_id;
            IncidentProgramName = program_name;

            switch (program_id)
            {
                case 0:
                    PersonalResponsibilityAmount = 500;
                    break;
                case 1:
                    PersonalResponsibilityAmount = 500;
                    break;
                case 2:
                    PersonalResponsibilityAmount = 1000;
                    break;
                case 3:
                    PersonalResponsibilityAmount = 5000;
                    break;
                case 4:
                    PersonalResponsibilityAmount = 500;
                    break;
                case 5:
                    PersonalResponsibilityAmount = 500;
                    break;
            }
        }
    }

    public class MedBillNoteTypeInfo
    {
        public int? MedBillNoteTypeId;
        public String MedBillNoteTypeValue;

        public MedBillNoteTypeInfo()
        {
            MedBillNoteTypeId = null;
            MedBillNoteTypeValue = String.Empty;
        }

        public MedBillNoteTypeInfo(int id, String value)
        {
            MedBillNoteTypeId = id;
            MedBillNoteTypeValue = value;
        }
    }

    public class MedBillStatusInfo
    {
        public int BillStatusCode;
        public String BillStatusValue;

        public MedBillStatusInfo()
        {
            BillStatusCode = 0;
            BillStatusValue = String.Empty;
        }
    }

    public class MedicalProviderInfo
    {
        public String ID;
        public String Name;
        public String Type;

        public MedicalProviderInfo()
        {
            ID = String.Empty;
            Name = String.Empty;
            Type = String.Empty;
        }

        public MedicalProviderInfo(String id, String name, String type)
        {
            ID = id;
            Name = name;
            Type = type;
        }
    }

    public class ChurchInfo
    {
        public String ID;
        public String Name;

        public ChurchInfo()
        {
            ID = String.Empty;
            Name = String.Empty;
        }

        public ChurchInfo(String id, String name)
        {
            ID = id;
            Name = name;
        }
    }

    public class MedicalBillInfo
    {
        String BillNo;
        DateTime BillDate;
        int BillType;
        String CaseId;
        String Incident;
        String IllnessId;
        Double BillAmount;
        Double SettlementTotal;
        Double TotalSharedAmount;
        int BillStatus;

        public MedicalBillInfo()
        {
            BillNo = String.Empty;
            BillDate = DateTime.Today;
            BillType = -1;
            CaseId = String.Empty;
            Incident = String.Empty;
            IllnessId = String.Empty;
            BillAmount = 0;
            SettlementTotal = 0;
            TotalSharedAmount = 0;
            BillStatus = -1;
        }
    }

    public class SettlementTypeInfo
    {
        public int SettlementTypeCode;
        public String SettlementTypeValue;

        public SettlementTypeInfo()
        {
            SettlementTypeCode = 0;
            SettlementTypeValue = String.Empty;
        }

        public SettlementTypeInfo(int code, String value)
        {
            SettlementTypeCode = code;
            SettlementTypeValue = value;
        }
    }

    public class PersonalResponsiblityTypeInfo
    {
        public int PersonalResponsibilityTypeCode;
        public String PersonalResponsibilityTypeValue;

        public PersonalResponsiblityTypeInfo()
        {
            PersonalResponsibilityTypeCode = 0;
            PersonalResponsibilityTypeValue = String.Empty;
        }

        public PersonalResponsiblityTypeInfo(int code, String value)
        {
            PersonalResponsibilityTypeCode = code;
            PersonalResponsibilityTypeValue = value;
        }
    }


    public class StaffInfo
    {
        public int StaffId;
        public String StaffName;

        public StaffInfo()
        {
            StaffId = -1;
            StaffName = String.Empty;
        }
        public StaffInfo(int staff_id, String staff_name)
        {
            StaffId = staff_id;
            StaffName = staff_name;
        }
    }

    public class PaymentMethod
    {
        public int PaymentMethodId;
        public String PaymentMethodValue;

        public PaymentMethod()
        {
            PaymentMethodId = 0;
            PaymentMethodValue = String.Empty;
        }

        public PaymentMethod(int id, String value)
        {
            PaymentMethodId = id;
            PaymentMethodValue = value;
        }
    }

    public class CreditCardInfo
    {
        public int CreditCardId;
        public String CreditCardNo;

        public CreditCardInfo()
        {
            CreditCardId = 0;
            CreditCardNo = String.Empty;
        }

        public CreditCardInfo(int id, String card_no)
        {
            CreditCardId = id;
            CreditCardNo = card_no;
        }
    }
    //public class MedicalFormReceived
    //{
    //    public int NPF_Form;
    //    public int IB_Form;
    //    public int POP_Form;
    //    public int MedicalRecord_Form;
    //    public int Unknown_Form;

    //    public MedicalFormReceived()
    //    {
    //        NPF_Form = 0;
    //        IB_Form = 0;
    //        POP_Form = 0;
    //        MedicalRecord_Form = 0;
    //        Unknown_Form = 0;
    //    }

    //    public MedicalFormReceived(int npf_form, int ib_form, int pop_form, int medical_form, int unknown_form)
    //    {
    //        NPF_Form = npf_form;
    //        IB_Form = ib_form;
    //        POP_Form = pop_form;
    //        MedicalRecord_Form = medical_form;
    //        Unknown_Form = unknown_form;
    //    }
    //}

    public class CaseInfo
    {
        public String CaseName;
        public String IndividualId;

        public CaseInfo()
        {
            CaseName = String.Empty;
            IndividualId = String.Empty;
        }

        public CaseInfo(String casename, String individual_id)
        {
            CaseName = casename;
            IndividualId = individual_id;
        }
    }

    public class CasedInfoDetailed
    {
        public String CaseId;
        public String ContactId;
        public DateTime CreateDate;
        public DateTime ModificationDate;
        public int CreateStaff;
        public int ModifyingStaff;
        //public Boolean Status;
        public CaseStatus Status;
        public int NPF_Form;
        public int IB_Form;
        public int POP_Form;
        public int MedicalRecord_Form;
        public int Unknown_Form;
        //public Boolean NPF_Form;
        public String NPF_Form_File_Name;
        public String NPF_Form_Destination_File_Name;
        public DateTime? NPF_ReceivedDate;
        //public Boolean IB_Form;
        public String IB_Form_File_Name;
        public String IB_Form_Destination_File_Name;
        public DateTime? IB_ReceivedDate;
        //public Boolean POP_Form;
        public String POP_Form_File_Name;
        public String POP_Form_Destionation_File_Name;
        public DateTime? POP_ReceivedDate;
        //public Boolean MedRec_Form;
        public String MedRec_Form_File_Name;
        public String MedRec_Form_Destination_File_Name;
        public DateTime? MedRec_ReceivedDate;
        //public Boolean Unknown_Form;
        public String Unknown_Form_File_Name;
        public String Unknown_Form_Destination_File_Name;
        public DateTime? Unknown_ReceivedDate;
        public String Note;
        public String Log_Id;
        public Boolean AddBill_Form;
        public DateTime? AddBill_Received_Date;
        public String Remove_Log;
        public String Individual_Id;

        public CasedInfoDetailed()
        {
            CaseId = String.Empty;
            ContactId = String.Empty;
            CreateDate = DateTime.Today;
            ModificationDate = DateTime.Today;
            CreateStaff = 0;
            ModifyingStaff = 0;
            Status = CaseStatus.OnGoing;
            NPF_Form = 0;
            NPF_Form_File_Name = String.Empty;
            NPF_Form_Destination_File_Name = String.Empty;
            NPF_ReceivedDate = DateTime.Today;
            NPF_ReceivedDate = null;
            IB_Form_File_Name = String.Empty;
            IB_Form_Destination_File_Name = String.Empty;
            IB_ReceivedDate = null;
            //IB_ReceivedDate = DateTime.Today;
            POP_Form = 0;
            POP_Form_File_Name = String.Empty;
            POP_Form_Destionation_File_Name = String.Empty;
            POP_ReceivedDate = null;
            //POP_ReceivedDate = DateTime.Today;
            MedicalRecord_Form = 0;
            MedRec_Form_File_Name = String.Empty;
            MedRec_Form_Destination_File_Name = String.Empty;
            MedRec_ReceivedDate = null;
            //MedRec_ReceivedDate = DateTime.Today;
            Unknown_Form = 0;
            Unknown_Form_File_Name = String.Empty;
            Unknown_Form_Destination_File_Name = String.Empty;
            Unknown_ReceivedDate = null;
            //Unknown_ReceivedDate = DateTime.Today;
            Note = String.Empty;
            Log_Id = String.Empty;
            AddBill_Form = false;
            AddBill_Received_Date = null;
            //AddBill_Received_Date = DateTime.Today;
            Remove_Log = String.Empty;
            Individual_Id = String.Empty;
        }
    }

    public class CheckPaymentCSVExportInfo
    {
        public String IndividualId;
        public String IndividualName;
        public String HouseholdRole;
        public String IncidentNo;
        public String IncidentProgram;
        public String SettlementNo;
        public DateTime TransactionDate;
        public String MembershipNo;
        public String PatientName;
        public String PatientFirstName;
        public String PatientMiddleName;
        public String PatientLastName;
        public String PrimaryName;
        public Decimal SettlementAmount;
        public DateTime ServiceDate;
        public String MedicalProvider;
        public String AccountNoAtProvider;
        public String StreetAddress;
        public String City;
        public String State;
        public String Zip;

        public CheckPaymentCSVExportInfo()
        {
            IndividualId = String.Empty;
            HouseholdRole = String.Empty;
            IndividualName = String.Empty;
            IncidentNo = String.Empty;
            IncidentProgram = String.Empty;
            SettlementNo = String.Empty;
            PatientName = String.Empty;
            PatientFirstName = String.Empty;
            PatientMiddleName = String.Empty;
            PatientLastName = String.Empty;
            PrimaryName = String.Empty;
            MembershipNo = String.Empty;
            SettlementAmount = 0;
            MedicalProvider = String.Empty;
            AccountNoAtProvider = String.Empty;
            StreetAddress = String.Empty;
            City = String.Empty;
            State = String.Empty;
            Zip = String.Empty;
        }
    }

    public class CheckPaymentInfo
    {
        public Boolean bIsPaid;
        public String IndividualName;
        public String IndividualId;
        public String HouseholdRole;
        public String PrimaryName;
        public String IncidentNo;
        public String ProgramName;
        public String IncidentProgram;
        public String MedicalBillNo;
        public Decimal MedicalBillAmount;
        public DateTime? ServiceDate;
        public String SettlementNo;
        public Decimal SettlementAmount;
        public String MedicalProviderId;
        public String MedicalProviderName;
        public String AccountNoAtMedProvider;
        public String ShippingStreet;
        public String ShippingCity;
        public String ShippingState;
        public String ShippingZip;
        public String SettlementType;
        public String CreatedBy;
        public String LastModifiedBy;
        public String MembershipStatus;
        public String MemebershipNo;

        public CheckPaymentInfo()
        {
            bIsPaid = false;
            IndividualName = String.Empty;
            IndividualId = String.Empty;
            HouseholdRole = String.Empty;
            PrimaryName = String.Empty;
            IncidentNo = String.Empty;
            ProgramName = String.Empty;
            IncidentProgram = String.Empty;
            MedicalBillNo = String.Empty;
            MedicalBillAmount = 0;
            ServiceDate = null;
            SettlementNo = String.Empty;
            SettlementAmount = 0;
            MedicalProviderId = String.Empty;
            MedicalProviderName = String.Empty;
            AccountNoAtMedProvider = String.Empty;
            ShippingStreet = String.Empty;
            ShippingCity = String.Empty;
            ShippingState = String.Empty;
            ShippingZip = String.Empty;
            SettlementType = String.Empty;
            CreatedBy = String.Empty;
            LastModifiedBy = String.Empty;
            MembershipStatus = String.Empty;
            MemebershipNo = String.Empty;
        }
    }

    public class ACHPaymentInfo
    {
        public Boolean bIsPaid;
        public int nPaidBy;
        public String IndividualName;
        public String IndividualId;
        public String MedicalBillNo;
        public String SettlementNo;
        public Decimal SettlementAmount;
        public String BankName;
        public String RoutingNumber;
        public String AccountNumber;
        public String AccountHolder;
        public String CreateStaffName;
        public String ModifiStaffName;
        public String MembershipStatus;
        public Boolean bIsExported;
        public int nExportedBy;

        public ACHPaymentInfo()
        {
            bIsPaid = false;
            nPaidBy = 0;
            IndividualName = String.Empty;
            IndividualId = String.Empty;
            MedicalBillNo = String.Empty;
            SettlementNo = String.Empty;
            SettlementAmount = 0;
            BankName = String.Empty;
            RoutingNumber = String.Empty;
            AccountNumber = String.Empty;
            AccountHolder = String.Empty;
            CreateStaffName = String.Empty;
            ModifiStaffName = String.Empty;
            MembershipStatus = String.Empty;
            bIsExported = false;
            nExportedBy = 0;
        }
    }

    public class ACHPaymentExportInfo
    {
        public String BankAccountHolderName;
        public String IndividualId;
        public String IndividualName;
        public String SettlementNumber;
        public Decimal Amount;
        public String RoutingNumber;
        public String AccountNumber;
        public String Description;

        public ACHPaymentExportInfo()
        {
            BankAccountHolderName = String.Empty;
            IndividualId = String.Empty;
            IndividualName = String.Empty;
            SettlementNumber = String.Empty;
            Amount = 0;
            RoutingNumber = String.Empty;
            AccountNumber = String.Empty;
            Description = "CMM NEEDS SHARED";
        }
    }

    public class CreditCardPaymentInfo
    {
        public Boolean bIsPaid;
        public String IndividualName;
        public String MedicalProviderId;
        public String MedicalProviderName;
        public String MedicalProviderPhone;
        public String AccountNoAtProvider;
        public DateTime? IndividualBirthDate;
        public String SocialSecurityNumber;
        public String Sex;
        public String PrimaryName;
        public String MailingStreet;
        public String MailingCity;
        public String MailingState;
        public String MailingZip;
        public DateTime? ServiceDate;
        public String MedicalBillNo;
        public Decimal MedBillAmount;
        public String SettlementName;
        public Decimal SettlementAmount;
        public String MembershipStatus;
        public String SettlementNote;
        public String CreateStaffName;
        public String ModifyStaffName;
        public String IndividualID;
        public String MembershipNumber;

        public CreditCardPaymentInfo()
        {
            bIsPaid = false;
            IndividualName = String.Empty;
            MedicalProviderId = String.Empty;
            MedicalProviderName = String.Empty;
            MedicalProviderPhone = String.Empty;
            AccountNoAtProvider = String.Empty;
            SocialSecurityNumber = String.Empty;
            Sex = String.Empty;
            PrimaryName = String.Empty;
            MailingStreet = String.Empty;
            MailingCity = String.Empty;
            MailingState = String.Empty;
            MailingZip = String.Empty;
            MedicalBillNo = String.Empty;
            MedBillAmount = 0;
            SettlementName = String.Empty;
            SettlementAmount = 0;
            MembershipStatus = String.Empty;
            SettlementNote = String.Empty;
            CreateStaffName = String.Empty;
            ModifyStaffName = String.Empty;
            IndividualID = String.Empty;
            MembershipNumber = String.Empty;            
        }
    }

    public class InactivePaymentInfo
    {
        public Boolean bIsPaid;
        public String IndividualId;
        public String IndividualName;
        public String SettlementNo;
        public String MembershipNo;
        public String MembershipStatus;
        public String State;
        public String Email;
        public String Phone;

        public InactivePaymentInfo()
        {
            bIsPaid = false;
            IndividualId = String.Empty;
            IndividualName = String.Empty;
            SettlementNo = String.Empty;
            MembershipNo = String.Empty;
            MembershipStatus = String.Empty;
            State = String.Empty;
            Email = String.Empty;
            Phone = String.Empty;
        }
    }
    ///////////////////////////////////////////////////////////////////////////
    // DateTimePickerColumn for DataGridView

    public class CalendarColumn : DataGridViewColumn
    {
        public CalendarColumn() : base(new CalendarCell())
        {
        }

        public override DataGridViewCell CellTemplate
        {
            get
            {
                return base.CellTemplate;
            }
            set
            {
                // Ensure that the cell used for the template is a CalendarCell.
                if (value != null &&
                    !value.GetType().IsAssignableFrom(typeof(CalendarCell)))
                {
                    throw new InvalidCastException("Must be a CalendarCell");
                }
                base.CellTemplate = value;
            }
        }
    }

    public class CalendarCell : DataGridViewTextBoxCell
    {

        public CalendarCell()
            : base()
        {
            // Use the short date format.
            this.Style.Format = "d";
        }

        public override void InitializeEditingControl(int rowIndex, object
            initialFormattedValue, DataGridViewCellStyle dataGridViewCellStyle)
        {
            // Set the value of the editing control to the current cell value.
            base.InitializeEditingControl(rowIndex, initialFormattedValue,
                dataGridViewCellStyle);
            CalendarEditingControl ctl =
                DataGridView.EditingControl as CalendarEditingControl;
            // Use the default row value when Value property is null.
            if (this.Value == null)
            {
                ctl.Value = (DateTime)this.DefaultNewRowValue;
            }
            //else  : original code
            else if (this.Value.ToString() != String.Empty)
            {
                ctl.Value = (DateTime)this.Value;
            }
        }

        public override Type EditType
        {
            get
            {
                // Return the type of the editing control that CalendarCell uses.
                return typeof(CalendarEditingControl);
            }
        }

        public override Type ValueType
        {
            get
            {
                // Return the type of the value that CalendarCell contains.

                return typeof(DateTime);
            }
        }

        public override object DefaultNewRowValue
        {
            get
            {
                // Use the current date and time as the default value.
                return DateTime.Now;
            }
        }
    }

    class CalendarEditingControl : DateTimePicker, IDataGridViewEditingControl
    {
        DataGridView dataGridView;
        private bool valueChanged = false;
        int rowIndex;

        public CalendarEditingControl()
        {
            this.Format = DateTimePickerFormat.Short;
        }

        // Implements the IDataGridViewEditingControl.EditingControlFormattedValue 
        // property.
        public object EditingControlFormattedValue
        {
            get
            {
                return this.Value.ToShortDateString();
            }
            set
            {
                if (value is String)
                {
                    try
                    {
                        // This will throw an exception of the string is 
                        // null, empty, or not in the format of a date.
                        this.Value = DateTime.Parse((String)value);
                    }
                    catch
                    {
                        // In the case of an exception, just use the 
                        // default value so we're not left with a null
                        // value.
                        this.Value = DateTime.Now;
                    }
                }
            }
        }

        // Implements the 
        // IDataGridViewEditingControl.GetEditingControlFormattedValue method.
        public object GetEditingControlFormattedValue(
            DataGridViewDataErrorContexts context)
        {
            return EditingControlFormattedValue;
        }

        // Implements the 
        // IDataGridViewEditingControl.ApplyCellStyleToEditingControl method.
        public void ApplyCellStyleToEditingControl(
            DataGridViewCellStyle dataGridViewCellStyle)
        {
            this.Font = dataGridViewCellStyle.Font;
            this.CalendarForeColor = dataGridViewCellStyle.ForeColor;
            this.CalendarMonthBackground = dataGridViewCellStyle.BackColor;
        }

        // Implements the IDataGridViewEditingControl.EditingControlRowIndex 
        // property.
        public int EditingControlRowIndex
        {
            get
            {
                return rowIndex;
            }
            set
            {
                rowIndex = value;
            }
        }

        // Implements the IDataGridViewEditingControl.EditingControlWantsInputKey 
        // method.
        public bool EditingControlWantsInputKey(
            Keys key, bool dataGridViewWantsInputKey)
        {
            // Let the DateTimePicker handle the keys listed.
            switch (key & Keys.KeyCode)
            {
                case Keys.Left:
                case Keys.Up:
                case Keys.Down:
                case Keys.Right:
                case Keys.Home:
                case Keys.End:
                case Keys.PageDown:
                case Keys.PageUp:
                    return true;
                default:
                    return !dataGridViewWantsInputKey;
            }
        }

        // Implements the IDataGridViewEditingControl.PrepareEditingControlForEdit 
        // method.
        public void PrepareEditingControlForEdit(bool selectAll)
        {
            // No preparation needs to be done.
        }

        // Implements the IDataGridViewEditingControl
        // .RepositionEditingControlOnValueChange property.
        public bool RepositionEditingControlOnValueChange
        {
            get
            {
                return false;
            }
        }

        // Implements the IDataGridViewEditingControl
        // .EditingControlDataGridView property.
        public DataGridView EditingControlDataGridView
        {
            get
            {
                return dataGridView;
            }
            set
            {
                dataGridView = value;
            }
        }

        // Implements the IDataGridViewEditingControl
        // .EditingControlValueChanged property.
        public bool EditingControlValueChanged
        {
            get
            {
                return valueChanged;
            }
            set
            {
                valueChanged = value;
            }
        }

        // Implements the IDataGridViewEditingControl
        // .EditingPanelCursor property.
        public Cursor EditingPanelCursor
        {
            get
            {
                return base.Cursor;
            }
        }

        protected override void OnValueChanged(EventArgs eventargs)
        {
            // Notify the DataGridView that the contents of the cell
            // have changed.
            valueChanged = true;
            this.EditingControlDataGridView.NotifyCurrentCellDirty(true);
            base.OnValueChanged(eventargs);
        }
    }

}


